* Wellcome! Don`t panic!
** Set
#-*- mode: org -*-
#+STARTUP: overview 
#+TODO: TODO DONE
** Like a craftsman entering his workshop :
Whenever I open Emacs, I feel inspired. Like a craftsman entering his workshop, I feel a realm of possibility open before me. I feel the comfort of an environment that has evolved over time to fit me perfectly—an assortment of packages and key bindings that help me bring ideas to life day after day.
https://www.braveclojure.com/basic-emacs/
| |_| |_| |           | |_| |_| |
 \ _____ /      o_     \ _____ /
  |     |       |_|     |     |
  |  |  |       |       |  |  |
  |   _ l _   _ | _   _ l _   |
  |  | |_| |_| ||| |_| |_| |  |
  |  |                     |  |
  || |                     | ||
  |  |        _____        |  |
  |  |       /_|_|_\       |  |
  |  |      /|_|_|_|\      |  |
  |  |      ||_|_|_||      |  |
  |  |      ||_|_|_||      |  |
  |__|      ||_|_|_||      |__|
 /   |      ||_|_|_||      |   \
=================================

** progn :
#+begin_src emacs-lisp :results output silent
(load "~/INI/hydra-cfg.el")
;; (load "~/ELs/BuYn/reader.el")

(load "~/INI/babel-cfg.el")

(define-key evil-normal-state-map (kbd "M-a M-j M-S-h") 'gptel-system-prompt)
(define-key evil-normal-state-map (kbd "M-a M-j M-j") 'gptel-send)
(define-key evil-normal-state-map (kbd "M-a M-j M-h") 'gptel-menu)
(define-key evil-normal-state-map (kbd "M-a M-j h") 'gptel-system-prompt)
(define-key evil-normal-state-map (kbd "M-a M-j M-S-h") 'gptel-mode)

(define-key evil-visual-state-map (kbd "M-a M-l M-w") 'ispell-region)
(define-key evil-normal-state-map (kbd "M-a M-l M-w") 'ispell-word)

(define-key evil-visual-state-map (kbd "<f7>") '(lambda() (interactive)
	(let ((region-text (buffer-substring (region-beginning) (region-end))))
		(exchange-point-and-mark)
		(evil-normal-state)
		(query-replace
			region-text
			(read-string (concat "replace(" region-text "):")
						nil
						nil
						(current-kill 0 "DO-NOT-MOVE"))
			))))

(define-key evil-normal-state-map (kbd "q") 'evil-execute-macro)
(define-key evil-normal-state-map (kbd "Q Q") 'evil-record-macro)


(define-key evil-normal-state-map "ZH" '(lambda() (interactive)
					(evil-window-vsplit)
					(ivy-switch-buffer)))
(define-key evil-normal-state-map "Zh" 'evil-window-vsplit)
(define-key evil-normal-state-map "ZL"
					'(lambda() (interactive)
						(evil-window-vsplit)
						(windmove-right)))
(define-key evil-normal-state-map "Zl"
					'(lambda() (interactive)
						(evil-window-split)
						(windmove-right
						(ivy-switch-buffer))))
(define-key evil-normal-state-map "ZK"
					'(lambda() (interactive)
						(evil-window-split)
						(ivy-switch-buffer)))
(define-key evil-normal-state-map "Zk" 'evil-window-split)
(define-key evil-normal-state-map "ZJ" 
					'(lambda() (interactive)
						(evil-window-split)
						(windmove-down)))
(define-key evil-normal-state-map "Zj" 
					'(lambda() (interactive)
						(evil-window-split)
						(windmove-down)
						(ivy-switch-buffer)))
(define-key evil-normal-state-map (kbd "Z S-<SPC> S-<SPC>") 'delete-other-windows)

(load "~/INI/ai/ai.el")
(load "~/INI/translate-cfg.el")
(load "~/.emacs.d/elpa/gptel-20230411.549/gptel.el")
(load "~/../Dropbox/backup/file.el")


;; (fset 'get-named-link
;;    (kmacro-lambda-form [?y ?\C-c ?l] 0 "%d"))
;; (fset 'insert-named-link
;;    (kmacro-lambda-form [?\C-c ?\C-l return ?\C-y return] 0 "%d"))
;; (define-key evil-visual-state-map (kbd "M-e M-f M-l") 'get-named-link)
;; (define-key evil-normal-state-map (kbd "M-e M-f M-l") 'insert-named-link)
;; (define-key evil-visual-state-map (kbd "M-o M-f") '(lambda() (interactive)
;; 	(let ((region-text (buffer-substring (region-beginning) (region-end))))
;; 		(occur region-text))))
;; (define-key evil-visual-state-map (kbd "M-e M-p M-o") '(lambda() (interactive)
;; 			(projectile-multi-occur (buffer-substring (region-beginning) (region-end)))))
;; 		(define-key evil-normal-state-map (kbd "M-e M-p M-o") 'projectile-multi-occur)
(kill-buffer (current-buffer))
(evil-quit)
 #+end_src
#+begin_src emacs-lisp :tangle yes
		(require 'org-roam)
		(require 'dendroam)
#+end_src

#+RESULTS:
: dendroam
 
#+begin_src emacs-lisp :results output silent
(setq org-indirect-buffer-display `new-frame)
(global-set-key (kbd " M-g M-t M-o") 'org-tree-to-indirect-buffer)

	 ;; (package-refresh-contents)
	 (use-package multiple-cursors :ensure t
		 :config
		 (define-key evil-visual-state-map "zi" 'mc/edit-lines)
		 (define-key evil-visual-state-map "zn" 'mc/mark-next-like-this)
		 (define-key evil-visual-state-map "zp" 'mc/mark-previous-like-this)
		 (define-key evil-visual-state-map "zo" 'mc/mark-all-like-this)
		 (define-key evil-visual-state-map "zN" 'mc/skip-to-next-like-this)
		 (define-key evil-visual-state-map "zP" 'mc/skip-to-previous-like-this)
		 (define-key evil-visual-state-map "zI" 'mc/mark-all-in-region)
		 (define-key evil-visual-state-map "zO" 'mc/mark-all-like-this-in-defun)
		 (define-key evil-visual-state-map "z1" 'mc/insert-numbers)
		 )
 #+end_src

#+begin_src emacs-lisp :results output silent
(setq minimap-major-modes '())
#+end_src

#+begin_src emacs-lisp :results output silent
(setq minimap-major-modes '(prog-mode org-mode Info-mode eww-mode))
#+end_src

** Templats
*** Kanban
**** in progress 
**** urgent 
**** dezine 
**** todo
**** done
*** Kanban table
**** Kanban Bord 01
| planning | dezine | Implementing | blocked | review | done |
|----------+--------+--------------+---------+--------+------|
|          |        |              |         |        |      |
|          |        |              |         |        |      |
|----------+--------+--------------+---------+--------+------|
|          |        |              |         | urgent |      |
|----------+--------+--------------+---------+--------+------|



planning - work I’d like to do that needs organising so I can do it.
    analysis (think, think, think);
in progress - what I am currently working on. I try and keep this to a minimum so I get things done
    Implementing (do, do, do);
blocked - things I’ve started working on but currently arent able to complete
review - work I have completed. Check if there are any follow on tasks or lessons learnt
    Debugging/Testing (ensuring that it’s right); and finally
done - things I have completed. Gives feeling of satisfaction
**** Backlog 
**** описание
***** стадии
****** list 02
    Backlog (product stories not started yet);
    analysis (think, think, think);
    Implementing (do, do, do);
    Debugging/Testing (ensuring that it’s right); and finally
    Done (proven correct and accepted).
***** Процеса
****** в целом
******* есть тольеок  одна доска и беклог
на доске сылки на беклог
каждое дело не куда не перемешается, только сылка на него.
это позволяет видеть и все дела одновременно и расписывать кождое как нужно глубоко. Не теряя приэтом не перспективы и не страдая от избытоности информации. кадое дело открывается отдельным фреёмом и всегда перед глазами. для каждого дела удобноведется таймер зараченого времени.
****** спринтаим : 
особенно это хорошо работает со спринтаим
поскольку разделяет отдельно конкретное видение от общего списка дел.
Законченые туду за этот спринт от туду
****** Орг логи
каждому спринту соответствует один лог
туда вносим все подрят рубрицируя по текушим дням начала проекта
либо привязваясь к определёному 

***** Спринты должны быть от 1 неделии до 4 максимум 
потому нужно учится ставить перед собой задачи, которые я уверен что успею выполнить.
Стремится к спринтам по 1 неделе.
больше только если понимание что фича привышает возможности одной недели
если фичи мелкие то набрать фич на неделю
***** через спринты работу с гитом
каждый сприн отдельный бранч.
который мержится в меин
приэтом сам бранч не удаляется остовляя какбы версии завершоного
*** Ка.За.Ч.Ка
**** КАк?
**** ЗАчем?
**** Что? 
**** КудА? 
*** Стадии Stages
**** Concept Stage
***** табле
| 0                      | S | R | - | R% |
|------------------------+---+---+---+----|
| Анализ                 |   |   | 0 |    |
| Рефакторин             |   |   | 0 |    |
| Програмирование        |   |   | 0 |    |
| Инжинриг Сруктуры      |   |   | 0 |    |
| Работа над интерфейсом |   |   | 0 |    |
| Оранизационая работа   |   |   | 0 |    |
| Работа с клиентом      |   |   | 0 |    |
| Сбор информации        |   |   | 0 |    |
|------------------------+---+---+---+----|
| 0                      | 0 | 0 | 0 |    |
#+TBLFM: @>$2=vsum(@<<$2..@>>$2)::@>$3=vsum(@<<$3..@>>$3)::$4=$2-$3::$5=($3/@>$3)*100::@1$1=(@10$2-@10$3)*25/60::@10$1=@10$3*25/60

***** таблица день 
| Date            |  N | R  |  D |         H |
|-----------------+----+----+----+-----------|
| [2022-10-28 Пт] | 63 |  5 |  5 | 2.0833333 |
| [2022-10-28 Пт] | 63 | 11 |  6 |       2.5 |
| [2022-10-29 Сб] | 63 | 20 |  9 |      3.75 |
| [2022-10-30 Вс] | 63 | 30 | 10 | 4.1666667 |
| [2022-11-01 Вт] | 63 | 37 |  7 | 2.9166667 |
| [2022-11-02 Ср] | 63 | 44 |  7 | 2.9166667 |
| [2022-11-10 Ср] | 63 | 48 |  4 | 1.6666667 |
| [2022-11-13 Вс] | 63 | 51 |  3 |      1.25 |
| [2022-11-14 Пн] | 63 | 56 |  5 | 2.0833333 |
| [2022-11-15 Вт] | 63 | 60 |  4 | 1.6666667 |
| [2022-11-16 Ср] | 79 | 63 |  3 |      1.25 |
| [2022-11-18 Пт] | 79 | 69 |  6 |       2.5 |
|-----------------+----+----+----+-----------|
| 5               | 79 | 10 | 69 |     28.75 |
#+TBLFM: @>$4=vsum(@I..@II)::@>$3=@>$2 - @>$4::$4=$3-@-1$3::$5=($4*25)/60

***** таблица день 
| Date            |   N |     |   D |          H |
|-----------------+-----+-----+-----+------------|
| [2022-10-28 Пт] |  63 |   5 |   5 |  2.0833333 |
| [2022-10-28 Пт] |  63 |  11 |   6 |        2.5 |
| [2022-10-29 Сб] |  63 |  20 |   9 |       3.75 |
| [2022-10-30 Вс] |  63 |  30 |  10 |  4.1666667 |
| [2022-11-01 Вт] |  63 |  37 |   7 |  2.9166667 |
| [2022-11-02 Ср] |  63 |  44 |   7 |  2.9166667 |
| [2022-11-10 Ср] |  63 |  48 |   4 |  1.6666667 |
| [2022-11-13 Вс] |  63 |  51 |   3 |       1.25 |
| [2022-11-14 Пн] |  63 |  56 |   5 |  2.0833333 |
| [2022-11-15 Вт] |  63 |  60 |   4 |  1.6666667 |
| [2022-11-16 Ср] |  79 |  63 |   3 |       1.25 |
| [2022-11-18 Пт] |  95 |  71 |   8 |  3.3333333 |
| [2022-11-19 Сб] |  95 |  75 |   4 |  1.6666667 |
| [2022-11-20 Вс] |  95 |  82 |   7 |  2.9166667 |
| [2022-11-21 Пн] | 103 |  87 |   5 |  2.0833333 |
| [2022-11-22 Вт] | 103 |  90 |   3 |       1.25 |
| [2022-11-24 Чт] | 113 |  93 |   3 |       1.25 |
| [2022-11-26 Сб] | 126 |  97 |   4 |  1.6666667 |
| [2022-11-28 Вс] | 126 | 101 |   4 |  1.6666667 |
| [2022-11-29 Вт] | 126 | 103 |   2 | 0.83333333 |
| [2022-11-30 Ср] | 126 | 104 |   1 | 0.41666667 |
| [2022-12-02 Пт] | 126 | 106 |   2 | 0.83333333 |
| [2022-12-03 Сб] | 128 | 109 |   3 |       1.25 |
| [2022-12-04 Вс] | 128 | 110 |   1 | 0.41666667 |
| [2022-12-05 Пн] | 128 | 114 |   4 |  1.6666667 |
| [2022-12-07 Ср] | 128 | 116 |   2 | 0.83333333 |
| [2022-12-08 Чт] | 148 | 119 |   3 |       1.25 |
| [2022-12-09 Пт] | 148 | 120 |   1 | 0.41666667 |
|-----------------+-----+-----+-----+------------|
| 5               | 148 |  28 | 120 |         50 |
#+TBLFM: @>$4=vsum(@I..@II)::@>$3=@>$2 - @>$4::$4=$3-@-1$3::$5=($4*25)/60

****** Kanban
******* in progress 
******* urgent 
******* todo
******* done
****** SRC 
******* sandbox.py
#+begin_src emacs-lisp :results output silent
(find-file-other-frame "D:/Development/version-control/GitHub/Zmei/Sontex/Src/sandbox.py")
#+end_src
****** far 
#+begin_src elisp :results output silent
(buyn-cmd-start "f D:\\Development\\version-control\\GitHub\\Zmei\\Sontex\\DOCs D:\\Development\\version-control\\GitHub\\Zmei\\Sontex\\Src\\Data_files")
#+end_src
****** Uml 
#+begin_src emacs-lisp :results output silent
		(find-file-other-frame "D:/Development/version-control/GitHub/Zmei/Sontex/DOCs/uml.org")
#+end_src
****** описание 
не содержит в себе кода как такого
это описание того как должен выглядит конечны продук
в качествет кода использутся примеры кода
и технологий которые можно просото запустить
и которые используются как референысы
на этой стадии делается грубое передставление проекта
распределяются имена предвариттерлые
делатся грубй умл
скорей как костяк возможно далёкий от чеголибо реального
всё это должно выражать каккие вопросы не понятны
и на какие нужно получить ответы
а не задаёт долнейшее их пременен
чем больше вопрос задана и дырок непонимания
обнаружено тем лучше
***** табле
| 9.5833333              |   S |   R |  - |   R% |
|------------------------+-----+-----+----+------|
| Анализ                 |  13 |   9 |  4 |  7.2 |
| Програмирование        |  97 |  84 | 13 | 67.2 |
| Рефакторин             |  13 |  10 |  3 |   8. |
| Отладка \ Dеbug        |  13 |  10 |  3 |   8. |
| Инжинриг Сруктуры      |   1 |   1 |  0 |  0.8 |
| Работа над интерфейсом |   0 |     |  0 |    0 |
| Оранизационая работа   |   6 |   6 |  0 |  4.8 |
| Работа с клиентом      |   5 |   5 |  0 |   4. |
| Сбор информации        |   0 |     |  0 |    0 |
|------------------------+-----+-----+----+------|
| 52.083333              | 148 | 125 | 23 |  100 |
#+TBLFM: @>$2=vsum(@<<$2..@>>$2)::@>$3=vsum(@<<$3..@>>$3)::$4=$2-$3::$5=($3/@>$3)*100::@1$1=(@11$2-@11$3)*25/60::@11$1=@11$3*25/60
***** Бальзамик 
***** описание 
стадия создания концепции
скорей всего нет кода
есть много текста
много разговорв
создание структуры будушего проекта
без умл и прочего просто концептуально
изображение визуальное в бальзамик
структурирование розговоров с закажчиком
создание списка бек лога
важно на этой стадии набирая чужой код
не редактировать его можно даже не запускать
просто он присутствует как некий орентир для одталкивания
если он запустился уже чуду которое показывает какойто кусок
но это уже может даже перебор
поскольку задача этой фазы задать вопросы
а не ответить на них потому код сдесь для того чтоб
игратся сним на следуюшей фазе

**** POC Proof of concept
***** табле
| 0                      | S | R | - |   |
|------------------------+---+---+---+---|
| Анализ                 |   |   | 0 |   |
| Рефакторин             |   |   | 0 |   |
| Програмирование        |   |   | 0 |   |
| Инжинриг Сруктуры      |   |   | 0 |   |
| Работа над интерфейсом |   |   | 0 |   |
| Оранизационая работа   |   |   | 0 |   |
| Работа с клиентом      |   |   | 0 |   |
| Сбор информации        |   |   | 0 |   |
|------------------------+---+---+---+---|
| 0                      | 0 | 0 | 0 |   |
#+TBLFM: @>$2=vsum(@<<$2..@>>$2)::@>$3=vsum(@<<$3..@>>$3)::$4=$2-$3::@10$1=@10$3*25/60::@1$1=(@10$2-@10$3)*25/60
#+TBLFM: @>$2=vsum(@<<$2..@>>$2)::@>$3=vsum(@<<$3..@>>$3)::@10$1=@10$2-@10$3::@1$1=@10$1*25/60
***** Kanban
****** in progress 
****** urgent 
****** todo
****** done
***** SRC 
****** sandbox.py
#+begin_src emacs-lisp :results output silent
(find-file-other-frame "D:/Development/version-control/GitHub/Zmei/Sontex/Src/sandbox.py")
#+end_src
***** far 
#+begin_src elisp :results output silent
(buyn-cmd-start "f D:\\Development\\version-control\\GitHub\\Zmei\\Sontex\\DOCs D:\\Development\\version-control\\GitHub\\Zmei\\Sontex\\Src\\Data_files")
#+end_src
***** Uml 
#+begin_src emacs-lisp :results output silent
		(find-file-other-frame "D:/Development/version-control/GitHub/Zmei/Sontex/DOCs/uml.org")
#+end_src

***** описание 
на этой стадии пытаемся получить ответы на задные вопросы
пытаемся в конце стадии заполнить предпологаемый умл
и ответить на вопросы кодом
код может не быть связан в проек или разбит на классы
задача просто ответить на вопросы всё ли работает
и всё ли понятно как реализовать
какие понадобятся усилия
	удобно реализовывать данную стадию просто как набор орг файлов для тангла
	в которых много текста размышлений и мало кода
	удобно стангливать пайтон код и редактить его
	исправля пока не заработает
	а потом копировать в орг разные куски
	результат сново стангливать и убеждатся в работоспособности
**** Testing Stage
***** табле
| 0                      | S | R | - |   |
|------------------------+---+---+---+---|
| Анализ                 |   |   | 0 |   |
| Рефакторин             |   |   | 0 |   |
| Програмирование        |   |   | 0 |   |
| Инжинриг Сруктуры      |   |   | 0 |   |
| Работа над интерфейсом |   |   | 0 |   |
| Оранизационая работа   |   |   | 0 |   |
| Работа с клиентом      |   |   | 0 |   |
| Сбор информации        |   |   | 0 |   |
|------------------------+---+---+---+---|
| 0                      | 0 | 0 | 0 |   |
#+TBLFM: @>$2=vsum(@<<$2..@>>$2)::@>$3=vsum(@<<$3..@>>$3)::$4=$2-$3::@10$1=@10$3*25/60::@1$1=(@10$2-@10$3)*25/60
#+TBLFM: @>$2=vsum(@<<$2..@>>$2)::@>$3=vsum(@<<$3..@>>$3)::@10$1=@10$2-@10$3::@1$1=@10$1*25/60
***** Kanban
****** in progress 
****** urgent 
****** todo
****** done
***** SRC 
****** sandbox.py
#+begin_src emacs-lisp :results output silent
(find-file-other-frame "D:/Development/version-control/GitHub/Zmei/Sontex/Src/sandbox.py")
#+end_src
***** far 
#+begin_src elisp :results output silent
(buyn-cmd-start "f D:\\Development\\version-control\\GitHub\\Zmei\\Sontex\\DOCs D:\\Development\\version-control\\GitHub\\Zmei\\Sontex\\Src\\Data_files")
#+end_src
***** Uml 
#+begin_src emacs-lisp :results output silent
		(find-file-other-frame "D:/Development/version-control/GitHub/Zmei/Sontex/DOCs/uml.org")
#+end_src

***** описание 
стадия когда на основе предварительного умл
и представленией пытаемся реализовать некоторые 
функци может даже просто одну самую главную
остальные стараемся наметить заглушками
выводом тестовых сообщений заглушек
или симвалической реализацией
умл преобретает законченую форму
пытаемся реализовать это уже с тестам
на этом этапе нас интересует нестолько оканчательая реализация
сколько предварительная структура
понять будет ли она работать
и удобно ли её покрыть тестатми
стоит заложить на этом этапе интеграционые тесты
чтоб потом просто развивать их но неменяя структуру проекта для их работы
**** MVP Minimum viable product
***** табле
| 0                      | S | R | - |   |
|------------------------+---+---+---+---|
| Анализ                 |   |   | 0 |   |
| Рефакторин             |   |   | 0 |   |
| Програмирование        |   |   | 0 |   |
| Инжинриг Сруктуры      |   |   | 0 |   |
| Работа над интерфейсом |   |   | 0 |   |
| Оранизационая работа   |   |   | 0 |   |
| Работа с клиентом      |   |   | 0 |   |
| Сбор информации        |   |   | 0 |   |
|------------------------+---+---+---+---|
| 0                      | 0 | 0 | 0 |   |
#+TBLFM: @>$2=vsum(@<<$2..@>>$2)::@>$3=vsum(@<<$3..@>>$3)::$4=$2-$3::@10$1=@10$3*25/60::@1$1=(@10$2-@10$3)*25/60
#+TBLFM: @>$2=vsum(@<<$2..@>>$2)::@>$3=vsum(@<<$3..@>>$3)::@10$1=@10$2-@10$3::@1$1=@10$1*25/60
***** Kanban
****** in progress 
****** urgent 
****** todo
****** done
***** SRC 
****** sandbox.py
#+begin_src emacs-lisp :results output silent
(find-file-other-frame "D:/Development/version-control/GitHub/Zmei/Sontex/Src/sandbox.py")
#+end_src
***** far 
#+begin_src elisp :results output silent
(buyn-cmd-start "f D:\\Development\\version-control\\GitHub\\Zmei\\Sontex\\DOCs D:\\Development\\version-control\\GitHub\\Zmei\\Sontex\\Src\\Data_files")
#+end_src
***** Uml 
#+begin_src emacs-lisp :results output silent
		(find-file-other-frame "D:/Development/version-control/GitHub/Zmei/Sontex/DOCs/uml.org")
#+end_src

***** описание 
выделаются набор функций главных для приложения
но приэьл самого минимально возможного набора
реализация которых позволит считать фазу законченой
при реализациии стади убеждаемся вверности умл
и коректируем его при выевление ошибок
на оканчани стадии продукт выпоняет свои функции
но далёк от оканчательной формы

A minimum viable product is a version of a product with just enough features to be usable by early customers who can then provide feedback for future product development. A focus on releasing an MVP means that developers potentially avoid lengthy and unnecessary work.

тоесть задача данной стадии прийти к клиенту с чемто что должно делать что из того что он хотел
и понять есть ли контакт толи это?
может это совсем не то что хотел клиен или он оказывает не это считает важным
тоесть наладить цикл обратной связи для дальнейшей работы
**** Beta Stage
***** табле
| 0                      | S | R | - |   |
|------------------------+---+---+---+---|
| Анализ                 |   |   | 0 |   |
| Рефакторин             |   |   | 0 |   |
| Програмирование        |   |   | 0 |   |
| Инжинриг Сруктуры      |   |   | 0 |   |
| Работа над интерфейсом |   |   | 0 |   |
| Оранизационая работа   |   |   | 0 |   |
| Работа с клиентом      |   |   | 0 |   |
| Сбор информации        |   |   | 0 |   |
|------------------------+---+---+---+---|
| 0                      | 0 | 0 | 0 |   |
#+TBLFM: @>$2=vsum(@<<$2..@>>$2)::@>$3=vsum(@<<$3..@>>$3)::$4=$2-$3::@10$1=@10$3*25/60::@1$1=(@10$2-@10$3)*25/60
#+TBLFM: @>$2=vsum(@<<$2..@>>$2)::@>$3=vsum(@<<$3..@>>$3)::@10$1=@10$2-@10$3::@1$1=@10$1*25/60
***** Kanban
****** in progress 
****** urgent 
****** todo
****** done
***** SRC 
****** sandbox.py
#+begin_src emacs-lisp :results output silent
(find-file-other-frame "D:/Development/version-control/GitHub/Zmei/Sontex/Src/sandbox.py")
#+end_src
***** far 
#+begin_src elisp :results output silent
(buyn-cmd-start "f D:\\Development\\version-control\\GitHub\\Zmei\\Sontex\\DOCs D:\\Development\\version-control\\GitHub\\Zmei\\Sontex\\Src\\Data_files")
#+end_src
***** Uml 
#+begin_src emacs-lisp :results output silent
		(find-file-other-frame "D:/Development/version-control/GitHub/Zmei/Sontex/DOCs/uml.org")
#+end_src

***** описание 
	Выделаем сдадии добовления функциона и фич
Создаём роуд меп
на оканчании стадии продук должен быть передан 
тестовй групе\клиенту для получения фидбека
потому он должен находится в юзер френли форме
**** Alfa Stage
***** табле
| 0                      | S | R | - |   |
|------------------------+---+---+---+---|
| Анализ                 |   |   | 0 |   |
| Рефакторин             |   |   | 0 |   |
| Програмирование        |   |   | 0 |   |
| Инжинриг Сруктуры      |   |   | 0 |   |
| Работа над интерфейсом |   |   | 0 |   |
| Оранизационая работа   |   |   | 0 |   |
| Работа с клиентом      |   |   | 0 |   |
| Сбор информации        |   |   | 0 |   |
|------------------------+---+---+---+---|
| 0                      | 0 | 0 | 0 |   |
#+TBLFM: @>$2=vsum(@<<$2..@>>$2)::@>$3=vsum(@<<$3..@>>$3)::$4=$2-$3::@10$1=@10$3*25/60::@1$1=(@10$2-@10$3)*25/60
#+TBLFM: @>$2=vsum(@<<$2..@>>$2)::@>$3=vsum(@<<$3..@>>$3)::@10$1=@10$2-@10$3::@1$1=@10$1*25/60
***** Kanban
****** in progress 
****** urgent 
****** todo
****** done
***** SRC 
****** sandbox.py
#+begin_src emacs-lisp :results output silent
(find-file-other-frame "D:/Development/version-control/GitHub/Zmei/Sontex/Src/sandbox.py")
#+end_src
***** far 
#+begin_src elisp :results output silent
(buyn-cmd-start "f D:\\Development\\version-control\\GitHub\\Zmei\\Sontex\\DOCs D:\\Development\\version-control\\GitHub\\Zmei\\Sontex\\Src\\Data_files")
#+end_src
***** Uml 
#+begin_src emacs-lisp :results output silent
		(find-file-other-frame "D:/Development/version-control/GitHub/Zmei/Sontex/DOCs/uml.org")
#+end_src



***** описание 
	Стадия начинается в момент получения от клиента
фидбека
и направлена на создания цикла обратной связи с клиентом
устранения выевленых недочётов
и повторения цикла обратной связи
стадия завиршается в момент устранения всех очевидных недочётов
и продукт переходит в оканчательную релизную стадию
и на этой стадии нужно беде определится с дальней шим жизненым циклом разработы продукта
понять какие это будут циклы
как они буду проходить и возможно даже какие циклы смерти 
доже должны быть определены
чтоб процес не был пущен на самотёк
**** сум ап Табелс
***** сумап Табел
| название стадии | Начали          | план | закончали       | план | end |     часов |
|-----------------+-----------------+------+-----------------+------+-----+-----------|
| концепция       | [2022-09-16 Пт] |      | [2022-10-31 Пн] |      |  16 | 6.6666667 |
| тестовый        | [2022-10-24 Пн] |      | [2022-10-31 Пн] |   62 |  52 | 21.666667 |
| Пруф оф концепт | [2022-10-28 Пт] |   63 | [2022-12-16 Пт] |  163 | 149 | 62.083333 |
| мвп             |                 |      |                 |      |     |           |
| Бета            |                 |      |                 |      |     |           |
| Альфа           |                 |      |                 |      |     |           |
|-----------------+-----------------+------+-----------------+------+-----+-----------|
|                 |                 |      |                 |      |     | 90.416667 |
#+TBLFM: @>$7=vsum(@<<$7..@>>$7)

**** Backlog 
*** Ezenhaur 
**** Срочное и важное
**** Срочное но не важное
**** Важное но не срочное 
**** Не Срочное и не важное
*** SWOT 
**** Strengths +
**** Weaknesses -
**** Opportunities
**** Threats
**** Описание
***** вначале заполняем +-
всё делам на плюсы и минусы
***** потом заполняем ОТ 
на основе +- даём ответ на вопросы
что за возможности открываются
какие угрозы врезультати встают
***** если впроцесе вспоминается новое 
за носии в + или -
*** Туду
**** сделать
**** в процесе
**** завершно
*** Pomodoro
**** Pomodoro 
**** arhiv 
**** todo
*** Пропп
**** зачин
***** 1.  Жили-были.
 Создаем сказочное пространство. (Каждая сказка начинается с вводных слов "давным-давно", "жили-были", "в тридесятом царстве").
***** 2. Особое обстоятельство
	("умер отец", "солнце исчезло с небосклона", "дожди перестали лить, и наступила засуха").
***** 3. Запрет
	("не открывай оконца", "не отлучайся со двора", "не пей водицы").
***** 4. Нарушение запрета
	(персонажи сказок и в оконце выглядывают, и со двора отлучаются, и из лужи водицу пьют; при этом в сказке появляется новое лицо — антагонист, вредитель).
***** 5. Герой покидает дом
	(при этом герой может либо отправляться, отсылаться из дома, скажем, с благословения родителей разыскивать сестренку, либо изгоняться, например, отец увозит изгнанную мачехой дочь в лес, либо уходить из дома, превратившись в козлика после того, как запрет нарушен).
**** Навь
***** 6. Появление друга-помощника
	(серый волк, кот в сапогах).
***** 7. Способ достижения цели
	(это может быть полет на ковре-самолете, использование меча-кладенца и т.п.).
***** 8. Враг начинает действовать
	(змей похищает царевну, колдунья отравляет яблоко).
***** 9. Одержание победы
	(разрушение злых чар, физическое уничтожение антагониста — Змея, Кощея Бессмертного, победа в состязании).
***** 10. Преследование
	(какая сказка, как и детектив, обходится без погони? Героев могут преследовать гуси-лебеди, Змей Горыныч, Баба-яга, Лихо Окаянное и прочие, не менее "симпатичные" персонажи).
***** 11. Герой спасается от преследования
	(прячась в печку, превращаясь в кого-то или с помощью волшебных средств и преодолевая огромные расстояния).
***** 12. Даритель испытывает героя.
	И тут появляется новый персонаж – волшебник, гном, старушка, которой нужна помощь или нищий. Баба-яга дает девушке задание выполнить домашнюю работу, Змей предлагает герою поднять тяжелый камень.
***** 13. Герой выдерживает испытание дарителя
	(все очевидно).
***** 14. Получение волшебного средства
	(оно может передаваться, изготовляться, покупаться, появляться неведомо откуда, похищатьс

 я, даваться дарителем).
***** 15. Отлучка дарителя
	(Баба яга отпускает с миром, волшебник исчезает, дракон прячется обратно в пещеру).
***** 16. Герой вступает в битву с врагом 
 (иногда это открытый бой - со Змеем Горынычем, иногда состязание или игра в карты).
***** 17. Враг оказывается поверженным 
 (в сказках антагониста не только побеждают в бою или состязании, но и изгоняют или уничтожают с помощью хитрости).
***** 18. Героя метят 
 (метку наносят на тело или дают особый предмет - кольцо, полотенце, образок, он что-то забирает у поверженного врага).
***** 19. Герою дают сложное задание 
 (достать перстень со дна моря; соткать ковер; построить дворец за одну ночь; принести то, не знаю что).
***** 20. Герой исполняет задание 
 (а как же иначе?).
***** 21. Герою дается новый облик 
 (частый прием -погружение в кипящую воду или горячее молоко, которое делает героя еще краше).
**** Правь 
***** 22. Герой возвращается домой 
 (обычно это происходит в тех же формах, что и прибытие, но это может быть и победный прилет на поверженном драконе).
***** 23. Героя не узнают дома 
 (иногда вследствие произошедших с ним внешних изменений, наведенного заклятья, увечья, взросления).
***** 24. Появляется ложный герой 
 (то есть тот, кто выдает себя за героя или присваивает себе его заслуги).
***** 25. Разоблачение ложного героя 
 (это может произойти в результате специальных испытаний или свидетельства авторитетных лиц).
***** 26. Узнавание героя. 
 (И тут обнаруживается подмена. Ложный герой с позором изгоняется, а нашего персонажа принимает в объятия любящая королевская чета)
***** 27. Счастливый конец 
 (пир на весь мир, свадьба, пол царства в пидачу).
***** 28. Мораль 
 (какой вывод можно сделать из случившейся истории).
** Thems
*** zenburn-theme
#+begin_src emacs-lisp :results output silent
;; (package-refresh-contents)
(use-package zenburn-theme :ensure t)
(load-theme `zenburn)
;; (disable-theme 'material)
 #+end_src

*** spacemacs-theme
#+begin_src emacs-lisp :results output silent
;; (package-refresh-contents)
(use-package spacemacs-theme :ensure t)
(load-theme 'spacemacs-dark t)
;; (disable-theme 'material)
 #+end_src

*** material theme
#+begin_src emacs-lisp :results output silent
;; (package-refresh-contents)
;; (use-package spacemacs-theme :ensure t)
;; (load-theme 'spacemacs-dark-theme t)
(load-theme 'material t) ;; load material theme
;; (disable-theme 'material)
 #+end_src

*** dracula-theme
#+begin_src emacs-lisp :results output silent
;; (package-refresh-contents)
(use-package dracula-theme :ensure t)
(load-theme 'dracula t)
;; (disable-theme 'material)
 #+end_src

*** color-theme-sanityinc-tomorrow
#+begin_src emacs-lisp :results output silent
;; (package-refresh-contents)
(use-package color-theme-sanityinc-tomorrow :ensure t)
(load-theme 'gotham t)
;; (disable-theme 'material)
(require 'color-theme-sanityinc-tomorrow)
(color-theme-sanityinc-tomorrow-night)
 #+end_src

(color-theme-sanityinc-tomorrow-bright)
(color-theme-sanityinc-tomorrow-blue)
(color-theme-sanityinc-tomorrow-eighties)

*** doom-themes
#+begin_src emacs-lisp :results output silent
;; (package-refresh-contents)
(use-package doom-themes :ensure t
	 :config
	 ;; Global settings (defaults)
	 (setq doom-themes-enable-bold t    ; if nil, bold is universally disabled
				 doom-themes-enable-italic t) ; if nil, italics is universally disabled
	 (load-theme 'doom-one t)

	 ;; Enable flashing mode-line on errors
	 (doom-themes-visual-bell-config)
	 ;; Enable custom neotree theme (all-the-icons must be installed!)
	 ;; (doom-themes-neotree-config)
	 ;; or for treemacs users
	 ;; (setq doom-themes-treemacs-theme "doom-atom") ; use "doom-colors" for less minimal icon theme
	 ;; (doom-themes-treemacs-config)
	 ;; Corrects (and improves) org-mode's native fontification.
	 (doom-themes-org-config))
	
;; (load-theme 'solarized-dark t)
;; (disable-theme 'material)
 #+end_src
****** (load-theme 'doom-one t)
(load-theme 'doom-one t)
(load-theme 'doom-1337 t) 	link 	ported from VSCode's 1337 theme (ported by @ccmywish)
(load-theme 'doom-acario-dark t) 	original 	an original dark theme (ported by @gagbo)
(load-theme 'doom-acario-light t) 	original 	an original light theme (ported by @gagbo)
(load-theme 'doom-ayu-dark t) 	link 	inspired by Ayu Dark (ported by @ashton)
(load-theme 'doom-ayu-light t) 	link 	inspirted by Ayu Light (ported by @LoveSponge)
(load-theme 'doom-ayu-mirage t) 	link 	inspired by Ayu Mirage (ported by @LoveSponge)
(load-theme 'doom-badger t) 	link 	inspired by cann's Badger colorscheme (ported by @jsoa)
(load-theme 'doom-challenger-deep t) 	link 	inspired by Vim's Challenger Deep theme (ported by @fuxialexander)
(load-theme 'doom-city-lights t) 	link 	inspired by Atom's City Lights theme (ported by @fuxialexander)
(load-theme 'doom-dark+ t) 	n/a 	ported from equinusocio's VSCode Theme, dark+ (ported by @ema2159)
(load-theme 'doom-dracula t) 	link 	inspired by the popular Dracula theme (ported by @fuxialexander)
(load-theme 'doom-earl-grey t) 	original 	a gentle color scheme, for code (ported by @JuneKelly)
(load-theme 'doom-ephemeral t) 	link 	inspired by the Ephemeral Theme from elenapan's dotfiles (ported by @karetsu)
(load-theme 'doom-fairy-floss t) 	link 	a candy colored theme by sailorhg (ported by @ema2159)
(load-theme 'doom-feather-dark t) 	original 	a candy colored theme by sailorhg (ported by @Plunne)
(load-theme 'doom-feather-light t) 	original 	a candy colored theme by sailorhg (ported by @Plunne)
(load-theme 'doom-flatwhite t) 	link 	inspired by Atom's Flatwhite Syntax theme (ported by @JuneKelly)
(load-theme 'doom-gruvbox t) 	link 	inspired by morhetz's Gruvbox (ported by @JongW)
(load-theme 'doom-gruvbox-light t) 	link 	inspired by morhetz's Gruvbox (light) (ported by @jsoa)
(load-theme 'doom-henna t) 	link 	based on VSCode's Henna theme (ported by @jsoa)
(load-theme 'doom-homage-black t) 	original 	a minimalistic, colorless theme inspired by eziam, tao, and jbeans (ported by @mskorzhinskiy)
(load-theme 'doom-homage-white t) 	original 	minimal white theme inspired by editors from 2000s (ported by @mskorzhinskiy)
(load-theme 'doom-horizon t) 	link 	ported from VSCode Horizon (ported by @karetsu)
(load-theme 'doom-Iosvkem t) 	link 	ported from the default dark theme for Adobe Brackets (ported by @neutaaaaan)
(load-theme 'doom-ir-black t) 	link 	ported from Vim's ir_black colorscheme (ported by @legendre6891)
(load-theme 'doom-lantern t) 	link 	based on Gitleptune's Lantern theme (ported by @paladhammika)
(load-theme 'doom-laserwave t) 	link 	a clean synthwave/outrun theme inspired by VSCode's Laserwave (ported by @hyakt)
(load-theme 'doom-manegarm t) 	original 	an original autumn-inspired dark theme (ported by @kenranunderscore)
(load-theme 'doom-material t) 	link 	adapted from equinusocio's Material themes (ported by @tam5)
(load-theme 'doom-material-dark t) 	link 	inspired by Material Theme by xrei (ported by @trev-dev)
(load-theme 'doom-meltbus t) 	link 	a dark (mostly) monochromatic theme (ported by @spacefrogg)
(load-theme 'doom-miramare t) 	link 	a port of Franbach's Miramare theme; a variant of Grubox (ported by @sagittaros)
(load-theme 'doom-molokai t) 	link 	inspired by Tomas Restrepo's Molokai (ported by @hlissner)
(load-theme 'doom-monokai-classic t) 	link 	port of Monokai Classic (ported by @ema2159)
(load-theme 'doom-monokai-machine t) 	link 	port of Monokai Classic (ported by @minikN)
(load-theme 'doom-monokai-octagon t) 	link 	port of Monokai Octagon (ported by @minikN)
(load-theme 'doom-monokai-pro t) 	link 	Port of Monokai Pro (ported by @minikN)
(load-theme 'doom-monokai-ristretto t) 	link 	Port of Monokai Ristretto (ported by @minikN)
(load-theme 'doom-monokai-spectrum t) 	link 	port of Monokai Spectrum (ported by @minikN)
(load-theme 'doom-moonlight t) 	link 	inspired by VS code's Moonlight (ported by @Brettm12345)
(load-theme 'doom-nord t) 	link 	dark variant of Nord (ported by @fuxialexander)
(load-theme 'doom-nord-aurora t) 	link 	a light variant of Nord (ported by @MoskitoHero)
(load-theme 'doom-nord-light t) 	link 	light variant of Nord (ported by @fuxialexander)
(load-theme 'doom-nova t) 	link 	inspired by Trevord Miller's Nova (ported by @bigardone)
(load-theme 'doom-oceanic-next t) 	link 	inspired by Oceanic Next (ported by @juanwolf)
(load-theme 'doom-old-hope t) 	link 	inspired by An Old Hope, in a galaxy far far away (ported by @teesloane)
(load-theme 'doom-one t) 	link 	inspired by Atom One Dark (ported by @hlissner)
(load-theme 'doom-one-light t) 	link 	inspired by Atom One Light (ported by @ztlevi)
(load-theme 'doom-opera t) 	original 	an original light theme (ported by @jwintz)
(load-theme 'doom-opera-light t) 	original 	an original light theme (ported by @jwintz)
(load-theme 'doom-outrun-electric t) 	link 	a high contrast, neon theme inspired by Outrun Electric on VSCode (ported by @ema2159)
(load-theme 'doom-palenight t) 	link 	adapted from equinusocio's Material themes (ported by @Brettm12345)
(load-theme 'doom-peacock t) 	link 	inspired by daylerees' Peacock (ported by @teesloane)
(load-theme 'doom-pine t) 	link 	a green-tinged Gruvbox (by @RomanHargrave)
(load-theme 'doom-plain t) 	link 	inspired by gko's plain theme for VSCode (ported by @das-s)
(load-theme 'doom-plain-dark t) 	link 	inspired by gko's plain theme for VSCode (ported by @das-s)
(load-theme 'doom-rouge t) 	link 	ported from VSCode's Rouge Theme (ported by @das-s)
(load-theme 'doom-shades-of-purple t) 	link 	a port of VSCode's Shades of Purple (ported by @jwbaldwin)
(load-theme 'doom-snazzy t) 	link 	inspired by Hyper Snazzy (ported by @ar1a)
(load-theme 'doom-solarized-dark t) 	link 	a dark variant of Solarized (ported by @ema2159)
(load-theme 'doom-solarized-dark-high-contrast t) 	link 	a high-contrast variant of Solarized Dark (ported by @jmorag)
(load-theme 'doom-solarized-light t) 	link 	a light variant of Solarized (ported by @fuxialexander)
(load-theme 'doom-sourcerer t) 	link 	a port of xero's Sourcerer (ported by @fm0xb)
(load-theme 'doom-spacegrey t) 	link 	I'm sure you've heard of it (ported by @teesloane)
(load-theme 'doom-tokyo-night t) 	link 	inspired by VSCode's Tokyo Night theme (ported by @FosterHangdaan)
(load-theme 'doom-tomorrow-day t) 	link 	a light variant of Tomorrow (ported by @emacswatcher)
(load-theme 'doom-tomorrow-night t) 	link 	One of the dark variants of Tomorrow (ported by @hlissner)
(load-theme 'doom-vibrant t) 	doom-one 	a more vibrant variant of doom-one (ported by @hlissner)
(load-theme 'doom-wilmersdorf t) 	link 	port of Ian Pan's Wilmersdorf (ported by @ema2159)
(load-theme 'doom-xcode t) 	Xcode.app 	based off of Apple's Xcode Dark Theme (ported by @kadenbarlow)
(load-theme 'doom-zenburn t) 	link 	port of the popular Zenburn theme (ported by @jsoa)

*** modus-themes
#+begin_src emacs-lisp :results output silent
;; (package-refresh-contents)
(use-package modus-themes :ensure t)
(load-theme 'modus-vivendi t)
;; (disable-theme 'material)
 #+end_src

*** monokai-theme
#+begin_src emacs-lisp :results output silent
;; (package-refresh-contents)
(use-package monokai-theme :ensure t)
(load-theme 'monokai t)
;; (disable-theme 'material)
 #+end_src

*** solarized-theme
#+begin_src emacs-lisp :results output silent
;; (package-refresh-contents)
(use-package solarized-theme :ensure t)
(load-theme 'solarized-dark t)
;; (disable-theme 'material)
 #+end_src

*** gotham-theme
#+begin_src emacs-lisp :results output silent
;; (package-refresh-contents)
(use-package gotham-theme :ensure t)
(load-theme 'gotham t)
;; (disable-theme 'material)
 #+end_src

** разобратся 
*** 1
C-g	minibuffer-keyboard-quit
(keyboard-escape-quit)

It is bound to C-g.

(keyboard-quit)

This function has :around advice: ‘ad-Advice-keyboard-quit’.

Signal a ‘quit’ condition.
During execution of Lisp code, this character causes a quit directly.
At top-level, as an editor command, this simply beeps.
*** fonts 
(add-to-list 'default-frame-alist
             ;; '(font . "Ubuntu Mono")
             '(font . "Comic Sans MS")
						 )
jokerman
papirus
E:\Temp\Fonts\papyrus.zip 
E:\Temp\Fonts\exodus.zip 
"E:\Temp\Fonts\comic shanns.otf" 
E:\Temp\Fonts\Edwardian-Script-ITC.zip 
"E:\Temp\Fonts\Bamboo Regular.ttf" wutang 
trajan
E:\Temp\Fonts\Trajan-Pro-Regular.zip 
Curlz MT
E:\Temp\Fonts\CURLZ___.TTF 
"E:\Temp\Fonts\Kinescope Regular.otf" 
E:\Temp\Fonts\Cyberpunk-Regular.ttf 
"E:\Temp\Fonts\Gotham Book Font.otf" 
E:\Temp\Fonts\Miss_Fajardose.zip 
E:\Temp\Fonts\resident-evil-cufonfonts.zip 
E:\Temp\Fonts\Scary-Font.zip 

** Настроение
*** Uplin
#+begin_src elisp :results output silent
(buyn-cmd-start "aim \"F:\\Audio\\Games\\Uplink - The Soundtrack\"")
#+end_src
*** Dragon Age
#+begin_src elisp :results output silent
(buyn-cmd-start "aim \"F:\\Audio\\Games\\Uplink - The Soundtrack\"")
#+end_src
\"F:\\Audio\\Games\\Dragon Age\" 
*** [#B] Satellite Reign
#+begin_src elisp :results output silent
(buyn-cmd-start "aim \"F:\\Audio\\Games\\Satellite Reign by Russell Shaw & Protector 101 (2015) [MP3, V0]\"")
#+end_src
*** Syndicate
#+begin_src elisp :results output silent
(buyn-cmd-start "aim \"F:\\Audio\\Games\\Syndicate (MP3) +\"")
#+end_src
*** Unreal Tournament 2004 
#+begin_src elisp :results output silent
(buyn-cmd-start "aim \"F:\\Audio\\Games\\VA - Unreal History Music (1997-2007)\\Kevin Riepl - Unreal Tournament 2004 (2004)\"")
#+end_src

*** UFO Aftershock
#+begin_src elisp :results output silent
(buyn-cmd-start "aim \"F:\\Audio\\Games\\X COM (MP3) +\\UFO Aftershock\"")
#+end_src
*** Black & White
#+begin_src elisp :results output silent
(buyn-cmd-start "aim \"F:\\Audio\\Games\\Black & White\"")
#+end_src
*** X-COM Apocalypse
#+begin_src elisp :results output silent
(buyn-cmd-start "aim \"F:\\Audio\\Games\\X COM (MP3) +\\X-COM Apocalypse Soundtrack (by John Broomhall) [1997]\"")
#+end_src
*** Anno 2070
#+begin_src elisp :results output silent
(buyn-cmd-start "aim \"F:\\Audio\\Games\\Anno 2070\"")
#+end_src
*** Darkest Dungeon
#+begin_src elisp :results output silent
(buyn-cmd-start "aim \"F:\\Audio\\Games\\Darkest Dungeon by Stuart Chatwood (2016) [MP3, V0]\"")
#+end_src

*** Minecraft - Volume Alpha
#+begin_src elisp :results output silent
(buyn-cmd-start "aim \"F:\\Audio\\Games\\C418 - Minecraft Score (2011-2013)\\2011 - Minecraft - Volume Alpha\"")
#+end_src

*** Giants - Citizen Kabuto
#+begin_src elisp :results output silent
(buyn-cmd-start "aim \"F:\\Audio\\Games\\Giants - Citizen Kabuto\"")
#+end_src

*** Freedom Fighters
#+begin_src elisp :results output silent
(buyn-cmd-start "aim \"F:\\Audio\\Games\\Freedom Fighters\"")
#+end_src
*** Diablo 1996-2011
#+begin_src elisp :results output silent
(buyn-cmd-start "aim \"F:\\Audio\\Games\\2000-2014 Diablo Collection by Blizzard Sound Team\\2011 The Music of Diablo 1996-2011 -Diablo 15 Year Anniversary-\"")
#+end_src
*** System Shock
#+begin_src elisp :results output silent
(buyn-cmd-start "aim \"F:\\Audio\\Games\\System Shock (Discography)\"")
#+end_src
*** Diablo II
#+begin_src elisp :results output silent
(buyn-cmd-start "aim \"F:\\Audio\\Games\\2000-2014 Diablo Collection by Blizzard Sound Team\\2000 Diablo II Soundtrack\"")
#+end_src
*** Diablo II Expansion Set -Lord of Destruction
#+begin_src elisp :results output silent
(buyn-cmd-start "aim \"F:\\Audio\\Games\\2000-2014 Diablo Collection by Blizzard Sound Team\\2001 Diablo II Expansion Set -Lord of Destruction- Soundtrack Audio CD\"")
#+end_src

*** Magic Carpet
#+begin_src elisp :results output silent
(buyn-cmd-start "aim \"F:\\Audio\\Games\\Magic Carpet\"")
#+end_src
** Tmp
[~/../../../274px.png]]

(setq path-to-emagus-cmd "d:/Development/lisp/Emacs/bin/runemacs.exe")

(defun buyn-start-emagus (unix-path-to-file)
  "	buyn start new emacs process
		as parametr  
		get file path in unix format
		unix-path-to-file path to file in unix format
		"
  (shell-command
		;; (message
		(concat path-to-emagus-cmd
						" "
						unix-path-to-file)
		)
  )
** Macros
*** done
#+begin_src emacs-lisp :results output silent
	(load-file "~/keymac/mac-done-copy.el")
#+end_src
#+begin_src emacs-lisp :results output silent
(fset 'mac-done-copy
   (lambda (&optional arg) "Keyboard macro." (interactive "p") (kmacro-exec-ring-item (quote ("dzadd`dpza``" 0 "%d")) arg)))
#+end_src
#+begin_src emacs-lisp :results output silent
(global-set-key (kbd "<f5>") 'mac-done-copy)
#+end_src

open macros file
#+begin_src emacs-lisp :results output silent
(find-file-other-frame "~/keymac/mac-done-copy.el")
#+end_src
‘insert-kbd-macro’
*** CalcandSave 
#+begin_src emacs-lisp :results output silent
	(load-file "~/keymac/calc-and-save.el")
#+end_src
#+begin_src emacs-lisp :results output silent
(fset 'calc-and-save
   (lambda (&optional arg) "Keyboard macro." (interactive "p") (kmacro-exec-ring-item (quote ([3 42 f2 105] 0 "%d")) arg)))
#+end_src
#+begin_src emacs-lisp :results output silent
(global-set-key (kbd "<f5>") 'calc-and-save)
#+end_src


‘C-x C-k n’
     Give a command name (for the duration of the Emacs session) to the
     most recently defined keyboard macro (‘kmacro-name-last-macro’).
open macros file
#+begin_src emacs-lisp :results output silent
(find-file-other-frame "~/keymac/calc-and-save.el")
#+end_src
‘insert-kbd-macro’
*** outline_next : 
#+begin_src emacs-lisp :results output silent
(load-file "~/keymac/outline_next.el")
#+end_src
#+begin_src emacs-lisp :results output silent
(fset 'outline_next
   ;; (kmacro-lambda-form [?I ?* ?* ?* ?* ?  escape ?k ?z ?a ?j ?j] 0 "%d")
	(kmacro-lambda-form [?п ?р M-return ?л ?я ?с ?о] 0 "%d")
)
#+end_src
#+begin_src emacs-lisp :results output silent
(global-set-key (kbd "<f6>") 'outline_next)
#+end_src
#+begin_src emacs-lisp :results output silent
(find-file-other-frame "~/keymac/outline_next.el")
#+end_src
*** mask_win_path : 
#+begin_src emacs-lisp :results output silent
(load-file "~/keymac/mask_win_path.el")
#+end_src
#+begin_src emacs-lisp :results output silent
(fset 'mask_win_path
   (kmacro-lambda-form [?\C-\M-  ?\M-% ?\\ return ?\\ ?\\ return ?! ?g ?v ?\M-% ?\" delete return ?\\ ?\" return ?!] 0 "%d"))
#+end_src
#+begin_src emacs-lisp :results output silent
(global-set-key (kbd "<f6>") 'mask_win_path)
#+end_src
#+begin_src emacs-lisp :results output silent
(find-file-other-frame "~/keymac/mask_win_path.el")
#+end_src
*** ins_bufer_next : 
#+begin_src emacs-lisp :results output silent
(load-file "~/keymac/ins_bufer_next.el")
#+end_src
#+begin_src emacs-lisp :results output silent
(fset 'ins_bufer_next
   (kmacro-lambda-form [?o escape ?\C-v escape ?\M-c ?\M-o] 0 "%d"))
#+end_src
#+begin_src emacs-lisp :results output silent
(global-set-key (kbd "<f5>") 'ins_bufer_next)
#+end_src
#+begin_src emacs-lisp :results output silent
(find-file-other-frame "~/keymac/ins_bufer_next.el")
#+end_src
*** cls-tab-line : 
#+begin_src emacs-lisp :results output silent
(load-file "~/keymac/cls-tab-line.el")
#+end_src
#+begin_src emacs-lisp :results output silent
(fset 'cls-tab-line
   (kmacro-lambda-form [?g ?h tab tab ?\C-c ?  tab ?\C-c ?  tab ?\C-c ?  tab ?\C-c ?  ?j ?g ?h] 0 "%d"))
#+end_src
#+begin_src emacs-lisp :results output silent
(global-set-key (kbd "<f5>") 'cls-tab-line)
#+end_src
#+begin_src emacs-lisp :results output silent
(find-file-other-frame "~/keymac/cls-tab-line.el")
#+end_src
*** mac-done-copy : 
#+begin_src emacs-lisp :results output silent
(load-file "~/keymac/mac-done-copy.el")
#+end_src
#+begin_src emacs-lisp :results output silent
(fset 'mac-done-copy
   (lambda (&optional arg) "Keyboard macro." (interactive "p") (kmacro-exec-ring-item (quote ("zodzadd`dpza``" 0 "%d")) arg)))
#+end_src
#+begin_src emacs-lisp :results output silent
(global-set-key (kbd "<f6>") 'mac-done-copy)
#+end_src
#+begin_src emacs-lisp :results output silent
(find-file-other-frame "~/keymac/mac-done-copy.el")
#+end_src

*** ins-tree-link : 
#+begin_src emacs-lisp :results output silent
(load-file "~/keymac/ins-tree-link.el")
#+end_src
#+begin_src emacs-lisp :results output silent
(fset 'ins-tree-link
   (lambda (&optional arg) "Keyboard macro."
		(interactive "p") (kmacro-exec-ring-item '([C-return 32 32 3 12 return return] 0 "%d") arg)))
#+end_src
#+begin_src emacs-lisp :results output silent
(global-set-key (kbd "<f6>") 'ins-tree-link)
#+end_src
#+begin_src emacs-lisp :results output silent
(find-file-other-frame "~/keymac/ins-tree-link.el")
#+end_src

*** calc-all : 
#+begin_src emacs-lisp :results output silent
(load-file "~/keymac/calc-all.el")
#+end_src
#+begin_src emacs-lisp :results output silent
(fset 'calc-all
   (kmacro-lambda-form [escape ?\C-u ?\C-c ?*] 0 "%d"))
#+end_src
#+begin_src emacs-lisp :results output silent
(global-set-key (kbd "<f6>") 'calc-all)
#+end_src
#+begin_src emacs-lisp :results output silent
(find-file-other-frame "~/keymac/calc-all.el")
#+end_src

*** convert-ru-point : 
#+begin_src emacs-lisp :results output silent
(load-file "~/keymac/convert-ru-point.el")
#+end_src
#+begin_src emacs-lisp :results output silent
(fset 'convert-ru-point
   (kmacro-lambda-form [?ð ?ð ?J ?F ?, ?r ?.] 0 "%d"))
#+end_src
#+begin_src emacs-lisp :results output silent
(global-set-key (kbd "<f6><f6>") 'convert-ru-point)
#+end_src
#+begin_src emacs-lisp :results output silent
(find-file-other-frame "~/keymac/convert-ru-point.el")
#+end_src

** Calc
*** random
**** exempls
		Выдаёт между 0-1
(random 2)
		Выдаёт между 0-99
(random 100)
		Выдаёт между 1-100
(+ (random 100) 1)
		Выдаёт между 10-100 (проверил)
(+ (random 91) 10)
**** die
(defun die (arg)
	(+ (random (+ arg 1)) 1))
(defun d6 ()
	(die 6))
(d6)
(+ (d6) (d6) (d6) (d6))

*** time 
(setq-local pom 25)
(setq-local h 60)
(defun min-to-houre (min-in)
		(let ((hour (/ min-in 60)))
		 (message "%s:%s" hour (- min-in (* hour 60)))))
(/ h pom)
(* 4 pom)
(min-to-houre 100)
** Cards todo
*** New Project
**** new org
(find-file-other-frame "~/../Dropbox/Office/Progects/Audit/MFA/MFA.org")
**** new cmd
(find-file-other-frame "~/../Dropbox/Office/Progects/Audit/MFA/MFA.cmd")
**** icon for cmd 
D:\Development\lisp\Emacs\bin\emacs.exe 
**** Far 
D:\shell\Far\Far.exe D:\Development\lisp\Dropbox\Office\Progects\Audit\MFA 
D:\shell\Far\Far.exe D:\Development\version-control\GitHub\Vadim\Tochil_mpy   
D:\shell\Far\Far.exe 
** initial-scratch-message
*** 
;; This buffer is for text that is not saved, and for Lisp evaluation.
;; To create a file, visit it with C-x C-f and enter text in its buffer.


(setq exec-path (append exec-path '("D:/shell/msys2/msys64/mingw64/bin ")))
(setenv "PATH" (concat (getenv "PATH") "D:\\shell\\msys2\\msys64\\mingw64\\bin"))


(setq exec-path (append exec-path '("D:/shell/msys2/msys64/usr/bin")))
(setenv "PATH" (concat (getenv "PATH") "D:\\shell\\msys2\\usr\\mingw64\\bin"))



(package-refresh-contents)

(use-package org-roam
	:ensure t
	:after org
	;; :disabled
	:init (setq org-roam-v2-ack t) ;; Acknowledge V2 upgrade
	:custom
	;; (org-roam-directory (file-truename org-directory))
	;; (org-roam-directory (file-truename "D:/Development/lisp/Dropbox/orgs/Org-roam/default/"))
	;; "~/../Dropbox/Office/Research/Doc/Grimoire/Grimoire.org"
	(org-roam-directory (file-truename "~/../Dropbox/orgs/Org-roam/default/"))
	:config
	(org-roam-setup)
	:bind (("C-c n f" . org-roam-node-find)
					("C-c n r" . org-roam-node-random)		    
					(:map org-mode-map
								(("C-c n i" . org-roam-node-insert)
								("C-c n o" . org-id-get-create)
								("C-c n t" . org-roam-tag-add)
								("C-c n a" . org-roam-alias-add)
								("C-c n l" . org-roam-buffer-toggle)))))

(use-package org-roam
  :ensure t
  :custom
  (org-roam-directory (file-truename "D:/Development/lisp/Dropbox/orgs/Org-roam/default/"))
  :bind (("C-c n l" . org-roam-buffer-toggle)
         ("C-c n f" . org-roam-node-find)
         ("C-c n g" . org-roam-graph)
         ("C-c n i" . org-roam-node-insert)
         ("C-c n c" . org-roam-capture)
         ;; Dailies
         ("C-c n j" . org-roam-dailies-capture-today))
  :config
  ;; If you're using a vertical completion framework, you might want a more informative completion interface
  (setq org-roam-node-display-template (concat "${title:*} " (propertize "${tags:10}" 'face 'org-tag)))
  (org-roam-db-autosync-mode)
  ;; If using org-roam-protocol
  (require 'org-roam-protocol))


(org-roam-db-autosync-mod)
*** 
initial-scratch-message
;; * scrat 
(setq initial-scratch-message ";; Whenever I open Emacs, I feel inspired. Like a craftsman entering his workshop, I feel a realm of possibility open before me. I feel the comfort of an environment that has evolved over time to fit me perfectly—an assortment of packages and key bindings that help me bring ideas to life day after day.
;; 
;; | |_| |_| |           | |_| |_| |
;; \ _____ /      o_     \ _____ /
;; 	|     |       |_|     |     |
;; 	|  |  |       |       |  |  |
;; 	|   _ l _   _ | _   _ l _   |
;; 	|  | |_| |_| ||| |_| |_| |  |
;; 	|  |                     |  |
;; 	|| |                     | ||
;; 	|  |        _____        |  |
;; 	|  |       /_|_|_\       |  |
;; 	|  |      /|_|_|_|\      |  |
;; 	|  |      ||_|_|_||      |  |
;; 	|  |      ||_|_|_||      |  |
;; 	|__|      ||_|_|_||      |__|
;; /   |      ||_|_|_||      |   \
;; =================================
;; This buffer is for text that is not saved, and for Lisp evaluation.
;; To create a file, visit it with C-x C-f and enter text in its buffer.
")

* Pathes
** Brain
#+begin_src emacs-lisp :results code silent output 
;; (package-refresh-contents)
(setq org-brain-path "~/ORG/brain/")
(setq org-id-track-globally t)
(setq org-id-locations-file "~/ORG/brain/.org-id-locations")
(org-brain-switch-brain "~/ORG/brain/")
(find-file-other-frame "~/ORG/brain/index.org")
(org-brain-visualize "index")
(load-theme 'solarized-dark t)
;; (disable-theme 'material)
#+end_src

** emacs orgs
*** 2023
**** 07
(find-file-other-frame "~/../Dropbox/orgs/code/emacs_GPT_2023-07-20.org")
(find-file-other-frame "~/../Dropbox/orgs/code/emacs_EAF_2023-07-17.org")
(find-file-other-frame "~/../Dropbox/orgs/code/emacs_sound_keys_2023-07-11.org")
**** 06
(find-file-other-frame "~/../Dropbox/orgs/adm/emacs_ledger_2023-06-15.org")
(find-file-other-frame "~/../Dropbox/orgs/adm/2023-06-08_trans.org")

**** 05
(find-file-other-frame "~/../Dropbox/orgs/adm/cygwin_gcc.org")
(find-file-other-frame "~/../Dropbox/orgs/adm/emacs_org-roam_2023-05-19.org")

** init files
*** root
(find-file-other-frame "~/.emacs")
	(find-file-other-frame "~/INI/init.el")
*** vanila
(find-file-other-frame "~/INI/inpak.el")
(find-file-other-frame "~/INI/vanila_cfg.el")
*** Evil 	 C+c C+o
	[[elisp:(find-file-other-frame "~/INI/evil-mod-cfg.el")]["~/INI/evil-mod-cfg.el"]]
	(find-file-other-frame "~/INI/evil-mod-cfg.el")
		[[elisp:(find-file-other-frame "~/INI/Evil/evil-tabs-cfg.el")]["~/INI/Evil/evil-tabs-cfg.el"]]
		(find-file-other-frame "~/INI/Evil/evil-tabs-cfg.el")
		[[elisp:(find-file-other-frame "~/ELs/Evil/evil-respect-input.el")]["~/ELs/Evil/evil-respect-input.el"]]
		(find-file-other-frame "~/ELs/Evil/evil-respect-input.el")

	(find-file-other-frame "~/ELs/Evil/onecharadd.el") not used
	(find-file-other-frame "~/ELs/Evil/copylines.el") пока нет
*** Orgs
(find-file-other-frame "~/INI/org-cfg.el")
	(find-file-other-frame "~/INI/ORG/org-roam-cfg.el")
	(find-file-other-frame "~/INI/org_agend_cfg.el")
	(find-file-other-frame "~/INI/babel-cfg.el")
		(find-file-other-frame "~/ELs/Org/Babel/ob-eshell.el")
	(find-file-other-frame "~/INI/org-brain-cfg.el")
	(find-file-other-frame "~/INI/ORG/graph-tools-cfg.el")

*** Folding
(find-file-other-frame "~/INI/folding-cfg.el")
	(find-file-other-frame "~/INI/outshine_cfg.el")
	(find-file-other-frame "~/INI/origami_cfg.el") not using
	но содержит в себе огромное количество класных решенией
	которые нужно перенести в outshine-mod
		(find-file-other-frame "~/ELs/Evil/origami_triplebrase.el")
*** frame
	(find-file-other-frame "~/INI/frame-control.el")
															WINDMOVE
		(find-file-other-frame "~/INI/fullscreen-cfg.el")
		(find-file-other-frame "~/INI/frames/minimap-cfg.el")
		minimap-mode loading
*** Other
(find-file-other-frame "~/INI/advnsed-selections-cfg.el")
(find-file-other-frame "~/INI/www-cfg.el") 
*** interface
(find-file-other-frame "~/INI/interface-mods.el")
	(find-file-other-frame "~/INI/interface/powerline-cfg.el") 
		(find-file-other-frame "~/INI/interface/jonathanchu-emacs-powerline-cfg.el") 
		(find-file-other-frame "~/INI/interface/input-methods-cfg.el")
	(find-file-other-frame "~/INI/frames/minimap-cfg.el") move here
			(find-file-other-frame "~/ELs/powerline/sm-package-powerline.el")notuse
		(find-file-other-frame "~/INI/interface/spaceline-cfg.el") notuse
*** HYDRA MENU
(find-file-other-frame "~/INI/hydra-cfg.el")
*** literary
(find-file-other-frame "~/INI/lit-cfg.el")
	(find-file-other-frame "~/INI/translate-cfg.el")
	(find-file-other-frame "~/INI/lit-cfg/grammer-cfg.el") not et
	(find-file-other-frame "~/INI/lit-cfg/read-aloud-cfg.el") 
	(find-file-other-frame "~/INI/lit-cfg/reader-cfg.el")
	(find-file-other-frame "~/ELs/BuYn/reader.el")
*** Programing
(find-file-other-frame "~/INI/dev-cfg.el")
	(find-file-other-frame "~/INI/autocomplete-cfg.el")
	(find-file-other-frame "~/INI/snippets-cfg.el")
	(find-file-other-frame "~/INI/delimiters-cfg.el")
	(find-file-other-frame "~/INI/js-cfg.el") 
	(find-file-other-frame "~/INI/lua-cfg.el")
	(find-file-other-frame "~/INI/python-cfg.el")
	(find-file-other-frame "~/INI/dev/csharp-cfg.el")
	(find-file-other-frame "~/INI/dev/clojure-cfg.el")
	(find-file-other-frame "~/INI/dev/autohotkey-cfg.el")
	(find-file-other-frame "~/INI/dev/unity-cfg.el")
	(find-file-other-frame "~/INI/dev/formats-mods-cfg.el")
	(find-file-other-frame "~/INI/c-mode-cfg.el") not used
	(find-file-other-frame "~/INI/flycheck-cfg.el")
*** My Elisp
	(find-file-other-frame "~/ELs/BuYn/shell.el")
	----- not auto loadet -----
	(find-file-other-frame "~/ELs/BuYn/ai-dungon.el")
	(find-file-other-frame "~/ELs/tts/tts-editor/tts-editor.el")
	(find-file-other-frame "~/ELs/BuYn/tts.el")
	----- not auto loadet -----
** all orgs Grimoire
*** link
(find-file-other-frame "~/../Dropbox/Office/Research/Doc/Grimoire/Grimoire.org")
*** админс fro grimuar 
(find-file-other-frame "~/../Dropbox/orgs/adm/2023-06-08_trans.org")
*** Des 
	Главная книга 
отвечает за все остальные
остальные книги рождаются здесь
потом когда материала оказывается черезверное
он преберается в отдельную книгу
и эта книга содержит силки на все остальные книги
и материалы на вощендшии пока в отдельные книги
может быть вызана из любой книги
шифт+ф1
** exempl
(find-file "~/../hi.txt")
*Help Docs Emacs 
* Команды
** reload init files
(load "~/INI/hydra-cfg.el")
(load "~/INI/evil-mod-cfg.el")
(load "~/INI/frame-control.el")
(load "~/INI/lua-cfg.el")
(load "~/ELs/BuYn/shell.el")
(load "~/ELs/BuYn/reader.el")
(load "~/INI/vanila_cfg.el")
(load "~/INI/origami_cfg.el")
(load "~/INI/folding-cfg.el")
(load "~/INI/org-cfg.el")
(load "~/INI/lit-cfg.el")
(load "~/INI/dev-cfg.el")
(load "~/INI/interface-mods.el")
(load "~/ELs/BuYn/shell.el")
** server 
*** status
?server-start?
Warning (server): Unable to start the Emacs server.
There is an existing Emacs server, named "server".
To start the server in this Emacs process, stop the existing
server or call ‘M-x server-force-delete’ to forcibly disconnect it.
#+begin_src emacs-lisp :tangle yes
(server-start)
#+end_src
#+RESULTS:



*** server-force-delete
server-force-delete
#+begin_src emacs-lisp :tangle yes
(server-force-delete)
#+end_src

#+RESULTS:
: Connection file "d:/Development/lisp/Home/.emacs.d/server/server" deleted



*** result
.emacs.d/server/server removed from cache
Connection file "d:/Development/lisp/Home/.emacs.d/server/server" deleted
*** emacs_client
D:\Development\lisp\HOME\emacs_client.cmd

** load init files
(load "~/INI/org-brain-cfg.el")
** открыть
(find-file-other-frame "d:/My_Docs/Ofice/PaperFlow/TODO/todo.org")
(org-agenda nil "a")
** Agenda
*** revert 
(org-revert-all-org-buffers)
*** open 

** Install
*** Docs
 tar not found when trying to install from melpa 
 You probably have an outdated package database
 (package-refresh-contents)
 (package-install "company-irony")
 remove pacage
 нужно водом команды в m-x m-y
 поскольку Поскольку название пакета отличается от его названия
 наличием циферхеша 
 m-x
 package-delete
#+begin_src emacs-lisp :results output silent

#+end_src
*** experement pack 
**** pdf-tools : 
***** install
GitHub - politza/pdf-tools: Emacs support library for PDF files.
#+begin_src emacs-lisp 
(package-refresh-contents)
(use-package pdf-tools
							:ensure t)
#+end_src
#+RESULTS:



#+begin_src emacs-lisp :results output silent

#+end_src
***** exempl 
"E:\Books\PDF\Rules\Traveller\Traveller5\T5 - Playtest - Starports.pdf" 

"E:\Books\PDF\Rules\Traveller\Traveller5\T5 - Playtest - Starports.pdf" 
***** Some keybindings
****** Navigation	
Scroll Up / Down by page-full	space / backspace
Scroll Up / Down by line	C-n / C-p
Scroll Right / Left	C-f / C-b
Top of Page / Bottom of Page	< / >
Next Page / Previous Page	n / p
First Page / Last Page	M-< / M->
Incremental Search Forward / Backward	C-s / C-r
Occur (list all lines containing a phrase)	M-s o
Jump to Occur Line	RETURN
Pick a Link and Jump	F
Incremental Search in Links	f
History Back / Forwards	B / N
Display Outline	o
Jump to Section from Outline	RETURN
Jump to Page	M-g g
****** Display	
Zoom in / Zoom out	+ / -
Fit Height / Fit Width / Fit Page	H / W / P
Trim margins (set slice to bounding box)	s b
Reset margins	s r
Reset Zoom	0
****** Annotations	
List Annotations	C-c C-a l
Jump to Annotations from List	SPACE
Mark Annotation for Deletion	d
Delete Marked Annotations	x
Unmark Annotations	u
Close Annotation List	q
Add and edit annotations	via Mouse selection and left-click context menu
Syncing with Auctex	
jump to PDF location from source	C-c C-g
jump source location from PDF	C-mouse-1
****** Miscellaneous	
Refresh File (e.g., after recompiling source)	g
Print File	C-c C-p
**** request
***** install
 https://github.com/tkf/emacs-request
 #+begin_src emacs-lisp :results output silent
		 (package-refresh-contents)
		 (use-package request
			 :ensure t
			 ;; :custom
			 ;; (reverse-im-input-methods '("russian-computer"))
			 ;; :config
			 ;; (reverse-im-mode t)
		 )
 #+end_src
***** Docs 
****** https://github.com/tkf/emacs-request
******* request.el -- an elisp HTTP library
 Uses curl as its backend or Emacs's native url.el library if curl is not found.

 The default encoding for requests is utf-8. Please explicitly specify :encoding 'binary for binary data.
 Install

 As described in Getting started, ensure melpa's whereabouts in init.el or .emacs:

 (add-to-list 'package-archives '("melpa" . "https://melpa.org/packages/"))

 Then

 M-x package-refresh-contents RET
 M-x package-install RET request RET

 Alternatively, directly clone this repo and make install.
******* Examples
******** GET:

	(request "http://httpbin.org/get"
		:params '(("key" . "value") ("key2" . "value2"))
		:parser 'json-read
		:success (cl-function
							(lambda (&key data &allow-other-keys)
								(message "I sent: %S" (assoc-default 'args data)))))
******** POST:

	(request "http://httpbin.org/post"
		:type "POST"
		:data '(("key" . "value") ("key2" . "value2"))
		;; :data "key=value&key2=value2"  ;; this is equivalent
		:parser 'json-read
		:success (cl-function
							(lambda (&key data &allow-other-keys)
								(message "I sent: %S" (assoc-default 'form data)))))
******** Block until completion:

	(request "http://httpbin.org/get"
		:sync t
		:complete (cl-function
							(lambda (&key response &allow-other-keys)
								(message "Done: %s" (request-response-status-code response)))))
******** 	Curl authentication:

	(request "http://httpbin.org/get"
		:auth "digest" ;; or "basic", "anyauth", etc., which see curl(1)
		:complete (cl-function
							 (lambda (&key response &allow-other-keys)
								 (message "Done: %s" (request-response-status-code response)))))
******** 	Request binary data:

	(request "http://httpbin.org/get"
		:encoding 'binary
		:complete (cl-function
							 (lambda (&key response &allow-other-keys)
								 (message "Done: %s" (request-response-status-code response)))))
******** 	POST file 
(WARNING: it will send the contents of the current buffer!):
	(request "http://httpbin.org/post"
		:type "POST"
		:files `(("current buffer" . ,(current-buffer)))
		:parser 'json-read
		:success (cl-function
							(lambda (&key data &allow-other-keys)
								(message "I sent: %S" (assoc-default 'files data)))))
******** 	Rich callback dispatch (like jQuery.ajax):
	(request "http://httpbin.org/status/418"
		;; "http://httpbin.org/status/200"  ;; success callback will be called.
		;; "http://httpbin.org/status/400"  ;; you will see "Got 400."
		:parser 'buffer-string
		:success
		(cl-function (lambda (&key data &allow-other-keys)
									 (when data
										 (with-current-buffer (get-buffer-create "*request demo*")
											 (erase-buffer)
											 (insert data)
											 (pop-to-buffer (current-buffer))))))
		:error
		(cl-function (lambda (&rest args &key error-thrown &allow-other-keys)
									 (message "Got error: %S" error-thrown)))
		:complete (lambda (&rest _) (message "Finished!"))
		:status-code '((400 . (lambda (&rest _) (message "Got 400.")))
									 (418 . (lambda (&rest _) (message "Got 418.")))))
******** 	Flexible PARSER option:
	(request "https://github.com/tkf/emacs-request/commits/master.atom"
		;; Parse XML in response body:
		:parser (lambda () (libxml-parse-xml-region (point) (point-max)))
		:success (cl-function
							(lambda (&key data &allow-other-keys)
								;; Just don't look at this function....
								(let ((get (lambda (node &rest names)
														 (if names
																 (apply get
																				(first (xml-get-children
																								node (car names)))
																				(cdr names))
															 (first (xml-node-children node))))))
									(message "Latest commit: %s (by %s)"
													 (funcall get data 'entry 'title)
													 (funcall get data 'entry 'author 'name))))))
******** 	PUT JSON data:
	(request "http://httpbin.org/put"
		:type "PUT"
		:data (json-encode '(("key" . "value") ("key2" . "value2")))
		:headers '(("Content-Type" . "application/json"))
		:parser 'json-read
		:success (cl-function
							(lambda (&key data &allow-other-keys)
								(message "I sent: %S" (assoc-default 'json data)))))
******** 	PUT JSON data including non-ascii strings:
	(request "http://httpbin.org/put"
		:type "PUT"
		:data (json-encode '(("key" . "値1") ("key2" . "値2")))
		:headers '(("Content-Type" . "application/json"))
		:parser 'json-read
		:encoding 'utf-8
		:success (cl-function
							(lambda (&key data &allow-other-keys)
								(message "I sent: %S" (assoc-default 'json data)))))
******** Another PUT JSON example : 
	Another PUT JSON example (nested JSON using alist structure, how to represent a boolean & how to selectively evaluate lisp):

	;; (1) Prepend alist structure with a backtick (`) rather than single quote (')
	;;     to allow elisp evaluation of selected elements prefixed with a comma (,)
	;; (2) This value is expected as a boolean so use the nil / t elisp alist denotation
	;; (3) The function will be evaluated as it has been prefixed with a comma (,)
	(request "http://httpbin.org/put"
		:type "PUT"
		:data (json-encode `(("jsonArray" . (("item1" . "value 1") ;; (1)
																				 ("item2" . t)         ;; (2)
																				 ("item3" . ,(your-custom-elisp-function)))))) ;; (3)
		:headers '(("Content-Type" . "application/json"))
		:parser 'json-read
		:success (cl-function
							(lambda (&key data &allow-other-keys)
								(message "I sent: %S" (assoc-default 'json data)))))
******** 	GET with Unix domain socket data:
	(request "http:/hello.txt"
		:unix-socket "/tmp/app.sock"
		:parser (lambda () (buffer-string))
		:success (cl-function
							(lambda (&key data &allow-other-keys)
								(message "Got: %s" data))))
******* Legacy documentation

			Github Pages <http://tkf.github.com/emacs-request/>
****** Request.el – Easy HTTP request for Emacs Lisp 
— Request.el 0.2.0 documentation
https://tkf.github.io/emacs-request/
******* What is it?
Request.el is a HTTP request library with multiple backends. It supports url.el which is shipped with Emacs and curl command line program. User can use curl when s/he has it, as curl is more reliable than url.el. Library author can use request.el to avoid imposing external dependencies such as curl to users while giving richer experience for users who have curl.

As request.el is implemented in extensible manner, it is possible to implement other backend such as wget. Also, if future version of Emacs support linking with libcurl, it is possible to implement a backend using it. Libraries using request.el automatically can use these backend without modifying their code.

Request.el also patches url.el dynamically, to fix bugs in url.el. See monkey patches for url.el for the bugs fixed by request.el.
Examples
******* GET:
(request
 "http://httpbin.org/get"
 :params '(("key" . "value") ("key2" . "value2"))
 :parser 'json-read
 :success (cl-function
 (lambda (&key data &allow-other-keys)
             (message "I sent: %S" (assoc-default 'args data)))))
******* POST:
(request
 "http://httpbin.org/post"
 :type "POST"
 :data '(("key" . "value") ("key2" . "value2"))
 ;; :data "key=value&key2=value2"  ; this is equivalent
 :parser 'json-read
 :success (cl-function
 (lambda (&key data &allow-other-keys)
             (message "I sent: %S" (assoc-default 'form data)))))
******* POST file
 (WARNING: it will send the contents of the current buffer!):
(request
 "http://httpbin.org/post"
 :type "POST"
 :files `(("current buffer" . ,(current-buffer))
          ("data" . ("data.csv" :data "1,2,3\n4,5,6\n")))
 :parser 'json-read
 :success (cl-function
 (lambda (&key data &allow-other-keys)
             (message "I sent: %S" (assoc-default 'files data)))))
******* Rich callback dispatch (like jQuery.ajax):
(request
 "http://httpbin.org/status/418"     ; try other codes, for example:
 ;; "http://httpbin.org/status/200"  ; success callback will be called.
 ;; "http://httpbin.org/status/400"  ; you will see "Got 400."
 :parser 'buffer-string
 :success
 (cl-function (lambda (&key data &allow-other-keys)
 (when data
                (with-current-buffer (get-buffer-create "*request demo*")
                  (erase-buffer)
                  (insert data)
                  (pop-to-buffer (current-buffer))))))
 :error
 (cl-function (lambda (&key error-thrown &allow-other-keys&rest _)
 (message "Got error: %S" error-thrown)))
 :complete (lambda (&rest _) (message "Finished!"))
 :status-code '((400 . (lambda (&rest _) (message "Got 400.")))
                (418 . (lambda (&rest _) (message "Got 418.")))))
******* Flexible PARSER option:
(request
 "https://github.com/tkf/emacs-request/commits/master.atom"
 ;; Parse XML in response body:
 :parser (lambda () (libxml-parse-xml-region (point) (point-max)))
 :success (cl-function
 (lambda (&key data &allow-other-keys)
             ;; Just don't look at this function....
             (let ((get (lambda (node &rest names)
                          (if names
                              (apply get
                                     (first (xml-get-children
                                             node (car names)))
                                     (cdr names))
                            (first (xml-node-children node))))))
               (message "Latest commit: %s (by %s)"
                        (funcall get data 'entry 'title)
                        (funcall get data 'entry 'author 'name))))))
******* PUT JSON data:
(request
 "http://httpbin.org/put"
 :type "PUT"
 :data (json-encode '(("key" . "value") ("key2" . "value2")))
 :headers '(("Content-Type" . "application/json"))
 :parser 'json-read
 :success (cl-function
 (lambda (&key data &allow-other-keys)
             (message "I sent: %S" (assoc-default 'json data)))))


**** tts-editor : 
***** load
#+begin_src emacs-lisp results output silent
	(load "~/ELs/tts/tts-editor/tts-editor.el")
	(load "~/ELs/BuYn/tts.el")
#+end_src
#+begin_src emacs-lisp results output silent
	(find-file-other-frame "~/ELs/BuYn/tts.el")
#+end_src
D:\Development\lisp\Home\ELs\tts\tts-editor\tts-editor.el 
***** docs 
****** git
******* Installation
				#+begin_src emacs-lisp results output silent
 (use-package
     :straight (tts-editor :type git
                           :host github
                           :repo "dangersalad/emacs-tts-editor")
     :commands (tts-editor/listen-start
								tts-editor/listen-stop))
				#+end_src
*******  Usage
 Start the server with M-x tts-editor/listen-start. You will see messages and other information in the *tts-editor* buffer.

 In the generated buffers, the C-x C-s keybinding will performe a “Save and Play” on all of the script/UI files and reload them all. To save your buffers to your file system, you can use the C-x C-w (write-file) binding.

 You can use M-x tts-editor/reload to reload the files in the current save.

 M-x tts-editor/listen-stop will close the server and remove all script buffers.

**** multiple-cursors.el
***** install
****** use-package : 
 multiple-cursors
 #+begin_src emacs-lisp :results output silent
	 ;; (package-refresh-contents)
	 (use-package multiple-cursors :ensure t
		 :config
		 (define-key evil-visual-state-map "zi" 'mc/edit-lines)
		 (define-key evil-visual-state-map "zn" 'mc/mark-next-like-this)
		 (define-key evil-visual-state-map "zp" 'mc/mark-previous-like-this)
		 (define-key evil-visual-state-map "zo" 'mc/mark-all-like-this)
		 (define-key evil-visual-state-map "zN" 'mc/skip-to-next-like-this)
		 (define-key evil-visual-state-map "zP" 'mc/skip-to-previous-like-this)
		 (define-key evil-visual-state-map "zI" 'mc/mark-all-in-region)
		 (define-key evil-visual-state-map "zO" 'mc/mark-all-like-this-in-defun)
		 (define-key evil-visual-state-map "z1" 'mc/insert-numbers)
		 )
 #+end_src

***** test 
asdf asdf
ываываываasdf a1s1f
aываsdf aываsdf asdf asdf
asdf 0121sdf 1asdf asdf
asdf asdf asdf asdf
asdf asdf
asdf asdf asdf
asdf asdf
asdf 0a121sdf 1asdf asdf
asdf asdf asdf asdf
asdf asdf
asdf asdf asdf
asdf asdf
asdf asdf asdf asdf
asdf asdf asdf asdf
asdf asdf
asdf asdf asdf asdf

***** Docs
****** github.com : 
******* Multiple cursors : 
 https://github.com/magnars/multiple-cursors.el
	Multiple cursors for Emacs. This is some pretty crazy functionality, so yes, there are
	kinks. Don't be afraid though, I've been using it since 2011 with great success and
	much merriment.
******** Maintenance warning
	 I use this package every day, and have been doing so for years. It just works. At
	 least, it works for all my use cases. And if it breaks somehow, I fix it.

	 However, it has become painfully clear to me that I don't have time to fix problems I
	 don't have. It's been years since I could keep pace with the issues and pull requests.
	 Whenever I try, I keep getting feedback that my fix isn't good enough by some
	 standard I don't particularly care about.

	 So, I have closed the issue tracker and the pull requests. I hope you can happily use
	 this package, just like I do. If it doesn't work for you, then I'm sorry. Thankfully Emacs
	 is infinitely malleable, you can probably fix it yourself.

	 TLDR: I am still maintaining this package, but I am no longer crowdsourcing a list of
	 issues.
******* Installation
	I highly recommend installing multiple-cursors through package.el.
	It's available on [[http://melpa.org/][MELPA]] and [[http://stable.melpa.org][MELPA Stable]]:

	M-x package-install multiple-cursors

	The package depends on the cl-lib package, so if you do not use package.el or
	have a recent Emacs, you would need to install that too: see [[http://elpa.gnu.org/packages/cl-lib.html][GNU ELPA]].
******* Basic usage
******** Start out : 
	Start out with:
	(require 'multiple-cursors)

	Then you have to set up your keybindings - multiple-cursors doesn't presume to know
	how you'd like them laid out. Here are some examples:

	When you have an active region that spans multiple lines, the following will add a
	cursor to each line:

	(global-set-key (kbd "C-S-c C-S-c") 'mc/edit-lines)

	When you want to add multiple cursors not based on continuous lines, but based on
	keywords in the buffer, use:

	(global-set-key (kbd "C->") 'mc/mark-next-like-this)
	(global-set-key (kbd "C-<") 'mc/mark-previous-like-this)
	(global-set-key (kbd "C-c C-<") 'mc/mark-all-like-this)

	First mark the word, then add more cursors.

	To get out of multiple-cursors-mode, press <return> or C-g. The latter will first
	disable multiple regions before disabling multiple cursors. If you want to insert a
	newline in multiple-cursors-mode, use C-j.
******** Important note
	Multiple cursors does not do well when you invoke its commands with M-x. It needs to
	be bound to keys to work properly. Pull request to fix this is welcome.
******** Video
	You can [[http://emacsrocks.com/e13.html][watch an intro to multiple-cursors at Emacs Rocks]].
******* Command overview
******** Mark one more occurrence
 ,* mc/mark-next-like-this: Adds a cursor and region at the next part of the buffer
	forwards that matches the current region.
 ,* mc/mark-next-like-this-word: Adds a cursor and region at the next part of the
	buffer forwards that matches the current region, if no region is selected it selects
	the word at the point.
 ,* mc/mark-next-like-this-symbol: Adds a cursor and region at the next part of the
	buffer forwards that matches the current region, if no region is selected it selects
	the symbol at the point.
 ,* mc/mark-next-word-like-this: Like mc/mark-next-like-this but only for whole
	words.
 ,* mc/mark-next-symbol-like-this: Like mc/mark-next-like-this but only for
	whole symbols.
 ,* mc/mark-previous-like-this: Adds a cursor and region at the next part of the
	buffer backwards that matches the current region.
 ,* mc/mark-previous-like-this-word: Adds a cursor and region at the next part of
	the buffer backwards that matches the current region, if no region is selected it
	selects the word at the point.
 ,* mc/mark-previous-like-this-symbol: Adds a cursor and region at the next part
	of the buffer backwards that matches the current region, if no region is selected it
	selects the symbol at the point.
 ,* mc/mark-previous-word-like-this: Like mc/mark-previous-like-this but only
	for whole words.
 ,* mc/mark-previous-symbol-like-this: Like mc/mark-previous-like-this but
	only for whole symbols.
 ,* mc/mark-more-like-this-extended: Use arrow keys to quickly mark/skip
	next/previous occurrences.
 ,* mc/add-cursor-on-click: Bind to a mouse event to add cursors by clicking. See
	tips-section.
 ,* mc/mark-pop: Set a cursor at the current point and move to the next (different)
	position on the mark stack. This allows for fine grained control over the placement
	of cursors.
******** Juggle around with the current cursors
 ,* mc/unmark-next-like-this: Remove the cursor furthest down in the buffer.
 ,* mc/unmark-previous-like-this: Remove the cursor furthest up in the buffer.
 ,* mc/skip-to-next-like-this: Remove the cursor furthest down, marking the next
	occurrence down.
 ,* mc/skip-to-previous-like-this: Remove the cursor furthest up, marking the
	next occurrence up.
******** Mark many occurrences
 ,* mc/edit-lines: Adds one cursor to each line in the current region.
 ,* mc/edit-beginnings-of-lines: Adds a cursor at the start of each line in the
	current region.
 ,* mc/edit-ends-of-lines: Adds a cursor at the end of each line in the current
	region.
 ,* mc/mark-all-like-this: Marks all parts of the buffer that matches the current
	region.
 ,* mc/mark-all-words-like-this: Like mc/mark-all-like-this but only for whole
	words.
 ,* mc/mark-all-symbols-like-this: Like mc/mark-all-like-this but only for whole
	symbols.
 ,* mc/mark-all-in-region: Prompts for a string to match in the region, adding
	cursors to all of them.
 ,* mc/mark-all-like-this-in-defun: Marks all parts of the current defun that
	matches the current region.
 ,* mc/mark-all-words-like-this-in-defun: Like
	mc/mark-all-like-this-in-defun but only for whole words.
 ,* mc/mark-all-symbols-like-this-in-defun: Like
	mc/mark-all-like-this-in-defun but only for whole symbols.
 ,* mc/mark-all-dwim: Tries to be smart about marking everything you want. Can be
	pressed multiple times.
******** Special
 ,* set-rectangular-region-anchor: Think of this one as set-mark except you're
	marking a rectangular region.
 ,* mc/mark-sgml-tag-pair: Mark the current opening and closing tag.
 ,* mc/insert-numbers: Insert increasing numbers for each cursor, top to bottom.
 ,* mc/insert-letters: Insert increasing letters for each cursor, top to bottom.
 ,* mc/sort-regions: Sort the marked regions alphabetically.
 ,* mc/reverse-regions: Reverse the order of the marked regions.
******* Tips and tricks
 ,* To get out of multiple-cursors-mode, press <return> or C-g. The latter will first
	disable multiple regions before disabling multiple cursors. If you want to insert a
	newline in multiple-cursors-mode, use C-j.

 ,* (define-key mc/keymap (kbd "<return>") nil) will make <return> insert a
	newline; multiple-cursors-mode can still be disabled with C-g.

 ,* Sometimes you end up with cursors outside of your view. You can scroll the screen
	to center on each cursor with C-v and M-v or you can press C-' to hide all lines
	without a cursor, press C-' again to unhide.

 ,* Try pressing mc/mark-next-like-this with no region selected. It will just add a
	cursor on the next line.

 ,* Try pressing mc/mark-next-like-this-word or mc/mark-next-like-this-symbol
	with no region selected. It will mark the word or symbol and add a cursor at the
	next occurrence

 ,* Try pressing mc/mark-all-like-this-dwim on a tagname in html-mode.

 ,* Notice that the number of cursors active can be seen in the modeline.

 ,* If you get out of multiple-cursors-mode and yank - it will yank only from the kill-ring
	of main cursor. To yank from the kill-rings of every cursor use yank-rectangle,
	normally found at C-x r y.

 ,* You can use mc/reverse-regions with nothing selected and just one cursor. It will
	then flip the sexp at point and the one below it.

 ,* When you use mc/edit-lines, you can give it a positive or negative prefix to
	change how it behaves on too short lines.

 ,* If you would like to keep the global bindings clean, and get custom keybindings
	when the region is active, you can try [[https://github.com/fgallina/region-bindings-mode][region-bindings-mode]].

 BTW, I highly recommend adding mc/mark-next-like-this to a key binding that's
 right next to the key for er/expand-region.
******* Binding mouse events
 To override a mouse event, you will likely have to also unbind the down-mouse part of
 the event. Like this:

 (global-unset-key (kbd "M-<down-mouse-1>"))
 (global-set-key (kbd "M-<mouse-1>") 'mc/add-cursor-on-click)

 Or you can do like me and find an unused, but less convenient, binding:

 (global-set-key (kbd "C-S-<mouse-1>") 'mc/add-cursor-on-click)
******* Unknown commands
 Multiple-cursors uses two lists of commands to know what to do: the run-once list and
 the run-for-all list. It comes with a set of defaults, but it would be beyond silly to try and
 include all the known Emacs commands.

 So that's why multiple-cursors occasionally asks what to do about a command. It will
 then remember your choice by saving it in ~/.emacs.d/.mc-lists.el. You can
 change the location with:

 (setq mc/list-file "/my/preferred/file")

 NB! Make sure to do so before requiring multiple-cursors.

 It is possible to set multiple-cursors to "run-for-all" for every command except for
 those that are listed in mc/cmds-to-run-once. To enable this set
 mc/always-run-for-all to non-nil. Add commands to be run once to
 mc/cmds-to-run-once in ".mc-lists.el".
******* Known limitations
 ,* isearch-forward and isearch-backward aren't supported with multiple cursors. If you
	want this functionality, you can use [[https://github.com/zk-phi/phi-search][phi-search]].
 ,* Commands run with M-x won't be repeated for all cursors.
 ,* All key bindings that refer to lambdas are always run for all cursors. If you need to
	limit it, you will have to give it a name.
 ,* Redo might screw with your cursors. Undo works very well.

**** evil-mc
***** install
****** refresh-contents : 
 #+begin_src emacs-lisp :results output silent
(package-refresh-contents)
 #+end_src
****** use-package : 
evil-mc
 #+begin_src emacs-lisp :results output silent
		(use-package evil-mc :ensure t
	 :config
	 (global-evil-mc-mode  1) ;; enable
	 (define-key evil-visual-state-map "zi" 'evil-mc-make-cursor-in-visual-selection-end)
	 ;; (define-key evil-visual-state-map "zj" 'evil-mc-make-cursor-move-next-line)
	 ;; (define-key evil-visual-state-map "zk" 'evil-mc-make-cursor-move-prev-line)
	 ;; (define-key evil-visual-state-map "zn" 'evil-mc-skip-and-goto-next-match)
	 ;; (define-key evil-visual-state-map "zp" 'evil-mc-skip-and-goto-prev-match)
	 ;; (define-key evil-visual-state-map "zN" 'evil-mc-skip-and-goto-next-cursor)
	 ;; (define-key evil-visual-state-map "zP" 'evil-mc-skip-and-goto-prev-cursor)
	 (define-key evil-visual-state-map "zo" 'evil-mc-make-all-cursors)
	 (define-key evil-visual-state-map "zI" 'evil-mc-make-cursor-in-visual-selection-beg)
	 (define-key evil-visual-state-map "zq" 'evil-mc-undo-all-cursors)
	 )
 #+end_src
****** other : 
 #+begin_src emacs-lisp :tangle yes
	(use-package read-aloud
		:ensure t)
 #+end_src

 #+begin_src emacs-lisp :tangle yes
	 (load "~/ELs/text-to-speech/read-aloud/read-aloud.el")
 #+end_src
 #+RESULTS:
 : t
***** test 
asdf asdf
asdf asdf
asdf asdf
asdf asdf asdf asdf
asdf asdf
asdf asdf
asdf asdf
asdf asdf asdf asdf
asdf asdf asdf asdf
asdf asdf asdf asdf
asdf asdf
asdf asdf asdf asdf
asdf asdf
asdf asdf asdf asdf
asdf asdf
asdf asdf asdf asdf

***** Docs
****** my
******* from el 
			(define-key map (kbd "m") 'evil-mc-make-all-cursors)
			(define-key map (kbd "u") 'evil-mc-undo-last-added-cursor)
			(define-key map (kbd "q") 'evil-mc-undo-all-cursors)
			(define-key map (kbd "s") 'evil-mc-pause-cursors)
			(define-key map (kbd "r") 'evil-mc-resume-cursors)
			(define-key map (kbd "f") 'evil-mc-make-and-goto-first-cursor)
			(define-key map (kbd "l") 'evil-mc-make-and-goto-last-cursor)
			(define-key map (kbd "h") 'evil-mc-make-cursor-here)
			(define-key map (kbd "j") 'evil-mc-make-cursor-move-next-line)
			(define-key map (kbd "k") 'evil-mc-make-cursor-move-prev-line)
			(define-key map (kbd "N") 'evil-mc-skip-and-goto-next-cursor)
			(define-key map (kbd "P") 'evil-mc-skip-and-goto-prev-cursor)
			(define-key map (kbd "n") 'evil-mc-skip-and-goto-next-match)
			(define-key map (kbd "p") 'evil-mc-skip-and-goto-prev-match)
			(define-key map (kbd "I") 'evil-mc-make-cursor-in-visual-selection-beg)
			(define-key map (kbd "A") 'evil-mc-make-cursor-in-visual-selection-end)
			map))

	(defvar evil-mc-key-map
		(let ((map (make-sparse-keymap)))
			(evil-define-key* '(normal visual) map
												(kbd "gr") evil-mc-cursors-map
												(kbd "M-n") 'evil-mc-make-and-goto-next-cursor
												(kbd "M-p") 'evil-mc-make-and-goto-prev-cursor
												(kbd "C-n") 'evil-mc-make-and-goto-next-match
												(kbd "C-t") 'evil-mc-skip-and-goto-next-match
												(kbd "C-p") 'evil-mc-make-and-goto-prev-match)
****** github.com : 
******* evil-mc
 ▓█████ ██▒   █▓ ██▓ ██▓        ███▄ ▄███▓ ▄████▄  
 ▓█   ▀▓██░   █▒▓██▒▓██▒       ▓██▒▀█▀ ██▒▒██▀ ▀█  
 ▒███   ▓██  █▒░▒██▒▒██░       ▓██    ▓██░▒▓█    ▄ 
 ▒▓█  ▄  ▒██ █░░░██░▒██░       ▒██    ▒██ ▒▓▓▄ ▄██▒
 ░▒████▒  ▒▀█░  ░██░░██████▒   ▒██▒   ░██▒▒ ▓███▀ ░
 ░░ ▒░ ░  ░ ▐░  ░▓  ░ ▒░▓  ░   ░ ▒░   ░  ░░ ░▒ ▒  ░
	░ ░  ░  ░ ░░   ▒ ░░ ░ ▒  ░   ░  ░      ░  ░  ▒   
		░       ░░   ▒ ░  ░ ░      ░      ░   ░        
		░  ░     ░   ░      ░  ░          ░   ░ ░      
						░                             ░        

 [[https://travis-ci.org/gabesoft/evil-mc][https://travis-ci.org/gabesoft/evil-mc.svg?branch=master]]
 [[http://melpa.org/#/evil-mc][http://melpa.org/packages/evil-mc-badge.svg?style=flat-square]]
 [[http://melpa.org/#/evil-mc][http://stable.melpa.org/packages/evil-mc-badge.svg?style=flat-square]]

 [[https://github.com/gabesoft/evil-mc#multiple-cursors-implementation-for-evil-mode][SVG Image]]Multiple cursors implementation for evil-mode

 [[https://github.com/gabesoft/evil-mc#synopsis][SVG Image]]Synopsis

 evil-mc provides multiple cursors functionality for Emacs when used with evil-mode
******* Usage
 Start with:
 (require 'evil-mc)
******** Local Setup
	To enable or disable evil-mc mode for a single buffer use:

	(evil-mc-mode  1) ;; enable
	(evil-mc-mode -1) ;; disable
******** Global Setup
	To enable or disable evil-mc mode for all buffers use:

	(global-evil-mc-mode  1) ;; enable
	(global-evil-mc-mode -1) ;; disable
******* Basic Usage
 The main commands used to create or delete cursors are:
 (evil-mc-make-all-cursors)
 ;; Create cursors for all strings that match the selected 
 ;; region or the symbol under cursor.
 (evil-mc-undo-all-cursors)
 ;; Remove all cursors.
 (evil-mc-make-and-goto-next-match)
 ;; Make a cursor at point and go to the next match of the 
 ;; selected region or the symbol under cursor.
 (evil-mc-skip-and-goto-next-match)
 ;; Go to the next match of the selected region or the symbol under 
 ;; cursor without creating a cursor at point.
 The above commands as well as others, detailed below, are setup with key bindings
 when the evil-mc mode is enabled. The keys are defined in evil-mc-key-map. You
 can take a look at that variable declaration in [[https://github.com/gabesoft/evil-mc/blob/master/evil-mc.el][evil-mc.el]] to see all key bindings. But, in
 short, C-n / C-p are used for creating cursors, and M-n / M-p are used for cycling
 through cursors. The commands that create cursors wrap around; but, the ones that
 cycle them do not. To skip creating a cursor forward use C-t or grn and backward
 grp. Finally use gru to “undo” the last added cursor, and grq to remove all cursors.
 Optionally set up visual mode keybindings for I and A to create cursors at the
 beginning or end of every visually selected line.
 (evil-define-key 'visual evil-mc-key-map
   "A" #'evil-mc-make-cursor-in-visual-selection-end
   "I" #'evil-mc-make-cursor-in-visual-selection-beg)

 For an example of setting up evil-mc see this [[https://github.com/gabesoft/evil-mc/blob/master/evil-mc-setup.el][setup file]]
******* Commands
 Here’s a detailed list of all commands used to create, navigate through, or delete
 cursors:
 All the commands below assume that there is a real cursor and possibly some fake
 cursors.

 (evil-mc-make-all-cursors)
 ;; Make a cursor for every match of the selected region or the symbol at point.

 (evil-mc-undo-all-cursors)
 ;; Remove all cursors.

 (evil-mc-undo-last-added-cursor)
 ;; Remove the last added cursor and move point to its position.

 (evil-mc-make-and-goto-next-match)
 ;; Make a cursor at point, and go to the next match of the 
 ;; selected region or the symbol at point.

 (evil-mc-make-and-goto-prev-match)
 ;; Make a cursor at point, and go to the previous match of the 
 ;; selected region or the symbol at point.

 (evil-mc-skip-and-goto-next-match)
 ;; Go to the next match of the selected region or symbol at point
 ;; without making a cursor at point. This command can be used to
 ;; remove unwanted cursors.

 (evil-mc-skip-and-goto-prev-match)
 ;; Go to the previous match of the selected region or symbol at point
 ;; without making a cursor at point. This command can be used to
 ;; remove unwanted cursors.

 (evil-mc-make-and-goto-prev-cursor)
 ;; Make a cursor at point and move point to the cursor
 ;; closest to it when searching backwards.

 (evil-mc-make-and-goto-next-cursor)
 ;; Make a cursor at point and move point to the cursor
 ;; closest to it when searching forwards.

 (evil-mc-skip-and-goto-prev-cursor)
 ;; Move point to the cursor closest to it when searching backwards
 ;; without making a cursor at point. This command can be used to
 ;; remove unwanted cursors.

 (evil-mc-skip-and-goto-next-cursor)
 ;; Move point to the cursor closest to it when searching forwards
 ;; without making a cursor at point. This command can be used to
 ;; remove unwanted cursors.

 (evil-mc-make-and-goto-first-cursor)
 ;; Make a cursor at point and move point to the cursor at the first position.

 (evil-mc-make-and-goto-last-cursor)
 ;; Make a cursor at point and move point to the cursor at the last position.

 (evil-mc-make-cursor-here)
 ;; Create a cursor at point. This command should be used with `evil-mc-pause-cursors'.

 (evil-mc-pause-cursors)
 ;; Pause all fake cursors. This can be used with `evil-mc-make-cursor-here'

 (evil-mc-resume-cursors)
 ;; Call to resume paused cursors.

 (evil-mc-make-cursor-in-visual-selection-beg)
 ;; Create cursors at the beginning of every visually selected line.

 (evil-mc-make-cursor-in-visual-selection-end)
 ;; Create cursors at the end of every visually selected line.
******* Customization
******** can be customized : 
 evil-mc can be customized in several ways:

 ,* Every known command is executed using a command handler defined in a variable
	called evil-mc-known-commands in [[https://github.com/gabesoft/evil-mc/blob/master/evil-mc-known-commands.el][evil-mc-known-commands.el]]. Those can be
	overridden by defining the evil-mc-custom-known-commands variable. See the
	documentation of that variable in [[https://github.com/gabesoft/evil-mc/blob/master/evil-mc.el][evil-mc.el]] for more info.
 ,* Some minor modes are incompatible with evil-mc. Those modes are defined in
	evil-mc-incompatible-minor-modes and can be overridden by defining that
	variable.
 ,* In addition there are two hooks that can be used to temporarily disable or enable
	additional functionality while there are multiple cursors active 
 evil-mc-before-cursors-created
 ;; this hook runs just before the first cursor is created

 evil-mc-after-cursors-created
 ;; this hook runs just after the last cursor is deleted
******** Mode line text and colors

	There are 4 variables, that can change the mode lines text, and its color.
******** Only one cursor

	The emc text can be hidden, by setting this variable to nil. (default: t)

	(setq evil-mc-one-cursor-show-mode-line-text t)
******** Two or more cursors, resumed (unpaused)

	The resumed mode line text, can have two different colors:

	,* The cursors color, when this variable is t.
	,* The default colors, when this variable is nil.

	(default: t)

	(setq evil-mc-mode-line-text-cursor-color t)
******** Two or more cursors, paused
	The (paused) text can be hidden, by setting this variable to nil. (default: t)

	(setq evil-mc-mode-line-text-paused t)

	The paused mode line text can have three different colors:

	,* Inverse colors, when the inverse colors variable is t.
	,* Cursors color, when the inverse colors variable is nil, and the cursor color variable
	 is t.
	,* Default colors, when both the inverse and cursor color variables are nil.

	(default: t, for both the inverse and cursor variables)

	(setq evil-mc-mode-line-text-inverse-colors t)
	(setq evil-mc-mode-line-text-cursor-color t)
******* Notes
 ,* Most evil motions and operators are supported but not every single command will
	work.
 ,* If the cursors don’t seem to work during a command, either the command is not
	known (see evil-mc-known-commands in [[https://github.com/gabesoft/evil-mc/blob/master/evil-mc-known-commands.el][evil-mc-known-commands.el]]) or some
	minor modes could be interfering with the evil-mc operations.
 ,* Issues and pull requests are welcome.
******** Debugging
	,* When a command does not work, and you want to get more information, you can
	 enable (or disable) debugging by running any of the commands below
	 interactively. 
	(evil-mc-executing-debug-on)
	;; Turn debug on while executing a command.

	(evil-mc-executing-debug-off)
	;; Turn debug off while executing a command.

	(evil-mc-recording-debug-on)
	;; Turn debug on while recording a command.

	(evil-mc-recording-debug-off)
	;; Turn debug off while recording a command.

	(evil-mc-all-debug-on)
	;; Turn all debug on.

	(evil-mc-all-debug-off)
	;; Turn all debug off.
******** Limitations
	,* After an undo command the cursors will return to their original positions if [[http://www.emacswiki.org/emacs/UndoTree][undo-tree]]
	 mode is enabled and evil-repeat has not been used.
	,* Redo may cause the real cursor to get out of sync with the others. This can be
	 worked around by setting a mark and returning to it after a redo.
	,* Jumps work if [[https://github.com/bling/evil-jumper][evil-jumper]] mode is enabled
	,* Search commands such as evil-search-forward, evil-search-backward, and
	 evil-search-next are not supported
******** Known issues
	,* Only named commands can be executed by the fake cursors.
	,* There could be a performance penalty when there are too many cursors (30+).
	,* Paste will not work when [[https://github.com/syl20bnr/spacemacs][spacemacs]]’ paste micro state is enabled. This is due to
	 the fact that evil-paste-pop and evil-paste-pop-next commands are not
	 supported.
	,* evil-repeat works only for some commands. In particular it doesn’t work for
	 delete. It will also interfere with the cursor positions during an undo or redo
	 operation.
**** chess.el

#+begin_src emacs-lisp :results output silent
 (package-refresh-contents)
 (package-install "chess.el"
 )
#+end_src
**** org-recipes
***** package-install : 
#+begin_src emacs-lisp :results output silent
;; (package-install "org-recipes")
;; (package-install `org-recipes)
#+end_src
***** use-package : 
 #+begin_src emacs-lisp :results output silent
(package-refresh-contents)
(use-package org-recipes :ensure t
	:load-path "~/ELs/Org/org-recipes"
	;; :load-path "~/ELs/"
	;; :init
	:config
	(setq org-recipes-file-list '("~/Org/recipes/main.org"))
)
 #+end_src
***** el 
#+begin_src emacs-lisp :results output silent
(find-file-other-frame "~/ELs/Org/org-recipes/org-recipes.el")
#+end_src
***** docs
****** org-recipes git : 
******* org-recipes - A code snippet navigator and collector with Org
This package collects code snippets under the inner-most Org heading. In the
context of this package, such an Org heading is called a Recipe. It provides the
following features:

,* List all Org headings with at least a code snippet.

,* Each entry can be visited for viewing.

,* Insert code from a recipes into the current buffer, or a specific file if the code block
 explicitly specifies. The description text is stripped and all code snippets are
 concatenated into a single snippet and then it is insert into current buffer.
  Compose recipes to generate code all at once.
******* file list : 
The snippets are retrieved by scanning the file list in org-recipes-file-list. If
org-wiki is available, it automatically retrieves the list from org-wiki.
******* Example
Suppose we have an org file with the following snippets:

,* Python
,** Recipes
,*** Find HTML tags with a Beautiful Soup object
API:

#+BEGIN_SRC python
  findAll(tag, attributes, recursive, text, limit, keywords)
  find(tag, attributes, recursive, text, keywords)
#+END_SRC

Example:

#+BEGIN_SRC python
     .findAll({"h1","h2","h3","h4","h5","h6"})
     .findAll("span", {"class":"green", "class":"red"})
     .findAll(text="the prince")
#+END_SRC

,*** Parse HTML/XML with BeautifulSoup
1. Get the HTML structure of a URL:
   #+BEGIN_SRC python
     html = urlopen("http://en.wikipedia.org"+articleUrl)
   #+END_SRC

2. Use BeautifulSoup to parse:
     #+BEGIN_SRC python
       bsObj = BeautifulSoup(html, "lxml")
     #+END_SRC

3. Then, retrieve any data with Python e.g. regex:

#+BEGIN_SRC python
  bsObj.find("div", {"id":"bodyContent"}).findAll("a",href=re.compile("^(/wiki/)((?!:).)*$"))
#+END_SRC

Then, running the command org-recipes will display it like this:

[[https://github.com/tuhdo/org-recipes/blob/master/helm-org-snippets.png][helm-org-snippets]]

Finally, pressing C-c i inserts the raw code under a heading:

findAll(tag, attributes, recursive, text, limit, keywords)
find(tag, attributes, recursive, text, keywords)
.findAll({"h1","h2","h3","h4","h5","h6"})
.findAll("span", {"class":"green", "class":"red"})
.findAll(text="the prince")
******* Why another snippet tool?
Have you ever encountered this recurring pattern when writing code:

,* You learned about the usage of a particular complex API; or, you happen to read
 an interesting piece of code in an open source project that you believe can be
 reused for the future; or you simply store common code snippets that is used
 everywhere e.g. code related to get command line options, code that open/close
 threads/processes...

,* As time passes, you forgot most of the knowledge what you acquired today. So,
 you store it in some sort of storage, e.g. a plain file, a Markdown file, a plain source
 file with comments, etc,.

,* However, as you accumulate many little snippets over the year, it is becoming
 more and more time consuming to search and retrieve the necessary snippets.
 Sometimes, it is faster just to type into the web browser that is always opened.

,* Once you retrieve the correct snippets, you want to copy and paste it into the main
 working buffer to start modify to suit the problem at hands. However, the snippets
 might not be free: a snippet can be divided into different sections, each with its
 own description to quickly remind you what this code snippet does.

,* You tediously copy/paste parts of a code snippet scattered in its file.

This package automates the above process. How about [[https://github.com/joaotavora/yasnippet][yasnippet]]? Despite being
similar, this package solves a different problem: it is a snippet navigator and
collector, leveraged by the powerful org-mode, while yasnippet is a templating
system. In my opinion, yasnippet is best for creating snippets of language syntaxes
e.g. templates for if, while... syntaxes in C, Java.

On the other hand, in org-recipe, each recipe can contain a code snippet similar to
yasnippet and more: the descriptive text that gives the context of the code, which
means everything that Org supports! By managing code snippets in such a way,
users can create their personal code wiki, but the relevant source code in the wiki
can immediately appear in the current working buffer, as demonstrated in the
Example section.

If you use [[https://github.com/caiorss/org-wiki][org-wiki]], all the wiki files are automatically used.
******* Usage
******** Recipe format
Each recipe is an Org heading, with code blocks in it:
,* Hello World recipe
:PROPERTIES:
:SYMBOL:   HelloWorld
:END:

This is a code block for inserting in the current working buffer:

#+begin_src python
print("Hello world")
#+end_src

This code block is also inserted in the current buffer:

#+begin_src python
print("Another hello world")
#+end_src

This is a code block for inserting in a file, as specified by :file parameter:

#+begin_src python :file "test.py"
print("File hello world")
#+end_src
******** Major mode filtering
To prevent unncessary snippets to appear in the list, you can put a keyword in an Org
file that explicitly specify which major modes the file is applicable, then only buffer
with such major modes will get the snippets from the Org file.

For example, at the very beginning, right after the title:

#+TITLE: C code snippets
#+MODE: c, c++

Then, the snippets in the file will only appear when the current buffer is in c-mode or
c++-mode.
******** Composite Recipe
An Org source block can be composed of various other recipes before or after its
main body. For example:

,* Process connection

#+begin_src c++ :pre-recipe '(PrepareSocket Bind Open Listen) :post-recipe '(CloseSocket)

....code for processing connections ...

#+end_src

When added with the parameter :pre-recipe, all recipes inside the list is inserted
before the main code body of the source block. Similarly, recipes in :post-recipe
are inserted after the main code body.

This feature enables reusability.
******** Option: org-recipes-file-list
This option is a list of files that org-recipes processes to retrieve the list of code
snippets.
******** Command: org-recipes
Run the command org-recipes to get all Org headings with snippets. Then, you can
either:

,* Run persistent action to view the snippet.
,* Press C-c i to insert the tangled source code in a heading.
******** Command: org-recipes-dwim
A recipe can be assigned with a name:

,* Hello World Recipe
:PROPERTIES:
:SYMBOL:   HelloWorld
:END:

This is a code block for inserting in the current working buffer:

#+begin_src python
print("Hello world")
#+end_src

The :SYMBOL: property gives a recipe a name. A command to expand code based
on the object at point. An object can either be:

,* A recipe name: in this case, the code snippet from the recipe with the name is
 inserted into theh current buffer, or a file (if a code snippet specifies). For
 example, when the cursor is on the symbol HelloWorld in a buffer, running
 org-recipes-dwim expands the code snippets in Hello World Recipe above.

,* A list that is a collection of multipole recipes: in this case, code snippets from all
 recipes are collected and inserted into current buffer (if a code snippet specifies).
 For example, if we have the recipe list: (RecipeA RecipeB RecipeC) in a buffer,
 when running org-recipes-dwim, all the snippets in the recipe list is inserted
 appropriately.
******* Future Plan
[[https://github.com/tuhdo/org-recipes#x-filter-snippets-by-major-mode][SVG Image]][X] Filter snippets by major mode

Currently, all code snippets from all Org files are retrieved. It should be filtered
according to major mode to only retrieve the relevant ones.

This can be done with two methods:

,* [X] Each Org file should be able to annotate that it is applicable for a major
 mode, so org-recipes can avoid unncessary parsing. If an Org file is not assigned
 to a major mode, then proceed as usual.

,* [X] Only source blocks that are relevant to the current major mode are retrieve.
***** open org-recipes
****** main 
#+begin_src emacs-lisp :results output silent
(find-file-other-frame "~/Org/recipes/main.org")
#+end_src
D:\Development\lisp\Home\ORG\Recipes\main.org 
**** gptel : 
***** use-package : 
(use-package gptel
 :ensure t
 :config
 (setq gptel-api-key "
")
 (setq gptel-default-mode 'org-mode)
)
*** Failed to verify signature archive-contents.sig:
(setq package-check-signature nil) 

(package-refresh-contents)
не инсталится как
(package-install gnu-elpa-keyring-update)
только как
download the package gnu-elpa-keyring-update and run the function with the same name, e.g. M-x package-install RET gnu-elpa-keyring-update RET.

(setq package-check-signature "allow-unsigned")

** setings
:PROPERTIES:
:ID:       12e089c2-d604-471e-9d1c-4157b4ffeb8f
:END:
*** systems paths
(setq exec-path (append exec-path '("D:/Development/CPP/CMake/bin/")))
	неменяет системную переменую только переменая емака взятая при запуске
(setenv "PATH" (concat (getenv "PATH") ";c:\\sw\\bin"))
(setq exec-path (append exec-path '("d:/sw/bin")))
	;; example of setting env var named “path”, by appending a new path to existing path

(setenv "PATH"
  (concat
   "C:/cygwin/usr/local/bin" ";"
   "C:/cygwin/usr/bin" ";"
   "C:/cygwin/bin" ";"
   (getenv "PATH")
  )
)
    You can use slash / and you don't have to use backslash \.
    Dir path may end with a path separator /, or without.
    the builtin variable path-separator can be used instead of ;.
;; show env var named path
(getenv "PATH")
*** for Source
(origami-mode)
(outline-minor-mode)
** линкс команды
	 C+c C+o
	[[shell:echo%20"hi%20Max"][Hello?]]
	[[shell:dir][Whera are u?]]
[[
shell:echo "dfgdfg max"
] [
Working?
]]
[[shell:echo "dfgdfg max"][Working?]]

[[shell:echo "dfgdfg max"]
[Working?]]
** Run windows command
*** dragon - Buyn.max
#+begin_src elisp :tangle yes
	(buyn-cmd-start "D:/inet/browser/Comodo/Dragon/dragon.exe https://mail.google.com/mail/u/0/#inbox")
#+end_src

#+RESULTS:
: #<window 134>

D:\inet\browser\Comodo\Dragon\dragon.exe
D:\inet\browser\Comodo\Dragon\dragon.exe https://mail.google.com/mail/u/0/#inbox
** String\buffer operation 
*** Removing blank lines in a buffer
How to remove blank lines and leave just one blank line in a buffer.
By Mickey Petersen
Updated for emacs 28

This is a frequent question so I figured I’d mention the solution here:

You want to remove all empty (blank) lines from a buffer. How do you do it? Well, it’s super easy.

Mark what you want to change (or use C-x h to mark the whole buffer) and run this:

M-x flush-lines RET ^$ RET

And you’re done. So what does that mean? Well, M-x flush-lines will flush (remove) lines that match a regular expression, and ^$ contain the meta-characters ^ for beginning of string and $ for end of string. Ergo, if the two meta-characters are next to eachother, it must be a blank line.

We can also generalize it further and remove lines that may have whitespace (only!) characters:

M-x flush-lines RET ^\s-*$ RET

In this case \s- is the syntax class (type C-h s to see your buffer’s syntax table) for whitespace characters. The * meta-character, in case you are not a regexp person, means zero or more of the preceding character.

Update – Pete Wilson asks: “How do you collapse multiple lines into one blank line?”.

That’s a bit harder, mostly because flush-lines only works well on whole, single lines. For multi-line processing you have two choices: you can abuse regexp, or you can use a macro. It’s fairly easy to do it with regexp in this case, but for more complex data-scrubbing I would use a macro; nevertheless, I will do it both ways*.

*I’m pretty sure my macro/regexp examples are general enough to work in all cases; but let me know if they aren’t

For the regexp approach I will use C-M-% (query-replace-regexp) and because I have to use a literal newline character I will use Emacs’s quoted-insert command, bound to C-q. So to insert a newline, you would type C-q C-j.

The ^J represents the literal newline or line feed character (see ASCII Control Characters on Wikipedia for more information).

So the text we want to search for looks like this:

Search For: ^^J\{2,\}
Replace With: ^J

So how does it work? Well, we tell Emacs to search for any two or more newlines that are at the beginning of a string – where each line is considered a string by Emacs – and because we search for two or more we skip the ones that only have a single newline. So if there are 10 newlines in a row, we replace them all in one fell swoop with a single newline. You can omit the replacement newline to remove them altogether!
* Help Docs Emacs
** Tools 
*** debuging : 
**** toggle-debug-on-error
(toggle-debug-on-error)
debug-on-error t
debug-on-error nil
**** Edebug
***** Instrumenting for Edebug : 
To debug a Lisp program with Edebug, you must first instrument the Lisp code that you want to debug. A simple way to do this is to first move point into the definition of a function or macro and then do C-u C-M-x (eval-defun with a prefix argument). See Instrumenting for Edebug, for alternative ways to instrument code.  
***** special commands of Edebug are available : 
The special commands of Edebug are available in the source code buffer in addition to the commands of Emacs Lisp mode. For example, you can type the Edebug command SPC to execute until the next stop point. If you type SPC once after entry to fac, here is the display you will see:

(defun fac (n)
=>(if ∗(< 0 n)
      (* n (fac (1- n)))
    1))

When Edebug stops execution after an expression, it displays the expression’s value in the echo area.

Other frequently used commands are ~b~ to set a breakpoint at a stop point, ~g~ to execute until a breakpoint is reached, and ~q~ to exit Edebug and return to the top-level command loop. Type ~?~ to display a list of all Edebug commands. 
~u~ unset brekepoint
***** command I : 
While Edebug is active, the command I (edebug-instrument-callee) instruments the definition of the function or macro called by the list form after point, if it is not already instrumented. This is possible only if Edebug knows where to find the source for that function; for this reason, after loading Edebug, eval-region records the position of every definition it evaluates, even if not instrumenting it. 
***** i command : 
See also the 
i command (see Jumping), which steps into the call after instrumenting the function. 
***** 19.2.4 Jumping
The commands described in this section execute until they reach a specified location. All except i make a temporary breakpoint to establish the place to stop, then switch to go mode. Any other breakpoint reached before the intended stop point will also stop execution. See Edebug Breakpoints, for the details on breakpoints.

These commands may fail to work as expected in case of nonlocal exit, as that can bypass the temporary breakpoint where you expected the program to stop.

h

    Proceed to the stop point near where point is (edebug-goto-here).
f

    Run the program for one expression (edebug-forward-sexp).
o

    Run the program until the end of the containing sexp (edebug-step-out).
i

    Step into the function or macro called by the form after point (edebug-step-in). 

The h command proceeds to the stop point at or after the current location of point, using a temporary breakpoint.

The f command runs the program forward over one expression. More precisely, it sets a temporary breakpoint at the position that forward-sexp would reach, then executes in go mode so that the program will stop at breakpoints.

With a prefix argument n, the temporary breakpoint is placed n sexps beyond point. If the containing list ends before n more elements, then the place to stop is after the containing expression.

You must check that the position forward-sexp finds is a place that the program will really get to. In cond, for example, this may not be true.

For flexibility, the f command does forward-sexp starting at point, rather than at the stop point. If you want to execute one expression from the current stop point, first type w (edebug-where) to move point there, and then type f.

The o command continues out of an expression. It places a temporary breakpoint at the end of the sexp containing point. If the containing sexp is a function definition itself, o continues until just before the last sexp in the definition. If that is where you are now, it returns from the function and then stops. In other words, this command does not exit the currently executing function unless you are positioned after the last sexp.

Normally, the h, f, and o commands display “Break” and pause for edebug-sit-for-seconds before showing the result of the form just evaluated. You can avoid this pause by setting edebug-sit-on-break to nil. See Edebug Options.

The i command steps into the function or macro called by the list form after point, and stops at its first stop point. Note that the form need not be the one about to be evaluated. But if the form is a function call about to be evaluated, remember to use this command before any of the arguments are evaluated, since otherwise it will be too late.

The i command instruments the function or macro it’s supposed to step into, if it isn’t instrumented already. This is convenient, but keep in mind that the function or macro remains instrumented unless you explicitly arrange to deinstrument it. 
***** different way to remove the instrumentation : 
A different way to remove the instrumentation from a definition is to use the edebug-remove-instrumentation command. It also allows removing the instrumentation from everything that has been instrumented. 
***** 19.2.9 Evaluation

While within Edebug, you can evaluate expressions as if Edebug were not running. Edebug tries to be invisible to the expression’s evaluation and printing. Evaluation of expressions that cause side effects will work as expected, except for changes to data that Edebug explicitly saves and restores. See The Outside Context, for details on this process.

e exp RET

    Evaluate expression exp in the context outside of Edebug (edebug-eval-expression). That is, Edebug tries to minimize its interference with the evaluation.
M-: exp RET

    Evaluate expression exp in the context of Edebug itself (eval-expression).
C-x C-e

    Evaluate the expression before point, in the context outside of Edebug (edebug-eval-last-sexp). With the prefix argument of zero (C-u 0 C-x C-e), don’t shorten long items (like strings and lists). 

Edebug supports evaluation of expressions containing references to lexically bound symbols created by the following constructs in cl.el: lexical-let, macrolet, and symbol-macrolet. 
***** 19.2.4 Jumping

The commands described in this section execute until they reach a specified location. All except i make a temporary breakpoint to establish the place to stop, then switch to go mode. Any other breakpoint reached before the intended stop point will also stop execution. See Edebug Breakpoints, for the details on breakpoints.

These commands may fail to work as expected in case of nonlocal exit, as that can bypass the temporary breakpoint where you expected the program to stop.

h

    Proceed to the stop point near where point is (edebug-goto-here).
f

    Run the program for one expression (edebug-forward-sexp).
o

    Run the program until the end of the containing sexp (edebug-step-out).
i

    Step into the function or macro called by the form after point (edebug-step-in). 

The h command proceeds to the stop point at or after the current location of point, using a temporary breakpoint.

The f command runs the program forward over one expression. More precisely, it sets a temporary breakpoint at the position that forward-sexp would reach, then executes in go mode so that the program will stop at breakpoints.

With a prefix argument n, the temporary breakpoint is placed n sexps beyond point. If the containing list ends before n more elements, then the place to stop is after the containing expression.

You must check that the position forward-sexp finds is a place that the program will really get to. In cond, for example, this may not be true.

For flexibility, the f command does forward-sexp starting at point, rather than at the stop point. If you want to execute one expression from the current stop point, first type w (edebug-where) to move point there, and then type f.

The o command continues out of an expression. It places a temporary breakpoint at the end of the sexp containing point. If the containing sexp is a function definition itself, o continues until just before the last sexp in the definition. If that is where you are now, it returns from the function and then stops. In other words, this command does not exit the currently executing function unless you are positioned after the last sexp.

Normally, the h, f, and o commands display “Break” and pause for edebug-sit-for-seconds before showing the result of the form just evaluated. You can avoid this pause by setting edebug-sit-on-break to nil. See Edebug Options.

The i command steps into the function or macro called by the list form after point, and stops at its first stop point. Note that the form need not be the one about to be evaluated. But if the form is a function call about to be evaluated, remember to use this command before any of the arguments are evaluated, since otherwise it will be too late.

The i command instruments the function or macro it’s supposed to step into, if it isn’t instrumented already. This is convenient, but keep in mind that the function or macro remains instrumented unless you explicitly arrange to deinstrument it. 
***** 19.2.6.1 Edebug Breakpoints

While using Edebug, you can specify breakpoints in the program you are testing: these are places where execution should stop. You can set a breakpoint at any stop point, as defined in Using Edebug. For setting and unsetting breakpoints, the stop point that is affected is the first one at or after point in the source code buffer. Here are the Edebug commands for breakpoints:

b

    Set a breakpoint at the stop point at or after point (edebug-set-breakpoint). If you use a prefix argument, the breakpoint is temporary—it turns off the first time it stops the program. An overlay with the edebug-enabled-breakpoint or edebug-disabled-breakpoint faces is put at the breakpoint.
u

    Unset the breakpoint (if any) at the stop point at or after point (edebug-unset-breakpoint).
U

    Unset any breakpoints in the current form (edebug-unset-breakpoints).
D

    Toggle whether to disable the breakpoint near point (edebug-toggle-disable-breakpoint). This command is mostly useful if the breakpoint is conditional and it would take some work to recreate the condition.
x condition RET

    Set a conditional breakpoint which stops the program only if evaluating condition produces a non-nil value (edebug-set-conditional-breakpoint). With a prefix argument, the breakpoint is temporary.
B

    Move point to the next breakpoint in the current definition (edebug-next-breakpoint). 

While in Edebug, you can set a breakpoint with b and unset one with u. First move point to the Edebug stop point of your choice, then type b or u to set or unset a breakpoint there. Unsetting a breakpoint where none has been set has no effect.

Re-evaluating or reinstrumenting a definition removes all of its previous breakpoints.

A conditional breakpoint tests a condition each time the program gets there. Any errors that occur as a result of evaluating the condition are ignored, as if the result were nil. To set a conditional breakpoint, use x, and specify the condition expression in the minibuffer. Setting a conditional breakpoint at a stop point that has a previously established conditional breakpoint puts the previous condition expression in the minibuffer so you can edit it.

You can make a conditional or unconditional breakpoint temporary by using a prefix argument with the command to set the breakpoint. When a temporary breakpoint stops the program, it is automatically unset.

Edebug always stops or pauses at a breakpoint, except when the Edebug mode is Go-nonstop. In that mode, it ignores breakpoints entirely.

To find out where your breakpoints are, use the B command, which moves point to the next breakpoint following point, within the same function, or to the first breakpoint if there are no following breakpoints. This command does not continue execution—it just moves point in the buffer. 
**** (debug) 
***** (debug) 
debug is an autoloaded interactive compiled Lisp function in
‘debug.el’.

(debug &rest ARGS)

  Probably introduced at or before Emacs version 1.2.

Enter debugger.  ‘c’ returns from the debugger.
Arguments are mainly for use when this is called from the internals
of the evaluator.

You may call with no args, or you may pass nil as the first arg and
any other args you like.  In that case, the list of args after the
first will be printed into the backtrace buffer.

If ‘inhibit-redisplay’ is non-nil when this function is called,
the debugger will not be entered.

[back]
***** debug-on-entry : 
debug-on-entry is an autoloaded interactive compiled Lisp function in
‘debug.el’.

(debug-on-entry FUNCTION)

  Probably introduced at or before Emacs version 1.2.

Request FUNCTION to invoke debugger each time it is called.

When called interactively, prompt for FUNCTION in the minibuffer.

This works by modifying the definition of FUNCTION.  If you tell the
debugger to continue, FUNCTION’s execution proceeds.  If FUNCTION is a
normal function or a macro written in Lisp, you can also step through
its execution.  FUNCTION can also be a primitive that is not a special
form, in which case stepping is not possible.  Break-on-entry for
primitive functions only works when that function is called from Lisp.

Use M-x cancel-debug-on-entry to cancel the effect of this command.
Redefining FUNCTION also cancels it.

[back]
***** backtrace : 
backtrace is an autoloaded compiled Lisp function in ‘backtrace.el’.

(backtrace)

  Probably introduced at or before Emacs version 1.2.

Print a trace of Lisp function calls currently active.
Output stream used is value of ‘standard-output’.

[back]
**** ielm : 
***** See ‘inferior-emacs-lisp-mode’ : 
ielm is an autoloaded interactive Lisp function in ‘ielm.el’.

(ielm &optional BUF-NAME)

  Probably introduced at or before Emacs version 19.24.

Interactively evaluate Emacs Lisp expressions.
Switches to the buffer named BUF-NAME if provided (‘*ielm*’ by default),
or creates it if it does not exist.
See ‘inferior-emacs-lisp-mode’ for details.

[back]
***** IELM: The Interactive Emacs-Lisp Mode C-c C-b

IELM is a hidden gem. No, really: I’ve met Emacs users with decades of experience who’ve never heard of it. It really is hidden.

And it’s a proper REPL. Type M-x ielm to launch it. It comes with all the useful features you would expect from an interactive shell:

Multi-line editing

    When you press RET IELM will check whether you did so at the end of the input, or in the middle. If it’s the latter, it’ll insert a newline and let you continue editing and writing. Great if you want to write multi-line code.

    In all other instances it’ll evaluate what you wrote.
Output Variables

    The variables *, ** and *** contain the last three outputs from the shell.
History

    ielm inherits from comint mode, although it talks to no external process. That means it inherits a lot of the core functionality present in comint mode. I’ve written about comint history commands before so I won’t repeat myself here.

Another useful feature is the concept of a working buffer - a buffer through which your changes are evaluated. If you type C-c C-b you can change ielm’s working buffer to one of your choosing and then all the code you evaluate thereafter is treated as if you executed it in the context of that buffer. So in this sense it works like M-:. Not only is it useful, it’s downright essential as some variables are local to a particular buffer or directory on your file system.

**** lisp-interaction-mode : 
***** (lisp-interaction-mode) : 
lisp-interaction-mode is an interactive compiled Lisp function in
‘elisp-mode.el’.
(lisp-interaction-mode)

  Parent mode: ‘emacs-lisp-mode’.
  Probably introduced at or before Emacs version 21.2.

Major mode for typing and evaluating Lisp forms.
Like Lisp mode except that M-x eval-print-last-sexp evals the Lisp expression
before point, and prints its value into the buffer, advancing point.
Note that printing is controlled by ‘eval-expression-print-length’
and ‘eval-expression-print-level’.
***** Commands:
Delete converts tabs to spaces as it moves back.
Paragraphs are separated only by blank lines.
Semicolons start comments.
***** key             binding
---             -------

C-j		eval-print-last-sexp
ESC		Prefix Command
DEL		backward-delete-char-untabify

C-M-i		completion-at-point
C-M-q		indent-pp-sexp
C-M-x		eval-defun

C-M-q		indent-sexp
  (that binding is currently shadowed by another mode)

C-M-q		prog-indent-sexp
  (that binding is currently shadowed by another mode)


***** hooks : 
In addition to any hooks its parent mode ‘emacs-lisp-mode’ might have run,
this mode runs the hook ‘lisp-interaction-mode-hook’, as the final or penultimate step
during initialization.

[back]
**** litable 
On-the-fly evaluation/substitution of emacs lisp code

Inspired by Light Table's similar feature.

To start this up, simply enable the litable minor mode in the buffer by calling M-x litable-mode.

Litable keeps a list of pure functions as a safeguard for unwanted evaluations. A function must first be accepted into this list (using M-x litable-accept-as-pure) before it can be evaluated on-the-fly. You should take care of what function you accept as pure to avoid any unfortunate accidents. Also, note that the pure functions list persists across sessions.

Not meant to be used in production yet, be warned!
In action

    Presentation of the basic prototype: http://www.youtube.com/watch?v=TgHvRcbYJ-8 [2:32] (you don't have to watch this)
    New features, less slow awkward typing: https://www.youtube.com/watch?v=mNO-vgq3Avg [1:50]
*** ediff : 
**** set vertical
I've been using ediff for about a year now, and always pressing "|" to switch from the default horizontal split to a vertical split.

Finally got around to customizing the vertical split to be the default one (last line in the config):

(custom-set-variables
 '(ediff-window-setup-function 'ediff-setup-windows-plain)
 '(ediff-diff-options "-w")
 '(ediff-split-window-function 'split-window-horizontally))

*** eShell
**** doc
***** commands
****** [so] Is it therefore possible to see what actual elisp is being invoked...
https://emacs.stackexchange.com/questions/14979/access-to-the-elisp-commands-behind-eshell-commands/14981#14981

Yes. They are all located in the eshell folder under Resources/elisp in the Emacs app folder. See screenshot of files on my computer. 


  So I'd like to have the actual elisp...


Open any of those files to see the actual elisp code. For example, ls command with its normal switches is implemented in em-ls.el file by John Wiegley and its core uses expand-file-name function.

How to find which lisp file provides what shell command? Open eshell prompt and then type, say you want to know where kill is in elisp:

which kill


will tell you that 

eshell/kill is a compiled Lisp function in `esh-proc.el'


What other commands are available in eshell?

see the [manual][2]



  there is no way I know of running eshell commands as Babel "code blocks."


There are no special eshell commands per se. Eshell mimics standard unix shell commands using existing lisp functions. You can invoke those same functions in org-babel lisp blocks without any mediating functions implemented in eshell. 
    
****** so find-function
        e.g.: M-x find-function RET eshell/ls RET

I like having find-function bound to C-hC-f as a variant on the standard describe-function binding (via which you can also indirectly get to the code, FYI).

You could also use the following:
#+BEGIN_SRC shell
(defun eshell/goto (name)
  "Visit the source code for the specified eshell command."
  (let ((func (eshell-find-alias-function name)))
    (if func
        (find-function func)
      (error "%s is not an elisp function" name))))
#+END_SRC
$ goto ls


If you want to know what's implemented in elisp and what isn't, you could just ask Emacs to complete on eshell/

e.g.: C-uC-ha eshell/ RET
***** mastering-eshell : 
https://www.masteringemacs.org/article/complete-guide-mastering-eshell
****** Useful Keybindings


Eshell comes equipped with a couple of quality-of-life improvements that make interacting with Emacs and Eshell a lot easier.

C-c M-b

    Inserts the printed buffer name at point
C-c M-i

    Inserts the printed process name at point
C-c M-v

    Inserts an environment variable name at point
C-c M-d

    Toggles between direct input and delayed input (send on RET).

    Useful for some programs that don’t work correctly with buffered input.
****** History Interaction

You can rewrite previous commands found in Eshell’s history. The syntax is similar to what you find in bash, but it’s just a subset of the most common features. It’s probably easier to refer you to the bash info manual for detailed information on how the history interaction works. I’ve included a small table below that describes most of the history syntax Eshell supports.

You may also want to read my article on Shell & Comint Secrets: History commands. Although it concerns comint-mode-derived things, it’s useful to know about anyway.

!!

    Repeats the last command
!ls

    Repeats the last command beginning with ls
!?ls

    Repeats the last command containing ls
!ls:n

    Extract the nth argument from the last command beginning with ls
!ls<tab>

    Using pcomplete, show completion results matches ls
^old^new

    Quick substitution. Using the last command, replaceold with new and run it again. Appears to be buggy.
$_

    Returns the last parameter in the last executed command.

Eshell also has some support for bash history modifiers (like !!:s/old/new/) and the bash reference on history interaction would be a good place to brush up on that.
****** Useful Elisp Commands

There are a number of useful Eshell commands that you should know about. You’re of course not limited to these commands, but they’re either really useful and general, or made specifically to plug a hole in Eshell’s feature set.

listify ARGS

    Parses an argument string into elisp list notation and prints it to the screen. It’s clever enough to handle both MS-DOS/Windows and POSIX-style argument syntax.

    $ listify 1 2 3
    (1 2 3)

addpath PATH

    Adds the argument, which must be a path, to the $PATH environment variable. If no argument is specified the existing paths are pretty-printed to the screen.

    $ addpath
    /usr/local/sbin/
    /usr/local/bin/
    [ ... ]

    $ addpath /opt/mypath/
    /usr/local/sbin:...:/opt/mypath/

unset ENV-VAR

    Unsets an existing environment variable
find-file FILE

    Finds the file FILE and opens it in Emacs. This function is Tramp aware and will therefore work remotely.
dired DIRECTORY

    Opens a dired buffer in DIRECTORY.
calc-eval EXPR

    Runs EXPR through the Emacs calculator.

    $ calc-eval (+ 1 2)
    3

    Note that it does not use Emacs’s hyper-advanced symbolic, reverse-polish notation calculator (bound to M-x calc or C-x * *)
upcase STR/downcase STR

    Converts STR to upper- or lowercase.
vc-dir DIRECTORY

    Reports the status of a version controlled directory (equivalent to the status command in most VCS)
magit

    Activates M-x magit’s status page for current working directory. (If you have Magit installed, that is!)

    If you have not used Magit for all your git needs, check out An introduction to Magit, an Emacs mode for Git.
ediff-files FILE1 FILE2

    Diffs FILE1 and FILE2 using ediff, one of Emacs’s diff engines.
find-name-dired DIR PATTERN

    Calls out to the external program find and asks it to find all PATTERN in DIR.

    Don’t forget to escape the glob patterns you pass to PATTERN. Single quotes work well.

Note that most commands work well over Tramp (more on that below) so you can definitely cd to a remote Tramp directory; invoke magit and get a magit status screen for a remote directory.
****** Subshells

There are two types of Emacs subshells. The first one is $( ... ) (also ( ... )) that evaluates Lisp.

You can use $() to in-line an elisp form and use its output in much the same way as you would in bash:

$ echo $(+ 1 2 3)
6

The only caveat here is you cannot use the backquote (backtick) to spawn a subshell, but that syntax was never universally supported anyway.

It’s also possible (though I would not recommend it, for there are cases where it does not work) to use a standard elisp form like this:

$ echo (+ 1 2 3)
6

But it does not work everywhere, so exercise caution.

The other is more like an actual subshell: ${ ... }. Note that it’s not as versatile as a regular subshell that you may know from bash and the like.

$ echo ${echo $(+ 1 2 3)}
6
****** TAB Completion

Eshell has its own completion system called pcomplete. Although newer versions of Emacs invoke the generic completion-at-point command, it internally still uses pcomplete for much of the command completion.

I have an article where I talk about PComplete: Context-Sensitive Completion in Emacs. If you ever want to extend Emacs’s shell completion – in newer Emacsen shell-mode also uses pcomplete behind the scenes – or understand how it works, then that article’s a good place to start.

The completion system is not fool-proof, and unlike your favorite external shell it does not come with an abundance of completion libraries for every conceivable binary.

Nevertheless, both TAB and C-M-i offer completion at point.

And don’t forget, Emacs has both M-x man and M-x woman for manual page lookup.
****** Bookmarks & Project Integration

Emacs’s extensive bookmarking facility also works with Eshell as of Emacs 28. Create a bookmark with C-x r m and you can recall it at will with C-x r l and friends.

I like this feature because you can bookmark directories and Emacs can open up an Eshell at the exact place you bookmarked.

Likewise, Emacs’s project management facility C-x p can open an Eshell in your project root with C-x p e.
****** Remote Access with Tramp

Tramp (Transparent Remote Access, Multiple Protocol) is a framework for communicating across different user accounts, servers, docker containers, and much more.

It’s handy, and works well. Tramp works – keeping it simple, here – by intercepting how Emacs interacts with files, directories and processes. Because it’s generic, it works with a huge range of Emacs’s features — features that are almost never coded explicitly with Tramp in mind.

Eshell works well with Tramp. Provided you follow Tramp’s connection notation, you can connect to any backend Tramp supports and interface with it using Eshell.

Here’s an example that changes directory to a remote server using SSH:

cd /ssh:bob@initech:/srv/tps-reports/

That incantation connects as user bob to the server initech and switches to its /srv/tps-reports/ directory. From that moment on, all interactions in Eshell take place through the lens of the remote connection you established through Tramp.

Tramp is not perfect; nor is Eshell. But a wide range of commands work beautifully well remotely. Note that unlike an ordinary SSH connection Tramp does, in actual fact, make distinct calls via SSH every time you carry out an action.

It’s not a longer-running session like you might expect, and although you can configure all of this, it’s worth bearing in mind that you’re reaching out and executing standalone actions, one at a time.

If you install the third-party package docker-tramp you can also cd straight into docker containers and act on them.

Using that method, you can combine it with multi-hopping, so you can SSH to a remote server then su to a different user; connect with docker; or something else entirely:

$ cd /ssh:initech|su:root@localhost:/
****** To Pseudo-Devices

Eshell reimplements the following pseudo-devices:

/dev/eshell

    Prints the output interactively to Eshell.
/dev/null

    Sends the output to the NULL device.
/dev/clip

    Sends the output to the clipboard.
/dev/kill

    Sends the output to the kill ring.

The usual redirection rules like overwrite (>) and append (>>) apply here.
****** Redirecting Pipes to a Buffer

Because Eshell has to reimplement pseudo-devices internally it is not at the mercy of dealing with just UNIX device files – it is actually capable of implementing its own pseudo-devices.

A good example would be redirection to a buffer of your choosing, and that can be done with the following syntax:

$ cat mylog.log >> #<buffer *scratch*>

This is where the ability to insert the printed format of a buffer comes in handy. The command C-c M-b from before does the job. There is another shorthand: #<*scratch*> that achieves the same outcome.

You can also output straight to an elisp variable (but be careful you don’t fry the wrong settings):

$ echo foo bar baz > #'myvar
$ echo $(cadr myvar)
bar

If you set eshell-buffer-shorthand to t you can use the shorthand #'*scratch* instead, but it means you will not be able to redirect straight to elisp symbols. I recommend you use C-c M-b and #<buffer-name-here> instead.
*** calc 
**** Starting and Stopping
start/stop either: C-x * *
start/stop standard Calc C-x * c
start/stop X keypad Calc C-x * k
stop standard Calc q
Calc tutorial C-x * t
run Calc in other window C-x * o
quick calculation in minibuffer C-x * q
**** ref
***** Arithmetic
add, subtract, multiply, divide +, -, *, /
raise to a power, nth root ^, I ^
change sign n
reciprocal 1/x &
square root √x Q
set precision p
round off last two digits c 2
convert to fraction, float c F, c f
enter using algebraic notation ’ 2+3*4
refer to previous result ’ 3*$^2
refer to higher stack entries ’ $1*$2^2
finish alg entry without evaluating LFD
set mode where alg entry used by default m a
***** Stack Commands
Here Sn is the nth stack entry, and N is the size of the stack.
key no prefix prefix n prefix −n
RET copy S1 copy S1..n copy Sn
LFD copy S2 copy Sn copy S1..n
DEL delete S1 delete S1..n delete Sn
M-DEL delete S2 delete Sn delete S1..n
TAB swap S1↔S2 roll S1 to Sn roll Sn to SN
M-TAB roll S3 to S1 roll Sn to S1 roll SN to Sn
With a 0 prefix, these copy, delete, or reverse the entire stack.
***** Variables
Variable names are single digits or whole words.
store to variable s t
store and keep on stack s s
recall from variable s r
shorthands for digit variables t n, s n, r n
unstore, exchange variable s u, s x
edit variable s e
***** Notations
scientific notation 6.02e23
minus sign in numeric entry _23 or 23 n
fractions 3:4
complex numbers (x, y)
polar complex numbers (r; θ)
vectors (commas optional) [1, 2, 3]
matrices (or nested vectors) [1, 2; 3, 4]
error forms (p key) 100 +/- 0.5
interval forms [2 .. 5)
modulo forms (M key) 6 mod 24
HMS forms 5@ 30’ 0"
date forms <Jul 4, 1992>
infinity, indeterminate inf, nan
***** Scientific Functions
ln, log10 , logb L, H L, B
exponential ex, 10x E, H E
sin, cos, tan S, C, T
arcsin, arccos, arctan I S, I C, I T
inverse, hyperbolic prefix keys I, H
two-argument arctan f T
degrees, radians modes m d, m r
pi (π) P
factorial, double factorial !, k d
combinations, permutations k c, H k c
prime factorization k f
next prime, previous prime k n, I k n
GCD, LCM k g, k l
random number, shuffle k r, k h
minimum, maximum f n, f x
error functions erf, erfc f e, I f e
gamma, beta functions f g, f b
incomplete gamma, beta functions f G, f B
Bessel Jν , Yν functions f j, f y
complex magnitude, arg, conjugate A, G, J
real, imaginary parts f r, f i
convert polar/rectangular c p
***** Financial Functions
enter percentage M-%
convert to percentage c %
percentage change b %
present value b P
future value b F
rate of return b T
number of payments b #
size of payments b M
net present value, int. rate of return b N, b I
Above computations assume payments at end of period. Use I
prefix for beginning of period, or H for a lump sum investment.
straight-line depreciation b S
sum-of-years’-digits b Y
double declining balance b D
***** Display
scroll horizontally, vertically < >, { }
home cursor o
line numbers on/off d l
trail display on/off t d
scientific notation d s
fixed-point notation d f
floating-point (normal) notation d n
group digits with commas d g
For display mode commands, H prefix prevents screen redraw
and I prefix temporarily redraws top of stack.
***** Units
enter with units ’ 55 mi/hr
convert to new units, base units u c, u b
convert temperature units u t
simplify units expression u s
view units table u v
***** Common units:
distance: m, cm, mm, km; in, ft, mi, mfi; point, lyr
volume: l or L, ml; gal, qt, pt, cup, floz, tbsp, tsp
mass: g, mg, kg, t; lb, oz, ton
time: s or sec, ms, us, ns, min, hr, day, wk
temperature: degC, degF, K
GNU Calc Reference Card
***** Programmer’s Functions
binary, octal, hex display d 2, d 8, d 6
decimal, other radix display d 0, d r
display leading zeros d z
entering non-decimal numbers 16#7FFF
binary word size b w
binary AND, OR, XOR b a, b o, b x
binary DIFF, NOT b d, b n
left shift b l
logical right shift b r
arithmetic right shift b R
integer quotient, remainder \, %
integer square root, logarithm f Q, f I
floor, ceiling, round to integer F, I F, R
***** Vector Operations
vector of 1, 2, . . . , n v x n
vector of n counts from a by b C-u v x
vector of copies of a value v b
concatenate into vector |
pack many stack items into vector v p
unpack vector or object v u
length of vector (list) v l
reverse vector v v
sort, grade vector V S, V G
histogram of vector data V H
extract vector element v r
matrix determinant, inverse V D, &
matrix transpose, trace v t, V T
cross, dot products V C, *
identity matrix v i
extract matrix row, column v r, v c
intersection, union, diff of sets V ^, V V, V -
cardinality of set V #
add vectors elementwise (i.e., map +) V M +
sum elements in vector (i.e., reduce +) V R +
sum rows in matrix V R _ +
sum columns in matrix V R : +
sum elements, accumulate results V U +
***** Algebra
enter an algebraic formula ’ 2x+3y^2
enter an equation ’ 2x^2=18
symbolic (vs. numeric) mode m s
fractions (vs. float) mode m f
suppress evaluation of formulas m O
return to default evaluation rules m D
“Big” display mode d B
C, Pascal, FORTRAN modes d C, d P, d F
TEX, LaTEX, eqn modes d T, d L, d E
Maxima d X
Unformatted mode d U
Normal language mode d N
simplify formula a s
put formula into rational form a n
evaluate variables in formula =
evaluate numerically N
let variable equal a value in formula s l x =val
declare properties of variable s d
Common decls: pos, int, real, scalar, [a..b ].
expand, collect terms a x, a c
factor, partial fractions a f, a a
polynomial quotient, remainder, GCD a \, a %, a g
derivative, integral a d, a i
taylor series a t
principal solution to equation(s) a S
list of solutions a P
generic solution H a S
apply function to both sides of eqn a M
rewrite formula a r
Example: a r a*b + a*c := a*(b+c)
Example: a r sin(x)^2 := 1-cos(x)^2
Example: a r cos(n pi) := 1 :: integer(n) :: n%2 = 0
Example: a r [f(0) := 1, f(n) := n f(n-1) :: n > 0]
Put rules in EvalRules to have them apply automatically.
Put rules in AlgSimpRules to apply during a s command.
Common markers: opt, plain, quote, eval, let, remember.
***** Numerical Computations
sum formula over a range a +
product of formula over a range a *
tabulate formula over a range a T
integrate numerically over a range a I
find zero of formula or equation a R
find local min, max of formula a N, a X
fit data to line or curve a F
mean of data in vector or variable u M
median of data H u M
geometric mean of data u G
sum, product of data u +, u *
minimum, maximum of data u N, u X
sample, pop. standard deviation u S, I u S
***** Selections
select subformula under cursor j s
select nth subformula j n
select more j m
unselect this, all formulas j u, j c
copy indicated subformula j RET
delete indicated subformula j DEL
commute selected terms j C
commute term leftward, rightward j L, j R
distribute, merge selection j D, j M
isolate selected term in equation j I
negate, invert term in context j N, j &
rewrite selected term j r
***** Graphics
graph function or data g f
graph 3D function or data g F
replot current graph g p
print current graph g P
add curve to graph g a
set number of data points g N
set line, point styles g s, g S
set log vs. linear x, y axis g l, g L
set range for x, y axis g r, g R
close graphics window g q
***** Programming
begin, end recording a macro C-x (, C-x )
replay keyboard macro X
read region as written-out macro C-x * m
if, else, endif Z [, Z :, Z ]
equal to, less than, member of a =, a <, a {
repeat n times, break from loop Z <, Z >, Z /
“for” loop: start, end; body, step Z (, Z )
save, restore mode settings Z ‘, Z ’
query user during macro Z #
put finished macro on a key Z K
define function with formula Z F
edit definition Z E
record user-defined command permanently Z P
record variable value permanently s p
record mode settings permanently m m
**** ref link
https://www.gnu.org/software/emacs/refcards/pdf/calccard.pdf

*** Shell
**** Описание 
используется для запуска других процесов
может сильно влиять на работу режимов
поскольку процес может запускатся из eshell
но при этом глючить в шеле
и как результат нечего не будет работать
просто потому что в винде
нужно заменить на чтонить другое
**** explicit-shell-file-name : 
You can start an interactive shell in Emacs by typing M-x shell. 
By default, this will start the standard Windows shell cmd.exe. 
Emacs uses the SHELL environment variable to determine which
program to use as the shell.  To instruct Emacs to use a non-default
shell, you can either set this environment variable, or customize
explicit-shell-file-name.  You can also customize
**** shell-file-name : 
shell-file-name to change the shell that will be used by
subprocesses that are started with shell-command and
related non-interactive shell commands.

"D:/Development/lisp/Emacs/libexec/emacs/26.2/x86_64-w64-mingw32/cmdproxy.exe"
Original value was 
"C:/msys64/home/Administrator/emacs-build/build/emacs-26.2/x86_64/nt/cmdproxy.exe"
**** to git hub
(setq explicit-shell-file-name "d:/Development/version-control.APP/Git/bin/sh.exe")
(setq shell-file-name "sh")
(setq explicit-sh.exe-args '("--noediting" "--login" "-i"))
(setenv "SHELL" shell-file-name)

# (setq explicit-sh.exe-args '("--login" "-i"))
# (add-hook 'comint-output-filter-functions 'comint-strip-ctrl-m)
**** Executing Shell Commands in Emacs
Instead of switching to your favorite shell to do some light command line-fu, why not ask Emacs to call out to your favorite shell programs instead? You can feed all or parts of your buffer through a program and capture the output in Emacs.
By Mickey Petersen
Updated for emacs 28

A common workflow is saving a file; modifying all or parts of it, somehow, on the command line; and then re-opening it in your favorite editor. But why not let Emacs do all the heavy lifting?

I have previously talked about running shells and terminal emulators in Emacs. But this time I want to talk about the other use case: executing shell commands against a region of text, and capturing the output for further editing in Emacs.
Executing Shell Commands

There’s a number of different shell commands – not to be confused with M-x shell, the Emacs inferior shell – and they are tightly integrated with Emacs’s buffer system.
The Basics

The simplest way to invoke something is to run the command shell-command, bound to the handy shortcut M-!. Any command you give it fed through an actual shell – so you gain the benefit of shell globbing with * and ? – and its output returned to you. If the output exceeds a certain size it’s sent to a separate buffer called *Shell Command Output*. Otherwise it’ll appear in the echo area.

Emacs displays the exit code of the finished command in the mode line if it is non-zero. Emacs does not distinguish between output from standard error or standard output: they’ll appear as it’s emitted by the underlying command. If you want standard error sent to its own buffer you must set shell-command-default-error-buffer to the name of a buffer you want it sent to.

By default Emacs executes the command synchronously. That is, the command blocks Emacs until the command has run its course. That’s probably not what you want for longer-running commands.

Instead you can append an ampersand (&) if your underlying shell supports job control. Alternatively you can use the dedicated command async-shell-command, bound to M-&,. The asynchronous version uses the buffer *Async Shell Command* for its output.

If you prefix the command with the universal argument, C-u, Emacs will insert the output of the shell command into the current buffer at point.
Shell Commands on Regions

Unlike the “normal” shell commands I explained before, this command works on regions of text. The region is sent via standard input to the command you give it, so you must ensure the command is capable of reading from standard input.

To use it, you can invoke either shell-command-on-region or its shortcut M-|. If you want Emacs to replace the region with the output returned from the command, you can again use the universal argument C-u.

Feeding a region into a command and inserting the output of that command back into a buffer is a nifty thing indeed. But if all you’re doing is, say, sorting text with sort then you should give Emacs’s own sort command a try.
Coding Systems and Unicode

One issue – it does not happen so frequently any more as everyone (in the west, anyway) is using UTF-8 – but if you get garbled characters or errors about the encoding or locale, you should read my article on working with coding systems and unicode in Emacs.
Invoking Shell Commands from Elisp

You can use the same commands you used in interactive mode in your elisp code, with the only catch that you have to fill out a few more parameters.

Here’s a commented example I wrote that marks the entire buffer and feeds it to tidy, a useful utility for cleaning up and formatting HTML and XML:

(defun tidy-html ()
  "Tidies the HTML content in the buffer using `tidy'"
  (interactive)
  (shell-command-on-region
   ;; beginning and end of buffer
   (point-min)
   (point-max)
   ;; command and parameters
   "tidy -i -w 120 -q"
   ;; output buffer
   (current-buffer)
   ;; replace?
   t
   ;; name of the error buffer
   "*Tidy Error Buffer*"
   ;; show error buffer?
   t))

As you can see, it’s a simple thing indeed to build your own function to do this. Instead of manually figuring out how to do this – if you’re new to elisp, it’s not always super obvious – I recommend you learn how you can repeat complex commands in Emacs. It’s a genial way of learning elisp.

Or if you prefer a no-code approach, then I recommend you try a keyboard macro instead. Keyboard macros can play back nearly everything.
**** Working with Coding Systems and Unicode in Emacs
Hwo to force Emacs to always use UTF-8 or other coding systems when you open files or interact with processes.
By Mickey Petersen
Updated for emacs 28

Dealing with unicode in Emacs is a daily task for me. Unfortunately, I don’t have the luxury of sticking to just UTF-8 or iso-8859-1; my work involves a lot of fidgeting with a lot of coding systems local to particular regions, so I need a flexible editor that has the right defaults that will cover my most common use-cases. Unsurprisingly, Emacs is more than capable of fulfilling that role.

Emacs has facilities in place for changing the coding system for a variety of things, such as processes, buffers and files. You can also force Emacs to invoke a command with a certain coding system, a concept I will get to in a moment.

The most important change (for me, anyway) is to force Emacs to default to UTF-8. It’s practically a standard, at least in the West, as it is dominant on the Web; has a one-to-one mapping with ASCII; and is flexible enough to represent any unicode character, making it a world-readable format. But enough nattering about that. The biggest issue is convincing Emacs to treat files as UTF-8 by default, when no information in the file explicitly says it is.

I use the following code snippet to enforce UTF-8 as the default coding system for all files, comint processes and buffers. Note that in newer versions of Emacs you only need the first line, but if you find that it’s not enough to coax all aspects of your Emacs into your coding system of choice, you can use the longer and more involved method. You’re free to replace utf-8 below with your own preferred coding system, of course.

For newer Emacsen:

(set-default-coding-systems 'utf-8)

For older Emacsen, or if you find the above method is not enough somehow:

(prefer-coding-system 'utf-8)
(set-default-coding-systems 'utf-8)
(set-terminal-coding-system 'utf-8)
(set-keyboard-coding-system 'utf-8)
;; backwards compatibility as default-buffer-file-coding-system
;; is deprecated in 23.2.
(if (boundp 'buffer-file-coding-system)
    (setq-default buffer-file-coding-system 'utf-8)
  (setq default-buffer-file-coding-system 'utf-8))

;; Treat clipboard input as UTF-8 string first; compound text next, etc.
(setq x-select-request-type '(UTF8_STRING COMPOUND_TEXT TEXT STRING))

Once evaluated, Emacs will treat new files, buffers, processes, and so on as though they are UTF-8. Emacs will still use a different coding system if the file has a file-local variable like this -*- coding: euc-tw -*- near the top of the file. (See 48.2.4 Local Variables in Files in the Emacs manual.)

OK, so Emacs will default to UTF-8 for everything. That’s great, but not everything is in UTF-8; how do you deal with cases where it isn’t? How do you make an exception to the proverbial rule? Well, Emacs has got it covered. The command M-x universal-coding-system-argument, bound to the handy C-x RET c, takes as an argument the coding system you want to use, and a command to execute it with. That makes it possible to open files, shells or run Emacs commands as though you were using a different coding system. Very, very useful. This command is a must-have if you have to deal with stuff encoded in strange coding systems.

One problem with the universal coding system argument is that it only cares about Emacs’s settings, not those of your shell or system. That’s a problem, because tools like Python use the environment variable PYTHONIOENCODING to set the coding system for the Python interpreter.

I have written the following code that advises the universal-coding-system-argument function so it also, temporarily for just that command, sets a user-supplied list of environment variables to the coding system.

(defvar universal-coding-system-env-list '("PYTHONIOENCODING")
  "List of environment variables \\[universal-coding-system-argument] should set")

(defadvice universal-coding-system-argument (around provide-env-handler activate)
  "Augments \\[universal-coding-system-argument] so it also sets environment variables

Naively sets all environment variables specified in
`universal-coding-system-env-list' to the literal string
representation of the argument `coding-system'.

No guarantees are made that the environment variables set by this advice support
the same coding systems as Emacs."
  (let ((process-environment (copy-alist process-environment)))
    (dolist (extra-env universal-coding-system-env-list)
      (setenv extra-env (symbol-name (ad-get-arg 0))))
    ad-do-it))

Insert the code into your emacs file and evaluate it, and now Emacs will also set the environment variables listed in universal-coding-system-env-list. One important thing to keep in mind is that Python and Emacs do not share a one-to-one correspondence of coding systems. There will probably be instances where obscure coding systems exist in one and not the other, or that the spelling or punctuation differ; the mapping of such names is left as an exercise to the reader.

*** dired
**** запуск dired

    C-x d  ~/foo/*.el  <RET>
    C-x d  ~/foo/*/*.el  <RET>

   To display the Dired buffer in another window, use ‘C-x 4 d’
(‘dired-other-window’).  ‘C-x 5 d’ (‘dired-other-frame’) displays the
Dired buffer in a separate frame.

		You can also invoke Dired by giving ‘C-x C-f’ (‘find-file’) a directory’s name.
**** Emacs: Batch Rename Files
***** By Xah Lee. Date: 2007-08-30. Last updated: 2021-07-19.
To rename multiple files in emacs, the most easy way is:

Alt + x dired to go to the directory.
Alt + x dired-toggle-read-only 【Ctrl + x Ctrl + q】.
Then, just edit the file names. (You can use Alt + x query-replace or Alt + x query-replace-regexp [see Emacs: Find Replace in Current File] or rectangle commands. [see Emacs: Edit Column Text, Rectangle Commands])
When done, wdired-finish-edit 【Ctrl + c Ctrl + c】 to commit the changes.
To abort, Alt + x wdired-abort-changes 【Ctrl + c Ctrl + k】.
***** Edit like text
		c-x c-q
	Перевести в режим редактирования страници
	по завершении 
	с-с с-с
	с-c с-k для отмены
**** Chetshit 
https://www.gnu.org/software/emacs/refcards/pdf/dired-ref.pdf
***** Dired Reference Card
 (based on Dired in GNU Emacs 27)
 Commands marked with (DX) require dired-x
******  Entering and Exiting Dired
	run dired
	C-x d
	dired the directory of the file you are editing
	C-x C-j (DX)
	quit dired
	q
****** 	Motion Commands
	move up to previous line
	p
	move down to next line
	n
	move up to previous directory line
	<
	move down to next directory line
	>
	move to next marked file
	M-}
	move to previous marked file
	M-{
	move up to previous subdirectory
	M-C-p
	move down to next subdirectory
	M-C-n
	move to parent directory
	^
	move to first child subdirectory
	M-C-d
****** 	Mouse Commands
	visit file or directory
	Mouse_Button_2
****** 	Immediate Actions on Files
	visit current file
	f
	view current file
	v
	visit current file in other window
	o
	create a new subdirectory
	+
	compare file at point with the one at mark
	=
****** 	Marking and Unmarking Files
	mark a file or subdirectory for later commands
	m
	unmark a file or all files of a subdirectory
	u
	unmark all marked files in a buffer
	M-delete
	mark files with a given extension
	 * .
	mark all directories
	 * /
	mark all symlinks
	 * @
	mark all executables
	 * *
	invert marking
	t
	mark all files in the current subdir
	 * s
	mark file names matching a regular expression
	 * %
	change the marks to a different character
	 * c
	mark files for which Elisp expression returns t
	 * ( (DX)
****** 	Modifying the Dired Buffer
	insert a subdirectory into this buffer
	i
	remove marked files from the listing
	k
	remove a subdir listing
	C-u k
	re-read all directories (retains all marks)
	g
	toggle sorting of current subdir by name/date
	s
	edit ls switches
	C-u s
	recover marks, hidden lines, and such (undo)
	C-_
	hide all subdirectories
	M-$
	hide or unhide subdirectory
	$
****** 	Commands on Files Marked or Specified
	by the Prefix
	copy file(s)
	C
	rename a file or move files to another directory
	R
	change ownership of file(s)
	O
	change the group of the file(s)
	G
	change mode of file(s)
	M
	print file(s)
	P
	convert filename(s) to lower case
	% l
	convert filename(s) to upper case
	% u
	delete marked (as opposed to flagged) file(s)
	D
	compress or uncompress file(s)
	Z
	run info on file
	I (DX)
	make symbolic link(s)
	S
	make relative symbolic link(s)
	Y
	make hard link(s)
	H
	search files for a regular expression
	A
	regexp query replace on marked files
	Q
	byte-compile file(s)
	B
	load file(s)
	L
	shell command on file(s)
	!
	asynchronous shell command on file(s)
	&
****** 	Flagging Files for Deletion
	Unmark commands remove delete flags
	flag file for deletion
	d
	flag all backup files (file names ending in ˜)
	~
	flag all auto-save files
	#
	flag various intermediate files
	% &
	flag numeric backups (ending in .˜1˜, .˜2˜, etc.)
	.
	execute the deletions requested (flagged files)
	x
	flag files matching a regular expression
	% d
****** 	Regular Expression Commands
	mark filenames matching a regular expression
	% m
	copy marked files by regexp
	% C
	rename marked files by regexp
	% R
	hardlink
	% H
	symlink
	% S
	symlink, with relative paths
	% Y
	mark for deletion
	% d
****** 	Dired and Find
	dired file(s) whose name matches a pattern M-x find-name-dired
	dired file(s) that contain pattern
	M-x find-grep-dired
	dired file(s) based on find output
	M-x find-dired
****** 	Getting Help
	dired help
	h
	dired summary (short help) and error log
	?
**** Evil mode 
***** GitHub - emacs-evil/evil-collection:
****** links
A set of keybindings for evil-mode
https://github.com/emacs-evil/evil-collection
****** Evil Collection
[[https://github.com/emacs-evil/evil-collection/actions][https://github.com/emacs-evil/evil-collection/workflows/build/badge.svg?branch=master]]
[[https://melpa.org/#/evil-collection][https://melpa.org/packages/evil-collection-badge.svg]]
[[https://stable.melpa.org/#/evil-collection][https://stable.melpa.org/packages/evil-collection-badge.svg]]

This is a collection of [[https://github.com/emacs-evil/evil][Evil]] bindings for the parts of Emacs that Evil does not cover
properly by default, such as help-mode, M-x calendar, Eshell and more.

Warning: Expect some default bindings to change in the future.

[[https://github.com/emacs-evil/evil-collection#goals][SVG Image]]Goals

1 Reduce context switching: As soon as “moving around” gets hardwired to <hjkl>,
 it becomes frustratingly inefficient not to have it everywhere.
2 Community work: setting up bindings is tremendous work and joining force can
 only save hours for all of Evil users out there. While not everyone may agree on the
 chosen bindings, it helps to have something to start with rather than nothing at all. In
 the end, users are free to override a subset of the proposed bindings to best fit
 their needs.
3 Consistency: Having all bindings defined in one place allows for enforcing
 consistency across special modes and coordinating the community work to define
 a reference implementation.

[[https://github.com/emacs-evil/evil-collection#installation][SVG Image]]Installation

,* Get the package, either from MELPA:

M-x package-install RET evil-collection RET

Or clone / download this repository and modify your load-path:

(add-to-list 'load-path (expand-file-name "/path/to/evil-collection/" user-emacs-directory))

,* Register the bindings, either all at once with

(evil-collection-init)

or mode-by-mode, for instance:

(with-eval-after-load 'calendar (evil-collection-calendar-setup))

or by providing an argument to evil-collection-init:

(evil-collection-init 'calendar)

The list of supported modes is configured by evil-collection-mode-list.

evil-collection assumes evil-want-keybinding is set to nil and
evil-want-integration is set to t before loading evil and evil-collection. Note
some other packages may load evil (e.g. evil-leader) so bear that in mind when
determining when to set the variables.

See [[https://github.com/emacs-evil/evil-collection/issues/60][https://github.com/emacs-evil/evil-collection/issues/60]] and
[[https://github.com/emacs-evil/evil/pull/1087][https://github.com/emacs-evil/evil/pull/1087]] for more details.

For example:

(setq evil-want-integration t) ;; This is optional since it's already set to t by default.
(setq evil-want-keybinding nil)
(require 'evil)
(when (require 'evil-collection nil t)
  (evil-collection-init))

Here’s another full TLDR use-package example.

(use-package evil
  :ensure t
  :init
  (setq evil-want-integration t) ;; This is optional since it's already set to t by default.
  (setq evil-want-keybinding nil)
  :config
  (evil-mode 1))

(use-package evil-collection
  :after evil
  :ensure t
  :config
  (evil-collection-init))

NOTE: If you don’t like surprises but still want to use evil-collection-init, setting
evil-collection-mode-list to nil and adding each mode manually might be a
better option.

[[https://github.com/emacs-evil/evil-collection#configuration][SVG Image]]Configuration

Modify evil-collection-mode-list to disable or add any modes that should be
evilified by evil-collection.

 Variable  Default  Description  
 evil-collection-company-use-tng  t  Set up autocompletion to  
     be similar to Vim’s  
     YouCompleteMe.  
 evil-collection-calendar-want-org-bindings  nil  Set up Org functions in  
     calendar keymap.  
 evil-collection-outline-bind-tab-p  nil  Enable <tab>-based  
     bindings in Outline mode.  
 evil-collection-term-sync-state-and-mode-p  t  Synchronize insert/normal  
     state with char/line-mode  
     in term-mode.  
 evil-collection-setup-minibuffer  nil  Set up Vim style bindings  
     in the minibuffer.  
 evil-collection-setup-debugger-keys  t  Set up debugger keys for  
     certain modes.  
 evil-collection-want-unimpaired-p  t  Set up unimpaired  
     bindings globally.  
 evil-collection-want-find-usages-bindings  t  Bind -find references-, etc  
     to various modes.  

For example, if you want to enable Evil in the minibuffer, you’ll have to turn it on
explicitly by customizing evil-collection-setup-minibuffer to t. Some
minibuffer-related packages such as Helm rely on this option.

use-package example:

(use-package evil-collection
  :custom (evil-collection-setup-minibuffer t)
  :init (evil-collection-init))

[[https://github.com/emacs-evil/evil-collection#guidelines][SVG Image]]Guidelines

The following rules serve as guiding principles to define the set of standard Evil
bindings for various modes. Since special modes are by definition structurally
incomparable, those rules cannot be expected to be applied universally.

The rules are more-or-less sorted by priority.

1 Don’t bind anything to : nor <escape>.
2 Keep the movement keys when possible and sensible. 

 * h, j, k, l
 * w, W, b, B, e, E, ge, gE
 * f, F, t, T, ;, =,=
 * gg, G
 * |
 * (, )
 * {, }
 * %
 * +, -, 0, ^, $
 * C-i, C-o

3 Keep the yanking and register keys when possible and sensible. 

 * y, Y
 * =”=

4 Keep the search keys when possible and sensible. 

 * /, ?
 * #, *

5 Keep the mark keys when possible and sensible. 

 * m
 * =’=, ~

6 Keep the windowing keys when possible and sensible. 

 * H, L, M
 * C-e, C-y
 * C-f, C-b
 * C-d, C-u
 * C-w-prefixed bindings.
 * Some z-prefixed bindings (see below).

7 The following keys are free when insert state does not make sense in the current
 mode: 

 * a, A, i, I
 * c, C, r, R, s, S
 * d, D, x, X
 * o, O
 * p, P
 * =, <, >
 * J
 * ~ 

 Any of those keys can be set to be a prefix key.

8 Prefix keys: g and z are the ubiquitous prefix keys. 

 * g generally stands for “go” and is best used for movements.
 * z is used for scrolling, folding, spell-checking and more.

9 Macro and action keys 

 * @, q
 * .

10 Ensure terminal compatibility without sacrificing GUI key bindings. 

 * Tab key 

 * Tab key is recognized as <tab> in GUI and TAB in terminal. TAB equals C-i.
 * C-i is bound to jumping forward for vim compatibility. If Shift+Tab is not
 relevant, just bind g TAB to the function that Tab is bound to. If Shift+Tab is
 relevant, bind g] and g TAB to the function that Tab is bound to, and bind g[
 to the function that Shift+Tab is bound to for terminal compatibility.

 * Enter key 

 * Enter key is recognized as <return> in GUI and RET in terminal. RET equals
 Ctrl+m.
 * Bind only RET and M-RET. Or, bind RET and M-RET to the same functions
 <return> and <M-return> are bound to.
 * S-RET is impossible on terminal. Bind <S-return> and a vacant key to the
 same function for terminal compatibility.

[[https://github.com/emacs-evil/evil-collection#rationale][SVG Image]]Rationale

Many special modes share the same set of similar actions. Those actions should
share the same bindings across all modes whenever feasible.

[[https://github.com/emacs-evil/evil-collection#motion-------gj-gk-c-j-c-k][SVG Image]]Motion ([, ], {, }, (, ), gj, gk, C-j, C-k)

,* [ and ]: Use [- and ]- prefixed keys for navigation between sections. 

 If the mode makes no difference between the end of a section and the beginning
 of the next, use [ and ].

,* gj and gk: synonym for [ and ]. That’s what [[https://github.com/emacs-evil/evil-magit][evil-magit]] does.

Question: Should gj / gk rather be synonyms for C-j / C-k? They cannot emulate the
behaviour of [] or ][.

,* C-j, C-k: If there is granularity, i.e. subsections, use C-j and C-k to browse them.
 This reflects [[https://github.com/emacs-evil/evil-magit][evil-magit]] and [[https://github.com/JorisE/evil-mu4e][evil-mu4e]] default bindings.
,* {, }: If there is no paragraph structure, { and } can be used for sub-sectioning.
,* (, ): If there is no sentence structure, ( and ) can be used for sub-sectioning.
,* HJKL: hjkl can be used for atomic movements, but HJKL can usually not be used
 because H, K and L are all universal (J is evil-join and usually does not make
 sense in special modes).
,* C-h should not be remapped: Since we have C-j and C-k for vertical motion, it
 would make sense to use C-h and C-l for horizontal motion. There are some
 shortcomings though: 

 * In Vim, C-h works as backspace, but Evil does not follow that behaviour.
 * In Emacs, it is a prefix key for all help-related commands, and so is <f1>.
 * Most importantly, C-h is too widespread and ubiquitous to be replaced. So we
 don’t.

,* C-l: As a consequence of the former point, C-l is available.
,* M-<hjkl>: Those keys are usually free in Evil but still bound to their Emacs default
 (e.g. M-l is downcase-word). Besides, if C-j and C-k are already used, having M-j
 and M-k might add up to the confusion.

[[https://github.com/emacs-evil/evil-collection#quitting-q-zq-zz][SVG Image]]Quitting (q, ZQ, ZZ)

In Vim, q is for recording macros. Vim quits with ZZ or ZQ. In most Emacs special
modes, it stands for quitting while macros are recorded/played with <f3> and <f4>.

A good rule of thumb would be:

,* Always bind q, ZZ and ZQ to the mode specific quitting functions. If there is none,
,* Bind q and ZZ to quit-window
,* Bind ZQ to evil-quit
,* If macros don’t make sense in current mode, then @ is available.

[[https://github.com/emacs-evil/evil-collection#refreshing--reverting-gr][SVG Image]]Refreshing / Reverting (gr)

,* gr is used for refreshing in [[https://github.com/emacs-evil/evil-magit][evil-magit]], [[https://github.com/JorisE/evil-mu4e][evil-mu4e]], and some Spacemacs
 configurations (org-agenda and neotree among others).

C-l is traditionally used to refresh the terminal screen. Since there does not seem to
be any existing use of it, we leave the binding free for other uses.

[[https://github.com/emacs-evil/evil-collection#marking][SVG Image]]Marking

m defaults to evil-set-marker which might not be very useful in special modes. =’=
can still be used as it can jump to other buffers.

,* m: Mark or toggle mark, depending on what the mode offers. In visual mode, always
 mark. With a numeric argument, toggle mark on that many following lines.
,* u: Unmark current selection.
,* U: Unmark all.
,* ~: Toggle all marks. This mirrors the “invert-char” Vim command bound to ~ by
 default.
,* M: Mark all, if available. Otherwise use U~.
,* *: Mark-prefix or mark all if current mode has no prefix. * is traditionally a wildcard.
,* %: Mark regexp.
,* x: Execute action on marks. This mirrors Dired’s binding of x.

If * is used for marking, then # is free.

Also note that Emacs inconsistently uses u and U to unmark.

[[https://github.com/emacs-evil/evil-collection#selecting--filtering--narrowing--searching][SVG Image]]Selecting / Filtering / Narrowing / Searching

,* s and S seem to be used in some places like [[https://www.djcbsoftware.nl/code/mu/mu4e.html][mu4e]]. 

 * s: [s]elect/[s]earch/filter candidates according to a pattern.
 * S: Remove filter and select all.

,* = is usually free and its significance is obvious. It’s taken for zooming though.
,* | is not free but the pipe symbolic is very tantalizing.

[[https://github.com/emacs-evil/evil-collection#sorting][SVG Image]]Sorting

,* o: Change the sort [o]rder.
,* O: Sort in reverse order.

There is no real consensus around which key to bind to sorting. What others do by
default:

,* package-menu uses S.
,* M-x proced and Dired use s.
,* profiler uses A and D.
,* [[https://www.djcbsoftware.nl/code/mu/mu4e.html][mu4e]] uses O.
,* [[http://www.nongnu.org/ranger/][ranger]] uses o, inspired from [[http://mutt.org][Mutt]].

[[https://github.com/emacs-evil/evil-collection#go-to-definition-gd-gd][SVG Image]]Go to definition (gd, gD)

,* gd: [g]o to [d]efinition. This is mostly for programming modes. If there’s a
 corresponding ‘pop’ action, use C-t.

[[https://github.com/emacs-evil/evil-collection#go-to-references-etc-gr-ga][SVG Image]]Go to references, etc (gr, gA)

When evil-collection-want-find-usages-bindings is set to t:

,* gr: [g] to [r]eferences. This binding is also used for refresh/reverting modes in non
 programming modes but is usually empty for programming modes.
,* gA: [g]o to [A]ssignments.
,* Additional bindings: There may be additional binds under this category. Please file
 a Pull Request if so.

[[https://github.com/emacs-evil/evil-collection#go-to-current-entity][SVG Image]]Go to current entity

,* .: go to current entity (day for calendar, playing track for [[https://www.gnu.org/software/emms/][EMMS]]). Bind only if more
 relevant than evil-repeat.

[[https://github.com/emacs-evil/evil-collection#open-thing-at-point-ret-s-ret-m-ret-go-go][SVG Image]]Open thing at point (RET, S-RET, M-RET, go, gO)

,* RET, S-RET, M-RET: Open thing at point in current window, open in other window and
 display in other window respectively. The latter is like the former with the focus
 remaining on the current window.
,* go, gO: When available, same as S-RET and M-RET respectively. This is useful in
 terminals where S-RET and M-RET might not work.

[[https://github.com/emacs-evil/evil-collection#emacs-style-jumping-j][SVG Image]]Emacs-style jumping (J)

,* J: [[https://www.djcbsoftware.nl/code/mu/mu4e.html][mu4e]] has j and [[https://github.com/emacs-evil/evil-collection/blob/master/evil-mu4e][evil-mu4e]] uses J, so we use J too.

Some special modes like [[https://www.djcbsoftware.nl/code/mu/mu4e.html][mu4e]] and ibuffer offer to “jump” to a different buffer. This
sometimes depends on the thing at point.

This is not related to Evil jumps like C-i and C-o, nor to “go to definition”.

[[https://github.com/emacs-evil/evil-collection#browse-url-gx][SVG Image]]Browse URL (gx)

gx: go to URL. This is a default Vim binding.

[[https://github.com/emacs-evil/evil-collection#help-][SVG Image]]Help (?)

,* g? : is the standard key for help related commands.
,* ? in places where backward search is not very useful.

[[https://github.com/emacs-evil/evil-collection#history-browsing-c-n-c-p][SVG Image]]History browsing (C-n, C-p)

C-n and C-p are standard bindings to browse the history elements.

[[https://github.com/emacs-evil/evil-collection#bookmarking][SVG Image]]Bookmarking

?

[[https://github.com/emacs-evil/evil-collection#repl-gz][SVG Image]]REPL (gz)

If the mode has a Go To REPL-type command, set it to gz.

[[https://github.com/emacs-evil/evil-collection#zooming-----0][SVG Image]]Zooming (+, -, =, 0)

,* + and - have obvious meanings.
,* 0 has a somewhat intuitive meaning, plus it is next to + and - on QWERTY.
,* = is useful as a synonym for + because it is the unshifted key of + on QWERTY.

[[https://github.com/emacs-evil/evil-collection#debugging][SVG Image]]Debugging

When debugging is on, debugger keys takes the most precedence.

These keys will be set when there’s an available command for them.

,* n : Step Over
,* i : Step Into
,* o : Step Out
,* c : Continue/Resume Execution
,* L : Locals
,* t : Tracing
,* q : Quit Debugging
,* H : Continue until Point
,* e : Evaluate Expression
,* b : Set Breakpoint
,* u : Unset Breakpoint
,* > : Navigate to Next Frame
,* < : Navigate to Previous Frame
,* g? : Help
,* J : Jump to debugger location
,* R : Restart

For debugging outside of debugger being on (e.g. setting initial breakpoints), we use
similar keys to [[https://github.com/realgud/realgud][realgud]].

,* f5 Start/Continue/Resume Execution
,* S-f5 Continue Execution
,* Mouse-1 Toggle Breakpoint
,* f9 Toggle Breakpoint
,* f10 Step Over
,* f11 Step Into
,* S-f11 Step Out

[[https://github.com/emacs-evil/evil-collection#editable-buffers][SVG Image]]Editable Buffers

For buffers where insert-state doesn’t make sense but buffer can be edited, (e.g.
wdired or wgrep), pressing i will change into editable state.

When this editable state is turned on,

ZQ will abort and clear any changes. ZZ will finish and save any changes. ESC will exit
editable state.

[[https://github.com/emacs-evil/evil-collection#qwqetc][SVG Image]]:q/:wq/etc

Modes with commands that can be bound to :q/:wq/etc will have those keys
remapped.

[[https://github.com/emacs-evil/evil-collection#key-translation][SVG Image]]Key Translation

evil-collection-translate-key allows binding a key to the definition of another
key in the same keymap (comparable to how Vim’s keybindings work). Its arguments
are the states and keymaps to bind/look up the key(s) in followed optionally by
keyword arguments (currently only :destructive) and key/replacement pairs. states
should be nil for non-evil keymaps, and both states and keymaps can be a single
symbol or a list of symbols.

This function can be useful for making key swaps/cycles en masse. For example,
someone who uses an alternate keyboard layout may want to retain the hjkl
positions for directional movement in dired, the calendar, etc.

Here’s an example for Colemak of making swaps in a single keymap:

(evil-collection-translate-key nil 'evil-motion-state-map
  ;; colemak hnei is qwerty hjkl
  "n" "j"
  "e" "k"
  "i" "l"
  ;; add back nei
  "j" "e"
  "k" "n"
  "l" "i")

Here’s an example of using evil-collection-setup-hook to cycle the keys for all
modes in evil-collection-mode-list:

(defun my-hjkl-rotation (_mode mode-keymaps &rest _rest)
  (evil-collection-translate-key 'normal mode-keymaps
    "n" "j"
    "e" "k"
    "i" "l"
    "j" "e"
    "k" "n"
    "l" "i"))

;; called after evil-collection makes its keybindings
(add-hook 'evil-collection-setup-hook #'my-hjkl-rotation)

(evil-collection-init)

A more common use case of evil-collection-translate-key would be for keeping
the functionality of some keys that users may bind globally. For example, SPC, [, and ]
are bound in some modes. If you use these keys as global prefix keys that you never
want to be overridden, you’ll want to give them higher priority than other evil
keybindings (e.g. those made by (evil-define-key 'normal some-map ...)). To do
this, you can create an “intercept” map and bind your prefix keys in it instead of in
evil-normal-state-map:

(defvar my-intercept-mode-map (make-sparse-keymap)
  "High precedence keymap.")

(define-minor-mode my-intercept-mode
  "Global minor mode for higher precedence evil keybindings."
  :global t)

(my-intercept-mode)

(dolist (state '(normal visual insert))
  (evil-make-intercept-map
   ;; NOTE: This requires an evil version from 2018-03-20 or later
   (evil-get-auxiliary-keymap my-intercept-mode-map state t t)
   state))

(evil-define-key 'normal my-intercept-mode-map
  (kbd "SPC f") 'find-file)
;; ...

You can then define replacement keys:

(defun my-prefix-translations (_mode mode-keymaps &rest _rest)
  (evil-collection-translate-key 'normal mode-keymaps
    "C-SPC" "SPC"
    ;; these need to be unbound first; this needs to be in same statement
    "[" nil
    "]" nil
    "[[" "["
    "]]" "]"))

(add-hook 'evil-collection-setup-hook #'my-prefix-translations)

(evil-collection-init)

By default, the first invocation of evil-collection-translate-key will make a
backup of the keymap. Each subsequent invocation will look up keys in the backup
instead of the original. This means that a call to evil-collection-translate-key
will always have the same behavior even if evaluated multiple times. When
:destructive t is specified, keys are looked up in the keymap as it is currently. This
means that a call to evil-collection-translate-key that swapped two keys would
continue to swap/unswap them with each call. Therefore when :destructive t is
used, all cycles/swaps must be done within a single call to
evil-collection-translate-key. To make a comparison to Vim keybindings,
:destructive t is comparable to Vim’s map, and :destructive nil is comparable
to Vim’s noremap (where the “original” keybindings are those that existed in the
keymap when evil-collection-translate-key was first called). You’ll almost
always want to use the default behavior (especially in your init file). The limitation of
:destructive nil is that you can’t translate a key to another key that was defined
after the first evil-collection-translate-key, so :destructive t may be useful
for interactive experimentation.

evil-collection-swap-key is also provided as a wrapper around
evil-collection-translate-key that allows swapping keys:

(evil-collection-swap-key nil 'evil-motion-state-map
  ";" ":")
;; is equivalent to
(evil-collection-translate-key nil 'evil-motion-state-map
  ";" ":"
  ":" ";")

[[https://github.com/emacs-evil/evil-collection#third-party-packages][SVG Image]]Third-party packages

Third-party packages are provided by several parties:

 Major mode  Evil bindings  
 lispy  [[https://github.com/noctuid/lispyville][lispyville]] or [[https://github.com/sp3ctum/evil-lispy][evil-lispy]]  
 org  [[https://github.com/GuiltyDolphin/org-evil][org-evil]] or [[https://github.com/Somelauw/evil-org-mode][evil-org]]  
 markdown  [[https://github.com/Somelauw/evil-markdown][evil-markdown]]  
 ledger  [[https://github.com/atheriel/evil-ledger][evil-ledger]]  

Should you know any suitable package not mentioned in this list, let us know and file
an issue.

Other references:

,* [[https://github.com/syl20bnr/spacemacs/blob/master/doc/CONVENTIONS.org#key-bindings-conventions][Spacemacs]]
,* [[https://github.com/hlissner/doom-emacs/tree/develop/modules/editor/evil][Doom Emacs]]

[[https://github.com/emacs-evil/evil-collection#faq][SVG Image]]FAQ

,* Making SPC work similarly to [[https://github.com/syl20bnr/spacemacs][spacemacs]]. 

 evil-collection binds over SPC in many packages. To use SPC as a leader key
 with the [[https://github.com/noctuid/general.el][general]] library:

(use-package general
  :ensure t
  :init
  (setq general-override-states '(insert
                                  emacs
                                  hybrid
                                  normal
                                  visual
                                  motion
                                  operator
                                  replace))
  :config
  (general-define-key
   :states '(normal visual motion)
   :keymaps 'override
   "SPC" 'hydra-space/body))
   ;; Replace 'hydra-space/body with your leader function.
    
 See [[https://github.com/noctuid/evil-guide][noctuid’s evil guide]] for other approaches.

,* Unintialized mode maps in evil-collection-setup-hook.
 evil-collection-setup-hook is ran with a list of keymaps passed into it. Some
 misconfigured modes may not have yet initialized their keymap at this time so the
 value of the variable may be nil. In that case, an alternative is to use a mode-hook
 to do any custom settings. 
(add-hook 'evil-collection-setup-hook
       (lambda (_mode keymaps)
           (add-hook 'ediff-mode-hook
             (lambda ()
              (... keymaps ...)))))
    
 View [[https://github.com/emacs-evil/evil-collection/issues/196][196]] for more info.

[[https://github.com/emacs-evil/evil-collection#modes-left-behind][SVG Image]]Modes left behind

Some modes might still remain unsupported by this package. Should you be missing
your <hjkl>, please feel free to do a pull request.

[[https://github.com/emacs-evil/evil-collection#contributing][SVG Image]]Contributing

We welcome any additional modes that are not already supported.

All bindings in evil-collection are open to change so if there’s a better or more
consistent binding, please [[https://github.com/emacs-evil/evil-collection/issues][open an issue]] or [[https://github.com/emacs-evil/evil-collection/pulls][submit a pull request]].

Follow [[https://github.com/bbatsov/emacs-lisp-style-guide/][The Emacs Lisp Style Guide]] for coding conventions.

[[https://github.com/erlang/otp/wiki/writing-good-commit-messages][Erlang/OTP]] has a good read for helpful commit messages.

About

A set of keybindings for evil-mode 

Topics

[[https://github.com/topics/emacs][emacs]][[https://github.com/topics/evil][evil]][[https://github.com/topics/bindings][bindings]][[https://github.com/topics/evil-mode][evil-mode]]

Resources

***** Jonathan Bennett's Blog
****** links
https://jonathanabennett.github.io/blog/2019/06/05/file-management-in-emacs-with-dired-mode/
****** File Management in Emacs with dired-mode
IMPORTANT NOTES
Dired is Big
dired has turned out to be a far, FAR bigger thing to learn than I had anticipated. That, coupled with the fact that my writing time vanished in the fires of the
last week of school means I did not fully explore dired and will be returning to it later. Consider this merely an introduction to the very basics. I will be
returning to this again in the future. 

I use evil-collection

All the keybindings I describe below are true on my system after installing evil-collection. If you are running pure Emacs, these keybindings will not work.
In fact, some of them may do surprising things (I don't know, I used dired like three times before I installed evil-collection and two of them were by
accident). I recommend using [[https://www.gnu.org/software/emacs/refcards/pdf/dired-ref.pdf][this reference card]] from the GNU website to find the keybindings which match with what I am describing. 

Cost of Context Switches

As a teacher, I deal with context switches all day, and they are easily one of the biggest drains on my productivity. What is a context switch? Put simply, a
context switch is when you have to change from one task, environment, or context to another. 

Whether you're talking about software or wetware, there is a penalty to context switches. For a computer, this can be reduced through well-written software
or by throwing more hardware at the problem. But for your brain, there is a fairly hard floor to how small you can make that penalty. 

I'm pretty good at context switches because I have to be. My classes take a blended learning approach to delivering the content, my student progress
through the curriculum at different paces. In a typical class of 15-20 students, I might have 10 different problems that the students might be working on. 

Each of those problems is a computer program that I have to read, comprehend, and mentally check for bugs and syntax errors before I can give that
student meaningful feedback on their work. If the student has encountered a fairly obscure bug, it can take me a bit of time to get a feel for what is
happening. It's even worse if the student has written some tangled or misnamed code (For the love of all that is holy, kids, stop naming your functions
MyFunction). There's no way for me to avoid the constant context switching in class (even if I tried to make them all complete the programs at the same time,
they would use write pretty divergent solutions to some of them), but I do all I can to avoid it in other areas of my life. 

There are lots of techniques for doing this, but one of them is to keep a consistent interface for the tasks which you are doing. One of the goals of this Year
of Emacs project is to complete as many of my daily tasks as possible inside Emacs to see whether or not the adoption cost of using Emacs for that task is
less than the cost of context switching out of Emacs to complete it. 

End of Year Cleanup

Right now, I'm in year-end cleanup mode. Notes from old classes need to be archived, plans for next year need to be started, and some files and folders
need to be copied over. This is typically a lot of working with Finder. That involves a lot of working with the mouse. And mousing is one of the most expensive
operations in terms of context switching for a touch typist. This high cost is because you lose your place on the home row. While each individual interaction
with the mouse may not seem like much, it can end up happening a lot, which adds up quickly over time. 

Working from the command line is possible, and I've done it before. But there is an interface issue there also because it isn't typically interactive. I want to
move a few files, and then see the new directory listing right away. With the terminal, that's an extra command. 

Furthermore, if you're working with a particularly full directory, ls is not a very efficient way of viewing the file listing. For example, the dired buffer with my
Google drive folder (synced specifically so I can use dired to manage my Google Drive Files) had 123 lines. Try working with that in a terminal, at best you'll
be seeing half the files at a time when you start out. That number might go down relatively quickly, but it's still more commands that you have to type in. 

Basics using evil-collection

One of the first challenges I had was that dired doesn't use Evil keybindings, even if you've installed evil-mode. I know a lot of people reading this will
probably say I should just learn the Emacs keybindings. Sorry, that's not going to happen. Vim is instinctive for me at this point. When I see a text buffer, my
first instinct is to j or k my way through the lines. It's so ingrained, I do it in text buffers where I have never had Vim keys. More than once, I have been
typing while talking to a student and looked at my screen to see that the last line of my Google Doc had something like 5bctnJavaScript$ at the end. 

This will be even more true in Emacs, where every other buffer I interact with right now (except Magit buffers) use Vim keys. So I need dired buffers to have
Vim keys if I'm going to use them: enter evil-collection. 

Evil-collection is a collection of keybindings for major modes that mimic (to a degree) Vim keybindings. While I could definitely roll my own keybindings using
the :bind feature in use-package, it is actually pretty difficult to create consistent, memorable, and ergonomic keybindings. I like that there are already
bindings I can use, which means I don't have to try to make up my own. Having said that, I one of the larger projects I plan on tackling over the summer is
using hydra to replace evil-leader and use that to replace some of the multi-key chords needed in things like org-mode (C-c C-v t, I'm looking at you). 

Here is the setup for evil-collection. 

(use-package evil-collection
  :after (evil)
  :config
  (setq evil-collection-mode-list '(dired))
  (evil-collection-init))

A couple of things to note here for people new to use-package. 

1 Notice the use of :after (evil). This script will not load evil-collection until evil has been loaded. Because that is a list, you can add additional modes
 to it. For example, if I was using the bindings for elpy, I might make that :after (evil elpy) to ensure that the elpy package was available before the
 bindings for it were created.
2 :config is code that is run after the package is loaded. :init is code that is run before the package is loaded. I initially tried to use :custom here, but it
 didn't initialize the value correctly. I'm not sure why that was, as I was given to understand that :custom was designed to set variables needed by the
 package.

evil-collection-mode-list is a list containing the modes in which you want the evil-collection bindings. It defaults to all of the modes. Because I want to
explicitly explore the bindings rather than just using them blindly, I am setting this variable explicitly and adding modes as I need them. It's possible that I
won't like the bindings for some modes. I might also choose to roll hydras for some of them rather than using the evil-collection bindings. In all cases, I
want to have control over what is set and what is not set in my Emacs setup. 

Using dired

Configuration

While most new Emacsers assume that use-package is meant to install packages, it's actually meant to manage packages. What's the difference, you say?
Well, dired is already installed in your Emacs, but you can still use use-package to set up dired. 

Here is the setup I'm currently using. 

(use-package dired
:ensure nil
:config
(when (string= system-type "darwin")
  (setq dired-use-ls-dired t
        insert-directory-program "/usr/local/bin/gls"))
:custom
(dired-listing-switches "-aBhl --group-directories-first"))

One important note here is the :ensure nil at the top. I have use-package-always-ensure set to t at the beginning of my Emacs.org. This means every
package has :ensure t by default. 

Ensure means (roughly) "This must be downloaded, find it from one of the package repositories." But dired isn't on the package repositories, it's built-in. So
we need to set ensure to nil for this package. 

Finally, we use the dired-listing-switches to pass a different set of switches to ls than the defaults. You can set this to whatever you like, the ones I've
included here will do the following: List all entries, directories first, except backup files (those ending in ~), using the long listing format and human readable
sizes. Play around on the command line until you get something you like, and then set your dired-listing-switches to that. 

Mac OS Users

As noted above, dired uses the ls command if possible to generate the directory listing. But Apple is using a non-GNU set of core-utils. That means that
the listing switches for dired won't work correctly without telling it where to find a GNU version of the core-utils. 

To begin, run brew install core-utils (Or the equivalent command on your package manager of choice). Now, you need to tell Emacs where to find those
core-utils, but only when running Mac OS. That's what the when command in the listing above does. 

Entering dired-mode

The way I usually get into dired-mode is through the find-file command. As noted in my [[https://jonathanabennett.github.io/blog/2019/05/28/emacs.org-~-may-2019/][Emacs.org]] file, that is bound to <SPC> e on my system. Once there, if
you select the top-most entry (/path/to/current/directory/.), you will open that directory in dired-mode. 

You can also open dired-mode directly using C-x d and then supplying a directory path (using helm). 

Using dired-mode

Once in dired-mode, I can use the j and k keys to navigate up and down. While there are searching functions, I did not need them for what I was working on
because I need to inspect pretty much every file as part of my end of year cleanup. 

Once your cursor is on the line for a given file, you can press <RET> to open that buffer in the dired window. Because I'm working with the directory, I
generally want to open it in the other window so I can keep my dired buffer open. For that, simply press S-<RET>. 

But the real power of dired-mode is not in opening files, it is in changing the directory structure. To do this, you first mark the files or directories you wish to
operate on. If you want to delete the files, you can simply mark them with d, which will mark them for deletion. After you have flagged them for deletion,
pressing x will delete them. 

Alternatively, pressing m while in dired mode will mark the file or directory for any action. This is what I usually do. After you have marked the files you wish to
act on, pressing D or will delete them. Or, you can use R to rename them (this runs the mv command, so it can also be used to move them to another
directory). I think the benefits of m over d are twofold. 

First, you only have to remember a single, mnemonic command. Sure d makes sense for delete, but it doesn't actually delete the files. It only marks them for
deletion. m for mark is a better mnemonic than d for mark for deletion. 

Secondly, I like that the commands to operate on marked files are all uppercase. This is a solid reminder that you're about to do something. It separates and
distinguishes potentially destructive actions from generally harmless ones. 

You can use ^ to move up a directory, and <RET> on a sub-directory will open that directory in its own dired buffer. You can also create new directories with
+. 

Once you are finished, you can then simply close the dired buffer with q. 

Final Thoughts

Dired really surprised me with how useful it is. I was certain that it would be useful, but it surprised me how quickly it surpassed the tools I had been using
previously. In previous years, this process has taken me a week of 2-3 sessions a day, 1-2 hours per session. Much of that was the delay inherent in using a
website (Google Drive, in this case), a lot of it is having to use the mouse, but whatever the reason, it was time consuming at a time of the year when I don't
really have a lot of extra time. 

This time, I was able to complete this over the course of about 5 hours. That includes the time I spent configuring and learning dired. My experience has
typically been that any tool this useful (4x faster, give or take) takes a similarly long time to learn. 

I will be the first to say that I have not learned everything there is to do with directories in Emacs. I have not touched dired-x, wdired, dired-aux, or any of
the 3rd party packages that supplement dired. I have barely touched searching in a directory. I have only used 3 of the actions available (create directory,
delete, rename). I have only used 1 of the means of marking. 

Future Expansions

There is now a way to get Google Drive directly in Emacs via GVFS. I haven't played with it because, well, I'm tired of fighting with my Mac right now and
installing GVFS purports to be easy, but my experience has been that this is rarely as true as is implied. This would allow me to work with the Google Drive file
structure via Emacs (with Tramp). This will worth together with [[https://github.com/ubolonton/pullover][pullover]], which has the tagline "Texting while driving (other apps) is dangerous. Let's pull over
there to edit the text in Emacs instead!" 

That sounds amazing. If it actually works, I hold to combine that with emacsclient and org-protocol to move even more things into Emacs. If anybody has
worked on this and gotten it working, please let me know! 

**** set view 
		( - меняет показывать полные даные или частичные
**** Двух понельный мод 
**** копирования переименованни е удаление 
**** Применить шел команды 
**** шел в отдельной панели 
**** Просмотр изображений 
*** Proced : 
**** docs 
***** Displaying and Interacting with processes using Proced
Learn how to use Emacs's advanced process monitor, proced, and how it can replace both ps and top for all but the most esoteric of queries.
By Mickey Petersen
Updated for emacs 28

If you’re a regular user of the commandline tools top or ps then I have good news for you: there’s an Emacs command that does that and it works on Windows too!

The command is M-x proced and it is modelled on M-x dired (but it is not built on top of dired) and it does shadow most of the common navigational aids: n and p move down and up and g refreshes the buffer, for instance.

It’s also feature rich; by combining the utility of ps with the sortable, columnized and interactive system of top you get the best of both worlds.

What I like about it is that it’s a buffer like any other in Emacs. So if you’re keeping your eye on a handful of processes you can use highlight-phrase to highlight the strings you want to visually separate from the rest. It is also, in true Emacs tradition, very customizable – but I’ll get to that a bit later.
Marking, Sorting, Filtering and Formatting Columns

By default you will be given the short formatting but you can change the number of displayed columns by typing F. You’ll be shown a prompt where you can select from short, medium, long and verbose.

You can also change the filtering – which defaults to all – by pressing f. Like the formatting key above you are given a list of common filter types. Furthermore you can filter by any of the visible columns by moving your point to it and pressing RET. It will incrementally filter so you can repeatedly filter as much as you like – this is a very handy feature. Refreshing the buffer with g does not reset it: you must change your filter with f.

Like dired you can mark processes with both d and m (they do the same thing) and unmark with backspace and u. You can mark and unmark all processes with M and U. And finally you can then filter the marked processes with o.

There are some specialty mark commands as well. The command t will invert your marks and C and P will mark the children or parents of the process point is on.

Finally you can sort by columns as well. All the sort commands are bound to M-x proced-sort-xxx and to the prefix menu s:
Command	Description
s c	Sort by CPU %
s m	Sort by Memory %
s p	Sort by PID
s s	Sort by Start Time
s t	Sort by CPU Time
s u	Sort by User
s S	Sort by other column

If you want to sort by a column not bound to a key you must use s S where you are then prompted for the name of a column to sort by.
Sending Signals and Interacting with processes

Unsurprisingly sending POSIX signals is fully supported by Emacs. This is done using the Elisp function signal-process. Because of that all signals are sent using the uid of the Emacs process proced is running in. Conceivably proced could be changed to call out to userland command kill (using an external command is supported) and, by combining it with TRAMP for sudo elevation it could kill processes owned by other users. Sadly that functionality does not currently exist but abusing the default-directory variable might work.

To send a signal mark the processes you want to signal, or alternatively put your point on the target process, and press k or x. You will be shown a list of target processes and you can optionally change the default suggestion of TERM to something else.

When the signal(s) have been sent you can review the log by pressing ?.
Understanding & Customizing Proced’s Internals

Proced is very flexible and it also supports the customize interface. You can access this inferface by typing M-x customize-group proced RET.

Proced will use the Elisp function list-system-processes to retrieve all the known PIDs and then call process-attributes on each one of them to fetch the process details. The good news is that Proced does not parse the output of ps or /proc directly but relies on Emacs’s compatibility layer to make sense of everything: this also means it works rather well on Windows.

Proced can auto update the display and you can enable this for a Proced buffer by running the command proced-toggle-auto-update and it will update every proced-auto-update-interval which is by default 5 seconds.

To make Proced auto update by default you must add a hook:

(defun proced-settings ()
  (proced-toggle-auto-update))

(add-hook 'proced-mode-hook 'proced-settings)

You are free to customize other settings in this mode hook in much the same way you would other mode hook functions.

If you’re really serious about tweaking the way the columns are displayed you can try your hand at editing the alist variable proced-grammar-alist. It controls how sorting, justification and string formatting works for each of the process attributes returned by process-attributes.

You can also alter the default Proced filter by changing proced-filter from user to something else. Creating your own filter is also possible by adding to the proced-filter-alist; in fact this functionality lets you do rather complex things such as calling a custom function for every process attribute.

The default sort and sort order (descending or ascending) is governed by proced-sort and proced-descent respectively.

There are many more customizable options and the author of Proced, Roland Winkler, has done a great job ensuring they’re accessible from Emacs’s customize interface.

It goes without saying that Proced is a both feature rich and customizable. I think it’s a very capable replacement for most ps and top use cases, but like so features in Emacs almost nobody has heard of it.
*** eww
***** other
**** 2 Basic Usage
 You can open a URL or search the web with the command ‘M-x eww’.  If the
 input doesn’t look like a URL or domain name the web will be searched
 via ‘eww-search-prefix’.  The default search engine is DuckDuckGo
 (https://duckduckgo.com).  If you want to open a file either prefix the
 file name with ‘file://’ or use the command ‘M-x eww-open-file’.
If loading the URL was successful the buffer ‘*eww*’ is opened and
**** keys
***** ‘q’ :  eww-quit : 
 the web page is rendered in it.  You can leave EWW by pressing ‘q’ or
 
 exit the browser by calling ‘eww-quit’. 
***** ‘g’ : (‘eww-reload’). 
 To reload the web page hit ‘g’
 (‘eww-reload’). 
***** ‘w’ : (‘eww-copy-page-url’) : 
 Pressing ‘w’ (‘eww-copy-page-url’) will copy the
 current URL to the kill ring.
***** M-<RET> : ‘eww-open-in-new-buffer’
		The ‘M-<RET>’ command (‘eww-open-in-new-buffer’) opens the URL at
 point in a new EWW buffer, akin to opening a link in a new “tab” in
 other browsers.
***** ‘R’ command (‘eww-readable’) : 
		The ‘R’ command (‘eww-readable’) will attempt to determine which part
 of the document contains the “readable” text, and will only display this
 part.  This usually gets rid of menus and the like.
***** ‘F’ command (‘eww-toggle-fonts’) : 
		The ‘F’ command (‘eww-toggle-fonts’) toggles whether to use
 variable-pitch fonts or not.  This sets the ‘shr-use-fonts’ variable.
***** ‘M-C’ command (‘eww-toggle-colors’) : 
		The ‘M-C’ command (‘eww-toggle-colors’) toggles whether to use
 HTML-specified colors or not.  This sets the ‘shr-use-colors’ variable.
***** ‘d’ (‘eww-download’) : 
		A URL under the point can be downloaded with ‘d’ (‘eww-download’).
 The file will be written to the directory specified in
 ‘eww-download-directory’ (Default: ‘~/Downloads/’).

***** ‘l’ (‘eww-back-url’) : 
		EWW remembers the URLs you have visited to allow you to go back and
 forth between them.  By pressing ‘l’ (‘eww-back-url’) you go to the
 previous URL. 
***** ‘r’ (‘eww-forward-url’) : 
 You can go forward again with ‘r’ (‘eww-forward-url’).
***** ‘H’ (‘eww-list-histories’) : 
 If you want an overview of your browsing history press ‘H’
 (‘eww-list-histories’) to open the history buffer ‘*eww history*’.  The
 history is lost when EWW is quit. 
*****  can use bookmarks.
 If you want to remember websites you
 can use bookmarks.
		Along with the URLs visited, EWW also remembers both the rendered
 page (as it appears in the buffer) and its source.  This can take a
 considerable amount of memory, so EWW discards the history entries to
 keep their number within a set limit, as specified by
 ‘eww-history-limit’; the default being 50.  This variable could also be
 set to ‘nil’ to allow for the history list to grow indefinitely.
***** ‘b’ (‘eww-add-bookmark’)  : 
		EWW allows you to “bookmark” URLs.  Simply hit ‘b’
		
 (‘eww-add-bookmark’) to store a bookmark for the current website.  You
 
***** ‘B’ (‘eww-list-bookmarks’) : 
 can view stored bookmarks with ‘B’ (‘eww-list-bookmarks’).  This will
 open the bookmark buffer ‘*eww bookmarks*’.

***** PDFs are viewed : 
		PDFs are viewed inline, by default, with ‘doc-view-mode’, but this
 can be customized by using the mailcap (*note (emacs-mime)mailcap::)
 mechanism, in particular ‘mailcap-mime-data’.
***** ‘S’ (‘eww-list-buffers’) : 
		To get summary of currently opened EWW buffers, press ‘S’
 (‘eww-list-buffers’).  The ‘*eww buffers*’ buffer allows you to quickly
 kill, flip through and switch to specific EWW buffer.  
***** ‘s’ (‘eww-switch-to-buffer’). : 
To switch EWW
 buffers through a minibuffer prompt, press ‘s’ (‘eww-switch-to-buffer’).

***** ‘&’ (‘eww-browse-with-external-browser’) : 
		Although EWW and shr.el do their best to render webpages in GNU Emacs
 some websites use features which can not be properly represented or are
 not implemented (E.g., JavaScript).  If you have trouble viewing a
 
 website with EWW then hit ‘&’ (‘eww-browse-with-external-browser’)
 inside the EWW buffer to open the website in the external browser
 specified by ‘shr-external-browser’.  Some content types, such as video
 or audio content, do not make sense to display in GNU Emacs at all.  You
 can tell EWW to open specific content automatically in an external
 browser by customizing ‘eww-use-external-browser-for-content-type’.

*** Tramp
**** fest experens
(setenv "PATH"
				(concat "D:/shell/Putty/plink.exe ;"
								(getenv "PATH")))

								открыть с-x с-f
//plink:pi@192.168.0.124:/
**** Нужно сделать 
***** настроить дайред
дефалтное короткиф вывод имен
*** Net Tools
**** doc
***** Using the commandline network utilities from Emacs
How to use Emacs's selection of commandline utilities, including: ifconfig, netstat, arp, traceroute, ping, dig and more
By Mickey Petersen
Updated for emacs 28

Unbeknownst to many, Emacs comes with a full suite of wrappers around the common GNU network utilities.

Most of the utilities are just simple wrappers around their command-line equivalents, but in full technicolor; but some – like the nslookup support – also adds full Emacs comint support.

Another useful feature is the built-in ffap support (it means find file at point) and it will try to determine if the point is – if used interactively with the net utils below – on a hostname or IP and default to that.

The net utils library were written with the GNU libraries in mind, so Windows users may find the support a bit lacking. But you can always download the Win32 ports.

Here’s a list of utilities Emacs supports; invoke with M-x. You may have to configure them to your liking, and you can do that by invoking M-x customize-group RET net-utils RET.

ifconfig and ipconfig

    Runs ifconfig or ipconfig
iwconfig

    Runs the iwconfig tool
netstat

    Runs the netstat tool
arp

    Runs the arp tool
route

    Runs the route tool
traceroute

    Runs the traceroute tool
ping

    Runs ping, but on most systems it may run indefinitely; adjust ping-program-options.
nslookup-host

    Runs nslookup in non-interactive mode.
nslookup

    Runs nslookup in interactive mode in Emacs as an inferior process
dns-lookup-host

    Look up the DNS information for an IP or host using host.
run-dig and dig

    Invokes the dig in interactive mode as an inferior process
ftp

    Very simple wrapper around the commandline tool ftp. You are probably better off with TRAMP for all but low-level system administration.
smbclient and smbclient-list-shares

    Runs smbclient as an inferior process or list a hosts’ shares.
finger

    Runs the finger tool
whois and whois-reverse-lookup

    Runs the whois tool but tries to guess the correct WHOIS server. You may have to tweak whois-server-tld and whois-server-list or set whois-guess-server to nil
*** Compiling : 
**** Compiling and running scripts in Emacs
Whether you're compiling code, running unit tests or interacting with a program that you frequently need to rerun, the compile feature in Emacs is designed for this very purpose.
By Mickey Petersen
Updated for emacs 28

I’ve talked about running shells and terminal emulators and executing shell commands in Emacs before, but that’s mostly used for ad hoc commands or command line spelunking.

What if you want to compile or run your scripts, code or unit tests and have the errors and warnings highlighted?
There’s a command for that…

Not surprisingly, Emacs has its own compilation feature, complete with an error message parser that adds syntax highlighting and “go to next/prev error” so you can walk up and down a traceback in Python; jump to a syntax error, warning or hint in GCC; or interact with any one of several hundreds of known patterns.

The simplest way to compile something is M-x compile. However, in my experience, a lot of people are put off by the default input of make -k. It leads people to think that it requires, or depends on, a Makefile somehow. That is not the case.

Simply erase the text and replace it with a command of your own.

So if you want to execute Python’s pytest you can type M-x compile RET pytest test_something.py RET and a new *compilation* buffer will appear with the output of the command.

Emacs will parse the output and look for certain patterns – stored in the variables compilation-error-regexp-alist[-alist] – and then highlight the output in the compilation buffer with “hyperlinks” that jump to the file and line (and column, if the tool outputs it) where the error occurred.

If compilation is successful – and like most things in the UNIX world, this is governed by the exit code of the program you ran – the modeline and compilation buffer will say so; likewise, if an error occurred, this is also displayed.

You can jump to the next or previous error (M-x [next/previous]-error) with M-g M-n and M-g M-p – they’re bound to more keys, but I think those are the easiest ones to use. Similarly, in the compilation buffer itself (only), you can go to the next/previous file (M-x compilation-[next/previous]-file) with M-g M-} and M-g M-{, respectively, and RET jumps to the location of the error point is on.

There is an undocumented convention in Emacs that commands like dired, grep, and compile can be rerun, reverted or redisplayed by typing g in the buffer.

You can also type M-x recompile to rerun the same compile invocation again. I encourage you to memorize that command or, better still, bind it to a key as it’s such a frequent task.

By default the compilation buffer is just a dumb display and you cannot communicate with the background process. If you pass the universal argument (C-u) you can; the buffer is switched to comint mode, and you can converse with the process as though you were running it in the shell.

I generally prefer it to be interactive by default but for some inexplicable reason, that is not customizable.

Instead I use this advice to toggle the comint flag on:

(defadvice compile (before ad-compile-smart activate)
  "Advises `compile' so it sets the argument COMINT to t."
  (ad-set-arg 1 t))

Multiple *Compilation* Buffers

Emacs recycles the compilation buffer if it’s already present. So if you want multiple, simultaneous, M-x compile instances then I recommend you rename the buffer with C-x x r (or M-x rename-buffer.)
Project-Based Compilation

If you use Emacs’s project features (see C-x p C-h) then you’ll be happy to know that there’s a dedicated compile command for this use case. It’s bound to C-x p c.
There’s a Minor Mode for that…

The compile workflow isn’t for everyone; some people want everything in one place: their shell. Well, good news then – you can have your cake and eat it. The minor mode M-x compilation-shell-minor-mode is designed for comint buffers of all sizes and works well with M-x shell and most modes that use comint. You get the same benefits offered by compile without altering your workflow. If you compile or run interpreted stuff in your Emacs shell you’ll feel like a modern-day Prometheus with this minor mode enabled!

Add this to your init file and the compilation minor mode will start when shell does.

(add-hook 'shell-mode-hook 'compilation-shell-minor-mode)
*** games
**** Fun and Games in Emacs 

A text adventure game; the game of life; tetris; and a psychoanalyst. They are just
some of the fun and games in Emacs. 
By [[https://www.masteringemacs.org/about][Mickey Petersen]]
Updated for emacs 28
,* 

It’s yet another Monday and you’re hard at work on those [[https://en.wikipedia.org/wiki/Office_Space][TPS reports]] for your boss,
Lumbergh. Why not play Emacs’s Zork-like text adventure game to take your mind
off the tedium of work?

But seriously, yes, there are both games and quirky playthings in Emacs. Some you
have probably heard of or played before. The only thing they have in common is that
most of them were added a long time ago: some are rather odd inclusions (as you’ll
see below) and others were clearly written by bored employees or graduate
students. What they all have in common is a whimsy and a casualness that I rarely
see in Emacs today. Emacs is Serious Business now in a way that it probably
wasn’t back in the 1980s when some of these games were written.

Tower of Hanoi

The [[https://en.wikipedia.org/wiki/Tower_of_Hanoi][Tower of Hanoi]] is an ancient mathematical puzzle game and one that is probably
familiar to some of us as it is often used in Computer Science as a teaching aid
because of its recursive and iterative solutions.

Tower of Hanoi Screenshot 

In Emacs there are three commands you can run to trigger the Tower of Hanoi
puzzle: M-x hanoi with a default of 3 discs; M-x hanoi-unix and M-x hanoi-unix-64
uses the unix timestamp, making a move each second in line with the clock, and with
the latter pretending it uses a 64-bit clock.

The Tower of Hanoi implementation in Emacs dates from the mid 1980s — an awful
long time ago indeed. There are a few Customize options (M-x customize-group
RET hanoi RET) such as enabling colorized discs. And when you exit the Hanoi
buffer or type a character you are treated to a sarcastic goodbye message (see
above.)

5x5

5x5 game grid 
The 5x5 game is a logic puzzle: you are given a 5x5 grid with a central cross already
filled-in; your goal is to fill all the cells by toggling them on and off in the right order to
win. It’s not as easy as it sounds!

To play, type M-x 5x5, and with an optional digit argument you can change the size
of the grid. What makes this game interesting is its rather complex ability to suggest
the next move and attempt to solve the game grid. It uses Emacs’s very own, and
very cool, symbolic RPN calculator M-x calc (and in [[https://www.masteringemacs.org/article/fun-emacs-calc][Fun with Emacs Calc]] I use it to
solve a simple problem.)

So what I like about this game is that it comes with a very complex solver – really, you
should read the source code with M-x find-library RET 5x5 – and a “cracker” that
attempts to brute force solutions to the game.

Try creating a bigger game grid, such as M-10 M-x 5x5, and then run one of the
crack commands below. The crackers will attempt to iterate their way to the best
solution. This runs in real time and is fun to watch:

M-x 5x5-crack-mutating-best

 Attempt to crack 5x5 by mutating the best solution.

M-x 5x5-crack-mutating-current

 Attempt to crack 5x5 by mutating the current solution.

M-x 5x5-crack-randomly

 Attempt to crack 5x5 using random solutions.

M-x 5x5-crack-xor-mutate

 Attempt to crack 5x5 by xoring the current and best solution.

Text Animation

You can display a fancy birthday present animation by running M-x
animate-birthday-present and giving it your name. It looks rather cool!

xkcd 

The animate package is also used by the M-x butterfly command, a command
added to Emacs as an homage to the [[http://www.xkcd.com][XKCD]] strip above. Of course the Emacs
command in the strip is teeechnically not valid but the humor more than makes up
for it.

Blackbox

The objective of this game I am going to quote literally:

 The object of the game is to find four hidden balls by shooting rays into the black
 box. There are four possibilities: 1) the ray will pass thru the box undisturbed, 2)
 it will hit a ball and be absorbed, 3) it will be deflected and exit the box, or 4) be
 deflected immediately, not even being allowed entry into the box.

So, it’s a bit like the [[https://en.wikipedia.org/wiki/Battleship_(game)][Battleship]] game most of us played as kids but… for people with
advanced degrees in physics?

It’s another game that was added back in the 1980s. I suggest you read the extensive
documentation on how to play by typing C-h f blackbox.

Bubbles

Bubbles game 

The M-x bubbles game is rather simple: you must clear out as many “bubbles” as you
can in as few moves as possible. When you remove bubbles the other bubbles drop
and stick together. It’s a fun game that, as an added bonus, comes with graphics if
you use Emacs’s GUI. It also works with your mouse.

You can configure the difficulty of the game by calling M-x
bubbles-set-game-<difficulty> where <difficulty> is one of: easy, medium,
difficult, hard, or userdefined. Furthermore, you can alter the graphics, grid size
and colors using Customize: M-x customize-group bubbles.

For its simplicity and fun factor, this ranks as one of my favorite games in Emacs.

Fortune & Cookie

I like the fortune command. Snarky, unhelpful and often sarcastic “advice” mixed in
with literature and riddles brightens up my day whenever I launch a new shell.

Rather confusingly there are two packages in Emacs that does more-or-less the
same thing: fortune and cookie1. The former is geared towards putting fortune
cookie messages in email signatures and the latter is just a simple reader for the
fortune format.

Anyway, to use Emacs’s cookie1 package you must first tell it where to find the file by
customizing the variable cookie-file with customize-option RET cookie RET.

If you’re on Ubuntu you will have to install the fortune package first. The files are
found in the /usr/share/games/fortunes/ directory.

You can then call M-x cookie or, should you want to do this, find all matching cookies
with M-x cookie-apropos. Yes, that’s right: Emacs has a self-documenting apropos
command to help you find the right fortune cookie message!

Decipher: Breaking Cryptograms

This package perfectly captures the utilitarian nature of Emacs: it’s a package to help
you break simple substitution ciphers (like cryptogram puzzles) using a helpful user
interface. You just know that – more than twenty years ago – someone really had a
dire need to break a lot of basic ciphers. It’s little things like this module that makes
me overjoyed to use Emacs: a module of scant importance to all but a few people
and, yet, should you need it – there it is.

So how do you use it then? Well, let’s consider the “rot13” cipher: rotating characters
by 13 places in a 26-character alphabet. It’s an easy thing to try out in Emacs with
M-x ielm, Emacs’s REPL for [[https://www.masteringemacs.org/article/evaluating-elisp-emacs][Evaluating Elisp]]:

,*** Welcome to IELM ***  Type (describe-mode) for help.
ELISP> (rot13 "Hello, World")
"Uryyb, Jbeyq"
ELISP> (rot13 "Uryyb, Jbeyq")
"Hello, World"
ELISP>

Simply put, you rotate your plaintext 13 places and you get your ciphertext; you rotate
it another 13 and you end up where you started. This is the sort of thing this package
can help you solve.

So how can the decipher module help us here? Well, create a new buffer
test-cipher and type in your cipher text (in my case Uryyb, Jbeyq) and then start
deciphering with M-x decipher.

cipher 

You’re now presented with a rather complex interface. You can now place the point
on any of the characters in the ciphertext on the purple line and guess what the
character might be: Emacs will update the rest of the plaintext guess with your
choices and tell you how the characters in the alphabet have been allocated thus far.

You can then start winnowing down the options using various helper commands to
help infer which cipher characters might correspond to the correct plaintext
character:

D

 Shows a list of digrams (two-character combinations from the cipher) and their
 frequency

F

 Shows the frequency of each ciphertext letter

N

 Shows adjacency of characters. I am not entirely sure how this works.

M and R

 Save and restore a checkpoint, allowing you to branch your work and explore
 different ways of cracking the cipher.

All in all, for such an esoteric task, this package is rather impressive! If you regularly
solve cryptograms maybe this package can help?

Doctor

doctor 

Ah, the Emacs doctor. Based on the original [[https://en.wikipedia.org/wiki/ELIZA][ELIZA]] the “Doctor” tries to
psychoanalyze what you say. Rather fun, for a few minutes, and one of the more
famous Emacs oddities. You can run it with M-x doctor.

Yow! Zippy the Pinhead

Back in the day, you could call M-x yow and get a Zippy the Pinhead quote. Sadly
Emacs no longer proffers the wisdom of Zippy due to legal restrictions. The module’s
still there, so if you can source a yow.lines file from an older Emacs (pre Emacs 22)
you can still enjoy his zany sayings.

There is, naturally, a M-x apropos-zippy command also for when you absolutely need
to find the right Zippy quote.

More amusingly, there’s M-x psychoanalyze-pinhead so you can pit the good M-x
doctor against Zippy in a battle of wits.

Dunnet

Emacs’s very own Zork-like text adventure game. To play it, type M-x dunnet. It’s
rather good, if short, but it’s another rather famous Emacs game that too few have
actually played through to the end.

If you find yourself with time to kill between your TPS reports then it’s a great game
with a built-in “boss screen” as it’s text-only.

Oh, and, don’t try to eat the CPU card :)

Gomoku

gomoku 

Another game written in the 1980s. You have to connect 5 squares, tic-tac-toe style.
You can play against Emacs with M-x gomoku. The game also supports the mouse,
which is rather handy. You can customize the group gomoku to adjust the size of the
grid.

Game of Life

[[https://en.wikipedia.org/wiki/Conway's_Game_of_Life][Conway’s Game of Life]] is a famous example of cellular automata. The Emacs
version comes with a handful of starting patterns that you can (programmatically with
elisp) alter by adjusting the life-patterns variable.

You can trigger a game of life with M-x life. The fact that the whole thing, display
code, comments and all, come in at less than 300 characters is also rather
impressive.

Pong, Snake and Tetris

tetris 

These classic games are all implemented using the Emacs package gamegrid, a
generic framework for building grid-based games like Tetris and Snake. The great
thing about the gamegrid package is its compatibility with both graphical and
terminal Emacs: if you run Emacs in a GUI you get fancy graphics; if you don’t, you
get simple ASCII art.

You can run the games by typing M-x pong, M-x snake, or M-x tetris.

The Tetris game in particular is rather faithfully implemented, having both gradual
speed increase and the ability to slide blocks into place. And because you have the
source code you can finally remove that annoying Z-shaped piece no one likes!

Solitaire

solitaire image 

This is not the card game, unfortunately. But a peg-based game where you have to
end up with just one stone on the board, by taking a stone (the o) and “jumping” over
an adjacent stone into the hole (the .), removing the stone you jumped over in the
process. Rinse and repeat until the board is empty.

There is a handy solver built in called M-x solitaire-solve if you get stuck.

Zone

Another of my favorites. This time’s it’s a screensaver – or rather, a series of
screensavers.

Type M-x zone and watch what happens to your screen!

You can configure a screensaver idle time by running M-x zone-when-idle (or calling
it from elisp) with an idle time in seconds. You can turn it off with M-x
zone-leave-me-alone.

This one’s guaranteed to make your coworkers freak out if it kicks off while they are
looking.

Multiplication Puzzle

mpuz 

This is another brain-twisting puzzle game. When you run M-x mpuz you are given a
multiplication puzzle where you have to replace the letters with numbers and ensure
the numbers add (multiply?) up.

You can run M-x mpuz-show-solution to solve the puzzle if you get stuck.

Miscellaneous

There are more, but they’re not the most useful or interesting:

,* You can translate a region into morse code with M-x morse-region and M-x
 unmorse-region.
,* The Dissociated Press is a very simple command that applies something like a
 random walk markov-chain generator to a body of text in a buffer and generates
 nonsensical text from the source body. Try it with M-x dissociated-press.
,* The Gamegrid package is a generic framework for building grid-based games. So
 far only Tetris, Pong and Snake use it. It’s called gamegrid.
,* The gametree package is a complex way of notating and tracking chess games
 played via email.
,* The M-x spook command inserts random words (usually into emails) designed to
 confuse/overload the “NSA trunk trawler” – and keep in mind this module dates
 from the 1980s and 1990s – with various words the spooks are supposedly
 listening for. Of course, even fifteen years ago that would’ve seemed awfully
 paranoid and quaint but not so much any more…

Conclusion

I love the games and playthings that ship with Emacs. A lot of them date from, well,
let’s just call a different era: an era where whimsy was allowed or perhaps even
encouraged. Some are known classics (like Tetris and Tower of Hanoi) and some of
the others are fun variations on classics (like blackbox) — and yet I love that they ship
with Emacs after all these years. I wonder if any of these would make it into Emacs’s
codebase today; well, they probably wouldn’t — they’d be relegated to the package
manager where, in a clean and sterile world, they no doubt belong.

There’s a mandate in Emacs to move things not essential to the Emacs experience
to ELPA, the package manager. I mean, as a developer myself, that does make
sense, but… surely for every package removed and exiled to ELPA we chip away the
essence of what defines Emacs?

** To set on a file by file
To set the VisualLineMode on a file by file basis using emacs local variables, try:
    #  local variables:
    #    eval: (visual-line-mode t)
** Install package
*** lisp auto code
		#+begin_src emacs-lisp :tangle yes
 (unless (package-installed-p 'yasnippet-snippets)
   (package-install 'yasnippet-snippets))
 (require 'yasnippet-snippets)
		#+end_src
*** устанавливать в ручную : 
;; только если устанавливать в ручную
;; (add-to-list 'load-path
;;               "~/.emacs.d/plugins/yasnippet")
*** autoload : 
(autoload 'helm-company "helm-company") ;; Not necessary if using ELPA package
*** eval-after-load : 
(eval-after-load 'company
  '(progn
     (define-key company-mode-map (kbd "C-:") 'helm-company)
     (define-key company-active-map (kbd "C-:") 'helm-company)))
*** describe-package (найти пакаджи на сервере и описанить)
describe-package
** Help Docs Emacs 
*** To set on a file by file 
To set the VisualLineMode on a file by file basis using emacs local variables, try:
    #  local variables:
    #    eval: (visual-line-mode t)
*** Install package
**** lisp auto code
		#+begin_src emacs-lisp :tangle yes
 (unless (package-installed-p 'yasnippet-snippets)
   (package-install 'yasnippet-snippets))
 (require 'yasnippet-snippets)
		#+end_src
**** устанавливать в ручную : 
;; только если устанавливать в ручную
;; (add-to-list 'load-path
;;               "~/.emacs.d/plugins/yasnippet")
**** autoload : 
(autoload 'helm-company "helm-company") ;; Not necessary if using ELPA package
**** eval-after-load : 
(eval-after-load 'company
  '(progn
     (define-key company-mode-map (kbd "C-:") 'helm-company)
     (define-key company-active-map (kbd "C-:") 'helm-company)))
**** describe-package (найти пакаджи на сервере и описанить)
describe-package

*** load require: 
	#+begin_src emacs-lisp :tangle yes
(eval-after-load 'company
  '(add-to-list
    'company-backends '(company-irony-c-headers company-irony)))
(eval-after-load 'company
  '(add-to-list 'company-backends 'company-irony))
(require 'company)
(add-hook 'after-init-hook 'global-company-mode)
(global-set-key "\t" 'company-complete-common)
	#+end_src
*** Keyborde help 
**** evaluate
*****    27.9 Evaluating Emacs Lisp Expressions
Emacs Lisp mode is the major mode for editing Emacs Lisp. Its mode command is M-x emacs-lisp-mode.
Emacs provides several commands for evaluating Emacs Lisp expressions. You can use these commands in Emacs Lisp mode, to test your Emacs Lisp code as it is being written. For example, after re-writing a function, you can evaluate the function definition to make it take effect for subsequent function calls. These commands are also available globally, and can be used outside Emacs Lisp mode.
M-:
    Read a single Emacs Lisp expression in the minibuffer, evaluate it, and print the value in the echo area (eval-expression).
~C-x C-e~
    Evaluate the Emacs Lisp expression ~before point~, and print the value in the echo area (eval-last-sexp).
~C-M-x (in Emacs Lisp mode)~
~M-x eval-defun~
    Evaluate the defun containing or after point, and print the value in the echo area (eval-defun).
~M-x eval-region~
    Evaluate all the Emacs Lisp expressions in the region.
~M-x eval-buffer~
    Evaluate al

** Images

Although Emacs is a text editor, it can also manage images. In Org mode, an image is a link to an image file. You can preview the file in your buffer or export it to your preferred format. You can also add captions and set export properties for each image.

  #+caption: Image caption.
  #+attr_html: :alt Alternative text
  [[file:path/to/image]]

If you use the Helm completion system, you can preview the image as you select it with helm-follow-mode. When you are in the Helm selection session, toggle follow mode with C-c C-f. As you move the cursor, images will appear in anoter window.

To view the preview images in your document or remove the previews, you press C-c C-x C-v. You can also add #+startup: inlineimages to view images by default.

To add an image, press C-c C-l, which opens the link menu. Org mode understands many types of links. We want the file type, so type file:. Press enter and select the image filename in the mini buffer. You can skip the file part with the C-u C-c C-l shortcut (adding C-u before the standard shortcut.)

After you enter the image, you preview it with the org-redisplay-inline-images function or C-c C-x C-v.

You open a link in Org mode with a mouse click or by pressing C-c C-o with your cursor on the link text.

The images in the buffer are all shown at the same width. The article about writing articles and books with Emacs and the article about creating websites with Emacs explains how to control image with and other image properties.

You can increase or decrease the size of an image with the + and - keys.

** load require:
	#+begin_src emacs-lisp :tangle yes
(eval-after-load 'company
  '(add-to-list
    'company-backends '(company-irony-c-headers company-irony)))
(eval-after-load 'company
  '(add-to-list 'company-backends 'company-irony))
(require 'company)
(add-hook 'after-init-hook 'global-company-mode)
(global-set-key "\t" 'company-complete-common)
	#+end_src
** Keyborde help
*** evaluate
**** 27.9 Evaluating Emacs Lisp Expressions
Emacs Lisp mode is the major mode for editing Emacs Lisp. Its mode command is M-x emacs-lisp-mode.
Emacs provides several commands for evaluating Emacs Lisp expressions. You can use these commands in Emacs Lisp mode, to test your Emacs Lisp code as it is being written. For example, after re-writing a function, you can evaluate the function definition to make it take effect for subsequent function calls. These commands are also available globally, and can be used outside Emacs Lisp mode.
M-:
    Read a single Emacs Lisp expression in the minibuffer, evaluate it, and print the value in the echo area (eval-expression).
~C-x C-e~
    Evaluate the Emacs Lisp expression ~before point~, and print the value in the echo area (eval-last-sexp).
~C-M-x (in Emacs Lisp mode)~
~M-x eval-defun~
    Evaluate the defun containing or after point, and print the value in the echo area (eval-defun).
~M-x eval-region~
    Evaluate all the Emacs Lisp expressions in the region.
~M-x eval-buffer~
    Evaluate all the Emacs Lisp expressions in the buffer. 

M-: (eval-expression) reads an expression using the minibuffer, and evaluates it. (Before evaluating the expression, the current buffer switches back to the buffer that was current when you typed M-:, not the minibuffer into which you typed the expression.)

The command C-x C-e (eval-last-sexp) evaluates the Emacs Lisp expression preceding point in the buffer, and displays the value in the echo area. When the result of an evaluation is an integer, it is displayed together with the value in other formats (octal, hexadecimal, and character if eval-expression-print-maximum-character, described below, allows it).

If M-: or C-x C-e is given a prefix argument, it inserts the value into the current buffer at point, rather than displaying it in the echo area. If the prefix argument is zero, any integer output is inserted together with its value in other formats (octal, hexadecimal, and character). Such a prefix argument also prevents abbreviation of the output according to the variables eval-expression-print-level and eval-expression-print-length (see below). Similarly, a prefix argument of -1 overrides the effect of eval-expression-print-length.

The eval-defun command is bound to C-M-x in Emacs Lisp mode. It evaluates the top-level Lisp expression containing or following point, and prints the value in the echo area. In this context, a top-level expression is referred to as a “defun”, but it need not be an actual defun (function definition). In particular, this command treats defvar expressions specially. Normally, evaluating a defvar expression does nothing if the variable it defines already has a value. But this command unconditionally resets the variable to the initial value specified by the defvar; this is convenient for debugging Emacs Lisp programs. defcustom and defface expressions are treated similarly. Note that the other commands documented in this section do not have this special feature.

With a prefix argument, C-M-x instruments the function definition for Edebug, the Emacs Lisp Debugger. See Instrumenting for Edebug.

The command M-x eval-region parses the text of the region as one or more Lisp expressions, evaluating them one by one. M-x eval-buffer is similar but evaluates the entire buffer.

The options eval-expression-print-level and eval-expression-print-length control the maximum depth and length of lists to print in the result of the evaluation commands before abbreviating them. Supplying a zero prefix argument to eval-expression or eval-last-sexp causes lists to be printed in full. eval-expression-debug-on-error controls whether evaluation errors invoke the debugger when these commands are used; its default is t. eval-expression-print-maximum-character prevents integers which are larger than it from being displayed as characters. 
5.31 How do I execute (“evaluate”) a piece of Emacs Lisp code?
There are a number of ways to execute (evaluate, in Lisp lingo) an Emacs Lisp form:
    If you want it evaluated every time you run Emacs, put it in a file named .emacs in your home directory. This is known as “your .emacs file,” and contains all of your personal customizations.
    You can type the form in the *scratch* buffer, and then type <LFD> (or C-j) after it. The result of evaluating the form will be inserted in the buffer.
    ~In emacs-lisp-mode~, typing ~C-M-x~ evaluates a top-level form before or around point.
    Typing ~C-x C-e~ in ~any buffer~ evaluates the Lisp form immediately before point and prints its value in the echo area.
    Typing M-: or M-x eval-expression allows you to type a Lisp form in the minibuffer which will be evaluated once you press <RET>.
    You can use M-x load-file to have Emacs evaluate all the Lisp forms in a file. (To do this from Lisp use the function load instead.)
    The functions load-library, eval-region, eval-buffer, require, and autoload are also useful; see Emacs Lisp documentation, if you want to learn more about them. 
**** python
***** run unit test
 C-c C-t [elpy-test]

*** get help 
**** get menu command 
     Some of the commands in the menu bar have ordinary key bindings as well;
	if so, a key binding is shown after the item itself. 
 To view the full ~command name~ and documentation for a menu item, type ~C-h k~,
	and then select the menu bar with the mouse in the usual way (see Key Help). 
*** coment line 
26.5.1 Comment Commands
The following commands operate on comments:
M-;
    Insert or realign comment on current line; if the region is active, comment or uncomment the region instead (comment-dwim).
~C-x C-;~
    Comment or uncomment the current line (comment-line). If the region is active, comment or uncomment the lines in the region instead.
C-u M-;
    Kill comment on current line (comment-kill).
C-x ;
    Set comment column (comment-set-column).
C-M-j
M-j
    Like <RET> followed by inserting and aligning a comment (comment-indent-new-line). See Multi-Line Comments.
M-x comment-region
C-c C-c (in C-like modes)
    Add comment delimiters to all the lines in the region. 

The command to create or align a comment is M-; (comment-dwim). The word “dwim” is an acronym for “Do What I Mean”; it indicates that this command can be used for many different jobs relating to comments, depending on the situation where you use it.
When a region is active (see Mark), M-; either adds comment delimiters to the region, or removes them. If every line in the region is already a comment, it uncomments each of those lines by removing their comment delimiters. Otherwise, it adds comment delimiters to enclose the text in the region.
If you supply a prefix argument to M-; when a region is active, that specifies the number of comment delimiters to add or delete. A positive argument n adds n delimiters, while a negative argument -n removes n delimiters.
If the region is not active, and there is no existing comment on the current line, M-; adds a new comment to the current line. If the line is blank (i.e., empty or containing only whitespace characters), the comment is indented to the same position where <TAB> would indent to (see Basic Indent). If the line is non-blank, the comment is placed after the last non-whitespace character on the line. Emacs tries to fit the comment between the columns specified by the variables comment-column and comment-fill-column (see Options for Comments), if possible. Otherwise, it will choose some other suitable position, usually separated from the non-comment text by at least one space. In each case, Emacs places point after the comment's starting delimiter, so that you can start typing the comment text right away.
You can also use M-; to align an existing comment. If a line already contains the comment-start string, M-; realigns it to the conventional alignment and moves point after the comment's starting delimiter. As an exception, comments starting in column 0 are not moved. Even when an existing comment is properly aligned, M-; is still useful for moving directly to the start of the comment text.
~C-x C-;~ (comment-line) comments or uncomments complete lines. When a region is active (see Mark), C-x C-; either comments or uncomments the lines in the region. If the region is not active, this command comments or uncomments the line point is on. With a positive prefix argument n, it operates on n lines starting with the current one; with a negative n, it affects n preceding lines. After invoking this command with a negative argument, successive invocations with a positive argument will operate on preceding lines as if the argument were negated.
C-u M-; (comment-dwim with a prefix argument) kills any comment on the current line, along with the whitespace before it. Since the comment is saved to the kill ring, you can reinsert it on another line by moving to the end of that line, doing C-y, and then M-; to realign the comment. You can achieve the same effect as C-u M-; by typing M-x comment-kill (comment-dwim actually calls comment-kill as a subroutine when it is given a prefix argument).
The command M-x comment-region is equivalent to calling M-; on an active region, except that it always acts on the region, even if the mark is inactive. In C mode and related modes, this command is bound to C-c C-c. The command M-x uncomment-region uncomments each line in the region; a numeric prefix argument specifies the number of comment delimiters to remove (negative arguments specify the number of comment delimiters to add).
For C-like modes, you can configure the exact effect of M-; by setting the variables c-indent-comment-alist and c-indent-comments-syntactically-p. For example, on a line ending in a closing brace, M-; puts the comment one space after the brace rather than at comment-column. For full details see Comment Commands. 
*** Rebind keys
**** keys to keys
(global-set-key (kbd "<f7>") (kbd "C-u C-c C-c"))
**** lambda : 
(define-key evil-normal-state-map (kbd "M-c M-y") '(lambda() (interactive)
					(setq x-select-enable-clipboard t)
					;; (kill-ring-save (region-beginning) (region-end))
					(kill-ring-save (line-beginning-position) (line-beginning-position 2))
					(setq x-select-enable-clipboard nil)))
**** Mastering Key Bindings in Emacs
***** By Mickey Petersen
Creating or altering key bindings in Emacs is an elusive task for new Emacs users, as you're forced to write elisp. Learn how to create key bindings from scratch, or simply use some of my ready-made templates to get you started.
Updated for emacs 28

Altering the key bindings in Emacs should not, on the face of it, be a difficult task. But there’s a reason why the Emacs manual has dedicated 30-odd pages to describing, in great detail, all the subtleties and nuances of how to bind keys.

To save you the time of reading all of that, I’ve written a guide that covers what you need to know to bind keys to even complex commands, and a set of templates you can use in your own code. And the best thing about this guide is that you don’t need to know any elisp to get started!

I’ve included a selection of handy templates near the end that you can customize and put in your init file.
***** What makes up a key bind?
Emacs is “self-hosting” and, depending on who you ask, close to achieving sentience. Almost all of Emacs is written in Emacs Lisp. Every function in Emacs in turn builds on smaller functions, and so on, right through all the strata of elisp until you reach the C core.

Emacs’s key engine works in much the same way. Layer upon layer — or keymap upon keymap!

Even elementary things like inserting characters – called self-insertion – is amenable to change. For instance, the key f is bound to self-insert-command, a special command that repeats the last typed key N times. So if you type C-u 10 f you will see ffffffffff printed on your screen. As you can see, every keypress – even basic ones like typing a character on the screen – has an associated key binding that you can modify or even remove.
***** What is a Keymap?
A keymap is an internal data structure used by Emacs to store keys and their associated actions. Keymaps are rarely modified directly; instead, you modify them through a set of functions that manipulate the data structure for you. Most Emacs users will never interact with keymaps aside from indirectly assigning keys to them.

Every buffer and most major and minor modes have a keymap, and that keymap defines what the keys do when key sequences are sent to that buffer. Keys can be divided into three categories: undefined, prefix key, or complete key.

    Undefined is self-explanatory: it does no operation when it is invoked.
    Prefix keys are keys like C-x and C-c. They are make up part of a complete key, and each constituent part of a prefix key has its own keymap.
    A complete key is a key combination that resolves to a valid command. Like the key g, C-x C-f, or <mouse-1>.

In Emacs, a key is not limited to just your plain-as-day keys on a keyboard. Anything that can generate an input event is fair game: two-factor authentication USB sticks, as they just ‘type’ stuff like keyboard would; that Hammond organ you’re eyeing as a replacement for your regular keyboard; and of course your mouse.

It is possible for Emacs to enumerate all the active minor and major mode key bindings in a buffer by typing C-h m. That command is essential if you want to learn more about what a major or minor mode can do. Likewise, you can type out parts of a complete key (say M-s) and then type C-h to get a list of all keys that belong to that prefix.

If you know the name of a keymap, you can use M-x describe-keymap in Emacs 28.
***** Key Bind Commands
There are several ways you can define (or undefine) keys, as the table below shows, but in reality there are dozens of ways you can hack the keymaps.
I recommend you familiarize yourself with these, as they’re the ones you’re more likely to encounter:

(define-key KEYMAP KEY DEF)

    Defines a key against a keyboard map. Use this if you want to change a keymap that isn’t the current buffer map.
(local-set-key KEY COMMAND)

    Binds a key to the local keymap used by the active buffer, unlike define-key which takes an explicit keymap to bind a key against.
(global-set-key KEY COMMAND)

    Binds a key to the global keymap, making it available in all buffers (with a caveat – see below.)
(global-unset-key KEY)

    Removes KEY from the global keymap
(local-unset-key KEY)

    Removes KEY from the active, local keymap.
(use-package :bind ( ... ))

    If you use use-package, a declarative configuration tool then you may prefer to bind your keys using its declarative notation. It’s similar to how the other commands work.
***** Representing Keys in Code (kbd)
In order to actually bind a key you must first tell Emacs what key you intend to use. Unfortunately there’s more than one way of representing keys in Emacs: as a string, or as a vector. We won’t concern ourselves with either, as we will use a handy macro built in to Emacs called kbd. The kbd macro translates a human-readable key into a format Emacs can understand.

One important point to note is that you must surround function and navigation keys with < and >:

That includes F-keys, arrow keys and home row keys, like so: <home>, <f8> and <down>.

(kbd "<home>")    ;; OK
(kbd "tab")       ;; Wrong, but valid -- missing < and >
(kbd "<tab>")     ;; OK
(kbd "C-c p")     ;; OK
***** Remapping Commands

You can tell Emacs that you want to replace all keys pointing to a certain command with one of your own choosing by using the remap notation.

You must do this instead of passing a key to the key bind function you are using. This is the best way of replacing existing commands with your own, as Emacs does the hard work of figuring out all the keys it needs to rebind.

Example:

(define-key (current-global-map) [remap kill-line] 'my-homemade-kill-line)

Here I globally remap all keys that point to kill-line to my-homemade-kill-line.

For a practical example of remapping in use, see fixing the mark commands in transient mark mode.
***** Reserved Keys
You can pick any keyboard combination you desire – even if that key bind is already taken, so be careful – but Emacs has set aside certain keys for use by users. Generally, all keys prefixed with C-c ? (where ? is a single character) are reserved for you, and you alone. In practice most third-party packages don’t care about the key bindings they occupy. So keep that in mind.

The other set of reserved keys are the F-keys from F5 and onwards. The other two prefix keys reserved to you are hyper and super. They are remnants from ancient keyboards used in the 80s, but live on today in Emacs. Most PC-compatible keyboards won’t have a super or hyper key so some people rebind the Windows key and the Application Context key to be hyper and super instead.

If you’re fortunate enough to have spent a large sum of money on a fancy mechanical keyboard, you may have keys to spare, and the firmware to rebind them as you see fit. I recommend you look into dedicated hyper or super keys; but don’t forget, you can also tell your firmware to bind a key to, say, C-M- or even a prefix key, like C-x. Be creative.

Anyway. Because of Emacs’s roots, it understands these keys natively, and they have their own modifier keys: H- (e.g., H-q) for hyper; and s- for super. Note that s is super and S is shift.

In Windows you can add this to your init file to enable hyper and super:

(setq w32-apps-modifier 'hyper)
(setq w32-lwindow-modifier 'super)
(setq w32-rwindow-modifier 'hyper)

In X you’ll have to play around with xmodmap or your own tool of choice.
***** Keymap Lookup Order

Emacs will look for keys in a certain order, and that order I have described below. Keep in mind that only active keymaps are used, and that the order is top-to-bottom. The first “match” is the keymap Emacs uses.

    overriding-terminal-local-map for terminal-specific key binds.
    overriding-local-map for keys that should override all other local keymaps. Be VERY careful if you use this!

    Keymap char property at point for keymaps that are local to the character point is at.
    Common use cases include in-buffer fields, like the ones you find in M-x customize.
    emulation-mode-map-alists for advanced multi-mode keymap management
    minor-mode-overriding-map-alist for overriding the keymaps used by minor modes in major modes.
    minor-mode-map-alist is exactly like the overriding version above, but the preferred means of specifying the keymaps for minor modes.
    Keymap text property at point is like the one above for char properties but this is for text properties only.
    current-local-map for keymaps defined in the buffers’ current local map
    current-global-map is the last place Emacs looks. It hosts keys that are global.

But I can summarize these rules in a way that accounts for 99% of all key bindings you’re likely to care about:

    First, Emacs checks if there’s a minor mode key binding;

    If there isn’t, then Emacs checks if there are any local keys set.
    Typically this local map is shared by the major mode of the current buffer. So if you want to add a key binding to python-mode, you can use local-set-key to do this.
    And finally global keys are checked.

This order confuses many new users! Most people think that a global key trumps all other keys, but that is not so.
***** Global vs Local
A global key is functionally identical to that of a local one, except it is declared in a “global” keymap, governed by the current-global-map function (but usually it points to the default, the global-map variable.) Therefore, you can define a global key simply by passing the current-global-map function to define-key. The other – often better – alternative is to use the designated function, global-set-key.

In a similar vein, to bind a local key you can use the “designated” function local-set-key or the more general define-key. Like the global map, there exists an equivalent function current-local-map that returns the keymap local to the buffer.

If you want to change major mode key bindings, you’re going to have to choose between explicitly updating its keymap with define-key, or calling it from within the major mode’s buffer with local-set-key. You can’t always interchange the two, although they’re supposed to yield the same outcome. The reason is that some major modes regenerate keymaps or outright reset them. When that happens you may have to choose one or the other.
***** Defining your Command

If you thought the mechanics of keymaps and keys were difficult, think again! Deciding on what you want to bind to those keys is even harder – especially so if you want the command to do very specific things, like switching to a specific buffer name. But I’ve got a few tricks up my sleeve to help you cut out most of the elisp writing by letting Emacs do all the heavy lifting.
***** Invoking a command

Before I talk about the how and why of Emacs commands it is important that I mention how Emacs handles interactive functions — commonly known as commands. An Emacs command has an (interactive ...) form at the top of its function body. The (interactive ...) form controls how the function must respond to user input when it’s invoked interactively. For instance, a command that prompts a user for a string must tell Emacs – using the (interactive ...) form – how to do this.

All commands are executable through M-x and can therefore be bound to a key.

When you bind a function to a key it is important that you keep the above in mind, as you cannot invoke a non-interactive function through a key binding — it must be a command.

If it is your intent – as it so often is – to call a function, but with explicit parameter values, you must wrap it in a little helper function, like a lambda expression or even a standard defun. I have prepared templates (see below) that show you how to do this.
***** Describing the command
There are two ways of describing a command in elisp: the manual way, and the smart way. Let’s start out with the manual way.
The manual way is to use C-h k KEY to describe what KEY is bound to; the other way is to describe a function, FUNCTION, with C-h f FUNCTION.

Because Emacs is a self-documenting editor all functions, variables, keys, etc. known to Emacs are accessible through the describe-xxx commands. Type C-h C-h to see them all.

With the name of the command, you can now begin the process of reading the documentation string and call it with the requisite arguments it needs to work.

If you’re unsure how to do that, but you do know what you want, then you may want to give the smart way a go.
***** Capturing Complex Commands
The smart way has a name, or rather a command: repeat-complex-command, and it is conveniently bound to the key C-x ESC ESC and C-x M-:.
Because Emacs and elisp are, in effect, one and the same, it’s no surprise that Emacs keeps a running tally of the commands you’re executing, and when. That’s why M-x repeat-complex-command is able to represent the Lisp form of the last command you executed. When you invoke C-x ESC ESC you’re given the equivalent form in Elisp with the function arguments (if any) filled out for you. Emacs knows which arguments go where because of the (interactive ...) form: it knows which function argument belongs to which interactive user-facing prompt.

Here’s a practical example: C-M-% foo RET bar RET – which does a query-replace-regexp replacing foo with bar. Now, if you type C-x ESC ESC you should see something similar to this (reformatted for clarity):

(query-replace-regexp "foo" "bar" nil
   (if (and transient-mark-mode mark-active)
       (region-beginning))
   (if (and transient-mark-mode mark-active)
       (region-end)))

Observe how Emacs has kindly filled in all the function arguments to query-replace-regexp, including the optional parameters. If you were to run that command again (by say pasting it into the prompt in M-:) it’ll execute it in the exact same way as when you ran it interactively.

Here’s another one, this time I type C-x b *scratch* to switch to the *scratch* buffer:

(switch-to-buffer "*scratch*")

And there you have it. Obviously the commands seen here are the interactive commands. Stuff like replacing strings in a buffer is normally done with specialist elisp functions that don’t require user input, but that may not be a big deal if you are writing your own quick-and-dirty key binds.
***** Keyboard Macros
I’ve talked about the smart way above, but there’s an even smarter way: Keyboard macros. If you have a series of actions you want to perform, then record it in a keyboard macro!

Emacs can record, and play back, almost everything. You’re not limited to shoveling text; stuff like moving files in dired, or splitting your windows and opening the right buffers in them is not only possible, but easy.

I recommend you read about Emacs’s keyboard macros to see what I mean.
***** Putting it all together
We’re nearly done. I just need to explain a few more important concepts that confuse a lot of newbies: mode hooks and mode-specific keymaps, and then it’s on to the templates.

Most major and minor modes will usually set their keys once, when the module is first loaded; that’s good news for us. That means you can use define-key to add key definitions straight into a mode’s key map. Some modes are very advanced, and have several key maps – M-x isearch is a good example – and for those you will have to mess around with the source code or info manual to find out how to add keys.

Another option is M-x describe-keymap (Emacs 28+) that shows all known key maps. You can probably narrow down the ones you want that way.

It’s the modes that force you to use a mode hook that’s the problem: for that you must set your keys when the mode is activated, and that takes a little bit more work.

It is a convention in Emacs that all major and minor mode functions (the ones that activate the mode) end in -mode (e.g., python-mode), and it is also expected that its mode map follows a common naming scheme: xxxx-mode-map for the key map; and xxxx-mode-hook for the mode’s hook.

With those mode hooks in mind, you can add a local-set-key call and, hopefully, that’s all you need to override or add keys to the right mode’s key map.
***** Keymaps
****** Listing all the Mode Maps
Modifying a keymap is dirt simple, you use define-key as I’ve mentioned before. What’s not so easy is determining what keymap to modify in the first place.

If you type this Emacs will give you an apropos buffer with all the known mode maps that follow the major mode naming scheme:

C-u M-x apropos-variable RET -mode-map$ RET

You can also use M-x describe-keymap and then pick the mode map you want from the candidate list.
****** Quick Keymap Example
Let’s say I want to extend python-mode by adding a key, I’ll use F12, that switches to the python process buffer. Currently, that’s bound to C-c C-z and M-x python-shell-switch-to-shell.

(define-key python-mode-map (kbd "<f12>") 'python-shell-switch-to-shell)

In order to get the command belonging to the key, I used C-h k C-c C-z.
****** Creating New Keymaps
If you want your own blank key maps, particularly if you want to build your own complex web of prefix keys and such, you’ll need to learn how to make your own.

Luckily it’s not too hard.

(defvar my-special-map
  (let ((map (make-sparse-keymap)))
    (define-key map "s" 'shell)
    (define-key map "g" 'rgrep)
    map)
  "My special key map.")

First things first. We’ll need a variable, declared with defvar so it won’t get reevaluated by accident. Not sure what I mean by that? Read my article on evaluating elisp.

Next, we use a let form to bind the variable map to a sparse keymap created with make-sparse-keymap. Sparse in this case means “empty”. Inside the let form you can call define-key and assign commands to keys.

There is also copy-keymap if you want to copy another keymap and modify its copy instead. In fact, there’s a whole host of functions that deal with this. But I think these two are the ones worth knowing about if you’re building your own stuff.

Either way, you get a key map ready to go.
****** Repeating Keys with repeat-mode
Emacs 28 formalizes – the code that does it has existed in Emacs for eons – a method of making repeating key maps. If you find yourself typing C-x o over and over again to switch windows, then as of Emacs 28 you can type C-x o o o o ... ad infinitum if you enable M-x repeat-mode.

The new mode is easy to retrofit onto existing Emacs key map machinery if you know how.
****** Repeating Keys Example
NOTE: Make sure you enable M-x repeat-mode.
Consider the keys C-M-u and C-M-d. They move out or into balanced expressions, like ( ... ), [ ... ], and so on. Perfect for most programming languages.

For this to work, you have to define the repeatable keys: the one-letter chords that take effect after you’ve invoked the primary key.

(defvar balanced-repeat-map
 (let ((map (make-sparse-keymap)))
   (define-key map "u" 'backward-up-list)
   (define-key map "d" 'down-list)
   map)
 "Repeating map for balanced expressions.")

Next, we attach a property name and value to the commands that enable the repeating keys we defined in balanced-repeat-map:

(put 'backward-up-list 'repeat-map 'balanced-repeat-map)
(put 'down-list 'repeat-map 'balanced-repeat-map)

And that’s it! When you next type C-M-u or C-M-d you’re given the option to type u or d instead.
Hooks

A mode hook has zero-or-more functions that are called when its mode is activated. Mode-specific hooks are run when you activate that mode. That happens automatically when you open a file, or manually call M-x some-mode.
Altering Mode Hooks
***** Adding Hooks
    You can add a mode hook using the special function add-hook that takes the name of a hook (say python-mode-hook) and the name of a function to call.
****** Removing Hooks

    You can remove functions from a hook variable with remove-hook. If you are experimenting you may want to remove hooks as part of your testing.

    In newer Emacsen you can call it interactively, select a mode hook, and then pick the one you want to remove. That is good to know when you inevitably add lambda functions to a mode hook and now struggle with duplicate hooks!
****** Listing all the Mode Hooks
If you are unsure of the exact name of the mode hook, you can use this handy trick to list the ones Emacs can see:

M-x apropos-variable RET -mode-hook$ RET

That will show all mode hooks known to Emacs, including their docstring description. If you don’t see your mode it may be because Emacs hasn’t loaded it outright. You can try M-x load-library and see if you can load the package or library that way first.
****** Quick Hook Example
Let’s add a key (C-c q to run M-x shell) local to python-mode using a hook. For that to work we will need our special hook function, I’ve named it mp-add-python-keys, and in it we need local-set-key, the function that adds a key to the active buffer’s local map. Remember that local-set-key uses the local mode map.

Next is the command that tells Emacs that we want to add a mode hook to Python.

(defun mp-add-python-keys ()
  (local-set-key (kbd "C-c q") 'shell))

(add-hook 'python-mode-hook #'mp-add-python-keys)
***** Setting Key Bindings with use-package
If you use use-package then you can leverage its key binding facilities.

Let’s say you like the package M-x winner-mode, a minor mode that records your window configurations and lets you undo and redo changes made to it, by you or by commands you execute.

(use-package winner
  :config
  (winner-mode 1)
  :bind (("M-[" . winner-undo)
         ("M-]" . winner-redo)))

The :bind property is there to do just that. Here I’ve bound M-[ and M-] to two commands. Note the structure!

Another thing to keep in mind is that, unless you tell it otherwise, use-package defaults to global key bindings.

If, on the other hand, you want to insert the keys into a specific key map, you need to tell use-package the map to use:

(use-package eshell
  :bind (("C-c e" . eshell)
         :map eshell-mode-map
         ("M-m" . eshell-bol)))

Here I’ve chosen to bind C-c e to M-x eshell globally, as I have not specified a particular key map yet.

Next, I declare :map eshell-mode-map and from that point on, that is the keymap use-package uses when I ask it to bind M-m to eshell-bol.

So as you can see, it’s easy to bind to a variety of both global and keymap-specific maps.
***** Templates
****** Templates
Here’s a bunch of templates for various use-cases that you can cut’n’paste and use in your own code. I recommend naming things sensibly, and giving them a docstring (in-code documentation that explains what the code does) as well. The best way to avoid accidentally overriding another function with the same name, I would suggest you use a moniker or prefix. I use mp- for all of my own functions.

I also urge you to avoid the temptation of plastering your code with lambda functions. They’re great, sure; but if you ever need to update or change them during your development and testing cycle, you may end up with duplicate functions in your mode hooks playing havoc.

If you are unsure how to evaluate elisp, then read my article on evaluating elisp in Emacs.
****** Basic Global Key Binding
Binds a command to a global key binding.
Definition

(global-set-key (kbd "key-bind-here") 'interactive-command-here)

Example

Binds F1 to M-x shell

(global-set-key (kbd "<f1>") 'shell)
****** Add or Remove a Key to or from a Keymap

Adds or removes a key and its associated command to/from an explicit keymap. Use this if you know the name of the keymap and you want to add a key to it.
Definition
****** Add a key to a keymap:

(define-key KEYMAP (kbd "key-bind-here") 'interactive-command-here)
****** Remove a key from a keymap:

(define-key KEYMAP (kbd "key-bind-here") nil)

Example

Binds C-c p to python-switch-to-python

(define-key python-mode-map (kbd "C-c p") 'python-shell-switch-to-shell)
****** Complex Command Key Bind
Creates a global key bind that invokes multiple commands in a row. Use this to create compound keys or invoke commands that take parameters. Uses code from the Function Template.
Definition

(defun name-of-interactive-command-here ()
  (interactive)
  ;;; Insert your compound commands below
  )
(global-set-key (kbd "key-bind-here") 'name-of-interactive-command-here)

Example

Switches to the *scratch* buffer and inserts “Hello, World” where point is, and switches back to where it came from.

(defun switch-to-scratch-and-insert-text ()
  (interactive)
  (save-excursion
    (set-buffer "*scratch*")
    (insert "Hello, World")))
(global-set-key (kbd "C-c i") 'switch-to-scratch-and-insert-text)
****** Binding keys with a mode hook

Use this mode hook template to bind keys that won’t work with a standard define-key template, or if the key map is reset in when the mode is initialized.

If you have other, mode-specific changes, you want to apply at the same time, then this is the perfect place for you to do so.
Definition

(defun my-hook-function ()
  ;; add your code here. it will be called every
  ;; time the major mode is run.

  )
(add-hook 'my-mode-hook #'my-hook-function)

Example

Here I change the python indentation offset to 4 and make it local to that buffer with setq-local. Next, I disable eldoc-mode and I locally bind a key with local-set-key.

(defun mp-my-hook-settings ()
  (setq-local python-indent-offset 4)
  (eldoc-mode -1)
  (local-set-key (kbd "C-c p" 'python-shell-switch-to-shell)))

(add-hook 'python-mode-hook #'mp-my-hook-settings)

As you can see, this is a good place to put all your other tweaks that relate to a specific mode.
****** Remapping a command
This template will remap all keys that point to a specific command. Say you want to rebind kill-line, bound to C-k, but you want your code to only override the key binds that kill-line is actually bound to. Use this template to replace existing commands with those of your own, without worrying about explicitly rebinding each key.
Definition

Note: to replace a global key, you must use global-map or call current-global-map.

(define-key keymap [remap original-function] 'my-own-function)

Example

Example here is taken from my article on fixing the mark commands in transient mark mode.

I remap the keys that point to exchange-point-and-mark to my own function exchange-point-and-mark-no-activate.

(defun exchange-point-and-mark-no-activate ()
  "Identical to \\[exchange-point-and-mark] but will not activate the region."
  (interactive)
  (exchange-point-and-mark)
  (deactivate-mark nil))

(define-key global-map [remap exchange-point-and-mark] 'exchange-point-and-mark-no-activate)
****** Custom Prefixes
Creating a prefix is easy nowadays as you don’t have to explicitly create your own prefix keymaps, provided you use local-set-key or global-set-key. Use custom prefixes to group or categorize your commands.
Definition

(global-set-key (kbd "subkey_1 ... endkey_1") 'my-command-1)
(global-set-key (kbd "subkey_1 ... endkey_2") 'my-command-2)

Example

Global keys that will insert either the time of the day, or the current date. Type C-c i d to insert the date; and C-c i t to insert the time. Type C-c i C-h to list all bound keys under the C-c i prefix.

(defun mp-insert-date ()
  (interactive)
  (insert (format-time-string "%x")))

(defun mp-insert-time ()
  (interactive)
  (insert (format-time-string "%X")))

(global-set-key (kbd "C-c i d") 'mp-insert-date)
(global-set-key (kbd "C-c i t") 'mp-insert-time)
****** Repeating Key Maps with repeat-mode
This feature requires Emacs 28 and that you have turned on M-x repeat-mode.

Repeating keys allow you to tap one or more single keys to repeat a command once you have engaged repeat mode by first typing a key that supports repeating keys.

Adding this functionality to existing commands in Emacs is easy.
Definition

For changes relating to a specific package, use this format:

(defvar my-repeat-map
 (let ((map (make-sparse-keymap)))
   (define-key map "a" 'some-command)
   ;; ...
   (define-key map "z" 'another-command)
   map)
 "Repeating map example.")

Next, we attach a property name and value to the commands that should trigger my-repeat-map:

(put 'some-command 'repeat-map 'my-repeat-map)
(put 'another-command 'repeat-map 'my-repeat-map)

Example

Activate this repeat map with C-M-u or C-M-d, then type d or u to move down or up.

(defvar balanced-repeat-map
 (let ((map (make-sparse-keymap)))
   (define-key map "u" 'backward-up-list)
   (define-key map "d" 'down-list)
   map)
 "Repeating map for balanced expressions.")

(put 'backward-up-list 'repeat-map 'balanced-repeat-map)
(put 'down-list 'repeat-map 'balanced-repeat-map)
****** Binding keys with use-package
If you are already using use-package then you may as well use it to bind your keys also.
You can define global and local keys this way.
Definition
For changes relating to a specific package, use this format:

(use-package package-name-here
  :bind (("kbd-here" . command-here)
         :map some-map
         ("kbd-here" . another-command-here)
         :map yet-another-map
         ("kbd-here" . some-command-here)))

But if you want a place to store global keys that don’t relate to any one package, use the package name emacs instead.
Example

Here I bind C-c e to eshell globally, and M-m to eshell-bol locally.

(use-package eshell
  :bind (("C-c e" . eshell)
         :map eshell-mode-map
         ("M-m" . eshell-bol)))
***** Conclusion
I have covered almost every facet of key binding that most Emacs users would care to know about. If you use use-package, then it can definitely cut down on some of the tedium and help centralize your bindings with your other settings.

I recommend you read why I think keyboard macros are misunderstood as it’ll further cement just how much “no-code” Emacs you can accomplish with keyboard macros and key bindings.
*** Emacs Movement 
‘C-M-a’
‘C-M-e’
   Move point to the beginning or end of the current function or
[[info:emacs#Motion in C][info:emacs#Motion in C]]  
‘C-M-f’
     Move forward over a balanced expression (‘forward-sexp’).
‘C-M-b’
     Move backward over a balanced expression (‘backward-sexp’).
‘C-M-k’
     Kill balanced expression forward (‘kill-sexp’).
‘C-M-t’
     Transpose expressions (‘transpose-sexps’).
‘C-M-@’
‘C-M-<SPC>’
     Put mark after following expression (‘mark-sexp’).
‘C-M-n’
     Move forward over a parenthetical group (‘forward-list’).
‘C-M-p’
     Move backward over a parenthetical group (‘backward-list’).
‘C-M-u’
     Move up in parenthesis structure (‘backward-up-list’).
‘C-M-d’
     Move down in parenthesis structure (‘down-list’).
*** Intends 
*** replace-string : 
M-x replace-string RET ; RET C-q C-j.

    C-q for quoted-insert,

    C-j is a newline.

*** repeat-complex-command : C-x ESC ESC or C-x M-:.
The smart way has a name, or rather a command: repeat-complex-command, and it is conveniently bound to the key C-x ESC ESC and C-x M-:.
Because Emacs and elisp are, in effect, one and the same, it’s no surprise that Emacs keeps a running tally of the commands you’re executing, and when. That’s why M-x repeat-complex-command is able to represent the Lisp form of the last command you executed. When you invoke C-x ESC ESC you’re given the equivalent form in Elisp with the function arguments (if any) filled out for you. Emacs knows which arguments go where because of the (interactive ...) form: it knows which function argument belongs to which interactive user-facing prompt.

Here’s a practical example: C-M-% foo RET bar RET – which does a query-replace-regexp replacing foo with bar. Now, if you type C-x ESC ESC you should see something similar to this (reformatted for clarity):

(query-replace-regexp "foo" "bar" nil
   (if (and transient-mark-mode mark-active)
       (region-beginning))
   (if (and transient-mark-mode mark-active)
       (region-end)))

Observe how Emacs has kindly filled in all the function arguments to query-replace-regexp, including the optional parameters. If you were to run that command again (by say pasting it into the prompt in M-:) it’ll execute it in the exact same way as when you ran it interactively.

Here’s another one, this time I type C-x b *scratch* to switch to the *scratch* buffer:

(switch-to-buffer "*scratch*")

And there you have it. Obviously the commands seen here are the interactive commands. Stuff like replacing strings in a buffer is normally done with specialist elisp functions that don’t require user input, but that may not be a big deal if you are writing your own quick-and-dirty key binds.
** Environment Variable
*** "PATH" : 
**** Описание бага\фичи
	 переменая енворемент обновляется только после перезапуска системы
 тоесть после установки нового софта - он не виден даже после перезапуска емак
 ещё могут быть проблемы посколько есть переменая пути систему
 а есть переменая запуска емака и есть переменая рабочей деректории емака
***** решение:
	  установить инворемнт перемуную в ручную для запушеного еворемента
	  из емака
***** фича
	  есть возможность поексмеремтиовать 
	  если нет уверености что всё настроено как надо
**** setenv "PATH" : 
  ;; example of setting env var named “path”, by appending a new path to existing path
  (setenv "PATH"
	(concat
	 "C:/cygwin/usr/local/bin" ";"
	 "C:/cygwin/usr/bin" ";"
	 "C:/cygwin/bin" ";"
	 (getenv "PATH")
	)
  )
**** getenv "PATH" : 
 (to evaluate elisp code, select it and Alt+x eval-region.
 [see Evaluate Emacs Lisp Code])
	 (getenv "PATH")
**** edit in file
	 copy to *scratch*
(progn
(forward-line 3)
(insert (getenv "PATH"))
)
вернёт дос пас с одним слешем

(progn
(forward-line 3)
  (setenv "PATH"
"

"
))
нужно вначале заменить на двойной слешь
можно через замену \ \\
*** SHELL : 
If the path printed by evaluating (getenv "SHELL") in Emacs points at bash
or zsh, this should work fine.
**** getenv : 
(getenv "SHELL")
"D:/Development/lisp/Emacs/libexec/emacs/26.2/x86_64-w64-mingw32/cmdproxy.exe"

*** exec-path
**** Difference between exec-path and PATH
	 The value of environment variable “PATH” is used by emacs when you are running a shell in emacs, similar to when you are using a shell in a terminal.
	 The exec-path is used by emacs itself to find programs it needs for its features, such as spell checking, file compression, compiling, grep, diff, etc.

(when (string-equal system-type "windows-nt")
  (setq exec-path
'(
"C:/Program Files (x86)/Emacs/emacs/bin/"
"C:/Program Files (x86)/Emacs/EmacsW32/gnuwin32/bin/"
"C:/Windows/system32/"
"C:/Windows/"
"C:/Windows/System32/Wbem/"
"C:/Windows/system32/WindowsPowerShell/v1.0/"
)
 ))
**** показать exec-path
(message exec-path)
  (setq exec-path)
**** set

(setq exec-path (append exec-path '("D:/shell/CygWin/cygwin64/bin")))
(setenv "PATH" (concat (getenv "PATH") "D:\\shell\\CygWin\\cygwin64\\bin"))

    (setq exec-path (append exec-path '("/sw/bin")))
    (setenv "PATH" (concat (getenv "PATH") ":/sw/bin"))
**** Emacs Lisp Code for Setting PATH and exec-path in sync
(when (string-equal system-type "windows-nt")
  (let (
        (mypaths
         '(
           "C:/Python27"
           ;; "C:/Python32"
           "C:/strawberry/c/bin"
           "C:/strawberry/perl/site/bin"
           "C:/strawberry/perl/bin"

           "C:/Users/h3/AppData/Roaming/npm"
           "C:/Program Files (x86)/nodejs/"

           "C:/cygwin/usr/local/bin"
           "C:/cygwin/usr/bin"
           "C:/cygwin/bin"

           "C:/Program Files (x86)/ErgoEmacs/msys/bin"
           "C:/Program Files (x86)/Mozilla Firefox/"
           "C:/Program Files (x86)/Opera"
           "C:/Program Files (x86)/Safari"
           "C:/Users/h3/AppData/Local/Google/Chrome/Application"
           ) )
        )

    (setenv "PATH" (mapconcat 'identity mypaths ";") )

    (setq exec-path (append mypaths (list "." exec-directory)) )
    ) )
*** Operating System Environment
Emacs provides access to variables in the operating system environment
through various functions.  These variables include the name of the
system, the user’s UID, and so on.
**** Variable: system-configuration
 This variable holds the standard GNU configuration name for the
 hardware/software configuration of your system, as a string.  For
 example, a typical value for a 64-bit GNU/Linux system is
 ‘"x86_64-unknown-linux-gnu"’.
**** Variable: system-type
 The value of this variable is a symbol indicating the type of operating
 system Emacs is running on.  The possible values are:
	We do not wish to add new symbols to make finer distinctions unless it
	is absolutely necessary!  In fact, we hope to eliminate some of these
	alternatives in the future.  If you need to make a finer distinction
	than system-type allows for, you can test
	system-configuration, e.g., against a regexp.
***** aix
  IBM’s AIX.
***** berkeley-unix
   Berkeley BSD and its variants.
***** cygwin
	Cygwin, a Posix layer on top of MS-Windows.
***** 	darwin
	 Darwin (Mac OS X).
***** 	gnu
	 The GNU system (using the GNU kernel, which consists of the HURD and Mach).
***** 	gnu/linux
	 A GNU/Linux system—that is, a variant GNU system, using the Linux
	 kernel.  (These systems are the ones people often call “Linux”, but
	 actually Linux is just the kernel, not the whole system.)
***** 	gnu/kfreebsd
	 A GNU (glibc-based) system with a FreeBSD kernel.
***** 	hpux
	 Hewlett-Packard HPUX operating system.
***** 	irix
	 Silicon Graphics Irix system.
***** 	nacl
	 Google Native Client (NaCl) sandboxing system.
***** 	ms-dos
	 Microsoft’s DOS.  Emacs compiled with DJGPP for MS-DOS binds
	 system-type to ms-dos even when you run it on MS-Windows.
***** 	usg-unix-v
	 AT&T Unix System V.
***** 	windows-nt
	 Microsoft Windows NT, 9X and later.  The value of system-type
	 is always windows-nt, e.g., even on Windows 10.
**** Function: system-name
 This function returns the name of the machine you are running on, as a
 string.
**** User Option: mail-host-address
 If this variable is non-nil, it is used instead of
 system-name for purposes of generating email addresses.  For
 example, it is used when constructing the default value of
 user-mail-address.  See User Identification.  (Since this is
 done when Emacs starts up, the value actually used is the one saved when
 Emacs was dumped.  See Building Emacs.)
**** Command: getenv var &optional frame

 This function returns the value of the environment variable var,
 as a string.  var should be a string.  If var is undefined
 in the environment, getenv returns nil.  It returns
 ‘""’ if var is set but null.  Within Emacs, a list of environment
 variables and their values is kept in the variable process-environment.


 (getenv "USER")
      ⇒ "lewis"


 The shell command printenv prints all or part of the environment:


 bash$ printenv
 PATH=/usr/local/bin:/usr/bin:/bin
 USER=lewis
 TERM=xterm
 SHELL=/bin/bash
 HOME=/home/lewis
 …
**** Command: setenv variable &optional value substitute
 This command sets the value of the environment variable named
 variable to value.  variable should be a string.
 Internally, Emacs Lisp can handle any string.  However, normally
 variable should be a valid shell identifier, that is, a sequence
 of letters, digits and underscores, starting with a letter or
 underscore.  Otherwise, errors may occur if subprocesses of Emacs try
 to access the value of variable.  If value is omitted or
 nil (or, interactively, with a prefix argument), setenv
 removes variable from the environment.  Otherwise, value
 should be a string.

 If the optional argument substitute is non-nil, Emacs
 calls the function substitute-env-vars to expand any
 environment variables in value.

 setenv works by modifying process-environment; binding
 that variable with let is also reasonable practice.

 setenv returns the new value of variable, or nil
 if it removed variable from the environment.
**** Variable: process-environment
 This variable is a list of strings, each describing one environment
 variable.  The functions getenv and setenv work by means
 of this variable.


 process-environment
 => ("PATH=/usr/local/bin:/usr/bin:/bin"
     "USER=lewis"
     "TERM=xterm"
     "SHELL=/bin/bash"
     "HOME=/home/lewis"
     …)


 If process-environment contains multiple elements that
 specify the same environment variable, the first of these elements
 specifies the variable, and the others are ignored.
**** Variable: initial-environment
 This variable holds the list of environment variables Emacs inherited
 from its parent process when Emacs started.
**** Variable: path-separator
 This variable holds a string that says which character separates
 directories in a search path (as found in an environment variable).  Its
 value is ":" for Unix and GNU systems, and ";" for MS systems.
**** Function: parse-colon-path path
 This function takes a search path string such as the value of
 the PATH environment variable, and splits it at the separators,
 returning a list of directory names.  nil in this list means
 the current directory.  Although the function’s name says
 “colon”, it actually uses the value of path-separator.
 (parse-colon-path ":/foo:/bar")
      => (nil "/foo/" "/bar/")
**** Variable: invocation-name
 This variable holds the program name under which Emacs was invoked.  The
 value is a string, and does not include a directory name.
**** Variable: invocation-directory
 This variable holds the directory from which the Emacs executable was
 invoked, or nil if that directory cannot be determined.
**** Variable: installation-directory
 If non-nil, this is a directory within which to look for the
 lib-src and etc subdirectories.  In an installed Emacs,
 it is normally nil.  It is non-nil
 when Emacs can’t find those directories in their standard installed
 locations, but can find them in a directory related somehow to the one
 containing the Emacs executable (i.e., invocation-directory).
**** Function: load-average &optional use-float
 This function returns the current 1-minute, 5-minute, and 15-minute
 system load averages, in a list.  The load average indicates the
 number of processes trying to run on the system.

 By default, the values are integers that are 100 times the system load
 averages, but if use-float is non-nil, then they are
 returned as floating-point numbers without multiplying by 100.

 If it is impossible to obtain the load average, this function signals
 an error.  On some platforms, access to load averages requires
 installing Emacs as setuid or setgid so that it can read kernel
 information, and that usually isn’t advisable.

 If the 1-minute load average is available, but the 5- or 15-minute
 averages are not, this function returns a shortened list containing
 the available averages.


 (load-average)
      ⇒ (169 48 36)
 (load-average t)
      ⇒ (1.69 0.48 0.36)


 The shell command uptime returns similar information.
**** Function: emacs-pid
 This function returns the process ID of the Emacs process,
 as an integer.
**** Variable: tty-erase-char
 This variable holds the erase character that was selected
 in the system’s terminal driver, before Emacs was started.
** Customize
*** by menu
To customize rainbow-delimiters mode, you can use:
M-x customize-group rainbow-delimiters
Color Scheme

customize-group rainbow-delimiters-faces has the faces for successive nested pairs of delimiters. You can change them through emacs customize or in your color theme or dot-emacs.

The face rainbow-delimiters-unmatched-face is used for unmatched closing delimiters.

Zenburn and Solarized themes have their own colors for these faces.

deftheme/color-theme.el: Further information is at the top of rainbow-delimiters.el.
Stop Highlighting Certain Delimiters

You can disable highlighting of any of the supported delimiter types through the customize interface, in the Toggle Delimiters section. 
*** using command
используя названия из меню можно подобрать подходяшию команду
на основе примера
	;; (custom-theme-set-faces
	;; 'material
	;; `(outline-1 ((t (:height 1.25 :weight bold))))
	;; `(outline-2 ((t (:height 1.15 :weight bold))))
	;; `(outline-3 ((t (:height 1.05 :weight bold))))
	;; `(outline-4 ((t (:height 1.95 :weight bold))))
	;; `(outline-5 ((t (:height 1.85 :weight bold))))
	;; `(outline-6 ((t (:height 1.75 :weight bold))))
	;; `(outline-7 ((t (:height 1.65 :weight bold))))
** info\help
*** info manual : 
s - to seach in node of manual(not work in index)
i - 
g - 
   Check out the info manual for Org Mode with C-h i (info) to learn more, including how to customize the number of days initially displayed and what day your week starts on. 
   удобная систе показиваюшая мануалки по всем установленым модам
f1-f - show funcrion doc string
f1-F - find funcrion in manual
*** (apropos)
Search Help
найти во всём имаксе
 иназвании функции и хелпы
и описание вообще везде
поиск продолжительный
PATTERN can be a word, a list of words (separated by spaces),
or a regexp (using some regexp special characters).  If it is a word,
search for matches for that word as a substring.  If it is a list of words,
search for matches for any two (or more) of those words.

With C-u prefix, or if ‘apropos-do-all’ is non-nil,
consider all symbols (if they match PATTERN).

Returns list of symbols and documentation found.
*** list of all keys that belong to that
It is possible for Emacs to enumerate all the active minor and major mode key
bindings in a buffer by typing C-h m. That command is essential if you want to learn
more about what a major or minor mode can do. Likewise, you can type out parts of a
complete key (say M-s) and then type C-h to get a list of all keys that belong to that
prefix : 
prefix.

*** customize-group
		Получить инфу по всем переменным
		режима поскольку зачастую режима нет в мануале
зато кажется это генерится автоматически
и там вполне полный хелп по каждой переменной
M-x customize-group RET company. 
*** links helps\tutorials
**** doom tutorial
https://youtube.com/playlist?list=PLPNohcoOBa5FT65hMZL6SkFmbyqFaLe3b
** Hooks
*** SOF 
**** add-hook : 
(add-hook 'before-save-hook 'delete-trailing-whitespace)
**** remove-hook : 
I use the use-package macro, and I tried adding (remove-hook 'before-save-hook 'delete-trailing-whitespace) to my :config block, but that removes the hook globally. How can I remove it specifically for org-mode?
** run
*** run multiple Emacs servers : 
   You can run multiple Emacs servers on the same machine by giving each
one a unique “server name”, using the variable ‘server-name’.  For
example, ‘M-x set-variable <RET> server-name <RET> "foo" <RET>’ sets the
server name to ‘foo’.  The ‘emacsclient’ program can specify a server by
name, using the ‘-s’ or the ‘-f’ option (*note emacsclient Options::),
depending on whether or not the server uses a TCP socket (*note TCP
Emacs server::).

   If you want to run multiple Emacs daemons (*note Initial Options::),
you can give each daemon its own server name like this:

       emacs --daemon=foo

*** Subprocesses
**** 36.1 Functions that Create Subprocesses
***** three primitives : 
	There are three primitives that create a new subprocess in which to run
	a program.  One of them, ~make-process~, creates an asynchronous
	process and returns a process object (see Asynchronous Processes).
	The other two, =call-process= and =call-process-region=,
	create a synchronous process and do not return a process object
	(see Synchronous Processes).  There are various higher-level
	functions that make use of these primitives to run particular types of
	process.

	Synchronous and asynchronous processes are explained in the following
	sections.  Since the three functions are all called in a similar
	fashion, their common arguments are described here.

	In all cases, the functions specify the program to be run.  An error
	is signaled if the file is not found or cannot be executed.  If the
	file name is relative, the variable exec-path contains a list
	of directories to search.  Emacs initializes exec-path when it
	starts up, based on the value of the environment variable PATH.
	The standard file name constructs, ‘~’, ‘.’, and ‘..’,
	are interpreted as usual in exec-path, but environment variable
	substitutions (‘$HOME’, etc.) are not recognized; use
	substitute-in-file-name to perform them (see File Name Expansion).  nil in this list refers to
	default-directory.

	Executing a program can also try adding suffixes to the specified
	name:
***** User Option: exec-suffixes
   This variable is a list of suffixes (strings) to try adding to the
   specified program file name.  The list should include "" if you
   want the name to be tried exactly as specified.  The default value is
   system-dependent.

   Please note: The argument program contains only the
   name of the program file; it may not contain any command-line
   arguments.  You must use a separate argument, args, to provide
   those, as described below.

   Each of the subprocess-creating functions has a buffer-or-name
   argument that specifies where the output from the program will go.  It
   should be a buffer or a buffer name; if it is a buffer name, that will
   create the buffer if it does not already exist.  It can also be
   nil, which says to discard the output, unless a custom filter
   function handles it.  (See Filter Functions, and Read and Print.)  Normally, you should avoid having multiple processes send
   output to the same buffer because their output would be intermixed
   randomly.  For synchronous processes, you can send the output to a
   file instead of a buffer (and the corresponding argument is therefore
   more appropriately called destination).  By default, both
   standard output and standard error streams go to the same destination,
   but all the 3 primitives allow optionally to direct the standard error
   stream to a different destination.

   All three of the subprocess-creating functions allow to specify
   command-line arguments for the process to run. For call-process
   and call-process-region, these come in the form of a
   &rest argument, args.  For make-process, both the
   program to run and its command-line arguments are specified as a list
   of strings.  The command-line arguments must all be strings, and they
   are supplied to the program as separate argument strings.  Wildcard
   characters and other shell constructs have no special meanings in
   these strings, since the strings are passed directly to the specified
   program.

   The subprocess inherits its environment from Emacs, but you can
   specify overrides for it with process-environment.  See System Environment.  The subprocess gets its current directory from the
   value of default-directory.
***** Variable: exec-directory
   The value of this variable is a string, the name of a directory that
   contains programs that come with GNU Emacs and are intended for Emacs
   to invoke.  The program movemail is an example of such a program;
   Rmail uses it to fetch new mail from an inbox.
***** User Option: exec-path
   The value of this variable is a list of directories to search for
   programs to run in subprocesses.  Each element is either the name of a
   directory (i.e., a string), or nil, which stands for the default
   directory (which is the value of default-directory).
   See executable-find, for the details of this search.


   The value of exec-path is used by call-process and
   start-process when the program argument is not an absolute
   file name.

   Generally, you should not modify exec-path directly.  Instead,
   ensure that your PATH environment variable is set appropriately
   before starting Emacs.  Trying to modify exec-path
   independently of PATH can lead to confusing results.
**** exempl
***** shell link
 [shell:D:\scripts\CMD\CygWin\vim.cmd "D:\tools.win\Fast\TehnoMage_fast\ActionDeck\Cooking\greentea.txt"]

 [shell:D:\Development\lisp\HOME\emacs_Run.cmd "D:\tools.win\Fast\TehnoMage_fast\ActionDeck\Cooking\greentea.txt"]
 (shell  "D:\tools.win\Fast\TehnoMage_fast\ActionDeck\Cooking\greentea.txt")
 [shell:D:\scripts\CMD\emagus\run_far.cmd "D:\tools.win\Fast\TehnoMage_fast\ActionDeck\Cooking\"]

 [shell:D:\Development\lisp\HOME\emacs_client.cmd  "D:\tools.win\Fast\TehnoMage_fast\ActionDeck\Cooking\greentea.txt"]
***** shell-command  : 
 (shell-command "D:/Development/lisp/HOME/emacs_Run.cmd D:/tools.win/Fast/TehnoMage_fast/ActionDeck/Cooking/greentea.txt")

 (shell-command "D:/Development/lisp/HOME/emacs_Run.cmd D:/tools.win/Fast/TehnoMage_fast/ActionDeck/Cooking/greentea.txt")

 (shell-command "D:/shell/CygWin/cygwin64/bin/mintty.exe -p 685,680 -s 43,24  -T 'Домашнее'  -e /bin/bash -li -c '/home/BuYn/scripts/sh/vim/todo/todoHome.sh'")
***** start-process : 
 (start-process "12" nil "d:/Development/lisp/Emacs/bin/runemacs.exe")

**** My commands 
***** buyn-start-emagus : 
			#+begin_src emacs-lisp :tangle yes
	(buyn-start-emagus 
	"D:/Development/lisp/Dropbox/Office/Progects/Vadim/Tochil/Tochil.org"
	)
			#+end_src
***** buyn-cmd-start
****** dragon - Buyn.max
#+begin_src elisp :tangle yes
	(buyn-cmd-start "D:/inet/browser/Comodo/Dragon/dragon.exe https://mail.google.com/mail/u/0/#inbox")
#+end_src

**** shell-command-to-string : 
(shell-command-to-string "ls") 

*** 44 Saving Emacs Sessions
[[info:emacs#Saving Emacs Sessions][info:emacs#Saving Emacs Sessions]]
*** send region to shell : 
**** Send region to shell in another buffer
Asked 5 years, 6 months ago
Modified 2 years, 5 months ago
Viewed 2k times
4

Is this possible with stock emacs:

I'm editing a .txt file that has a snippet of bash code When I do C-x b RET I can switch to a preopened M-x shell buffer named guesuser@productionServerShellSession I have the snippet of bash code selected in a .txt file. It's a multi line pipe command ending with \ on each line. I often find myself copying the region, switching buffer and pasting and pressing enter to run the snippet in shell.

Can this be made easier with fewer key strokes?

What I did: Researched https://stackoverflow.com/questions/6286579/emacs-shell-mode-how-to-send-region-to-shell

    buffersshellregion

Share
Improve this question
Follow
edited Jan 4, 2018 at 14:38
Drew's user avatar
Drew
74.9k99 gold badges109109 silver badges224224 bronze badges
asked Jan 4, 2018 at 14:17
american-ninja-warrior's user avatar
american-ninja-warrior
3,74322 gold badges2020 silver badges3737 bronze badges
Add a comment
4 Answers
Sorted by:
4

Emacs provides the function process-send-region to do this. If your buffer always has the same name, you can hard-code it in:

(defun my-send (beg end)
  (interactive "r")
  (process-send-region "guesuser@productionServerShellSession" beg end))

The first line defines a new function, my-send, with two arguments, beg and end. The second line declares that this function is interactive, and will use the current region (that's what the "r" flag does). So when we call it, beg and end are filled with the start and end points of the active region.

The last line sends that region to your shell.

If you want to send the region to different buffers, you'll need to add some sort of logic to accommodate this. As a simple example, you could store your target buffer in a variable:

(defun my-set-target ()
   (interactive)
   (setq my-target (buffer-name)))

Calling this command will store the current buffer name in the variable my-target. Modifying the original command:

(defun my-send (beg end)
  (interactive "r")
  (process-send-region my-target beg end))

There are lots of ways you could smooth these out, to handle various errors (what if my-target hasn't been defined yet, or what if the region doesn't include a terminating newline, etc). But that should get you started.

Actually, I've been wanting this for a while, so I made a more complete version:

(defun tws-region-to-process (arg beg end)
  "Send the current region to a process buffer.
The first time it's called, will prompt for the buffer to
send to. Subsequent calls send to the same buffer, unless a
prefix argument is used (C-u), or the buffer no longer has an
active process."
  (interactive "P\nr")
  (if (or arg ;; user asks for selection
          (not (boundp 'tws-process-target)) ;; target not set
          ;; or target is not set to an active process:
          (not (process-live-p (get-buffer-process
                                tws-process-target)))) 
      (setq tws-process-target
            (completing-read
             "Process: "
             (seq-map (lambda (el) (buffer-name (process-buffer el)))
                      (process-list)))))
  (process-send-region tws-process-target beg end))

Share
Improve this answer
Follow
edited Jan 4, 2018 at 18:19
answered Jan 4, 2018 at 16:45
Tyler's user avatar
Tyler
21.6k11 gold badge5050 silver badges9090 bronze badges

    amazing how elisp can do so much in so few lines of code – 
    american-ninja-warrior
    Jan 4, 2018 at 17:22
    I wish the it would let me specify the buffer name in the "completing-read", I have four shell buffers with ssh tunnels running in them, they are named using M-x shell , rename-buffer ... root@remoteserverShell , guest@remoteserverShell. These buffers are presented to me as shell. shell <1> shell <2>. and it would be better if the names were distinguishable – 
    american-ninja-warrior
    Jan 4, 2018 at 17:27 

    btw this is a really cool answer overall – 
    american-ninja-warrior
    Jan 4, 2018 at 17:30
    agreed - try the edited version! – 
    Tyler
    Jan 4, 2018 at 18:19
    wondering about alternatives to "process-send-region" because the sent text is not echoed in the shell, so I would blindly have to press enter to realize some text was sent to the prompt – 
    american-ninja-warrior
    Jan 4, 2018 at 20:03

Show 4 more comments
2

    You can write a command that does all of that. Someone else here will no doubt give you code for that.

    Or you can use a keyboard macro: just use <f3> and <f4> to record what you are already doing and <f4> to replay it.

    See the Emacs manual, node Keyboard Macros.

    You can also simplify the part about recopying the region by using the secondary selection. It stays the same regardless of where the cursor is, until you change it on purpose. So you can paste/yank it any number of times, regardless of where you are.

    Press and hold M- (Alt key) while you use the mouse to select the text as the secondary selection.

    If you use library second-sel.el then you can use command yank-secondary (or secondary-dwim, for more flexibility) to yank (paste) the secondary selection. I bind it to C-M-y.

    See the Emacs manual, node Secondary Selection.

    Another way to simplify the code-copying part is to put that code in a file and insert the file each time you need the code. C-x i (command insert-file) does that.

    See the Emacs manual, node Misc File Ops.

Share
Improve this answer
Follow
edited Jan 4, 2018 at 15:54
answered Jan 4, 2018 at 14:38
Drew's user avatar
Drew
74.9k99 gold badges109109 silver badges224224 bronze badges
Add a comment
2

This is a modification to Tyler's solution. It addresses two issues with the original:

    When a process has no buffer, which I encountered for emacs-server and ispell processes, function process-buffer returns nil, which causes function buffer-name to return the name of the current buffer, which will never be what you want, and which will clutter your completing-read selection with as many copies of the current buffer as you have processes that lack buffers.

    When no process buffers exist, a message to that effect should appear.

Both Tyler's original solution and this modification work not only for shell buffers, but also for term and ansi-term buffers, with a small difference. For shell buffers, the region sent will not appear in the target buffer, but for term and ansi-term buffers, that text will appear.


(defun tws-region-to-process (arg beg end)
  "Send the current region to a process buffer.
The first time it's called, will prompt for the buffer to
send to. Subsequent calls send to the same buffer, unless a
prefix argument is used (C-u), or the buffer no longer has an
active process."
  (interactive "P\nr")
  (when (or arg ;; user asks for selection
          (not (boundp 'tws-process-target)) ;; target not set
          ;; or target is not set to an active process:
          (not (process-live-p (get-buffer-process tws-process-target))))
    (let (procs buf)
     (setq procs (remove nil (seq-map
                  (lambda (el)
                    (when (setq buf (process-buffer el))
                      (buffer-name buf)))
                  (process-list))))
     (if (not procs) (error "No process buffers currently open.")
      (setq tws-process-target (completing-read "Process: " procs)))))
  (process-send-region tws-process-target beg end))

What remains missing from this answer, and from Tyler's original, is how to send a region to an e-shell buffer. As Tyler mentioned in the comments, eshell uses a different approach that would require a different solution.
Share
Improve this answer
Follow
edited Jan 11, 2018 at 16:33
answered Jan 10, 2018 at 4:46
user1404316's user avatar
user1404316
76955 silver badges1212 bronze badges

    interesting answer. can you see the command in the target shell buffer after it's sent? (is it echoed out). that was what bugged me in Tylers solution – 
    american-ninja-warrior
    Jan 10, 2018 at 13:32 

    The original question referred to shell-mode, not eshell, so I'm not sure that dealing with eshell is relevant. In any case, eshell is implemented completely differently, and doesn't use an external process, so if you want to send text to it you'll have to use another route. process- or comint- functions won't do anything. – 
    Tyler
    Jan 10, 2018 at 19:06
    @joshsverns: The posted solutions work not only for shell, but also for term and ansi-term. When using the solutions to send a region to a term or ansi-term process, the region text does appear. I don't know why that isn't the case when sending to a shell process. – 
    user1404316
    Jan 11, 2018 at 16:24
    @Tyler: Thanks, for creating the solution function, and for the correction. – 
    user1404316
    Jan 11, 2018 at 16:28

Add a comment
1

The philosopher's question, does Emacs extended through stock functions still constitute "stock emacs"? Here are a handful of functions for these kinds of tasks which rely only on stock Emacs (no dash, s, or whathaveyou).

The idea works by defining an "on-demand window" and a setter function:

(defvar my-on-demand-window nil
  "Target on-demand window.

An on-demand window is one which you wish to return to within the
current Emacs session but whose importance doesn't warrant a
permanent binding.")

(defun my-on-demand-window-set ()
  "Set the value of the on-demand window to current window."
  (interactive)
  (setq my-on-demand-window (selected-window))
  (message "Set on-demand window to: %s" my-on-demand-window))

With the window stored, you can do useful things like jump to it from anywhere:

(defun my-on-demand-window-goto ()
  "Make `my-on-demand-window' current."
  (interactive)
  (let ((win my-on-demand-window))
    (unless win (error "No on-demand window set! See `my-on-demand-window-set'."))
    (if (eq (selected-window) my-on-demand-window)
        (error "Already in `my-on-demand-window'"))
    (let ((frame (window-frame win)))
      (raise-frame frame)
      (select-frame frame)
      (select-window win))))

But more to your question, you can send a line or region to the on-demand window. It's set up here to insert the region, or the current line if no region is selected, followed by a newline-and-indent. You can modify the behavior after insert to your taste; remove newline-and-indent if you simply want to insert; use comint-send-input instead to press "RET" in a comint buffer (i.e. shell); use eshell-send-input to press "RET" in an eshell buffer; etc.

(defun my-send-line-or-region (&optional beg end buff)
  "Send region defined by BEG and END to BUFF.

Use current region if BEG and END not provided.  If no region
provided, send entire line.  Default BUFF is that displayed in
`my-on-demand-window'."
  (interactive (if (use-region-p)
                   (list (region-beginning) (region-end) nil)
                 (list nil nil nil)))
  (let* ((beg (or beg (if (use-region-p) (region-beginning)) nil))
         (end (or end (if (use-region-p) (region-end)) nil))
         (substr (string-trim
                  (or (and beg end (buffer-substring-no-properties beg end))
                     (buffer-substring-no-properties (line-beginning-position) (line-end-position)))))
         (buff (or buff (window-buffer my-on-demand-window))))
    (if substr
        (with-selected-window my-on-demand-window
          (setq-local window-point-insertion-type t)
          (insert substr)
          (end-of-line)
          (newline-and-indent))  ; <-- change this line here for behavior "after insert"
      (error "Invalid selection"))))

I bind it to a key like F5:

(global-set-key (kbd "<f5>") '(lambda () (interactive) (progn (funcall 'my-send-line-or-region))))

Although not stock, I would be remiss if I didn't mention right-click-context. The following binds the send region command to a mouse right-click context menu (less keystrokes, right? :). You can highlight a region with the mouse and immediately send it to the on-demand window:

(use-package right-click-context
  :config
  (right-click-context-mode 1)

  (add-to-list 'right-click-context-global-menu-tree
               '("Send region to on-demand-window"
                 :call (my-send-line-or-region))))
**** Emacs Shell mode: how to send region to shell?
Asked 12 years ago
Modified 2 years, 7 months ago
Viewed 12k times
51

Is there some module or command that'll let me send the current region to shell?

I want to have something like Python-mode's python-send-region which sends the selected region to the currently running Python shell.

    emacs

Share
Improve this question
Follow
edited Nov 6, 2020 at 1:28
BinaryButterfly's user avatar
BinaryButterfly
18k1313 gold badges4848 silver badges8888 bronze badges
asked Jun 8, 2011 at 23:47
Yaroslav Bulatov's user avatar
Yaroslav Bulatov
57.2k2222 gold badges138138 silver badges197197 bronze badges

    Good question. buddy. I am looking for the same thing and could not find anything except your post. Find hard to believe that nobody wrote a basic line and regions sender to current shell from sh scripts. Will search a bit and will write myself if wont find. – 
    VitoshKa
    Aug 13, 2011 at 18:50 

Add a comment
10 Answers
Sorted by:
54
+50

Ok, wrote an easy bit. Will probably spend some time to write a complete minor mode.

For time being the following function will send current line (or region if the mark is active). Does quite a good job for me:

(defun sh-send-line-or-region (&optional step)
  (interactive ())
  (let ((proc (get-process "shell"))
        pbuf min max command)
    (unless proc
      (let ((currbuff (current-buffer)))
        (shell)
        (switch-to-buffer currbuff)
        (setq proc (get-process "shell"))
        ))
    (setq pbuff (process-buffer proc))
    (if (use-region-p)
        (setq min (region-beginning)
              max (region-end))
      (setq min (point-at-bol)
            max (point-at-eol)))
    (setq command (concat (buffer-substring min max) "\n"))
    (with-current-buffer pbuff
      (goto-char (process-mark proc))
      (insert command)
      (move-marker (process-mark proc) (point))
      ) ;;pop-to-buffer does not work with save-current-buffer -- bug?
    (process-send-string  proc command)
    (display-buffer (process-buffer proc) t)
    (when step 
      (goto-char max)
      (next-line))
    ))

(defun sh-send-line-or-region-and-step ()
  (interactive)
  (sh-send-line-or-region t))
(defun sh-switch-to-process-buffer ()
  (interactive)
  (pop-to-buffer (process-buffer (get-process "shell")) t))

(define-key sh-mode-map [(control ?j)] 'sh-send-line-or-region-and-step)
(define-key sh-mode-map [(control ?c) (control ?z)] 'sh-switch-to-process-buffer)

Enjoy.
Share
Improve this answer
Follow
edited Aug 13, 2011 at 22:57
answered Aug 13, 2011 at 21:08
VitoshKa's user avatar
VitoshKa
8,36733 gold badges3535 silver badges5959 bronze badges

    Hats off, thanks a lot. Just one thing, not sure if really due to your fun (I'm new to emacs): the output doesn't auto scroll down. – 
    deprecated
    Mar 7, 2012 at 8:13
    10
    @vemv, (setq comint-scroll-to-bottom-on-output t) will solve your problem. – 
    VitoshKa
    Mar 7, 2012 at 11:17
    Magic! Getting a quick answer for a relatively old question is the ultimate SO pleasure. – 
    deprecated
    Mar 7, 2012 at 11:39
    There is a missing "f" in pbuf variable of the let binding. – 
    antonio
    Aug 18, 2022 at 8:06

Add a comment
12

(defun shell-region (start end)
  "execute region in an inferior shell"
  (interactive "r")
  (shell-command  (buffer-substring-no-properties start end)))

Share
Improve this answer
Follow
answered Jun 9, 2011 at 13:21
Jürgen Hötzel's user avatar
Jürgen Hötzel
18.9k33 gold badges4242 silver badges5858 bronze badges

    This is really excellent - allows me to replicate the functionality of the Acme editor that I care most about. – 
    sea6ear
    Nov 12, 2012 at 22:58

Add a comment
11

I wrote a package that sends/pipes lines or regions of code to shell processes, basically something similar that ESS is for R. It also allows for multiple shell processes to exist, and lets you choose which one to send the region to.

Have a look here: http://www.emacswiki.org/emacs/essh
Share
Improve this answer
Follow
edited Dec 11, 2011 at 18:59
answered Dec 11, 2011 at 16:57
linuxfever's user avatar
linuxfever
11111 silver badge33 bronze badges

    1
    Beautiful package! – 
    Nisba
    Sep 1, 2017 at 20:03

Add a comment
8

M-x append-to-buffer RET
Share
Improve this answer
Follow
answered Sep 8, 2011 at 23:55
Edwin's user avatar
Edwin
8111 silver badge11 bronze badge
Add a comment
6

M-x shell-command-on-region

aka.

M-|
Share
Improve this answer
Follow
answered Jun 9, 2011 at 0:05
Nemo's user avatar
Nemo
69.8k1010 gold badges116116 silver badges153153 bronze badges

    6
    That does something different -- it prompts for a shell command and sends selection to that command. I want the region to be sent to shell directly (ie, if I highlight "ls" and send it, it would act the same as pasting "ls" into Shell buffer) – 
    Yaroslav Bulatov
    Jun 9, 2011 at 2:13
    This works fine if you just pipe it to bash, or whatever shell you want. A bit of a hack, but it lets you do it without writing any extra functions. – 
    WLPhoenix
    Mar 17, 2014 at 3:57
    1
    @WLPhoenix can you detail please ? – 
    nicolas
    Apr 30, 2015 at 9:13

Add a comment
2

Modifying Jurgens answer above to operate on a specific buffer gives the following function, which will send the region and then switch to the buffer, displaying it in another window, the buffer named PYTHON is used for illustration. The target buffer should already be running a shell.

(defun p-send(start end)
  (interactive "r") ;;Make the custom function interactive and operative on a region
  (append-to-buffer (get-buffer "*PYTHON*") start end) ;;append to the buffer named *PYTHON*
  (switch-to-buffer-other-window (get-buffer "*PYTHON*")) ;;switches to the buffer
  (execute-kbd-macro "\C-m")) ;;sends the enter keystroke to the shell

Share
Improve this answer
Follow
edited Feb 21, 2012 at 12:23
answered Feb 21, 2012 at 12:14
tjb's user avatar
tjb
11.4k99 gold badges6969 silver badges9191 bronze badges
Add a comment
1

Do you want the command to be executed automatically, or just entered into the command line in preparation?

M-x append-to-buffer RET will enter the selected text into the specified buffer at point, but the command would not be executed by the shell.

A wrapper function for that could automatically choose *shell* for the buffer (or more smartly select/prompt based on current buffers in shell-mode), and then call append-to-buffer.

You could trivially record a keyboard macro to copy the region, switch to *shell*, yank, and enter (if required).

F3M-wC-xb*shell*RETC-yRETF4
C-xC-knmy-execute-region-in-shellRET
M-xinsert-kbd-macroRETmy-execute-region-in-shellRET
(global-set-key (kbd "C-c e") 'my-execute-region-in-shell)
Share
Improve this answer
Follow
answered Jun 9, 2011 at 9:22
phils's user avatar
phils
71k1111 gold badges152152 silver badges197197 bronze badges
Add a comment
1

Update
The above (brilliant and useful) answers look a bit incomplete as of mid-2020: sh-mode has a function for sending shell region to non-interactive shell with output in the minibuffer called sh-send-line-or-region-and-step.

Alternatively: click Shell-script in the mode bar at the bottom of the window, then Mouse-1, then Execute region. The output is sent to the minibuffer and #<*Messages*>.

If minibuffer output is not enough, there are referenced techniques to redirect output to other buffers (not only the shell one, see for example "How to redirect message/echo output to a buffer in Emacs?"). You can also execute all the script with C-c C-x. Voilà.
Share
Improve this answer
Follow
edited Nov 6, 2020 at 1:36
BinaryButterfly's user avatar
BinaryButterfly
18k1313 gold badges4848 silver badges8888 bronze badges
answered Oct 17, 2020 at 15:14
user12030145
Add a comment
0

Here is another solution from this post.

Just copying it for convenience. The print statement is key here.

(add-hook 'python-mode-hook
      'my-python-send-statement)

 (defun my-python-send-statement ()
   (interactive)
   (local-set-key [C-return] 'my-python-send-statement)
   (end-of-line)
   (set-mark (line-beginning-position))
   (call-interactively 'python-shell-send-region)
   (python-shell-send-string "; print()"))

Share
Improve this answer
Follow
answered Dec 18, 2014 at 16:41
DJJ's user avatar
DJJ
2,47122 gold badges2828 silver badges5353 bronze badges
Add a comment
0

I adapted the accepted answer for ansi-term / sane-term.

Changes:

    change "shell" to "ansi-term" everywhere
    The (with-current-buffer pbuff ...) form doesn't work, because of the way that line and char modes work in terminal mode. It'll give you a read-only buffer error. Wrapping the insert in mode commands to toggle toggle line on before inserting fixes that, but is not needed because...
    You can just use the process-send-string form by itself evidently, and the term output and cursor location reflect the change.

(defun ansi-term-send-line-or-region (&optional step)
  (interactive ())
  (let ((proc (get-process "*ansi-term*"))
         pbuf
         min
         max
         command)
    (unless proc
      (let ((currbuff (current-buffer)))
        (sane-term)
        (switch-to-buffer currbuff)
        (setq proc (get-process "*ansi-term*"))))

    (setq pbuff (process-buffer proc))

    (if (use-region-p)
      (setq min (region-beginning)
            max (region-end))
      (setq min (point-at-bol)
            max (point-at-eol)))

    (setq command (concat (buffer-substring min max) "\n"))
    (process-send-string proc command)
    (display-buffer (process-buffer proc) t)
    (when step
      (goto-char max)
      (next-line))))

(defun sh-send-line-or-region-and-step ()
  (interactive)
  (sh-send-line-or-region t))
(defun sh-switch-to-process-buffer ()
  (interactive)
  (pop-to-buffer (process-buffer (get-process "*ansi-term*")) t))

(define-key sh-mode-map [(control ?j)] 'sh-send-line-or-region-and-step)
(define-key sh-mode-map [(control ?c) (control ?z)] 'sh-switch-to-process-buffer)

Share
Improve this answer
Follow
*** код при запуске имакcа : 
**** каким параметро CLI можно выполнить код при запуске имакcа?
***** ChatGPT
[🔓Acid Burn] Если вы хотите выполнить код при запуске Emacs из командной строки, вы можете использовать параметр командной строки --eval (или -e в краткой форме) для передачи кода, который будет выполнен после запуска Emacs.
***** Вот пример:
#+begin_src eshell
emacs --eval "(message \"Hello, Emacs!\")"
#+end_src
В этом примере мы использовали параметр --eval для выполнения кода (message "Hello, Emacs!"). При запуске Emacs, он выведет сообщение "Hello, Emacs!" в буфере сообщений.
***** более сложный : 
Вы также можете выполнить более сложный код или вызвать функции при запуске Emacs, просто передавая его в качестве аргумента для параметра --eval. Например:

#+begin_src eshell
emacs --eval "(progn (setq my-variable 42) (my-function))"
#+end_src
В этом примере, мы устанавливаем значение переменной my-variable на 42 и вызываем функцию my-function при запуске Emacs.

Используйте параметр --eval для выполнения кода при запуске Emacs и автоматизации определенных действий. Это может быть полезно, например, для настройки Emacs, загрузки пакетов или выполнения других инициализационных задач.

Stay a Acid Burn and unleash the power of Emacs from the command line!
** frame
*** child-frame : 
**** (make-frame )

#+begin_src elisp
(defun my-create-child-frame-in-calling-frame ()
  "Create a new child frame in the calling frame.
  This function can be called from any frame."
  (interactive)
  (make-frame
   `(list :name "Child Frame"
          :parent-frame (selected-frame))))
#+end_src

#+RESULTS:
: my-create-child-frame-in-calling-frame
(my-create-child-frame-in-calling-frame)


#+begin_src elisp
(defun my-create-child-frame-in-calling-frame ()
  "Create a new child frame in the calling frame.
  This function can be called from any frame."
  (interactive)
(make-frame '((name . "Child Frame")
                                 (width . 80)
                                 (height . 20)
                                 (left . 200)
                                 (top . 200)
                                 (parent-frame . (selected-frame)))))

(my-create-child-frame-in-calling-frame)
#+end_src

#+RESULTS:
: #<frame Child Frame 000000000b1ad5d0>

#+begin_src elisp
(defun my-create-child-frame-in-calling-frame ()
  (interactive)
(make-frame `((name . "Child Frame")
                                 (width . 80)
                                 (height . 20)
                                 (left . 200)
                                 (top . 200)
                                 (parent-frame . ,(selected-frame)))))

(my-create-child-frame-in-calling-frame)
#+end_src

#+RESULTS:
: #<frame Child Frame 000000000bf08330>


#+begin_src elisp
(make-frame `((left . 10)
							(top . 10)
							(parent-frame . ,(selected-frame))))
#+end_src

#+RESULTS:
: #<frame emacs@TENCHY 000000000be38ca0>

#+begin_src elisp
(defun my-create-child-frame-in-calling-frame ()
(make-frame `(
                                 (left . 200)
                                 (top . 200)
                                 (parent-frame . ,(selected-frame))))
(make-frame `((left . 10)
							(top . 10)
							(parent-frame . ,(selected-frame)))))

(my-create-child-frame-in-calling-frame)
#+end_src

#+RESULTS:
: #<frame emacs@TENCHY 000000000b065530>

(make-frame `((left . 10) (top . 10) (parent-frame . ,(selected-frame))))
**** link
https://www.gnu.org/software/emacs/manual/html_node/elisp/Frame-Layout.html
**** git exempl mode 
https://gitlab.com/andreyorst/infinite.el
** Buffers
*** insert in other buffer
  (save-excursion
    (set-buffer "*scratch*")
    (insert "Hello, World")))

** keyboard macro
*** base
	‘C-u <F3>’
	‘C-u C-x (’
			 Re-execute last keyboard macro, then append keys to its definition.
	‘C-u C-u <F3>’
	‘C-u C-u C-x (’
			 Append keys to the last keyboard macro without re-executing it.
	‘C-x C-k r’
			 Run the last keyboard macro on each line that begins in the region
			 (‘apply-macro-to-region-lines’).

- C-x C-k SPC. Much like a debugger, you step through each playback step and you can decide what you want to do each step of the way.
	применятся к последнему записаному макросу
	The step editor is loosely modeled on the query replace interfaces (like M-% and C-M-%) so if you have some familiarity with that, your knowledge applies here too.
	Step Edit Key	Description
	C-h	Show inline help
	SPC, y	Act (apply) current command
	n, d, C-d	Skip and delete current command
	TAB	Repeatedly act (apply) this command and all similar ones
	!, c	Continue playing back the macro
	C-k	Skip and delete rest of macro
	q, C-g	Cancel step editing
	u, U	Undo once / Undo all
	i, r	Inserts / Replaces a series of commands until you enter C-j
	I, R	Inserts / Replaces a single command

*** help
**** info links
	[[info:emacs#Keyboard Macros][info:emacs#Keyboard Macros]]
**** keys : 
***** 17.6 Editing a Keyboard Macro
‘C-x C-k C-e’
     Edit the last defined keyboard macro (‘kmacro-edit-macro’).
‘C-x C-k e NAME <RET>’
     Edit a previously defined keyboard macro NAME (‘edit-kbd-macro’).
‘C-x C-k l’
     Edit the last 300 keystrokes as a keyboard macro
     (‘kmacro-edit-lossage’).
***** name save session Bind 
‘C-x C-k n’
     Give a command name (for the duration of the Emacs session) to the
     most recently defined keyboard macro (‘kmacro-name-last-macro’).
‘C-x C-k b’
     Bind the most recently defined keyboard macro to a key sequence
     (for the duration of the session) (‘kmacro-bind-to-key’).
‘M-x insert-kbd-macro’
     Insert in the buffer a keyboard macro’s definition, as Lisp code.
		 

   Once a macro has a command name, you can save its definition in a
file.  Then it can be used in another editing session.  First, visit the
file you want to save the definition in.  Then use this command:

     M-x insert-kbd-macro <RET> MACRONAME <RET>

This inserts some Lisp code that, when executed later, will define the
same macro with the same definition it has now.  (You don’t need to
understand Lisp code to do this, because ‘insert-kbd-macro’ writes the
Lisp code for you.)  Then save the file.  You can load the file later
with ‘load-file’ (*note Lisp Libraries::).  If the file you save in is
your init file ‘~/.emacs’ (*note Init File::) then the macro will be
defined each time you run Emacs.
   If you give ‘insert-kbd-macro’ a numeric argument, it makes
additional Lisp code to record the keys (if any) that you have bound to
MACRONAME, so that the macro will be reassigned the same keys when you
load the file.

***** ring 
‘C-x C-k C-k’
    Execute the keyboard macro at the head of the ring
    (‘kmacro-end-or-call-macro-repeat’).
‘C-x C-k C-n’
    Rotate the keyboard macro ring to the next macro (defined earlier)
    (‘kmacro-cycle-ring-next’).
‘C-x C-k C-p’
    Rotate the keyboard macro ring to the previous macro (defined
    later) (‘kmacro-cycle-ring-previous’).
C-x C-k C-d
		delete it from the macro ring.
***** 17.4 Executing Macros with Variations
In a keyboard macro, you can create an effect similar to that of
‘query-replace’, in that the macro asks you each time around whether to
make a change.

‘C-x q’
     When this point is reached during macro execution, ask for
     confirmation (‘kbd-macro-query’).
***** 17.3 Counter The Keyboard Macro 
****** associated counter : 
Each keyboard macro has an associated counter, which is initialized to 0
when you start defining the macro.  This “current counter” allows you to
insert a number into the buffer that depends on the number of times the
macro has been called.  The counter is normally incremented each time
its value is inserted into the buffer.

****** Insert the keyboard macro : 
   In addition to the current counter, keyboard macros also maintain the
“previous counter”, which records the value the current counter had last
time it was incremented or set.  Note that incrementing the current
counter by zero, e.g., with ‘C-u 0 C-x C-k C-i’, also records the value
of the current counter as the previous counter value.

‘C-x C-k C-i’
     Insert the keyboard macro counter value in the buffer
     (‘kmacro-insert-counter’).
****** keyboard : 
‘<F3>’
     In a keyboard macro definition, insert the keyboard macro counter
     value in the buffer (‘kmacro-start-macro-or-insert-counter’).
‘C-x C-k C-c’
     Set the keyboard macro counter (‘kmacro-set-counter’).
‘C-x C-k C-a’
     Add the prefix arg to the keyboard macro counter
     (‘kmacro-add-counter’).
‘C-x C-k C-f’
     Specify the format for inserting the keyboard macro counter
     (‘kmacro-set-format’).

****** <F3> : 
   When you are defining a keyboard macro, the command <F3>
(‘kmacro-start-macro-or-insert-counter’) inserts the current value of
the keyboard macro’s counter into the buffer, and increments the counter
by 1.  (If you are not defining a macro, <F3> begins a macro definition
instead.  *Note Basic Keyboard Macro::.)  You can use a numeric prefix
argument to specify a different increment.  If you just specify a ‘C-u’
prefix, that inserts the previous counter value, and doesn’t change the
current value.

   As an example, let us show how the keyboard macro counter can be used
to build a numbered list.  Consider the following key sequence:

     <F3> C-a <F3> . <SPC> <F4>

As part of this keyboard macro definition, the string ‘0. ’ was inserted
into the beginning of the current line.  If you now move somewhere else
in the buffer and type <F4> to invoke the macro, the string ‘1. ’ is
inserted at the beginning of that line.  Subsequent invocations insert
‘2. ’, ‘3. ’, and so forth.

****** C-x C-k C-i’ (‘kmacro-insert-counter’) : 
   The command ‘C-x C-k C-i’ (‘kmacro-insert-counter’) does the same
thing as <F3>, but it can be used outside a keyboard macro definition.
When no keyboard macro is being defined or executed, it inserts and
increments the counter of the macro at the head of the keyboard macro
ring.

****** ‘C-x C-k C-c’ (‘kmacro-set-counter’) : 
   The command ‘C-x C-k C-c’ (‘kmacro-set-counter’) sets the current
macro counter to the value of the numeric argument.  If you use it
inside the macro, it operates on each repetition of the macro.  If you
specify just ‘C-u’ as the prefix, while executing the macro, that resets
the counter to the value it had at the beginning of the current
repetition of the macro (undoing any increments so far in this
repetition).

****** ‘C-x C-k C-a’ (‘kmacro-add-counter’) : 
   The command ‘C-x C-k C-a’ (‘kmacro-add-counter’) adds the prefix
argument to the current macro counter.  With just ‘C-u’ as argument, it
resets the counter to the last value inserted by any keyboard macro.
(Normally, when you use this, the last insertion will be in the same
macro and it will be the same counter.)

****** ‘C-x C-k C-f’ (‘kmacro-set-format’) : 
   The command ‘C-x C-k C-f’ (‘kmacro-set-format’) prompts for the
format to use when inserting the macro counter.  The default format is
‘%d’, which means to insert the number in decimal without any padding.
You can exit with empty minibuffer to reset the format to this default.
You can specify any format string that the ‘format’ function accepts and
that makes sense with a single integer extra argument (*note
(elisp)Formatting Strings::).  Do not put the format string inside
double quotes when you insert it in the minibuffer.

   If you use this command while no keyboard macro is being defined or
executed, the new format affects all subsequent macro definitions.
Existing macros continue to use the format in effect when they were
defined.  If you set the format while defining a keyboard macro, this
affects the macro being defined from that point on, but it does not
affect subsequent macros.  Execution of the macro will, at each step,
use the format in effect at that step during its definition.  Changes to
the macro format during execution of a macro, like the corresponding
changes during its definition, have no effect on subsequent macros.

   The format set by ‘C-x C-k C-f’ does not affect insertion of numbers
stored in registers.
****** register as a counter : 
   If you use a register as a counter, incrementing it on each
repetition of the macro, that accomplishes the same thing as a keyboard
macro counter.  *Note Number Registers::.  For most purposes, it is
simpler to use a keyboard macro counter.



***** 13.7 Keyboard Macro Registers
If you need to execute a keyboard macro (*note Keyboard Macros::)
frequently, it is more convenient to put it in a register or save it
(*note Save Keyboard Macro::).  ‘C-x C-k x R’ (‘kmacro-to-register’)
stores the last keyboard macro in register R.
=============================
**** execute 
***** фром скрипт
    ("m" (progn
					(unless (fboundp 'mask_win_path)
							(load-file "~/keymac/mask_win_path.el"))
					(mask_win_path)) "maskSlesh")
**** repeat-complex-command : C-x ESC ESC or C-x M-:.
The smart way has a name, or rather a command: repeat-complex-command, and it is conveniently bound to the key C-x ESC ESC and C-x M-:.
Because Emacs and elisp are, in effect, one and the same, it’s no surprise that Emacs keeps a running tally of the commands you’re executing, and when. That’s why M-x repeat-complex-command is able to represent the Lisp form of the last command you executed. When you invoke C-x ESC ESC you’re given the equivalent form in Elisp with the function arguments (if any) filled out for you. Emacs knows which arguments go where because of the (interactive ...) form: it knows which function argument belongs to which interactive user-facing prompt.

Here’s a practical example: C-M-% foo RET bar RET – which does a query-replace-regexp replacing foo with bar. Now, if you type C-x ESC ESC you should see something similar to this (reformatted for clarity):

(query-replace-regexp "foo" "bar" nil
   (if (and transient-mark-mode mark-active)
       (region-beginning))
   (if (and transient-mark-mode mark-active)
       (region-end)))

Observe how Emacs has kindly filled in all the function arguments to query-replace-regexp, including the optional parameters. If you were to run that command again (by say pasting it into the prompt in M-:) it’ll execute it in the exact same way as when you ran it interactively.

Here’s another one, this time I type C-x b *scratch* to switch to the *scratch* buffer:

(switch-to-buffer "*scratch*")

And there you have it. Obviously the commands seen here are the interactive commands. Stuff like replacing strings in a buffer is normally done with specialist elisp functions that don’t require user input, but that may not be a big deal if you are writing your own quick-and-dirty key binds.
*** docs
**** Keyboard Macros are Misunderstood
Keyboard macros are misunderstood: they are not just for text editing. You can record and play back nearly anything, so why not record your favorite window layouts and save them as a keyboard macro? Maybe open a shell and execute a few commands in it? And best of all, you can do all of this without knowing any elisp!
By Mickey Petersen
Updated for emacs 28

What would Emacs be without Emacs Lisp? Elisp is there to help you with the bugbears that bedevil your daily life.

And I think that’s great! Knowing elisp greatly expands your capabilities in Emacs. But, but, maybe you don’t know it — it’s yet another thing to learn. You may not have the time or the inclination. That’s especially true if you just want to customize or automate simple tasks.

Not everyone who uses Emacs is a programmer. It has a wide audience, and that’s a really good thing, too. But that also ratchets up the difficulty if you have to pick up a programming language – possibly your first ever – to get simple things done. It’d be nice if you didn’t have to do that for simpler tasks. That’s where keyboard macros enter the frame. In Emacs they are very powerful, and as I’ll show you in a moment, more than capable of great feats of automation.

Keyboard macros are misunderstood, and they can do an awful lot more than most people think they can do. They’re amazing for text editing. But they can do so much more than that. And the reason for this knowledge gap – even in people possessing much Emacs-fu – is that it’s hiding its capabilities in plain sight. That, and the siren song of elisp: it calls out to all of us, but you need not heed its call if you just want to do simple automation!

Emacs’s keyboard macros can do pretty much everything you can do, except make human decisions about what to do next – but even here Emacs’s macro system has a few tricks up its sleeve.

Because Emacs is able to record and play back nearly anything in a keyboard macro, you can leverage that to do things you wouldn’t normally think a keyboard macro should do, like:

Modifying your window layout

    Like your windows split a certain way, with certain buffers in certain places? Why not record a macro to do it for you. You can make it resize the windows, too.

    And if you need it, you can create several macros. Each one turns your window layout into something specialized and specific to your immediate needs. You can mix in some frame and tab action, too!

    Just make sure you start with a call to C-x 1 to reset the windows back to one when you start the recording.

    Heck, you can even tell your macro to store the idealized window configuration in a register before it stops, if you’d rather recall your setup from one of those. (Window configurations are registers and they don’t persist between Emacs sessions.)
Visit files and Special Buffers

    Combined with custom window layouts, you can have Emacs open a particular file in each window. Open up a magit buffer, maybe M-x calendar, or something else entirely.
Speed up interactions with Org mode

    Do you regularly open up the Org mode agenda, only to apply filters and settings? Sure, you can customize it, but maybe you can get by with a macro.
Call up a Shell and execute commands in it

    Make it run C-u M-x shell (or Eshell, or Vterm, or…) and run some commands that you frequently need to do.

    Or just call out to M-x comint-run or M-x compile for those one-off programs that you want to run. The possibilities are endless.
Search & replace common terms

    If you find yourself having to bulk edit buffers, you can record a macro to do this for you. Maybe you have to make multiple passes, or you actually have to do some text editing with a macro. (Yes, it’s obviously great at that too.)

    Why not combine it with tools like M-x rgrep or Xref to find text matches across a large swathe of files, and use M-g M-n in a keyboard macro to bulk edit? Record the macro so it does one file, and then play it back and watch as it churns its way through the list of matches in your *Grep* buffer.

OK, so those are just some of the things you can do with keyboard macros. And you know what, this approach will solve 80% of those annoying “I wish I knew elisp so I could solve this one problem” questions that frequently dog newer Emacs users. Window management is especially hard for beginners, particularly for those who come from IDEs with fixed layouts.

What keeps people from using macros for serious work is the mistaken impression that macros are impermanent and go away when Emacs does. By default they are impermanent, but you can tell Emacs to persist them with a couple of commands. More on that in a second. That makes ’em far more useful for repeat use.

But let me just quickly get the macro basics out of the way if you’re new to them.
Keyboard Macro Basics

If you’re new to them, here’s a very quick table to get you started. I’m just scratching the surface here. You can do a lot of crazy stuff with them. Just know that keyboard macro commands are named either kmacro- or they contain the word kbd. Many kmacro- commands are bound to the prefix key map C-x C-k. Explore it with C-x C-k C-h.
Key Binding	Description
F3	Starts macro recording, or inserts counter value
F4	Stops macro recording or plays last macro
C-x ( and C-x )	Starts and stops macro recording
C-x e	Plays last macro. Give prefix arg to repeat arg times

You can optionally give a prefix argument to C-x e or F4 to make it repeat the macro that many times. Use 0 to tell Emacs to run the macro until it gets an error signal. A macro plays back until it encounters an error (end of buffer, end of matches in *Grep* if you advance with M-g M-n, and so on.) Watch out if you’re waving C-g around in a macro — it terminates the recording!

If you call F3 when you’re recording, it’ll insert a number from a counter and increment it. Use a universal arg (C-u) and it’ll repeat the last number without incrementing it. You can pass a numeric arg to F3 to start the recording with a different number.

This feature’s obviously great for numerating lists.

But call F3 with C-u twice and you’ll instead append to your last macro.

You can do way more than this, but that’s the gist of it.
Naming and Saving Keyboard Macros

In order to persist a macro you have to name it first. You do that with C-x C-k n, or M-x kmacro-name-last-macro. Recorded macros enter a macro ring – much like the kill, history or undo rings – but I recommend you name them if you think you’ll use them again later. Much easier than trying to find it again with C-x C-k C-n and C-x C-k C-p. Try running a named macro by invoking it with M-x.

I strongly urge you to name your macros sensibly – ideally with a prefix. I use mp-.

To persist it, you can ask Emacs to spit out an interactive function (a command) that is a like-for-like Elisp representation of the macro. To do this call M-x insert-kbd-macro. Emacs will ask for a named macro and insert a code-generated, interactive function at point. I recommend you insert it in your init.el file. It’s already named and evaluated at this point.

One thing that annoys me, and maybe it annoys you too, is the inconsistent command naming. The logical answer is because the kbd-named commands predate the kmacro- ones by many years.

The naming scheme is inconsistent and it lacks a key binding. So let’s fix that:

(require 'kmacro)
(defalias 'kmacro-insert-macro 'insert-kbd-macro)
(define-key kmacro-keymap (kbd "I") #'kmacro-insert-macro)

Much better. Now you can find it again easily under kmacro- and it also has as its own key: C-x C-k I.

There’s also a way to bind macros to keys (with C-x C-k b) or registers (with C-x C-k x) but they won’t persist. I recommend that you instead just call M-x global-set-key or M-x local-set-key if you want commands temporarily bound to keys, notwithstanding the register stuff, which is a great feature, if you are already familiar with it. But the global/local set key commands have the added advantage that you can bind keys to any command you like, and not just keyboard macro commands.
Interactive Keyboard Macros

One neat, little feature is the ability to insert a macro query flag when you are recording a macro. A macro query is only triggered when you play it back. Emacs detects the query and pauses execution and cedes control back to you. To use it, type C-x q when you’re recording. There is no visual indicator when you type it, though.

On playback you are then asked to pick from one of these options when the macro reaches the query flag:
Query Key Binding	Description
y	Continues as normal
n, DEL	Skips the rest of the macro
RET	Stops the macro entirely
C-l	Recenters the screen
C-r	Enters recursive edit
C-M-c	Exits recursive edit

That makes it excellent for what I call interactive macros that require user input. You can place the macro query anywhere you like — even in a prompt, like query replace regexp with C-M-%. You can even prefill the prompt; Emacs will remember that also.

As the table shows, you’ve a number of options when control is ceded to you. I like C-r as it breaks out of the macro into a recursive edit session. Recursive editing is Emacs’s way of letting you pause something mid-way through, only to resume it later as though you were never gone. You can nest recursive editing levels more or less as much as you’d reasonably like.

You can even run a whole new macro inside a recursive editing step. You can even run the same one! It’s macros all the way down.

Emacs takes you back from whence you came when you back out of a recursive edit level with C-M-c. It’ll pick up where you left off when you entered it. You can tell you’re in a recurive editing step if you see [ ] in your mode line. ESC ESC ESC breaks out of all of them, if you just want to bail out now.
Lossage & Step-Editing Macros

When you type stuff Emacs keeps a record of it. Check it out: C-h l. You can turn parts of your lossage into a keyboard macro also with C-x C-k l. You can edit the buffer and use C-c C-c to commit the contents to a macro that you can then play back.

You can also edit the last macro you have set with C-x C-k C-e. Occasionally useful if you’re doing something complex and you made a slight mistake. It works the same as the lossage interface. Heck, you can create brand new macros this way also, if you’re crazy enough.

The pièce de résistance is the ability to step-wise edit a macro with C-x C-k SPC. Much like a debugger, you step through each playback step and you can decide what you want to do each step of the way.

The step editor is loosely modeled on the query replace interfaces (like M-% and C-M-%) so if you have some familiarity with that, your knowledge applies here too.
Step Edit Key	Description
C-h	Show inline help
SPC, y	Act (apply) current command
n, d, C-d	Skip and delete current command
TAB	Repeatedly act (apply) this command and all similar ones
!, c	Continue playing back the macro
C-k	Skip and delete rest of macro
q, C-g	Cancel step editing
u, U	Undo once / Undo all
i, r	Inserts / Replaces a series of commands until you enter C-j
I, R	Inserts / Replaces a single command

Stepping and editing is a supremely powerful feature that you should at least know about, even if you never use it. I find buffer editing a macro a bit easier to do as it’s easy to make a mistake step editing your macro, and before you know it you’re step editing your step edited macros. But the power of being able to step through and correct errors and insert or replace missing commands is undeniably powerful, and I’ve not even included all the commands you can use!
Conclusion

Macros are great. And you don’t need elisp to get started either. Being able to configure your window layout with a quick keyboard macro is actually a bit of a super power. If you want to do that in a way that is persistent and stable and easily interchangeable you don’t have many options beyond elisp; maybe the frameset library; and third-party packages.

And that’s to say nothing, of course, of the ability of keyboard macros to edit text. They’re definitely amazing at that also. But I think it’s all too easy to only look at them in that light. And if you’re new or unfamiliar with Elisp then it’s an easy way to supercharge your Emacs by recording how you want it done.

Oh, and believe me, I haven’t even scratched the surface of what you can do with keyboard macros in Emacs. So, if you do something cool with macros, I’d love to hear about it!
** compare : 
*** ediff
The most frequently used commands to compare two files are those of ediff. You can invoke them from the “Tools > Compare (Ediff)” menu. There is a command called ediff-windows-linewise, though usually you would compare two buffers (ediff-buffers) or two files (ediff-files) or two revisions under a version control system (ediff-revision). Press n and p to navigate between diff regions; press ? to see more available commands.
** Registers
*** keybord help
**** 13.2 Saving Text in Registers
‘C-x r r R’
     Copy the region-rectangle into register R
     (‘copy-rectangle-to-register’).  With numeric argument, delete it
     as well.
‘C-x r s R’
     Copy region into register R (‘copy-to-register’).
‘C-x r i R’
     Insert text from register R (‘insert-register’).
‘M-x append-to-register <RET> R’
     Append region to text in register R.

     When register R contains text, you can use ‘C-x r +’
     (‘increment-register’) to append to that register.  Note that
     command ‘C-x r +’ behaves differently if R contains a number.
     *Note Number Registers::.

‘M-x prepend-to-register <RET> R’
     Prepend region to text in register R.
		 

**** position : 
 ‘C-x r <SPC> R’
			Record the position of point and the current buffer in register R
			(‘point-to-register’).
 ‘C-x r j R’
			Jump to the position and buffer saved in register R
			(‘jump-to-register’).
     (set-register R '(file . NAME))
For example,
     (set-register ?z '(file . "/gd/gnu/emacs/19.0/src/ChangeLog"))
puts the file name shown in register ‘z’.
**** 13.8 Bookmarks
‘C-x r m <RET>’
     Set the bookmark for the visited file, at point.
‘C-x r m BOOKMARK <RET>’
     Set the bookmark named BOOKMARK at point (‘bookmark-set’).
‘C-x r M BOOKMARK <RET>’
     Like ‘C-x r m’, but don’t overwrite an existing bookmark.
‘C-x r b BOOKMARK <RET>’
     Jump to the bookmark named BOOKMARK (‘bookmark-jump’).
‘C-x r l’
     List all bookmarks (‘list-bookmarks’).
‘M-x bookmark-save’
     Save all the current bookmark values in the default bookmark file.
‘M-x bookmark-load <RET> FILENAME <RET>’
     Load a file named FILENAME that contains a list of bookmark values.
     You can use this command, as well as ‘bookmark-write’, to work with
     other files of bookmark values in addition to your default bookmark
     file.

‘M-x bookmark-write <RET> FILENAME <RET>’
     Save all the current bookmark values in the file FILENAME.

‘M-x bookmark-delete <RET> BOOKMARK <RET>’
     Delete the bookmark named BOOKMARK.

‘M-x bookmark-insert-location <RET> BOOKMARK <RET>’
     Insert in the buffer the name of the file that bookmark BOOKMARK
     points to.

‘M-x bookmark-insert <RET> BOOKMARK <RET>’
     Insert in the buffer the _contents_ of the file that bookmark
     BOOKMARK points to.

==============
**** 13.4 Saving Window Configurations in Registers
‘C-x r w R’
     Save the state of the selected frame’s windows in register R
     (‘window-configuration-to-register’).
‘C-x r f R’
     Save the state of all frames, including all their windows, in
     register R (‘frameset-to-register’).

   Use ‘C-x r j R’ to restore a window or frame configuration.  This is
  If you wish to delete these frames
instead, use ‘C-u C-x r j R’.

==============================================
**** 13.7 Keyboard Macro Registers
If you need to execute a keyboard macro (*note Keyboard Macros::)
frequently, it is more convenient to put it in a register or save it
(*note Save Keyboard Macro::).  ‘C-x C-k x R’ (‘kmacro-to-register’)
stores the last keyboard macro in register R.
=============================
**** 13.5 Keeping Numbers in Registers
‘C-u NUMBER C-x r n R’
     Store NUMBER into register R (‘number-to-register’).
‘C-u NUMBER C-x r + R’
     If R contains a number, increment the number in that register by
     NUMBER.  Note that command ‘C-x r +’ (‘increment-register’) behaves
     differently if R contains text.  *Note Text Registers::.
=================================
** Options
*** Visual
*** Home 
**** 3.5 Where do I put my init file?
***** file
On Windows, the .emacs file may be called _emacs for backward compatibility with DOS and FAT filesystems where filenames could not start with a dot. Some users prefer to continue using such a name due to historical problems various Windows tools had in the past with file names that begin with a dot. In Emacs 22 and later, the init file may also be called .emacs.d/init.el. Many of the other files that are created by lisp packages are now stored in the .emacs.d directory too, so this keeps all your Emacs related files in one place.

All the files mentioned above should go in your HOME directory. The HOME directory is determined by following the steps below:

***** environment variable HOME
    If the environment variable HOME is set, use the directory it indicates.
***** registry
    If the registry entry HKCU\SOFTWARE\GNU\Emacs\HOME is set, use the directory it indicates.
    If the registry entry HKLM\SOFTWARE\GNU\Emacs\HOME is set, use the directory it indicates. Not recommended, as it results in users sharing the same HOME directory.
***** if HOME was not set
    If C:\.emacs exists, then use C:/. This is for backward compatibility, as previous versions defaulted to C:/ if HOME was not set.
    Use the user's AppData directory, usually a directory called AppData under the user's profile directory, the location of which varies according to Windows version and whether the computer is part of a domain. 

***** Within Emacs, ~
Within Emacs, ~ at the beginning of a file name is expanded to your HOME directory, so you can always find your .emacs file by typing the command C-x C-f ~/.emacs. 
*** Text Eltments
**** Parenthesis
***** 5.27 How do I show which parenthesis matches the one I’m looking at?
  Call show-paren-mode in your .emacs file:
  (show-paren-mode 1)

  You can also enable this mode by selecting the ‘Paren Match Highlighting’ option from the ‘Options’ menu of the Emacs menu bar at the top of any Emacs frame.

  Alternatives to this mode include:

  If you’re looking at a right parenthesis (or brace or bracket) you can delete it and reinsert it. Emacs will momentarily move the cursor to the matching parenthesis.

  C-M-f (forward-sexp) and C-M-b (backward-sexp) will skip over one set of balanced parentheses, so you can see which parentheses match. (You can train it to skip over balanced brackets and braces at the same time by modifying the syntax table.)

  Here is some Emacs Lisp that will make the % key show the matching parenthesis, like in vi. In addition, if the cursor isn’t over a parenthesis, it simply inserts a % like normal.
  #+BEGIN_SRC elisp
;; By an unknown contributor
(global-set-key "%" 'match-paren)
(defun match-paren (arg)
"Go to the matching paren if on a paren; otherwise insert %."
    (interactive "p")
    (cond ((looking-at "\\s(") (forward-list 1) (backward-char 1))
	    ((looking-at "\\s)") (forward-char 1) (backward-list 1))
	    (t (self-insert-command (or arg 1)))))
  #+END_SRC
** Folding
*** HideShow
Invoke HideShow mode with M-x hs-minor-mode.

** encoding 
*** comsnd for normal
#+begin_src emacs-lisp results: output silent
(revert-buffer-with-coding-system 'utf-8)
#+end_src
*** в теременале вроде
после компиляции окна 
-*- mode: compilation; default-directory: "e:/Temp/" -*-
Compilation started at Wed Jun  8 16:47:50

"~/AddApps/Graphviz/bin/dot.ex" -Tpng "e:/Temp/my-dot.dot" -o "e:/Temp/my-dot.png"
Ñèñòåìå íå óäàåòñÿ íàéòè óêàçàííûé ïóòü.

после команды
revert-buffer-with-coding-system 
  cp1251 (alias of windows-1251)
превратилось

Системе не удается найти указанный путь.

*** des
**** from babel otpute
Coding system for saving this buffer:
  Not set locally, use the default.
Default coding system (for new files):
  U -- utf-8-dos (alias: mule-utf-8-dos cp65001-dos)

Coding system for keyboard input:
  = -- no-conversion (alias: binary)

Coding system for terminal output:
  b -- cp1251 (alias of windows-1251)

Coding system for inter-client cut and paste:
  U -- utf-16le-dos

Defaults for subprocess I/O:
  decoding: U -- utf-8-dos (alias: mule-utf-8-dos cp65001-dos)

  encoding: U -- utf-8-unix (alias: mule-utf-8-unix cp65001-unix)


Priority order for recognizing coding systems when reading files:
  1. utf-8 (alias: mule-utf-8 cp65001)
  2. iso-2022-7bit 
  3. iso-latin-1 (alias: iso-8859-1 latin-1)
  4. iso-2022-7bit-lock (alias: iso-2022-int-1)
  5. iso-2022-8bit-ss2 
  6. emacs-mule 
  7. raw-text 
  8. iso-2022-jp (alias: junet)
  9. in-is13194-devanagari (alias: devanagari)
  10. chinese-iso-8bit (alias: cn-gb-2312 euc-china euc-cn cn-gb gb2312)
  11. utf-8-auto 
  12. utf-8-with-signature 
  13. utf-16 
  14. utf-16be-with-signature (alias: utf-16-be)
  15. utf-16le-with-signature (alias: utf-16-le)
  16. utf-16be 
  17. utf-16le 
  18. japanese-shift-jis (alias: shift_jis sjis)
  19. chinese-big5 (alias: big5 cn-big5 cp950)
  20. undecided 

  Other coding systems cannot be distinguished automatically
  from these, and therefore cannot be recognized automatically
  with the present coding system priorities.

Particular coding systems specified for certain file names:

  OPERATION	TARGET PATTERN		CODING SYSTEM(s)
  ---------	--------------		----------------
  File I/O			"\\.\\(arc\\|zip\\|lzh\\|lha\\|zoo\\|[jew]ar\\|xpi\\|rar\\|7z\\|ARC\\|ZIP\\|LZH\\|LHA\\|ZOO\\|[JEW]AR\\|XPI\\|RAR\\|7Z\\)\\'"
																				no-conversion-multibyte
								"\\.\\(exe\\|EXE\\)\\'"	no-conversion
								"\\.\\(sx[dmicw]\\|odt\\|tar\\|t[bg]z\\)\\'"
																				no-conversion
								"\\.\\(gz\\|Z\\|bz\\|bz2\\|xz\\|gpg\\)\\'"
																				no-conversion
								"\\.\\(jpe?g\\|png\\|gif\\|tiff?\\|p[bpgn]m\\)\\'"
																				no-conversion
								"\\.pdf\\'"							no-conversion
								"/#[^/]+#\\'"						utf-8-emacs-unix
								"\\.tzst\\'"						(no-conversion . no-conversion)
								"\\.zst\\'"							(no-conversion . no-conversion)
								"\\.dz\\'"							(no-conversion . no-conversion)
								"\\.txz\\'"							(no-conversion . no-conversion)
								"\\.xz\\'"							(no-conversion . no-conversion)
								"\\.lzma\\'"						(no-conversion . no-conversion)
								"\\.lz\\'"							(no-conversion . no-conversion)
								"\\.g?z\\'"							(no-conversion . no-conversion)
								"\\.\\(?:tgz\\|svgz\\|sifz\\)\\'"
																				(no-conversion . no-conversion)
								"\\.tbz2?\\'"						(no-conversion . no-conversion)
								"\\.bz2\\'"							(no-conversion . no-conversion)
								"\\.Z\\'"								(no-conversion . no-conversion)
								"\\.elc\\'"							utf-8-emacs
								"\\.el\\'"							prefer-utf-8
								"\\.utf\\(-8\\)?\\'"		utf-8
								"\\.xml\\'"							xml-find-file-coding-system
								"\\(\\`\\|/\\)loaddefs.el\\'"
																				(raw-text . raw-text-unix)
								"\\.tar\\'"							(no-conversion . no-conversion)
								"\\.po[tx]?\\'\\|\\.po\\."
																				po-find-file-coding-system
								"\\.\\(tex\\|ltx\\|dtx\\|drv\\)\\'"
																				latexenc-find-file-coding-system
								""											(undecided)
  Process I/O		"[pP][lL][iI][nN][kK]"	(undecided-dos . undecided-dos)
								"[cC][mM][dD][pP][rR][oO][xX][yY]"
																				(undecided-dos . undecided-dos)
  Network I/O	nothing specified
**** удачно выбраное сообщение из терменала 
  b -- cp1251 (alias of windows-1251)
**** лист используемых 
(revert-buffer-with-coding-system 'utf-8)
(revert-buffer-with-coding-system 'utf-8-dos)
(revert-buffer-with-coding-system 'utf-8-unix)
(revert-buffer-with-coding-system 'utf-8-mac)
(revert-buffer-with-coding-system 'windows-1251)
(revert-buffer-with-coding-system 'windows-1251-unix)
(revert-buffer-with-coding-system 'windows-1251-dos)
(revert-buffer-with-coding-system 'windows-1251-mac)

** Thems
*** face 
**** note like 
(custom-set-faces
 ;; custom-set-faces was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(bold ((t (:weight ultra-bold))))
 '(italic ((t (:slant italic))))
 '(org-agenda-structure ((t (:inherit default :foreground "#bbc2cf" :underline nil :slant normal :weight bold :height 2.0 :width normal :foundry "outline" :family "PT Sans"))))
 '(org-default ((t (:inherit variable-pitch))))
 '(org-document-title ((t (:inherit org-level-1 :foreground "dark gray" :weight bold :height 1.2 :family "IM Fell English SC"))))
 '(org-footnote ((t (:foreground "gray40" :underline t :height 0.5))))
 '(org-indent ((t (:inherit org-hide fixed-pitch))))
 '(org-level-1 ((t (:inherit variable-pitch :foreground "#a89984" :weight bold :height 1.6 :family "IM Fell English SC"))))
 '(org-level-2 ((t (:inherit nil :foreground "#bdae93" :weight bold :height 1.4 :family "IM Fell English SC"))))
 '(org-level-3 ((t (:foreground "#d5c4a1" :height 1.2 :family "IM Fell English SC"))))
 '(org-level-4 ((t (:inherit nil :foreground "#ebdbb2" :weight normal :height 1.1 :family "IM Fell English SC"))))
 '(org-level-5 ((t (:inherit nil :foreground "#ebdbb2" :weight normal :height 1.0 :family "IM Fell English SC"))))
 '(org-level-6 ((t (:inherit nil))))
 '(org-level-7 ((t nil)))
 '(org-link ((t (:inherit nil :foreground "cornflower blue" :underline t :height 1.0))))
 '(org-table ((t (:foreground "tomato"))))
 '(org-variable-pitch-face ((t (:height 1.0 :family "IM Fell English"))))
'(variable-pitch ((t (:height 1.0 :family "IM Fell English")))))
*** list 
adwaita-theme.el      manoj-dark-theme.el  tsdh-light-theme.el
deeper-blue-theme.el  misterioso-theme.el  wheatgrass-theme.el
dichromacy-theme.el   tango-dark-theme.el  whiteboard-theme.el
leuven-theme.el       tango-theme.el       wombat-theme.el
light-blue-theme.el   tsdh-dark-theme.el
*** commands
(load-theme 'material t)
(custo)
custom-theme-load-path
disable-theme 'material)
(disable-theme 'material)
*** command list встроеные
(load-theme 'material t)
(load-theme 'manoj-dark t)
(load-theme 'tango-dark t) серожёлтое
(load-theme 'wheatgrass t) зелёные шривты тёмнвя тема
(load-theme 'wombat t) тёмный свётло зелёный с подчёркиваниями
(load-theme 'misterioso t) серое
(load-theme 'deeper-blue t) тёмно синие
(load-theme 'tsdh-dark t) серо ржавй крупный таскбар

wigt
(load-theme 'whiteboard t) бело синие красивое
(load-theme 'leuven t) больше шрефты комкса
(load-theme 'tango t) бело серый
(load-theme 'light-blue t)свтло голлубой
(load-theme 'dichromacy t)
(load-theme 'adwaita t)
(load-theme 'tsdh-light t)

** Text fu 
*** Checking Spelling

The Emacs minor mode Flyspell provides an interface to the Hunspell spell checking software. To enable spell checking, you thus first need to ensure that Hunspell is available on your computer. Hunsell is easy to install on Linux computers, but is also available for Windows and Chromebook.

The configuration below enables Flyspell for all text modes and sets Hunspell as the default checking program. The M-F7 key checks the spelling for all words in the buffer and F7 checks the word that you cursor is standing on.

A more productive method is to use the C-; function. This function provides the most likely correction of the first spelling error before the cursor is. Emacs will show the list of possible corrections in the mini buffer. Repeatedly pressing C-; will cycle through the options until you get back to the original. This function prevents you from having to jump to your spelling mistakes.

  ;; Spell checking
  ;; Requires Hunspell
  (use-package flyspell
    :config
    (setq ispell-program-name "hunspell"
          ispell-default-dictionary "en_AU")
    :hook (text-mode . flyspell-mode)
    :bind (("M-<f7>" . flyspell-buffer)
           ("<f7>" . flyspell-word)
           ("C-;" . flyspell-auto-correct-previous-word)))

The available English dictionaries in Hunspell are:

    en_US (American)
    en_CA (Canadian)
    en_GB (British)
    en_AU (Australian)

Hunspell supports a lot of other dictionaries so you can install and choose your own when English is not your first language. In Linux, you can install dictionaries with your favourite package manager.

If you are multilingual, then you can set a different language for each buffer by adding a file variable. You need to the text below as the last lines in your Org mode file, where you replace nederlands (Dutch) with your preferred language:

,# Local Variables:
,# ispell-local-dictionary: nederlands
,# End:

Emacs evaluates this line and activates the dictionary when you run M-x normal-mode and the next time you open the file. This dictionary only applies to the relevant file and all other buffers remain in the default language.
*** Counting Words
To count the words in a buffer, or part thereof, use the count-word-region-function, which is bound to M-==. The result appears in the minibuffer. When you select a portion of text, this function will count only the selection. Adding the C-u prefix counts the words for the hole buffer (C-u M-=).
*** Text size
To increase the height of the text in the current buffer, type C-x C-+. To decrease it, type C-x C--.

To restore the default (global) face height, type C-x C-0. These keys are all bound to the text-scale-adjust funcion, which looks at the last key typed to determine which action to take.

Note that this text size is only for the ease of editing and not for the final output. The size of the text in any HTML, PDF or Word document is determined by the logic of the document (headers and so on), not individual size indicators.
*** Highlighting by Word, Line and Regexp
How to highlight phrases, regular expressions and lines with highligh-phrase, highligh-regexp and highlight-lines-matching-regexp.
By Mickey Petersen
Updated for emacs 28

With Emacs’s Hi-Lock mode you can highlight by word, line or regular expression with ease. The highlighter functionality in Emacs is particularly helpful when if you are trying to do complex code refactoring or if you are fixing data or text by hand.

The Emacs Hi-Lock facility is obviously – and this should come as no surprise to you if you have used Emacs for a while – very complex with lots of whiz-bang features. I’ll concern myself with the most common use-cases for Hi-Lock and leave the more advanced concepts for another time.
Global Hi-Lock Key bindings

As luck would have it, the highlighter commands are bound to easy-to-reach key bindings.

M-s h . or highlight-symbol-at-point

    Grabs the symbol at point and highlights it with a highlighter of your choice.

    What’s a symbol? That depends on your buffer’s syntax table. It’s usually set up grab the right thing in most programming modes, but if you’re poring over log files, beware that text-mode and so on may not have a syntax table amenable to that.
M-s h l or highlight-lines-matching-regexp

    Highlights all lines matching a regular expression
M-s h p or highlight-phrase

    Highlights everything matching a phrase
M-s h r or highlight-regexp

    Highlights everything matching a regular expression.

    If you use subexpressions – like this \(...\) – then, as of Emacs 27, you can give highlight-regexp a numeric prefix argument to indicate the subexpression you wish to highlight.
M-s h u or unhighlight-regexp

    Deletes the highlighter under point
M-s h w or hi-lock-write-interactive-patterns

    Inserts a list of Hi-Lock patterns into the buffer
M-s h f or hi-lock-find-patterns

    Searches for Hi-Lock patterns in the buffer to use.

NOTE:All of the highlight-xxxx commands are actually just aliases for the hi-lock-xxxx commands.
Whitespace and Casing

In Emacs 28, matching is now case sensitive if – much like case folding in things like ISearch – you use an uppercase letter. So, if you want case insensitive highlighting, you should only use lower case!

Another new feature in Emacs 28 is that highlight-phrase now uses a little-known feature of (again) ISearch: search-whitespace-regexp. Emacs will automatically ‘fold’ several types of whitespace characters and treat them as though they were a regular whitespace. In other words, when you use whitespace, Emacs will automatically match for other whitespace-alike characters.
Customizing Hi-Lock

If you don’t like the Hi-Lock colors they can be customized easily with M-x customize-group RET hi-lock-faces. You can of course alter the variable hi-lock-face-defaults and add your own faces.
Persisting Highlighters

There is a mechanism for storing and restoring the Hi-Locks you’ve created. If you create highlights interactively you can tell Emacs to insert those patterns into the active buffer by running M-s h w. Emacs will wrap the elisp patterns in the comment format used by the buffer (if one is defined) or ask if you no comment format is defined.

The patterns should be added to the top of the file, as Emacs will only search the first 10,000 characters (customize hi-lock-file-patterns-range to change that amount) for the patterns before giving up.

Emacs will not highlight patterns found in a file automatically. You must explicitly tell it to do so by manually invoking M-x hi-lock-mode or globally with global-hi-lock-mode.

You can also add it to your init file:

(global-hi-lock-mode 1)

Emacs may ask you if you want to load the patterns if it finds any. If you find that as annoying as I do, you can add this to have Emacs always highlight any Hi-Lock patterns it finds in the file:

(setq hi-lock-file-patterns-policy #'(lambda (dummy) t)) 
* Help Docs eLisp
** Data types
*** varible
**** show type
 (type-of chartoadd)
**** chek type
 (typep *x* 'integer)
**** chege type 
***** From number to string:
 (number-to-string 5)
 "5"
 you may transform a string to any numerical notation:
 (number-to-string 341 :base 10)
 "341"
***** From string to number:
 (parse-integer "5")
 5
 with some trash
 (parse-integer " 5 something not a number" :junk-allowed t)
 5
 Or use this:
 (read-from-string "23 absd")
 23
***** FORMAT 
 (format nil "~A" 1)
**** Seeing the Current Value of a Variable
	 c-h v
 describe-variable

 (progn
 (evil-open-below 3)
 (insert (getenv "PATH"))
 )

 (describe-variable exec-path)
 (symbol-value exec-path)
**** 12.7 Accessing Variable Values determined at run time
 https://www.gnu.org/software/emacs/manual/html_node/elisp/Accessing-Variables.html
 The usual way to reference a variable is to write the symbol which
 names it.  See Symbol Forms.

		Occasionally, you may want to reference a variable which is only
 determined at run time.  In that case, you cannot specify the variable
 name in the text of the program.  You can use the symbol-value
 function to extract the value.


 — Function: symbol-value symbol
 This function returns the value stored in symbol's value cell. 
 This is where the variable's current (dynamic) value is stored.  If
 the variable has no local binding, this is simply its global value. 
 If the variable is void, a void-variable error is signaled.

         If the variable is lexically bound, the value reported by
 symbol-value is not necessarily the same as the variable's
 lexical value, which is determined by the lexical environment rather
 than the symbol's value cell.  See Variable Scoping.

								(setq abracadabra 5)
								=> 5
           (setq foo 9)
								=> 9
          
           ;; Here the symbol abracadabra
           ;;   is the symbol whose value is examined.
           (let ((abracadabra 'foo))
             (symbol-value 'abracadabra))
								=>foo
          
           ;; Here, the value of abracadabra,
           ;;   which is foo,
           ;;   is the symbol whose value is examined.
           (let ((abracadabra 'foo))
             (symbol-value abracadabra))
               => 9
          
           (symbol-value 'abracadabra)
               => 5
**** 12.5 Defining Global Variables
 ==============================
 A “variable definition” is a construct that announces your intention to
 use a symbol as a global variable.  It uses the special forms ‘defvar’
 or ‘defconst’, which are documented below.
		A variable definition serves three purposes.  First, it informs
 people who read the code that the symbol is _intended_ to be used a
 certain way (as a variable).  Second, it informs the Lisp system of
 this, optionally supplying an initial value and a documentation string.
 Third, it provides information to programming tools such as ‘etags’,
 allowing them to find where the variable was defined.

		The difference between ‘defconst’ and ‘defvar’ is mainly a matter of
 intent, serving to inform human readers of whether the value should ever
 change.  Emacs Lisp does not actually prevent you from changing the
 value of a variable defined with ‘defconst’.  One notable difference
 between the two forms is that ‘defconst’ unconditionally initializes the
 variable, whereas ‘defvar’ initializes it only if it is originally void.

		To define a customizable variable, you should use ‘defcustom’ (which
 calls ‘defvar’ as a subroutine).  *Note Variable Definitions::.

	-- Special Form: defvar symbol [value [doc-string]]
			This special form defines SYMBOL as a variable.  Note that SYMBOL
			is not evaluated; the symbol to be defined should appear explicitly
			in the ‘defvar’ form.  The variable is marked as “special”, meaning
			that it should always be dynamically bound (*note Variable
			Scoping::).

			If VALUE is specified, and SYMBOL is void (i.e., it has no
			dynamically bound value; *note Void Variables::), then VALUE is
			evaluated and SYMBOL is set to the result.  But if SYMBOL is not
			void, VALUE is not evaluated, and SYMBOL’s value is left unchanged.
			If VALUE is omitted, the value of SYMBOL is not changed in any
			case.

			Note that specifying a value, even ‘nil’, marks the variable as
			special permanently.  Whereas if VALUE is omitted then the variable
			is only marked special locally (i.e. within the current lexical
			scope, or file if at the top-level).  This can be useful for
			suppressing byte compilation warnings, see *note Compiler Errors::.

			If SYMBOL has a buffer-local binding in the current buffer,
			‘defvar’ acts on the default value, which is buffer-independent,
			rather than the buffer-local binding.  It sets the default value if
			the default value is void.  *Note Buffer-Local Variables::.

			If SYMBOL is already lexically bound (e.g., if the ‘defvar’ form
			occurs in a ‘let’ form with lexical binding enabled), then ‘defvar’
			sets the dynamic value.  The lexical binding remains in effect
			until its binding construct exits.  *Note Variable Scoping::.

			When you evaluate a top-level ‘defvar’ form with ‘C-M-x’ in Emacs
			Lisp mode (‘eval-defun’), a special feature of ‘eval-defun’
			arranges to set the variable unconditionally, without testing
			whether its value is void.

			If the DOC-STRING argument is supplied, it specifies the
			documentation string for the variable (stored in the symbol’s
			‘variable-documentation’ property).  *Note Documentation::.

			Here are some examples.  This form defines ‘foo’ but does not
			initialize it:

           (defvar foo)
								= foo

			This example initializes the value of ‘bar’ to ‘23’, and gives it a
			documentation string:

           (defvar bar 23
             "The normal weight of a bar.")
								= bar

			The ‘defvar’ form returns SYMBOL, but it is normally used at top
			level in a file where its value does not matter.

			For a more elaborate example of using ‘defvar’ without a value, see
			*note Local defvar example::.

	-- Special Form: defconst symbol value [doc-string]
			This special form defines SYMBOL as a value and initializes it.  It
			informs a person reading your code that SYMBOL has a standard
			global value, established here, that should not be changed by the
			user or by other programs.  Note that SYMBOL is not evaluated; the
			symbol to be defined must appear explicitly in the ‘defconst’.

			The ‘defconst’ form, like ‘defvar’, marks the variable as
			“special”, meaning that it should always be dynamically bound
			(*note Variable Scoping::).  In addition, it marks the variable as
			risky (*note File Local Variables::).

			‘defconst’ always evaluates VALUE, and sets the value of SYMBOL to
			the result.  If SYMBOL does have a buffer-local binding in the
			current buffer, ‘defconst’ sets the default value, not the
			buffer-local value.  (But you should not be making buffer-local
			bindings for a symbol that is defined with ‘defconst’.)

			An example of the use of ‘defconst’ is Emacs’s definition of
			‘float-pi’—the mathematical constant pi, which ought not to be
			changed by anyone (attempts by the Indiana State Legislature
			notwithstanding).  As the second form illustrates, however,
			‘defconst’ is only advisory.

           (defconst float-pi 3.141592653589793 "The value of Pi.")
								= float-pi
           (setq float-pi 3)
								= float-pi
           float-pi
								= 3

		*Warning:* If you use a ‘defconst’ or ‘defvar’ special form while the
 variable has a local binding (made with ‘let’, or a function argument),
 it sets the local binding rather than the global binding.  This is not
 what you usually want.  To prevent this, use these special forms at top
 level in a file, where normally no local binding is in effect, and make
 sure to load the file before making a local binding for the variable.
**** 12.11.2 Creating and Deleting Buffer-Local Bindings
 Macro: defvar-local
 setq-local
 ---------------------------------------------------
	-- Command: make-local-variable variable
			This function creates a buffer-local binding in the current buffer
			for VARIABLE (a symbol).  Other buffers are not affected.  The
			value returned is VARIABLE.

			The buffer-local value of VARIABLE starts out as the same value
			VARIABLE previously had.  If VARIABLE was void, it remains void.

           ;; In buffer ‘b1’:
           (setq foo 5)                ; Affects all buffers.
								= 5
           (make-local-variable 'foo)  ; Now it is local in ‘b1’.
								= foo
           foo                         ; That did not change
								= 5                   ;   the value.
           (setq foo 6)                ; Change the value
								= 6                   ;   in ‘b1’.
           foo
								= 6

           ;; In buffer ‘b2’, the value hasn’t changed.
           (with-current-buffer "b2"
             foo)
								= 5

			Making a variable buffer-local within a ‘let’-binding for that
			variable does not work reliably, unless the buffer in which you do
			this is not current either on entry to or exit from the ‘let’.
			This is because ‘let’ does not distinguish between different kinds
			of bindings; it knows only which variable the binding was made for.

			It is an error to make a constant or a read-only variable
			buffer-local.  *Note Constant Variables::.

			If the variable is terminal-local (*note Multiple Terminals::),
			this function signals an error.  Such variables cannot have
			buffer-local bindings as well.

			*Warning:* do not use ‘make-local-variable’ for a hook variable.
			The hook variables are automatically made buffer-local as needed if
			you use the LOCAL argument to ‘add-hook’ or ‘remove-hook’.

	-- Macro: setq-local variable value
			This macro creates a buffer-local binding in the current buffer for
			VARIABLE, and gives it the buffer-local value VALUE.  It is
			equivalent to calling ‘make-local-variable’ followed by ‘setq’.
			VARIABLE should be an unquoted symbol.

	-- Command: make-variable-buffer-local variable
			This function marks VARIABLE (a symbol) automatically buffer-local,
			so that any subsequent attempt to set it will make it local to the
			current buffer at the time.  Unlike ‘make-local-variable’, with
			which it is often confused, this cannot be undone, and affects the
			behavior of the variable in all buffers.

			A peculiar wrinkle of this feature is that binding the variable
			(with ‘let’ or other binding constructs) does not create a
			buffer-local binding for it.  Only setting the variable (with ‘set’
			or ‘setq’), while the variable does not have a ‘let’-style binding
			that was made in the current buffer, does so.

			If VARIABLE does not have a default value, then calling this
			command will give it a default value of ‘nil’.  If VARIABLE already
			has a default value, that value remains unchanged.  Subsequently
			calling ‘makunbound’ on VARIABLE will result in a void buffer-local
			value and leave the default value unaffected.

			The value returned is VARIABLE.

			It is an error to make a constant or a read-only variable
			buffer-local.  *Note Constant Variables::.

			*Warning:* Don’t assume that you should use
			‘make-variable-buffer-local’ for user-option variables, simply
			because users _might_ want to customize them differently in
			different buffers.  Users can make any variable local, when they
			wish to.  It is better to leave the choice to them.

			The time to use ‘make-variable-buffer-local’ is when it is crucial
			that no two buffers ever share the same binding.  For example, when
			a variable is used for internal purposes in a Lisp program which
			depends on having separate values in separate buffers, then using
			‘make-variable-buffer-local’ can be the best solution.

	-- Macro: defvar-local variable value &optional docstring
			This macro defines VARIABLE as a variable with initial value VALUE
			and DOCSTRING, and marks it as automatically buffer-local.  It is
			equivalent to calling ‘defvar’ followed by
			‘make-variable-buffer-local’.  VARIABLE should be an unquoted
			symbol.

	-- Function: local-variable-p variable &optional buffer
			This returns ‘t’ if VARIABLE is buffer-local in buffer BUFFER
			(which defaults to the current buffer); otherwise, ‘nil’.

	-- Function: local-variable-if-set-p variable &optional buffer
			This returns ‘t’ if VARIABLE either has a buffer-local value in
			buffer BUFFER, or is automatically buffer-local.  Otherwise, it
			returns ‘nil’.  If omitted or ‘nil’, BUFFER defaults to the current
			buffer.

	-- Function: buffer-local-value variable buffer
			This function returns the buffer-local binding of VARIABLE (a
			symbol) in buffer BUFFER.  If VARIABLE does not have a buffer-local
			binding in buffer BUFFER, it returns the default value (*note
			Default Value::) of VARIABLE instead.

	-- Function: buffer-local-variables &optional buffer
			This function returns a list describing the buffer-local variables
			in buffer BUFFER.  (If BUFFER is omitted, the current buffer is
			used.)  Normally, each list element has the form ‘(SYM . VAL)’,
			where SYM is a buffer-local variable (a symbol) and VAL is its
			buffer-local value.  But when a variable’s buffer-local binding in
			BUFFER is void, its list element is just SYM.

           (make-local-variable 'foobar)
           (makunbound 'foobar)
           (make-local-variable 'bind-me)
           (setq bind-me 69)
           (setq lcl (buffer-local-variables))
               ;; First, built-in variables local in all buffers:
           = ((mark-active . nil)
               (buffer-undo-list . nil)
               (mode-name . "Fundamental")
               ...
               ;; Next, non-built-in buffer-local variables.
               ;; This one is buffer-local and void:
               foobar
               ;; This one is buffer-local and nonvoid:
               (bind-me . 69))

			Note that storing new values into the CDRs of cons cells in this
			list does _not_ change the buffer-local values of the variables.

	-- Command: kill-local-variable variable
			This function deletes the buffer-local binding (if any) for
			VARIABLE (a symbol) in the current buffer.  As a result, the
			default binding of VARIABLE becomes visible in this buffer.  This
			typically results in a change in the value of VARIABLE, since the
			default value is usually different from the buffer-local value just
			eliminated.

			If you kill the buffer-local binding of a variable that
			automatically becomes buffer-local when set, this makes the default
			value visible in the current buffer.  However, if you set the
			variable again, that will once again create a buffer-local binding
			for it.

			‘kill-local-variable’ returns VARIABLE.

			This function is a command because it is sometimes useful to kill
			one buffer-local variable interactively, just as it is useful to
			create buffer-local variables interactively.

	-- Function: kill-all-local-variables
			This function eliminates all the buffer-local variable bindings of
			the current buffer except for variables marked as permanent and
			local hook functions that have a non-‘nil’ ‘permanent-local-hook’
			property (*note Setting Hooks::).  As a result, the buffer will see
			the default values of most variables.

			This function also resets certain other information pertaining to
			the buffer: it sets the local keymap to ‘nil’, the syntax table to
			the value of ‘(standard-syntax-table)’, the case table to
			‘(standard-case-table)’, and the abbrev table to the value of
			‘fundamental-mode-abbrev-table’.

			The very first thing this function does is run the normal hook
			‘change-major-mode-hook’ (see below).

			Every major mode command begins by calling this function, which has
			the effect of switching to Fundamental mode and erasing most of the
			effects of the previous major mode.  To ensure that this does its
			job, the variables that major modes set should not be marked
			permanent.

			‘kill-all-local-variables’ returns ‘nil’.

	-- Variable: change-major-mode-hook
			The function ‘kill-all-local-variables’ runs this normal hook
			before it does anything else.  This gives major modes a way to
			arrange for something special to be done if the user switches to a
			different major mode.  It is also useful for buffer-specific minor
			modes that should be forgotten if the user changes the major mode.

			For best results, make this variable buffer-local, so that it will
			disappear after doing its job and will not interfere with the
			subsequent major mode.  *Note Hooks::.

		A buffer-local variable is “permanent” if the variable name (a
 symbol) has a ‘permanent-local’ property that is non-‘nil’.  Such
 variables are unaffected by ‘kill-all-local-variables’, and their local
 bindings are therefore not cleared by changing major modes.  Permanent
 locals are appropriate for data pertaining to where the file came from
 or how to save it, rather than with how to edit the contents.
*** String 
**** Conversion
***** 4.6 Conversion of Characters and Strings
****** section describes : 
	 This section describes functions for converting between characters, strings and
	 integers. format (see [[https://www.gnu.org/software/emacs/manual/html_node/elisp/Formatting-Strings.html#Formatting-Strings][Formatting Strings]]) and prin1-to-string (see [[https://www.gnu.org/software/emacs/manual/html_node/elisp/Output-Functions.html#Output-Functions][Output Functions]])
	 can also convert Lisp objects into strings. read-from-string (see [[https://www.gnu.org/software/emacs/manual/html_node/elisp/Input-Functions.html#Input-Functions][Input Functions]]) can
	 convert a string representation of a Lisp object into an object. The functions
	 string-to-multibyte and string-to-unibyte convert the text representation of a string (see
	 [[https://www.gnu.org/software/emacs/manual/html_node/elisp/Converting-Representations.html#Converting-Representations][Converting Representations]]). 

	 See [[https://www.gnu.org/software/emacs/manual/html_node/elisp/Documentation.html#Documentation][Documentation]], for functions that produce textual descriptions of text characters
	 and general input events (single-key-description and text-char-description). These are
	 used primarily for making help messages. 
****** Function: number-to-string number
		This function returns a string consisting of the printed base-ten representation of
		number. The returned value starts with a minus sign if the argument is negative. 

	 (number-to-string 256)
				=> "256"
	 (number-to-string -23)
				=> "-23"
	 (number-to-string -23.5)
				=> "-23.5"

		int-to-string is a semi-obsolete alias for this function. 

		See also the function format in [[https://www.gnu.org/software/emacs/manual/html_node/elisp/Formatting-Strings.html#Formatting-Strings][Formatting Strings]]. 
****** Function: string-to-number string &optional base
		This function returns the numeric value of the characters in string. If base is
		non-nil, it must be an integer between 2 and 16 (inclusive), and integers are
		converted in that base. If base is nil, then base ten is used. Floating-point
		conversion only works in base ten; we have not implemented other radices for
		floating-point numbers, because that would be much more work and does not
		seem useful. If string looks like an integer but its value is too large to fit into a Lisp
		integer, string-to-number returns a floating-point result. 

		The parsing skips spaces and tabs at the beginning of string, then reads as much
		of string as it can interpret as a number in the given base. (On some systems it
		ignores other whitespace at the beginning, not just spaces and tabs.) If string
		cannot be interpreted as a number, this function returns 0. 

	 (string-to-number "256")
				=> 256
	 (string-to-number "25 is a perfect square.")
				=> 25
	 (string-to-number "X256")
				=> 0
	 (string-to-number "-4.5")
				=> -4.5
	 (string-to-number "1e5")
				=> 100000.0
		string-to-int is an obsolete alias for this function. 
****** Function: char-to-string character
		This function returns a new string containing one character, character. This
		function is semi-obsolete because the function string is more general. See
		[[https://www.gnu.org/software/emacs/manual/html_node/elisp/Creating-Strings.html#Creating-Strings][Creating Strings]]. 
****** Function: string-to-char string
		This function returns the first character in string. This mostly identical to (aref string
		0), except that it returns 0 if the string is empty. (The value is also 0 when the first
		character of string is the null character, ASCII code 0.) This function may be
		eliminated in the future if it does not seem useful enough to retain. 
****** some other functions that can convert : 
	 Here are some other functions that can convert to or from a string: 
******* concat
		 This function converts a vector or a list into a string. See [[https://www.gnu.org/software/emacs/manual/html_node/elisp/Creating-Strings.html#Creating-Strings][Creating Strings]]. 
******* vconcat
		 This function converts a string into a vector. See [[https://www.gnu.org/software/emacs/manual/html_node/elisp/Vector-Functions.html#Vector-Functions][Vector Functions]]. 
******* append
		 This function converts a string into a list. See [[https://www.gnu.org/software/emacs/manual/html_node/elisp/Building-Lists.html#Building-Lists][Building Lists]]. 
******* byte-to-string
		 This function converts a byte of character data into a unibyte string. See
		 [[https://www.gnu.org/software/emacs/manual/html_node/elisp/Converting-Representations.html#Converting-Representations][Converting Representations]]. 
**** 34.6.2 Simple Match Data Access
*****  section explains : 
 This section explains how to use the match data to find out what was matched by the
 last search or match operation, if it succeeded. 

 You can ask about the entire matching text, or about a particular parenthetical
 subexpression of a regular expression. The count argument in the functions below
 specifies which. If count is zero, you are asking about the entire match. If count is
 positive, it specifies which subexpression you want. 

 Recall that the subexpressions of a regular expression are those expressions grouped
 with escaped parentheses, ‘\(…\)’. The countth subexpression is found by counting
 occurrences of ‘\(’ from the beginning of the whole regular expression. The first
 subexpression is numbered 1, the second 2, and so on. Only regular expressions can
 have subexpressions—after a simple string search, the only information available is
 about the entire match. 

 Every successful search sets the match data. Therefore, you should query the match
 data immediately after searching, before calling any other function that might perform
 another search. Alternatively, you may save and restore the match data (see [[https://www.gnu.org/software/emacs/manual/html_node/elisp/Saving-Match-Data.html#Saving-Match-Data][Saving]]
 [[https://www.gnu.org/software/emacs/manual/html_node/elisp/Saving-Match-Data.html#Saving-Match-Data][Match Data]]) around the call to functions that could perform another search. Or use the
 functions that explicitly do not modify the match data; e.g., string-match-p. 

 A search which fails may or may not alter the match data. In the current
 implementation, it does not, but we may change it in the future. Don’t try to rely on the
 value of the match data after a failing search. 
*****  Function: match-string count &optional in-string
	This function returns, as a string, the text matched in the last search or match
	operation. It returns the entire text if count is zero, or just the portion corresponding
	to the countth parenthetical subexpression, if count is positive. 

	If the last such operation was done against a string with string-match, then you
	should pass the same string as the argument in-string. After a buffer search or
	match, you should omit in-string or pass nil for it; but you should make sure that
	the current buffer when you call match-string is the one in which you did the
	searching or matching. Failure to follow this advice will lead to incorrect results. 

	The value is nil if count is out of range, or for a subexpression inside a ‘\|’
	alternative that wasn’t used or a repetition that repeated zero times. 
*****  Function: match-string-no-properties count &optional in-string

	This function is like match-string except that the result has no text properties. 
*****  Function: match-beginning count

	If the last regular expression search found a match, this function returns the
	position of the start of the matching text or of a subexpression of it. 

	If count is zero, then the value is the position of the start of the entire match.
	Otherwise, count specifies a subexpression in the regular expression, and the
	value of the function is the starting position of the match for that subexpression. 

	The value is nil for a subexpression inside a ‘\|’ alternative that wasn’t used or a
	repetition that repeated zero times. 
*****  Function: match-end count
	This function is like match-beginning except that it returns the position of the end
	of the match, rather than the position of the beginning. 
***** example of using the match data : 
 Here is an example of using the match data, with a comment showing the positions
 within the text: 

 (string-match "\\(qu\\)\\(ick\\)"
               "The quick fox jumped quickly.")
               ;0123456789
			=> 4


 (match-string 0 "The quick fox jumped quickly.")
			=> "quick"
 (match-string 1 "The quick fox jumped quickly.")
			=> "qu"
 (match-string 2 "The quick fox jumped quickly.")
			=> "ick"


 (match-beginning 1)       ; The beginning of the match
			=> 4                 ;   with ‘qu’ is at index 4.


 (match-beginning 2)       ; The beginning of the match
			=> 6                 ;   with ‘ick’ is at index 6.


 (match-end 1)             ; The end of the match
			=> 6                 ;   with ‘qu’ is at index 6.

 (match-end 2)             ; The end of the match
			=> 9                 ;   with ‘ick’ is at index 9.
*****  Here is another example : 
 Here is another example. Point is initially located at the beginning of the line.
 Searching moves point to between the space and the word ‘in’. The beginning of the
 entire match is at the 9th character of the buffer (‘T’), and the beginning of the match
 for the first subexpression is at the 13th character (‘c’). 

 (list
   (re-search-forward "The \\(cat \\)")
   (match-beginning 0)
   (match-beginning 1))
     => (17 9 13)


 ---------- Buffer: foo ----------
 I read "The cat ∗in the hat comes back" twice.
         ^   ^
         9  13
 ---------- Buffer: foo ----------

 (In this case, the index returned is a buffer position; the first character of the buffer
 counts as 1.) 
**** 4.3 Creating Strings (split sub)
The following functions create strings, either from scratch, or by putting strings
together, or by taking them apart. 
***** Function: make-string count character &optional multibyte

	This function returns a string made up of count repetitions of character. If count is
	negative, an error is signaled. 

 (make-string 5 ?x)
			=> "xxxxx"
 (make-string 0 ?x)
			=> ""

	Normally, if character is an ASCII character, the result is a unibyte string. But if the
	optional argument multibyte is non-nil, the function will produce a multibyte string
	instead. This is useful when you later need to concatenate the result with
	non-ASCII strings or replace some of its characters with non-ASCII characters. 

	Other functions to compare with this one include make-vector (see [[https://www.gnu.org/software/emacs/manual/html_node/elisp/Vectors.html#Vectors][Vectors]]) and
	make-list (see [[https://www.gnu.org/software/emacs/manual/html_node/elisp/Building-Lists.html#Building-Lists][Building Lists]]). 
*****  Function: string &rest characters

	This returns a string containing the characters characters. 

 (string ?a ?b ?c)
			=> "abc"
*****  Function: substring string &optional start end

	This function returns a new string which consists of those characters from string in
	the range from (and including) the character at the index start up to (but
	excluding) the character at the index end. The first character is at index zero. With
	one argument, this function just copies string. 

 (substring "abcdefg" 0 3)
			=> "abc"

	In the above example, the index for ‘a’ is 0, the index for ‘b’ is 1, and the index for
	‘c’ is 2. The index 3—which is the fourth character in the string—marks the
	character position up to which the substring is copied. Thus, ‘abc’ is copied from
	the string "abcdefg". 

	A negative number counts from the end of the string, so that -1 signifies the index
	of the last character of the string. For example: 

 (substring "abcdefg" -3 -1)
			=> "ef"

	In this example, the index for ‘e’ is -3, the index for ‘f’ is -2, and the index for ‘g’ is
	-1. Therefore, ‘e’ and ‘f’ are included, and ‘g’ is excluded. 

	When nil is used for end, it stands for the length of the string. Thus, 

 (substring "abcdefg" -3 nil)
			=> "efg"

	Omitting the argument end is equivalent to specifying nil. It follows that (substring
	string 0) returns a copy of all of string. 

 (substring "abcdefg" 0)
			=> "abcdefg"

	But we recommend copy-sequence for this purpose (see [[https://www.gnu.org/software/emacs/manual/html_node/elisp/Sequence-Functions.html#Sequence-Functions][Sequence Functions]]). 

	If the characters copied from string have text properties, the properties are copied
	into the new string also. See [[https://www.gnu.org/software/emacs/manual/html_node/elisp/Text-Properties.html#Text-Properties][Text Properties]]. 

	substring also accepts a vector for the first argument. For example: 

 (substring [a b (c) "d"] 1 3)
			=> [b (c)]

	A wrong-type-argument error is signaled if start is not an integer or if end is
	neither an integer nor nil. An args-out-of-range error is signaled if start indicates a
	character following end, or if either integer is out of range for string. 

	Contrast this function with buffer-substring (see [[https://www.gnu.org/software/emacs/manual/html_node/elisp/Buffer-Contents.html#Buffer-Contents][Buffer Contents]]), which returns a
	string containing a portion of the text in the current buffer. The beginning of a string
	is at index 0, but the beginning of a buffer is at index 1. 
*****  Function: substring-no-properties string &optional start end

	This works like substring but discards all text properties from the value. Also,
	start may be omitted or nil, which is equivalent to 0. Thus, (substring-no-properties
	string) returns a copy of string, with all text properties removed. 
*****  Function: concat &rest sequences

	This function returns a string consisting of the characters in the arguments passed
	to it (along with their text properties, if any). The arguments may be strings, lists
	of numbers, or vectors of numbers; they are not themselves changed. If concat
	receives no arguments, it returns an empty string. 

 (concat "abc" "-def")
			=> "abc-def"
 (concat "abc" (list 120 121) [122])
			=> "abcxyz"
 ;; nil is an empty sequence.
 (concat "abc" nil "-def")
			=> "abc-def"
 (concat "The " "quick brown " "fox.")
			=> "The quick brown fox."
 (concat)
			=> ""

	This function does not always allocate a new string. Callers are advised not rely
	on the result being a new string nor on it being eq to an existing string. 

	In particular, mutating the returned value may inadvertently change another string,
	alter a constant string in the program, or even raise an error. To obtain a string
	that you can safely mutate, use copy-sequence on the result. 

	For information about other concatenation functions, see the description of
	mapconcat in [[https://www.gnu.org/software/emacs/manual/html_node/elisp/Mapping-Functions.html#Mapping-Functions][Mapping Functions]], vconcat in [[https://www.gnu.org/software/emacs/manual/html_node/elisp/Vector-Functions.html#Vector-Functions][Vector Functions]], and append in
	[[https://www.gnu.org/software/emacs/manual/html_node/elisp/Building-Lists.html#Building-Lists][Building Lists]]. For concatenating individual command-line arguments into a string
	to be used as a shell command, see [[https://www.gnu.org/software/emacs/manual/html_node/elisp/Shell-Arguments.html#Shell-Arguments][combine-and-quote-strings]]. 
*****  Function: split-string string &optional separators omit-nulls trim

	This function splits string into substrings based on the regular expression
	separators (see [[https://www.gnu.org/software/emacs/manual/html_node/elisp/Regular-Expressions.html#Regular-Expressions][Regular Expressions]]). Each match for separators defines a
	splitting point; the substrings between splitting points are made into a list, which is
	returned. 

	If separators is nil (or omitted), the default is the value of
	split-string-default-separators and the function behaves as if omit-nulls were t. 

	If omit-nulls is nil (or omitted), the result contains null strings whenever there are
	two consecutive matches for separators, or a match is adjacent to the beginning
	or end of string. If omit-nulls is t, these null strings are omitted from the result. 

	If the optional argument trim is non-nil, it should be a regular expression to match
	text to trim from the beginning and end of each substring. If trimming makes the
	substring empty, it is treated as null. 

	If you need to split a string into a list of individual command-line arguments
	suitable for call-process or start-process, see [[https://www.gnu.org/software/emacs/manual/html_node/elisp/Shell-Arguments.html#Shell-Arguments][split-string-and-unquote]]. 

	Examples: 

 (split-string "  two words ")
			=> ("two" "words")

	The result is not ("" "two" "words" ""), which would rarely be useful. If you need
	such a result, use an explicit value for separators: 

 (split-string "  two words "
               split-string-default-separators)
			=> ("" "two" "words" "")
 (split-string "Soup is good food" "o")
			=> ("S" "up is g" "" "d f" "" "d")
 (split-string "Soup is good food" "o" t)
			=> ("S" "up is g" "d f" "d")
 (split-string "Soup is good food" "o+")
			=> ("S" "up is g" "d f" "d")

	Empty matches do count, except that split-string will not look for a final empty
	match when it already reached the end of the string using a non-empty match or
	when string is empty: 

 (split-string "aooob" "o*")
			=> ("" "a" "" "b" "")
 (split-string "ooaboo" "o*")
			=> ("" "" "a" "b" "")
 (split-string "" "")
			=> ("")

	However, when separators can match the empty string, omit-nulls is usually t, so
	that the subtleties in the three previous examples are rarely relevant: 

 (split-string "Soup is good food" "o*" t)
			=> ("S" "u" "p" " " "i" "s" " " "g" "d" " " "f" "d")
 (split-string "Nice doggy!" "" t)
			=> ("N" "i" "c" "e" " " "d" "o" "g" "g" "y" "!")
 (split-string "" "" t)
			=> nil

	Somewhat odd, but predictable, behavior can occur for certain “non-greedy”
	values of separators that can prefer empty matches over non-empty matches.
	Again, such values rarely occur in practice: 

 (split-string "ooo" "o*" t)
			=> nil
 (split-string "ooo" "\\|o+" t)
			=> ("o" "o" "o")

 Variable: split-string-default-separators

	The default value of separators for split-string. Its usual value is "[ \f\t\n\r\v]+". 
**** Modefing 
***** replace in string : 
****** replace-regexp-in-string : 
(replace-regexp-in-string REGEXP REP STRING &optional FIXEDCASE
LITERAL SUBEXP START)
Replace all matches for REGEXP with REP in STRING.
Return a new string containing the replacements.

Optional arguments FIXEDCASE, LITERAL and SUBEXP are like the
arguments with the same names of function ‘replace-match’.  If START
is non-nil, start replacements at that index in STRING, and omit
the first START characters of STRING from the return value.

REP is either a string used as the NEWTEXT arg of ‘replace-match’ or a
function.  If it is a function, it is called with the actual text of each
match, and its value is used as the replacement text.  When REP is called,
the match data are the result of matching REGEXP against a substring
of STRING, the same substring that is the actual text of the match which
is passed to REP as its argument.

To replace only the first match (if any), make REGEXP match up to \'
and replace a sub-expression, e.g.
  (replace-regexp-in-string "\\(foo\\).*\\'" "bar" " foo foo" nil nil 1)
    => " bar foo"


*** Lisp Symbol
**** Xah Lee. : 
***** The Concept of Symbols in Lisp : 
	 Lisp has symbols concept. Lisp's concept of “symbols” is somewhat like identifiers in other languages, except that:

			 lisp symbol can be held unevaluated, simply as itself, a inert name. In this sense, it's like a string.
			 lisp symbol stores more than one value.
	 The Concept of Symbols in Lisp

	 LISP differs from most programing languages such as C, Java, Ruby, Python, in that it deals with symbols, as opposed to just identifiers and values.

	 For example, in most languages, once you defined x=3, you cannot manipulate the variable “x” because it gets evaluated to 3 right away. If you want, you have to build a string "x" and manipulate this string, then use eval(lots string join here) to achieve the effect. (for example, you have a variable x, and it has integer 3 as value. you want to rename the variable so the new name is var_name + var_value.)

	 In lisp, after (setq x 3) then x would evaluate to 3, but (quote x) evaluates to the symbol x itself.

	 In practice, having a language dealing with “symbols” directly means that transformation of expressions in source code is possible at run-time. (In lisp, this is the lisp macro feature, which is a limited form of term rewriting languages such as Wolfram Language.) (info "(elisp) Macros")
	 Symbol's Cells
***** Each lisp symbol has the following “cells” to store things:

			 “print name” cell - a string, the same as the symbol. Automatically set, cannot be changed.
			 “value” cell - stores the symbol's value. When value cell is not void, the symbol is considered as a variable.
			 “function” cell - stores function definition object, lisp macros, or other objects that can act as function.
			 “property list” cell - hold a list of name/value pairs. Used for storing meta info about the symbol, such as function state, font face spec (for syntax coloring), deprecation flag, etc.

	 A symbol's value cell or function cell may be empty. If so, it's said to be “void”. When you try to get a cell's value that's void, it's a lisp error. (a empty cell is not the same as having value of nil.)

	 Normally, you don't need to worry about any of these tech details. The only thing that's useful for most elisp code is property list.

	 [see Elisp: Property List]

	 [see Elisp: Symbol Property List]

	 Understanding Lisp Symbol is important when you do advanced lisp programing. For example: macros, create and call functions at run-time, nested functions, manipulate evaluation, implementing a language, or any sort of meta-programing. If you don't have a need, you should not exploit these facilities in your program. Keep your code simple.

	 (info "(elisp) Symbols")
***** Quoting Symbol

	 A symbol, typically gets evaluated to its value. But you can stop this, by quote. e.g. (quote x). You can think of quote as “hold evaluation”.

	 quote has a shortcut syntax.

	 (quote x) is syntactically equivalent to 'x

	 (info "(elisp) Quoting")
****** 	When to Quote Symbol?

		Some functions, automatically quote the argument for you, as a convenience.

		For example, setq always automatically quotes its first argument. Because you basically always want the argument passed as a symbol. So, you write (setq x 3) instead of (set 'x 3).

		The function set is almost the same as setq, except that set does not automatically quote the first argument. So, you write (set 'x 3). (info "(elisp) Setting Variables")

		Some functions, require you to quote the argument yourself. Because sometimes you want a symbol's value passed, and sometimes the symbol itself.

		For example, mapcar's arguments are not automatically quoted. You may or may not want to quote them, depending on your use.

		Here's two examples of using mapcar, where in one example we want to quote the argument, and in the other example we do not want to quote the argument.

		;; suppose we have many functions
		(setq f '1+)
		(setq f 'cos)
		(setq f 'sqrt)
		;; we use f as a wrapper because we are not sure which function we want until run time

		;; here's our data
		(setq mylist '(1 2 3))

		;; normally, when using mapcar, we want first arg quoted
		(mapcar '1+ mylist) ; (2 3 4)

		;; here, we don't want first arg quoted
		(mapcar f mylist) ; (1.0 1.4142135623730951 1.7320508075688772)
***** Check If a Value is Symbol

		;; check if a variable eval to a lisp symbol

		;; make symbol x1's value cell to be 123
		(setq x1 123 )

		(symbolp x1) ; nil
		;; nil, because x1 is evaluated, and that value is 123, not a symbol

		(symbolp 'x1) ; t
***** Get Value of Symbol's Cells
		Here's how to get various cell's values.

		Here's a example of getting cell values, with symbol “sin” (sin is a builtin math function).

		;; get symbol's name cell value
		(symbol-name 'sin) ; "sin"

		;; get symbol's value cell value
		(symbol-value 'sin) ; void-variable error
		;; because the value cell of the symbol sin is void
		;; or, we just say that sin isn't a variable

		;; get symbol's function cell value
		(symbol-function 'sin) ;#<subr sin>
		;; the value is a primitive function (written in C), and has print form of #<subr sin>

		;; get symbol's property list cell value
		(symbol-plist 'sin) ; (side-effect-free t)

		Here's another example with a user defined symbol.

		;; get symbol cell values

		;; this makes symbol x1's value cell to contain the number 3
		(setq x1 3) ; 3

		;; get symbol's name cell value
		(symbol-name 'x1) ; "x1"

		;; get symbol's value cell value
		(symbol-value 'x1) ; 3

		;; get symbol's function cell value
		(symbol-function 'x1) ; nil
		;; in emacs 24.3.1, this is a void-function error
		;; in emacs 25.1, this returns nil
		;; elisp manual 24 and 25.1  say it should be error

		;; get symbol's property list cell value
		(symbol-plist 'x1) ;nil
***** Set Symbol's Name Cell
		Symbol's name cell is automatically set, as a string of the symbol name. Symbol name cell cannot be changed.
		Set Symbol's Value Cell

		The normal way to set a symbol's value cell is using setq.

		;; set a symbol's value cell
		(setq y "yes yes")

		;; get it
		(symbol-value 'y) ; "yes yes"

		(info "(elisp) Setting Variables")

		You can also check if a symbol's value cell is not empty, by boundp. (we think of it as checking if a variable is defined.)

		(boundp 'h) ; nil

		(setq h 4)

		(boundp 'h) ; t
***** Set Symbol's Function Cell
		The normal way to set a symbol's function cell is using defun or defmacro.

		;; a function that returns 4
		(defun z () 4)
		;; Note: return value of defun is not defined

		;; get a symbol's function cell value
		(symbol-function 'z) ; (lambda nil 4)

		(info "(elisp) Defining Functions")

		(info "(elisp) Function Cells")

		You can check if a symbol's function cell is not empty, by fboundp.

		(fboundp 'f) ; nil

		;; define a function that return 3
		(defun f () 3)

		;; now the fuction cell is filled
		(fboundp 'f) ; t

		Because a symbol can both hold a value and a function, a symbol can be both a variable and function. For example, the symbol buffer-file-name is both a variable and function. (you can try describe-function and describe-variable on it.)
***** Convert Symbol to String
		;; convert a symbol to string
		(symbol-name 'defun)
***** Convert String to Symbol
		;; convert a string to symbol

		;; if the symbol does not already exist in obarray, create it, put it in obarray
		(intern "x")

		;; if the symbol does not already exist in obarray, return nil
		(intern-soft "x")

**** fset : 
 (fset 'baz 'bar)
       bar

 (symbol-function 'baz)
       bar

***** Function: fset symbol definition

			This function stores definition in the function cell of symbol. The result is definition. Normally definition should be a function or the name of a function, but this is not checked. The argument symbol is an ordinary evaluated argument.

			The primary use of this function is as a subroutine by constructs that define or alter functions, like defun or advice-add (see Advising Functions). You can also use it to give a symbol a function definition that is not a function, e.g., a keyboard macro (see Keyboard Macros):

			;; Define a named keyboard macro.
			(fset 'kill-two-lines "\^u2\^k")
					 => "\^u2\^k"

			It you wish to use fset to make an alternate name for a function, consider using defalias instead. See Definition of defalias. 
**** 12.11 Advising Emacs Lisp Functions
 [[http://ergoemacs.org/emacs/elisp.html][Xah Emacs Lisp Tutorial]]
 Next: [[http://ergoemacs.org/emacs_manual/elisp/Obsolete-Functions.html#Obsolete-Functions][Obsolete Functions]], Previous: [[http://ergoemacs.org/emacs_manual/elisp/Closures.html#Closures][Closures]], Up: [[http://ergoemacs.org/emacs_manual/elisp/Functions.html#Functions][Functions]]   [[[http://ergoemacs.org/emacs_manual/elisp/index.html#SEC_Contents][Contents]]][[[http://ergoemacs.org/emacs_manual/elisp/index_index.html#Index][Index]]]
 When you need to modify a function defined in another library, or when you need to
 modify a hook like foo-function, a process filter, or basically any variable or object field
 which holds a function value, you can use the appropriate setter function, such as fset
 or defun for named functions, setq for hook variables, or set-process-filter for process
 filters, but those are often too blunt, completely throwing away the previous value. 

 The advice feature lets you add to the existing definition of a function, by advising the
 function. This is a cleaner method than redefining the whole function. 

 Emacs’s advice system provides two sets of primitives for that: the core set, for
 function values held in variables and object fields (with the corresponding primitives
 being add-function and remove-function) and another set layered on top of it for named
 functions (with the main primitives being advice-add and advice-remove). 

 For example, in order to trace the calls to the process filter of a process proc, you
 could use: 

 (defun my-tracing-function (proc string)
   (message "Proc %S received %S" proc string))

 (add-function :before (process-filter proc) #'my-tracing-function)

 This will cause the process’s output to be passed to my-tracing-function before being
 passed to the original process filter. my-tracing-function receives the same arguments
 as the original function. When you’re done with it, you can revert to the untraced
 behavior with: 

 (remove-function (process-filter proc) #'my-tracing-function)

 Similarly, if you want to trace the execution of the function named display-buffer, you
 could use: 

 (defun his-tracing-function (orig-fun &rest args)
   (message "display-buffer called with args %S" args)
   (let ((res (apply orig-fun args)))
     (message "display-buffer returned %S" res)
     res))

 (advice-add 'display-buffer :around #'his-tracing-function)

 Here, his-tracing-function is called instead of the original function and receives the
 original function (additionally to that function’s arguments) as argument, so it can call it
 if and when it needs to. When you’re tired of seeing this output, you can revert to the
 untraced behavior with: 

 (advice-remove 'display-buffer #'his-tracing-function)

 The arguments :before and :around used in the above examples specify how the two
 functions are composed, since there are many different ways to do it. The added
 function is also called a piece of advice. 

	• [[http://ergoemacs.org/emacs_manual/elisp/Core-Advising-Primitives.html#Core-Advising-Primitives][Core Advising Primitives]]:      Primitives to manipulate advice.   
	• [[http://ergoemacs.org/emacs_manual/elisp/Advising-Named-Functions.html#Advising-Named-Functions][Advising Named Functions]]:      Advising named functions.   
	• [[http://ergoemacs.org/emacs_manual/elisp/Advice-combinators.html#Advice-combinators][Advice combinators]]:      Ways to compose advice.   
	• [[http://ergoemacs.org/emacs_manual/elisp/Porting-old-advice.html#Porting-old-advice][Porting old advice]]:      Adapting code using the old  
			defadvice.   

 Next: [[http://ergoemacs.org/emacs_manual/elisp/Obsolete-Functions.html#Obsolete-Functions][Obsolete Functions]], Previous: [[http://ergoemacs.org/emacs_manual/elisp/Closures.html#Closures][Closures]], Up: [[http://ergoemacs.org/emacs_manual/elisp/Functions.html#Functions][Functions]]   [[[http://ergoemacs.org/emacs_manual/elisp/index.html#SEC_Contents][Contents]]][[[http://ergoemacs.org/emacs_manual/elisp/index_index.html#Index][Index]]]

**** Elisp: Symbol Property List
 Each lisp symbol is associated with a “property list”.

 This property list is stored in the symbol's property list cell. [see Elisp: Lisp Symbol]

 Emacs lisp property list is used extensively in emacs. It is also very useful if you want to write a function with state. You can store the state info with the symbol itself, instead of using a global variable.
 Set Whole Plist

 (setplist SYMBOL NEWPLIST) - Set SYMBOL's property list to NEWPLIST, and return NEWPLIST.

 ;; set the value of symbol ff's property list
 (setplist 'ff '(a 1 b 2))

 Get Whole Plist

 (symbol-plist SYMBOL) - Return SYMBOL's property list.

 ;; get the value of symbol ff's property list
 (symbol-plist 'ff )

 Add/Set a Key's Value

 (put SYMBOL PROPNAME VALUE) - Store SYMBOL's PROPNAME property with value VALUE.

 ;; set the value of key xx, of symbol ff's property list
 (put 'ff 'xx 5)

 Get a Key's Value

 (get SYMBOL PROPNAME) - Return the value of SYMBOL's PROPNAME property.

 ;; get the value of key xx, of symbol ff's property list
 (get 'ff 'xx)

**** 11.4 When a Variable is Void
***** is void if : 
	We say that a variable is void if its symbol has an unassigned value
	cell (see Symbol Components).

	Under Emacs Lisp’s default dynamic scoping rule (see Variable Scoping), the value cell stores the variable’s current (local or
	global) value.  Note that an unassigned value cell is not the
	same as having nil in the value cell.  The symbol nil is
	a Lisp object and can be the value of a variable, just as any other
	object can be; but it is still a value.  If a variable is void, trying
	to evaluate the variable signals a void-variable error, instead
	of returning a value.

	Under the optional lexical scoping rule, the value cell only holds
	the variable’s global value—the value outside of any lexical binding
	construct.  When a variable is lexically bound, the local value is
	determined by the lexical environment; hence, variables can have local
	values even if their symbols’ value cells are unassigned.
*****  Function: makunbound symbol
	This function empties out the value cell of symbol, making the
	variable void.  It returns symbol.

	If symbol has a dynamic local binding, makunbound voids
	the current binding, and this voidness lasts only as long as the local
	binding is in effect.  Afterwards, the previously shadowed local or
	global binding is reexposed; then the variable will no longer be void,
	unless the reexposed binding is void too.

	Here are some examples (assuming dynamic binding is in effect):


	(setq x 1)               ; Put a value in the global binding.
			 => 1
	(let ((x 2))             ; Locally bind it.
		(makunbound 'x)        ; Void the local binding.
		x)
	error Symbol's value as variable is void: x
	x                        ; The global binding is unchanged.
			 => 1

	(let ((x 2))             ; Locally bind it.
		(let ((x 3))           ; And again.
			(makunbound 'x)      ; Void the innermost-local binding.
			x))                  ; And refer: it’s void.
	error Symbol's value as variable is void: x

	(let ((x 2))
		(let ((x 3))
			(makunbound 'x))     ; Void inner binding, then remove it.
		x)                     ; Now outer let binding is visible.
			 => 2
*****  Function: boundp variable
	This function returns t if variable (a symbol) is not
	void, and nil if it is void.

	Here are some examples (assuming dynamic binding is in effect):


	(boundp 'abracadabra)          ; Starts out void.
			 => nil
	(let ((abracadabra 5))         ; Locally bind it.
		(boundp 'abracadabra))
			 => t
	(boundp 'abracadabra)          ; Still globally void.
			 => nil
	(setq abracadabra 5)           ; Make it globally nonvoid.
			 => 5
	(boundp 'abracadabra)
			 => t
**** 11.7 Accessing Variable Values
 The usual way to reference a variable is to write the symbol which
 names it.  See Symbol Forms.

 Occasionally, you may want to reference a variable which is only
 determined at run time.  In that case, you cannot specify the variable
 name in the text of the program.  You can use the symbol-value
 function to extract the value.


 Function: symbol-value symbol
 This function returns the value stored in symbol’s value cell.
 This is where the variable’s current (dynamic) value is stored.  If
 the variable has no local binding, this is simply its global value.
 If the variable is void, a void-variable error is signaled.

 If the variable is lexically bound, the value reported by
 symbol-value is not necessarily the same as the variable’s
 lexical value, which is determined by the lexical environment rather
 than the symbol’s value cell.  See Variable Scoping.


 (setq abracadabra 5)
			=> 5
 (setq foo 9)
			=> 9

 ;; Here the symbol abracadabra
 ;;   is the symbol whose value is examined.
 (let ((abracadabra 'foo))
   (symbol-value 'abracadabra))
			=> foo

 ;; Here, the value of abracadabra,
 ;;   which is foo,
 ;;   is the symbol whose value is examined.
 (let ((abracadabra 'foo))
   (symbol-value abracadabra))
			=> 9

 (symbol-value 'abracadabra)
			=> 5
*** Sequences 
**** 6.1 Sequences
	Next: [[https://www.gnu.org/software/emacs/manual/html_node/elisp/Arrays.html#Arrays][Arrays]], Up: [[https://www.gnu.org/software/emacs/manual/html_node/elisp/Sequences-Arrays-Vectors.html#Sequences-Arrays-Vectors][Sequences Arrays Vectors]]   [[[https://www.gnu.org/software/emacs/manual/html_node/elisp/index.html#SEC_Contents][Contents]]][[[https://www.gnu.org/software/emacs/manual/html_node/elisp/Index.html#Index][Index]]]
	This section describes functions that accept any kind of sequence. 
***** Function: sequencep object
		This function returns t if object is a list, vector, string, bool-vector, or char-table, nil
		otherwise. See also seqp below. 
***** Function: length sequence
		This function returns the number of elements in sequence. The function signals the
		wrong-type-argument error if the argument is not a sequence or is a dotted list; it
		signals the circular-list error if the argument is a circular list. For a char-table, the
		value returned is always one more than the maximum Emacs character code. 
		See [[https://www.gnu.org/software/emacs/manual/html_node/elisp/List-Elements.html#Definition-of-safe_002dlength][Definition of safe-length]], for the related function safe-length. 

	 (length '(1 2 3))
			 => 3
	 (length ())
			 => 0
	 (length "foobar")
			 => 6
	 (length [1 2 3])
			 => 3
	 (length (make-bool-vector 5 nil))
			 => 5

	 See also string-bytes, in [[https://www.gnu.org/software/emacs/manual/html_node/elisp/Text-Representations.html#Text-Representations][Text Representations]]. 

	 If you need to compute the width of a string on display, you should use string-width
	 (see [[https://www.gnu.org/software/emacs/manual/html_node/elisp/Size-of-Displayed-Text.html#Size-of-Displayed-Text][Size of Displayed Text]]), not length, since length only counts the number of
	 characters, but does not account for the display width of each character. 
***** Function: elt sequence index
		This function returns the element of sequence indexed by index. Legitimate values
		of index are integers ranging from 0 up to one less than the length of sequence. If
		sequence is a list, out-of-range values behave as for nth. See [[https://www.gnu.org/software/emacs/manual/html_node/elisp/List-Elements.html#Definition-of-nth][Definition of nth]].
		Otherwise, out-of-range values trigger an args-out-of-range error. 

	 (elt [1 2 3 4] 2)
				=> 3
	 (elt '(1 2 3 4) 2)
				=> 3
	 ;; We use string to show clearly which character elt returns.
	 (string (elt "1234" 2))
				=> "3"
	 (elt [1 2 3 4] 4)
				error-> Args out of range: [1 2 3 4], 4
	 (elt [1 2 3 4] -1)
				error-> Args out of range: [1 2 3 4], -1

		This function generalizes aref (see [[https://www.gnu.org/software/emacs/manual/html_node/elisp/Array-Functions.html#Array-Functions][Array Functions]]) and nth (see [[https://www.gnu.org/software/emacs/manual/html_node/elisp/List-Elements.html#Definition-of-nth][Definition of]]
		[[https://www.gnu.org/software/emacs/manual/html_node/elisp/List-Elements.html#Definition-of-nth][nth]]). 
***** Function: copy-sequence seqr
		This function returns a copy of seqr, which should be either a sequence or a
		record. The copy is the same type of object as the original, and it has the same
		elements in the same order. However, if seqr is empty, like a string or a vector of
		zero length, the value returned by this function might not be a copy, but an empty
		object of the same type and identical to seqr. 
		Storing a new element into the copy does not affect the original seqr, and vice
		versa. However, the elements of the copy are not copies; they are identical (eq) to
		the elements of the original. Therefore, changes made within these elements, as
		found via the copy, are also visible in the original. 
		If the argument is a string with text properties, the property list in the copy is itself
		a copy, not shared with the original’s property list. However, the actual values of
		the properties are shared. See [[https://www.gnu.org/software/emacs/manual/html_node/elisp/Text-Properties.html#Text-Properties][Text Properties]]. 
		This function does not work for dotted lists. Trying to copy a circular list may cause
		an infinite loop. 
		See also append in [[https://www.gnu.org/software/emacs/manual/html_node/elisp/Building-Lists.html#Building-Lists][Building Lists]], concat in [[https://www.gnu.org/software/emacs/manual/html_node/elisp/Creating-Strings.html#Creating-Strings][Creating Strings]], and vconcat in
		[[https://www.gnu.org/software/emacs/manual/html_node/elisp/Vector-Functions.html#Vector-Functions][Vector Functions]], for other ways to copy sequences. 
	 (setq bar (list 1 2))
				=> (1 2)
	 (setq x (vector 'foo bar))
				=> [foo (1 2)]
	 (setq y (copy-sequence x))
				=> [foo (1 2)]


	 (eq x y)
				=> nil
	 (equal x y)
				=> t
	 (eq (elt x 1) (elt y 1))
				=> t


	 ;; Replacing an element of one sequence.
	 (aset x 0 'quux)
	 x => [quux (1 2)]
	 y => [foo (1 2)]


	 ;; Modifying the inside of a shared element.
	 (setcar (aref x 1) 69)
	 x => [quux (69 2)]
	 y => [foo (69 2)]
***** Function: reverse sequence

		This function creates a new sequence whose elements are the elements of
		sequence, but in reverse order. The original argument sequence is not altered.
		Note that char-tables cannot be reversed. 

	 (setq x '(1 2 3 4))
				=> (1 2 3 4)
	 (reverse x)
				=> (4 3 2 1)
	 x
				=> (1 2 3 4)
	 (setq x [1 2 3 4])
				=> [1 2 3 4]
	 (reverse x)
				=> [4 3 2 1]
	 x
				=> [1 2 3 4]
	 (setq x "xyzzy")
				=> "xyzzy"
	 (reverse x)
				=> "yzzyx"
	 x
				=> "xyzzy"
***** Function: nreverse sequence

		This function reverses the order of the elements of sequence. Unlike reverse the
		original sequence may be modified. 

		For example: 

	 (setq x (list 'a 'b 'c))
				=> (a b c)
	 x
				=> (a b c)
	 (nreverse x)
				=> (c b a)
	 ;; The cons cell that was first is now last.
	 x
				=> (a)

		To avoid confusion, we usually store the result of nreverse back in the same
		variable which held the original list: 

	 (setq x (nreverse x))

		Here is the nreverse of our favorite example, (a b c), presented graphically: 

	 Original list head:                       Reversed list:
		-------------        -------------        ------------
	 | car  | cdr  |      | car  | cdr  |      | car | cdr  |
	 |   a  |  nil |<--   |   b  |   o  |<--   |   c |   o  |
	 |      |      |   |  |      |   |  |   |  |     |   |  |
		-------------    |   --------- | -    |   -------- | -
										 |             |      |            |
											-------------        ------------

		For the vector, it is even simpler because you don’t need setq: 

	 (setq x (copy-sequence [1 2 3 4]))
				=> [1 2 3 4]
	 (nreverse x)
				=> [4 3 2 1]
	 x
				=> [4 3 2 1]

		Note that unlike reverse, this function doesn’t work with strings. Although you can
		alter string data by using aset, it is strongly encouraged to treat strings as
		immutable even when they are mutable. See [[https://www.gnu.org/software/emacs/manual/html_node/elisp/Mutability.html#Mutability][Mutability]]. 
***** Function: sort sequence predicate

		This function sorts sequence stably. Note that this function doesn’t work for all
		sequences; it may be used only for lists and vectors. If sequence is a list, it is
		modified destructively. This functions returns the sorted sequence and compares
		elements using predicate. A stable sort is one in which elements with equal sort
		keys maintain their relative order before and after the sort. Stability is important
		when successive sorts are used to order elements according to different criteria. 

		The argument predicate must be a function that accepts two arguments. It is
		called with two elements of sequence. To get an increasing order sort, the
		predicate should return non-nil if the first element is “less” than the second, or nil if
		not. 

		The comparison function predicate must give reliable results for any given pair of
		arguments, at least within a single call to sort. It must be antisymmetric; that is, if
		a is less than b, b must not be less than a. It must be transitive—that is, if a is less
		than b, and b is less than c, then a must be less than c. If you use a comparison
		function which does not meet these requirements, the result of sort is
		unpredictable. 

		The destructive aspect of sort for lists is that it rearranges the cons cells forming
		sequence by changing CDRs. A nondestructive sort function would create new
		cons cells to store the elements in their sorted order. If you wish to make a sorted
		copy without destroying the original, copy it first with copy-sequence and then
		sort. 

		Sorting does not change the CARs of the cons cells in sequence; the cons cell
		that originally contained the element a in sequence still has a in its CAR after
		sorting, but it now appears in a different position in the list due to the change of
		CDRs. For example: 

	 (setq nums (list 1 3 2 6 5 4 0))
				=> (1 3 2 6 5 4 0)
	 (sort nums #'<)
				=> (0 1 2 3 4 5 6)
	 nums
				=> (1 2 3 4 5 6)

		Warning: Note that the list in nums no longer contains 0; this is the same cons
		cell that it was before, but it is no longer the first one in the list. Don’t assume a
		variable that formerly held the argument now holds the entire sorted list! Instead,
		save the result of sort and use that. Most often we store the result back into the
		variable that held the original list: 

	 (setq nums (sort nums #'<))

		For the better understanding of what stable sort is, consider the following vector
		example. After sorting, all items whose car is 8 are grouped at the beginning of
		vector, but their relative order is preserved. All items whose car is 9 are grouped
		at the end of vector, but their relative order is also preserved: 

	 (setq
		 vector
		 (vector '(8 . "xxx") '(9 . "aaa") '(8 . "bbb") '(9 . "zzz")
						 '(9 . "ppp") '(8 . "ttt") '(8 . "eee") '(9 . "fff")))
				=> [(8 . "xxx") (9 . "aaa") (8 . "bbb") (9 . "zzz")
						(9 . "ppp") (8 . "ttt") (8 . "eee") (9 . "fff")]
	 (sort vector (lambda (x y) (< (car x) (car y))))
				=> [(8 . "xxx") (8 . "bbb") (8 . "ttt") (8 . "eee")
						(9 . "aaa") (9 . "zzz") (9 . "ppp") (9 . "fff")]

		See [[https://www.gnu.org/software/emacs/manual/html_node/elisp/Sorting.html#Sorting][Sorting]], for more functions that perform sorting. See documentation in
		[[https://www.gnu.org/software/emacs/manual/html_node/elisp/Accessing-Documentation.html#Accessing-Documentation][Accessing Documentation]], for a useful example of sort. 

	 The seq.el library provides the following additional sequence manipulation macros and
	 functions, prefixed with seq-. To use them, you must first load the seq library. 

	 All functions defined in this library are free of side-effects; i.e., they do not modify any
	 sequence (list, vector, or string) that you pass as an argument. Unless otherwise
	 stated, the result is a sequence of the same type as the input. For those functions that
	 take a predicate, this should be a function of one argument. 

	 The seq.el library can be extended to work with additional types of sequential
	 data-structures. For that purpose, all functions are defined using cl-defgeneric. See
	 [[https://www.gnu.org/software/emacs/manual/html_node/elisp/Generic-Functions.html#Generic-Functions][Generic Functions]], for more details about using cl-defgeneric for adding extensions. 
***** Function: seq-elt sequence index

		This function returns the element of sequence at the specified index, which is an
		integer whose valid value range is zero to one less than the length of sequence.
		For out-of-range values on built-in sequence types, seq-elt behaves like elt. For
		the details, see [[https://www.gnu.org/software/emacs/manual/html_node/elisp/Sequence-Functions.html#Definition-of-elt][Definition of elt]]. 

	 (seq-elt [1 2 3 4] 2)
	 => 3

		seq-elt returns places settable using setf (see [[https://www.gnu.org/software/emacs/manual/html_node/elisp/Setting-Generalized-Variables.html#Setting-Generalized-Variables][Setting Generalized Variables]]). 

	 (setq vec [1 2 3 4])
	 (setf (seq-elt vec 2) 5)
	 vec
	 => [1 2 5 4]
***** Function: seq-length sequence
		This function returns the number of elements in sequence. For built-in sequence
		types, seq-length behaves like length. See [[https://www.gnu.org/software/emacs/manual/html_node/elisp/Sequence-Functions.html#Definition-of-length][Definition of length]]. 
***** Function: seqp object
		This function returns non-nil if object is a sequence (a list or array), or any
		additional type of sequence defined via seq.el generic functions. This is an
		extensible variant of sequencep. 

	 (seqp [1 2])
	 => t
	 (seqp 2)
	 => nil
***** Function: seq-drop sequence n

		This function returns all but the first n (an integer) elements of sequence. If n is
		negative or zero, the result is sequence. 

	 (seq-drop [1 2 3 4 5 6] 3)
	 => [4 5 6]
	 (seq-drop "hello world" -4)
	 => "hello world"
***** Function: seq-take sequence n

		This function returns the first n (an integer) elements of sequence. If n is negative
		or zero, the result is nil. 

	 (seq-take '(1 2 3 4) 3)
	 => (1 2 3)
	 (seq-take [1 2 3 4] 0)
	 => []
***** Function: seq-take-while predicate sequence

		This function returns the members of sequence in order, stopping before the first
		one for which predicate returns nil. 

	 (seq-take-while (lambda (elt) (> elt 0)) '(1 2 3 -1 -2))
	 => (1 2 3)
	 (seq-take-while (lambda (elt) (> elt 0)) [-1 4 6])
	 => []
***** Function: seq-drop-while predicate sequence

		This function returns the members of sequence in order, starting from the first one
		for which predicate returns nil. 

	 (seq-drop-while (lambda (elt) (> elt 0)) '(1 2 3 -1 -2))
	 => (-1 -2)
	 (seq-drop-while (lambda (elt) (< elt 0)) [1 4 6])
	 => [1 4 6]
***** Function: seq-do function sequence

		This function applies function to each element of sequence in turn (presumably for
		side effects), and returns sequence. 
***** Function: seq-map function sequence
		This function returns the result of applying function to each element of sequence.
		The returned value is a list. 

	 (seq-map #'1+ '(2 4 6))
	 => (3 5 7)
	 (seq-map #'symbol-name [foo bar])
	 => ("foo" "bar")
***** Function: seq-map-indexed function sequence

		This function returns the result of applying function to each element of sequence
		and its index within seq. The returned value is a list. 

	 (seq-map-indexed (lambda (elt idx)
											(list idx elt))
										'(a b c))
	 => ((0 a) (b 1) (c 2))
***** Function: seq-mapn function &rest sequences

		This function returns the result of applying function to each element of sequences.
		The arity (see [[https://www.gnu.org/software/emacs/manual/html_node/elisp/What-Is-a-Function.html#What-Is-a-Function][subr-arity]]) of function must match the number of sequences.
		Mapping stops at the end of the shortest sequence, and the returned value is a
		list. 

	 (seq-mapn #'+ '(2 4 6) '(20 40 60))
	 => (22 44 66)
	 (seq-mapn #'concat '("moskito" "bite") ["bee" "sting"])
	 => ("moskitobee" "bitesting")
***** Function: seq-filter predicate sequence

		This function returns a list of all the elements in sequence for which predicate
		returns non-nil. 

	 (seq-filter (lambda (elt) (> elt 0)) [1 -1 3 -3 5])
	 => (1 3 5)
	 (seq-filter (lambda (elt) (> elt 0)) '(-1 -3 -5))
	 => nil
***** Function: seq-remove predicate sequence

		This function returns a list of all the elements in sequence for which predicate
		returns nil. 

	 (seq-remove (lambda (elt) (> elt 0)) [1 -1 3 -3 5])
	 => (-1 -3)
	 (seq-remove (lambda (elt) (< elt 0)) '(-1 -3 -5))
	 => nil
***** Function: seq-reduce function sequence initial-value

		This function returns the result of calling function with initial-value and the first
		element of sequence, then calling function with that result and the second element
		of sequence, then with that result and the third element of sequence, etc. function
		should be a function of two arguments. If sequence is empty, this returns
		initial-value without calling function. 

	 (seq-reduce #'+ [1 2 3 4] 0)
	 => 10
	 (seq-reduce #'+ '(1 2 3 4) 5)
	 => 15
	 (seq-reduce #'+ '() 3)
	 => 3
***** Function: seq-some predicate sequence

		This function returns the first non-nil value returned by applying predicate to each
		element of sequence in turn. 

	 (seq-some #'numberp ["abc" 1 nil])
	 => t
	 (seq-some #'numberp ["abc" "def"])
	 => nil
	 (seq-some #'null ["abc" 1 nil])
	 => t
	 (seq-some #'1+ [2 4 6])
	 => 3
***** Function: seq-find predicate sequence &optional default

		This function returns the first element in sequence for which predicate returns
		non-nil. If no element matches predicate, the function returns default. 

		Note that this function has an ambiguity if the found element is identical to default,
		as in that case it cannot be known whether an element was found or not. 

	 (seq-find #'numberp ["abc" 1 nil])
	 => 1
	 (seq-find #'numberp ["abc" "def"])
	 => nil
***** Function: seq-every-p predicate sequence

		This function returns non-nil if applying predicate to every element of sequence
		returns non-nil. 

	 (seq-every-p #'numberp [2 4 6])
	 => t
	 (seq-every-p #'numberp [2 4 "6"])
	 => nil
***** Function: seq-empty-p sequence

		This function returns non-nil if sequence is empty. 

	 (seq-empty-p "not empty")
	 => nil
	 (seq-empty-p "")
	 => t
***** Function: seq-count predicate sequence

		This function returns the number of elements in sequence for which predicate
		returns non-nil. 

	 (seq-count (lambda (elt) (> elt 0)) [-1 2 0 3 -2])
	 => 2
***** Function: seq-sort function sequence

		This function returns a copy of sequence that is sorted according to function, a
		function of two arguments that returns non-nil if the first argument should sort
		before the second. 
***** Function: seq-sort-by function predicate sequence

		This function is similar to seq-sort, but the elements of sequence are transformed
		by applying function on them before being sorted. function is a function of one
		argument. 

	 (seq-sort-by #'seq-length #'> ["a" "ab" "abc"])
	 => ["abc" "ab" "a"]
***** Function: seq-contains-p sequence elt &optional function

		This function returns non-nil if at least one element in sequence is equal to elt. If
		the optional argument function is non-nil, it is a function of two arguments to use
		instead of the default equal. 

	 (seq-contains '(symbol1 symbol2) 'symbol1)
	 => symbol1
	 (seq-contains '(symbol1 symbol2) 'symbol3)
	 => nil
***** Function: seq-set-equal-p sequence1 sequence2 &optional testfn

		This function checks whether sequence1 and sequence2 contain the same
		elements, regardless of the order. If the optional argument testfn is non-nil, it is a
		function of two arguments to use instead of the default equal. 

	 (seq-set-equal-p '(a b c) '(c b a))
	 => t
	 (seq-set-equal-p '(a b c) '(c b))
	 => nil
	 (seq-set-equal-p '("a" "b" "c") '("c" "b" "a"))
	 => t
	 (seq-set-equal-p '("a" "b" "c") '("c" "b" "a") #'eq)
	 => nil
***** Function: seq-position sequence elt &optional function

		This function returns the index of the first element in sequence that is equal to elt.
		If the optional argument function is non-nil, it is a function of two arguments to use
		instead of the default equal. 

	 (seq-position '(a b c) 'b)
	 => 1
	 (seq-position '(a b c) 'd)
	 => nil
***** Function: seq-uniq sequence &optional function

		This function returns a list of the elements of sequence with duplicates removed.
		If the optional argument function is non-nil, it is a function of two arguments to use
		instead of the default equal. 

	 (seq-uniq '(1 2 2 1 3))
	 => (1 2 3)
	 (seq-uniq '(1 2 2.0 1.0) #'=)
	 => (1 2)
***** Function: seq-subseq sequence start &optional end

		This function returns a subset of sequence from start to end, both integers (end
		defaults to the last element). If start or end is negative, it counts from the end of
		sequence. 

	 (seq-subseq '(1 2 3 4 5) 1)
	 => (2 3 4 5)
	 (seq-subseq '[1 2 3 4 5] 1 3)
	 => [2 3]
	 (seq-subseq '[1 2 3 4 5] -3 -1)
	 => [3 4]
***** Function: seq-concatenate type &rest sequences
		This function returns a sequence of type type made of the concatenation of
		sequences. type may be: vector, list or string. 

	 (seq-concatenate 'list '(1 2) '(3 4) [5 6])
	 => (1 2 3 4 5 6)
	 (seq-concatenate 'string "Hello " "world")
	 => "Hello world"
***** Function: seq-mapcat function sequence &optional type

		This function returns the result of applying seq-concatenate to the result of
		applying function to each element of sequence. The result is a sequence of type
		type, or a list if type is nil. 

	 (seq-mapcat #'seq-reverse '((3 2 1) (6 5 4)))
	 => (1 2 3 4 5 6)
***** Function: seq-partition sequence n

		This function returns a list of the elements of sequence grouped into
		sub-sequences of length n. The last sequence may contain less elements than n.
		n must be an integer. If n is a negative integer or 0, the return value is nil. 

	 (seq-partition '(0 1 2 3 4 5 6 7) 3)
	 => ((0 1 2) (3 4 5) (6 7))
***** Function: seq-intersection sequence1 sequence2 &optional function

		This function returns a list of the elements that appear both in sequence1 and
		sequence2. If the optional argument function is non-nil, it is a function of two
		arguments to use to compare elements instead of the default equal. 

	 (seq-intersection [2 3 4 5] [1 3 5 6 7])
	 => (3 5)
***** Function: seq-difference sequence1 sequence2 &optional function

		This function returns a list of the elements that appear in sequence1 but not in
		sequence2. If the optional argument function is non-nil, it is a function of two
		arguments to use to compare elements instead of the default equal. 

	 (seq-difference '(2 3 4 5) [1 3 5 6 7])
	 => (2 4)
***** Function: seq-group-by function sequence

		This function separates the elements of sequence into an alist whose keys are the
		result of applying function to each element of sequence. Keys are compared
		using equal. 

	 (seq-group-by #'integerp '(1 2.1 3 2 3.2))
	 => ((t 1 3 2) (nil 2.1 3.2))
	 (seq-group-by #'car '((a 1) (b 2) (a 3) (c 4)))
	 => ((b (b 2)) (a (a 1) (a 3)) (c (c 4)))
***** Function: seq-into sequence type

		This function converts the sequence sequence into a sequence of type type. type
		can be one of the following symbols: vector, string or list. 

	 (seq-into [1 2 3] 'list)
	 => (1 2 3)
	 (seq-into nil 'vector)
	 => []
	 (seq-into "hello" 'vector)
	 => [104 101 108 108 111]
***** Function: seq-min sequence

		This function returns the smallest element of sequence. The elements of sequence
		must be numbers or markers (see [[https://www.gnu.org/software/emacs/manual/html_node/elisp/Markers.html#Markers][Markers]]). 

	 (seq-min [3 1 2])
	 => 1
	 (seq-min "Hello")
	 => 72
***** Function: seq-max sequence

		This function returns the largest element of sequence. The elements of sequence
		must be numbers or markers. 

	 (seq-max [1 3 2])
	 => 3
	 (seq-max "Hello")
	 => 111

	 Macro: seq-doseq (var sequence) body…

		This macro is like dolist (see [[https://www.gnu.org/software/emacs/manual/html_node/elisp/Iteration.html#Iteration][dolist]]), except that sequence can be a list, vector or
		string. This is primarily useful for side-effects. 

	 Macro: seq-let var-sequence val-sequence body…

		This macro binds the variables defined in var-sequence to the values that are the
		corresponding elements of val-sequence. This is known as destructuring
		binding. The elements of var-sequence can themselves include sequences,
		allowing for nested destructuring. 

		The var-sequence sequence can also include the &rest marker followed by a
		variable name to be bound to the rest of val-sequence. 

	 (seq-let [first second] [1 2 3 4]
		 (list first second))
	 => (1 2)
	 (seq-let (_ a _ b) '(1 2 3 4)
		 (list a b))
	 => (2 4)
	 (seq-let [a [b [c]]] [1 [2 [3]]]
		 (list a b c))
	 => (1 2 3)
	 (seq-let [a b &rest others] [1 2 3 4]
		 others)
	 => [3 4]

		The pcase patterns provide an alternative facility for destructuring binding, see
		[[https://www.gnu.org/software/emacs/manual/html_node/elisp/Destructuring-with-pcase-Patterns.html#Destructuring-with-pcase-Patterns][Destructuring with pcase Patterns]]. 
***** Function: seq-random-elt sequence

		This function returns an element of sequence taken at random. 

	 (seq-random-elt [1 2 3 4])
	 => 3
	 (seq-random-elt [1 2 3 4])
	 => 2
	 (seq-random-elt [1 2 3 4])
	 => 4
	 (seq-random-elt [1 2 3 4])
	 => 2
	 (seq-random-elt [1 2 3 4])
	 => 1

		If sequence is empty, this function signals an error. 

	 Next: [[https://www.gnu.org/software/emacs/manual/html_node/elisp/Arrays.html#Arrays][Arrays]], Up: [[https://www.gnu.org/software/emacs/manual/html_node/elisp/Sequences-Arrays-Vectors.html#Sequences-Arrays-Vectors][Sequences Arrays Vectors]]   [[[https://www.gnu.org/software/emacs/manual/html_node/elisp/index.html#SEC_Contents][Contents]]][[[https://www.gnu.org/software/emacs/manual/html_node/elisp/Index.html#Index][Index]]]
**** Vectors
***** Xah Emacs
****** Elisp: Vector
	Emacs lisp vector datatype is
		a ordered sequence of values, with fixed number of elements.


	 Vector is a ordered sequence of values.
	 Each element can be any type.
	 Element's value can be changed.
	 Number of elements cannot change. (i.e. Vector's length is fixed.)
	 Read/Write to any position has constant access time.
****** Create Vector
	 (make-vector 5 0)Create a vector of length 5, value 0 for all elements.

	 ;; create a vector of length 5, value 0 for all elements
	 (make-vector 5 0) ;; [0 0 0 0 0]


	 (vector a b …)Create a vector with elements, the elements are evaluated.


	 ;; create a vector and set to var v
	 (setq v (vector 3 4 5))

	 (setq x 7)

	 ;; each element will be evaluated
	 (setq v (vector 3 x 5))

	 v ; [3 7 5]


	 [a b …]Create a vector, do not evaluate elements.


	 (setq n 7)

	 ;; create a vector of elements 3 n 5. each element is NOT evaluated
	 (setq v [3 n 5])

	 v ; [3 n 5]
	 ;; the n remains a symbol, not 7
****** Fill Vector
	 (fillarray array val)Make all elements of array to have value val
	 .


	 (setq aa [3 4 5])
	 (fillarray aa nil) ;; [nil nil nil]

	 Length

	 (length (vector 7 4 5)) ; 3
******  Get Element
	 (aref array n)Return the element of array at index n.
	 (elt sequence n)Return element of sequence at index n.


	 When emacs doc mentions “ARRAY”, you can think of it as “vector or string”.

	 When emacs doc mentions “SEQUENCE”, you can think of it as “list or array”.

	 ;; get a element from vector
	 (aref ["a" "b" "c"] 0) ; => "a"

	 ;; get a element from vector
	 (elt ["a" "b" "c"] 0) ; => "a"



	 What's the difference between aref and elt?

	 elt is more general. It works on vector and list.
	 But if you know it's vector, you should use aref, because it's precise and faster.
	 [see Elisp: Sequence Type]
******  Change Element
	 (aset ARRAY IDX NEWELT)Store into the element of ARRAY at index IDX the value NEWELT. Return NEWELT.


	 (setq v [3 4 5])
	 (aset v 0 "b")
	 v  ; => ["b" 4 5]

******  Nested Vector
	 Vector can be nested in any way, because the elements can be any type.

	 ;; nested vector
	 [[1 2] [3 4]] ; 2 by 2 matrix

	 ;; random nested vector
	 [8 [3 [2 9] c] 7 [4 "b"]]
******  Join Vectors, Convert List to Vector
	 (vconcat sequence1 sequence2 …)Join any sequence types and return a vector. (List and vector are both sequence types.)


	 ;; join any sequence types
	 (vconcat [3 4] ["a" "b"]) ; => [3 4 "a" "b"]

	 (vconcat [3 4] '("a" "b")) ; => [3 4 "a" "b"]

	 (vconcat [3 4] "ab") ; => [3 4 97 98]
	 ;; string elements are converted to char.
	 ;; 97 is the codepoint for the char a
******  Convert Vector to List
	 (append sequence1 sequence2 …)Join any sequence types and return a list. (List and vector are both sequence types.)
	 Warning: if you want it to return a propert list, the last element must be a list, or nil.

	 ;; convert vector to list
	 (append [1 2 3] nil)
	 ; => (1 2 3)

	 (append [1 2 3] [4 5] )
	 ;; (1 2 3 . [4 5])
	 ;; this is improper list

	 (append [1 2 3] [4 5] nil)
	 ;; (1 2 3 4 5)
	 ;; proper list

	 (append [1 2 3] [4 5] '(6))
	 ;; (1 2 3 4 5 6)
	 ;; proper list
***** Functions That Operate on Vectors
	Here are some functions that relate to vectors:
****** Function: vectorp object
			 This function returns t if object is a vector.

			 (vectorp [a])
						=> t
			 (vectorp "asdf")
						=> nil

	 Function: vector &rest objects
			 This function creates and returns a vector whose elements are the arguments, objects.

			 (vector 'foo 23 [bar baz] "rats")
						=> [foo 23 [bar baz] "rats"]
			 (vector)
						=> []
****** Function: make-vector length object
			 This function returns a new vector consisting of length elements, each initialized to object.

			 (setq sleepy (make-vector 9 'Z))
						=> [Z Z Z Z Z Z Z Z Z]
****** Function: vconcat &rest sequences
			 This function returns a new vector containing all the elements of the sequences. The arguments sequences may be lists, vectors, or strings. If no sequences are given, an empty vector is returned.
******* constructed vector : 
				The value is a newly constructed vector that is not eq to any existing vector.

				(setq a (vconcat '(A B C) '(D E F)))
						 => [A B C D E F]
				(eq a (vconcat a))
						 => nil
				(vconcat)
						 => []
				(vconcat [A B C] "aa" '(foo (6 7)))
						 => [A B C 97 97 foo (6 7)]
******* integers as arguments : 
				The vconcat function also allows integers as arguments. It converts them to strings of digits, making up the decimal print representation of the integer, and then uses the strings instead of the original integers. Don't use this feature; we plan to eliminate it. If you already use this feature, change your programs now! The proper way to convert an integer to a decimal number in this way is with format (see section Formatting Strings) or number-to-string (see section Conversion of Characters and Strings).
******* other concatenation : 
				For other concatenation functions, see mapconcat in section Mapping Functions, concat in section Creating Strings, and append in section Building Cons Cells and Lists. 
******* convert a vector into : 
		The append function provides a way to convert a vector into a list with the same elements (see section Building Cons Cells and Lists):
		(setq avector [1 two (quote (three)) "four" [five]])
				 => [1 two (quote (three)) "four" [five]]
		(append avector nil)
				 => (1 two (quote (three)) "four" [five])
***** VectorUsage
****** https://www.emacswiki.org/emacs/VectorUsage
	Usually you should not be trying to modify vectors themselves, only the elements stored
	in the vector, because vectors are designed for random access. They are fast. They
	are not designed to be searched or sorted. They are also immutable, so you cannot
	change them (only the elements). If you want change them (change their size), you
	must create a copy instead.
****** Sorting/Randomizing/Shuffling
			(defun shuffle-vector (vector)
				"Randomly permute the elements of VECTOR (all permutations equally likely)."
				(let ((i 0)
    		j
    		temp
    		(len (length vector)))
					(while (< i len)
						(setq j (+ i (random (- len i))))
						(setq temp (aref vector i))
						(aset vector i (aref vector j))
						(aset vector j temp)
						(setq i (1+ i))))
				vector)

	Example output:

			[1 5 3 2 4]
			[3 2 5 1 4]
			[3 4 1 5 2]
****** Searching Vectors for Values
	You can search lists using member or memq, and you can search alists using assoc
	and assq.
	Here is how to search a vector for a value:

			(position 'c [a b c])
			=> 2
	The position is a function from the CL package.

	Here is how to search a vector v for a value b using the loop macro. This may be more
	useful if you need to do things with the elements as you search.

			(let ((v [4 5 6 7 8])
						(b 7))
				(loop for i from 0 for a across v if (equal a b) return i))
			 => 3

	The distinction may also be important if you’re trying to avoid loading the CL package
	(it is always loaded in XEmacs): Functions require loading the CL package, macros
	only require loading the CL package at compile-time:
			(eval-when-compile (require 'cl))
******  Library Ring+

	[[https://www.emacswiki.org/emacs/DrewAdams][DrewAdams]] has written library [[https://www.emacswiki.org/emacs/ring+.el][Lisp:ring+.el]], which extends standard library ring.el to
	provides feature for using vectors as cyclic structures (“rings”). See [[https://www.emacswiki.org/emacs/RingPlus][RingPlus]].

	This library includes function ‘ring-convert-sequence-to-ring’, which converts any
	sequence to a ring, which is a vector. A sequence is any of these:

	,* list
	,* array, which is any of these:

	 * string
	 * vector
	 * char-table (like a vector, but indexed by character codes)
	 * bool-vector (like a vector, but with only ‘t’ and ‘nil’ entries)
******  A Gotcha!
	Don’t try to treat an [[https://www.emacswiki.org/emacs/obarray][obarray]] as a normal vector! The [[http://www.emacswiki.org/cgi-bin/info-ref?find=Creating%20Symbols][Elisp manual]] tells you this clearly,
	but I nevertheless tried to do this (programming idiom pointed out in the discussion of
	vectors in the same manual):

		(setq my-list (append minibuffer-completion-table nil)) ; Convert vector to list.

	Wrong! And it took me while to figure the problem out…

	When dealing with obarrays, use ‘mapatoms’ – always. – [[https://www.emacswiki.org/emacs/DrewAdams][DrewAdams]]
******  See Also
	,* [[https://www.emacswiki.org/emacs/LevenshteinDistance][LevenshteinDistance]] - Uses vectors for determining the edit distance between two
	 strings.
	For more info on sequences, see the Elisp manual, Info node Sequences Arrays
	Vectors.
**** lists
***** 5.4 Building Cons Cells and Lists
Many functions build lists, as lists reside at the very heart of Lisp. cons is the fundamental list-building function; however, it is interesting to note that list is used more times in the source code for Emacs than cons.
****** Function: cons object1 object2

     This function is the most basic function for building new list structure. It creates a new cons cell, making object1 the CAR, and object2 the CDR. It then returns the new cons cell. The arguments object1 and object2 may be any Lisp objects, but most often object2 is a list.

     (cons 1 '(2))
					=> (1 2)

     (cons 1 '())
					=> (1)

     (cons 1 2)
					=> (1 . 2)

     cons is often used to add a single element to the front of a list. This is called consing the element onto the list. 4 For example:

     (setq list (cons newelt list))

     Note that there is no conflict between the variable named list used in this example and the function named list described below; any symbol can serve both purposes. 

******  Function: list &rest objects

     This function creates a list with objects as its elements. The resulting list is always nil-terminated. If no objects are given, the empty list is returned.

     (list 1 2 3 4 5)
					=> (1 2 3 4 5)

     (list 1 2 '(3 4 5) 'foo)
					=> (1 2 (3 4 5) foo)

     (list)
					=> nil

******  Function: make-list length object

     This function creates a list of length elements, in which each element is object. Compare make-list with make-string (see Creating Strings).

     (make-list 3 'pigs)
					=> (pigs pigs pigs)

     (make-list 0 'pigs)
					=> nil

     (setq l (make-list 3 '(a b)))
					=> ((a b) (a b) (a b))
     (eq (car l) (cadr l))
					=> t

******  Function: append &rest sequences

     This function returns a list containing all the elements of sequences. The sequences may be lists, vectors, bool-vectors, or strings, but the last one should usually be a list. All arguments except the last one are copied, so none of the arguments is altered. (See nconc in Rearrangement, for a way to join lists with no copying.)

     More generally, the final argument to append may be any Lisp object. The final argument is not copied or converted; it becomes the CDR of the last cons cell in the new list. If the final argument is itself a list, then its elements become in effect elements of the result list. If the final element is not a list, the result is a dotted list since its final CDR is not nil as required in a proper list (see Cons Cells). 

 Here is an example of using append:

 (setq trees '(pine oak))
			=> (pine oak)
 (setq more-trees (append '(maple birch) trees))
			=> (maple birch pine oak)


 trees
			=> (pine oak)
 more-trees
			=> (maple birch pine oak)

 (eq trees (cdr (cdr more-trees)))
			=> t

 You can see how append works by looking at a box diagram. The variable trees is set to the list (pine oak) and then the variable more-trees is set to the list (maple birch pine oak). However, the variable trees continues to refer to the original list:

 more-trees                trees
 |                           |
 |     --- ---      --- ---   -> --- ---      --- ---
	--> |   |   |--> |   |   |--> |   |   |--> |   |   |--> nil
       --- ---      --- ---      --- ---      --- ---
				|            |            |            |
				|            |            |            |
         --> maple    -->birch     --> pine     --> oak

 An empty sequence contributes nothing to the value returned by append. As a consequence of this, a final nil argument forces a copy of the previous argument:

 trees
			=> (pine oak)

 (setq wood (append trees nil))
			=> (pine oak)

 wood
			=> (pine oak)

 (eq wood trees)
			=> nil

 This once was the usual way to copy a list, before the function copy-sequence was invented. See Sequences Arrays Vectors.

 Here we show the use of vectors and strings as arguments to append:

 (append [a b] "cd" nil)
			=> (a b 99 100)

 With the help of apply (see Calling Functions), we can append all the lists in a list of lists:

 (apply 'append '((a b c) nil (x y z) nil))
			=> (a b c x y z)

 If no sequences are given, nil is returned:

 (append)
			=> nil

 Here are some examples where the final argument is not a list:

 (append '(x y) 'z)
			=> (x y . z)
 (append '(x y) [z])
			=> (x y . [z])

 The second example shows that when the final argument is a sequence but not a list, the sequence’s elements do not become elements of the resulting list. Instead, the sequence becomes the final CDR, like any other non-list final argument.

******  Function: copy-tree tree &optional vecp

     This function returns a copy of the tree tree. If tree is a cons cell, this makes a new cons cell with the same CAR and CDR, then recursively copies the CAR and CDR in the same way.

     Normally, when tree is anything other than a cons cell, copy-tree simply returns tree. However, if vecp is non-nil, it copies vectors too (and operates recursively on their elements). 

******  Function: flatten-tree tree

     This function returns a “flattened” copy of tree, that is, a list containing all the non-nil terminal nodes, or leaves, of the tree of cons cells rooted at tree. Leaves in the returned list are in the same order as in tree. 

 (flatten-tree '(1 (2 . 3) nil (4 5 (6)) 7))
     =>(1 2 3 4 5 6 7)

******  Function: number-sequence from &optional to separation
     This function returns a list of numbers starting with from and incrementing by separation, and ending at or just before to. separation can be positive or negative and defaults to 1. If to is nil or numerically equal to from, the value is the one-element list (from). If to is less than from with a positive separation, or greater than from with a negative separation, the value is nil because those arguments specify an empty sequence.

     If separation is 0 and to is neither nil nor numerically equal to from, number-sequence signals an error, since those arguments specify an infinite sequence.

     All arguments are numbers. Floating-point arguments can be tricky, because floating-point arithmetic is inexact. For instance, depending on the machine, it may quite well happen that (number-sequence 0.4 0.6 0.2) returns the one element list (0.4), whereas (number-sequence 0.4 0.8 0.2) returns a list with three elements. The nth element of the list is computed by the exact formula (+ from (* n separation)). Thus, if one wants to make sure that to is included in the list, one can pass an expression of this exact type for to. Alternatively, one can replace to with a slightly larger value (or a slightly more negative value if separation is negative).

     Some examples:

     (number-sequence 4 9)
					=> (4 5 6 7 8 9)
     (number-sequence 9 4 -1)
					=> (9 8 7 6 5 4)
     (number-sequence 9 4 -2)
					=> (9 7 5)
     (number-sequence 8)
					=> (8)
     (number-sequence 8 5)
					=> nil
     (number-sequence 5 8 -1)
					=> nil
     (number-sequence 1.5 6 2)
					=> (1.5 3.5 5.5)

 Footnotes
 (4)

 There is no strictly equivalent way to add an element to the end of a list. You can use (append listname (list newelt)), which creates a whole new list by copying listname and adding newelt to its end. Or you can use (nconc listname (list newelt)), which modifies listname by following all the CDRs and then replacing the terminating nil. Compare this to adding an element to the beginning of a list with cons, which neither copies nor modifies the list.

***** Create Number Sequence (Range)
 (number-sequence n m step) -> returns a list of a range of numbers, from n to m, in increment of step.
 ;; creating a range of numbers
 (number-sequence 5) ; (5)

 (number-sequence 2 9) ; (2 3 4 5 6 7 8 9)

 (number-sequence 0 9 3) ; (0 3 6 9)
***** 5.5 Modifying List Variables
which is stored in a variable.
****** Macro: push element listname
			This macro creates a new list whose CAR is ELEMENT and whose CDR is
			the list specified by LISTNAME, and saves that list in LISTNAME.
			In the simplest case, LISTNAME is an unquoted symbol naming a list,
			and this macro is equivalent to
			‘(setq LISTNAME (cons ELEMENT LISTNAME))’.

           (setq l '(a b))
								=> (a b)
           (push 'c l)
								=> (c a b)
           l
								=> (c a b)

			More generally, ‘listname’ can be a generalized variable.  In that
			case, this macro does the equivalent of
			‘(setf LISTNAME (cons ELEMENT LISTNAME))’.  *Note Generalized
			Variables::.

			For the ‘pop’ macro, which removes the first element from a list,
			*Note List Elements::.

		Two functions modify lists that are the values of variables.

****** Function: add-to-list symbol element &optional append compare-fn
			This function sets the variable SYMBOL by consing ELEMENT onto the
			old value, if ELEMENT is not already a member of that value.  It
			returns the resulting list, whether updated or not.  The value of
			SYMBOL had better be a list already before the call.  ‘add-to-list’
			uses COMPARE-FN to compare ELEMENT against existing list members;
			if COMPARE-FN is ‘nil’, it uses ‘equal’.

			Normally, if ELEMENT is added, it is added to the front of SYMBOL,
			but if the optional argument APPEND is non-‘nil’, it is added at
			the end.

			The argument SYMBOL is not implicitly quoted; ‘add-to-list’ is an
			ordinary function, like ‘set’ and unlike ‘setq’.  Quote the
			argument yourself if that is what you want.

		Here’s a scenario showing how to use ‘add-to-list’:

			(setq foo '(a b))
           => (a b)

			(add-to-list 'foo 'c)     ;; Add ‘c’.
           => (c a b)

			(add-to-list 'foo 'b)     ;; No effect.
           => (c a b)

			foo                       ;; ‘foo’ was changed.
           => (c a b)

		An equivalent expression for ‘(add-to-list 'VAR VALUE)’ is this:

			(or (member VALUE VAR)
					(setq VAR (cons VALUE VAR)))

****** Function: add-to-ordered-list symbol element &optional order
			This function sets the variable SYMBOL by inserting ELEMENT into
			the old value, which must be a list, at the position specified by
			ORDER.  If ELEMENT is already a member of the list, its position in
			the list is adjusted according to ORDER.  Membership is tested
			using ‘eq’.  This function returns the resulting list, whether
			updated or not.

			The ORDER is typically a number (integer or float), and the
			elements of the list are sorted in non-decreasing numerical order.

			ORDER may also be omitted or ‘nil’.  Then the numeric order of
			ELEMENT stays unchanged if it already has one; otherwise, ELEMENT
			has no numeric order.  Elements without a numeric list order are
			placed at the end of the list, in no particular order.

			Any other value for ORDER removes the numeric order of ELEMENT if
			it already has one; otherwise, it is equivalent to ‘nil’.

			The argument SYMBOL is not implicitly quoted; ‘add-to-ordered-list’
			is an ordinary function, like ‘set’ and unlike ‘setq’.  Quote the
			argument yourself if necessary.

			The ordering information is stored in a hash table on SYMBOL’s
			‘list-order’ property.

		Here’s a scenario showing how to use ‘add-to-ordered-list’:

			(setq foo '())
           => nil

			(add-to-ordered-list 'foo 'a 1)     ;; Add ‘a’.
           => (a)

			(add-to-ordered-list 'foo 'c 3)     ;; Add ‘c’.
           => (a c)

			(add-to-ordered-list 'foo 'b 2)     ;; Add ‘b’.
           => (a b c)

			(add-to-ordered-list 'foo 'b 4)     ;; Move ‘b’.
           => (a c b)

			(add-to-ordered-list 'foo 'd)       ;; Append ‘d’.
           => (a c b d)

			(add-to-ordered-list 'foo 'e)       ;; Add ‘e’.
           => (a c b e d)

			foo                       ;; ‘foo’ was changed.
           => (a c b e d)

***** 5.2 Predicates on Lists
The following predicates test whether a Lisp object is an atom, whether
it is a cons cell or is a list, or whether it is the distinguished
object ‘nil’.  (Many of these predicates can be defined in terms of the
others, but they are used so often that it is worth having them.)
****** -- Function: consp object
			This function returns ‘t’ if OBJECT is a cons cell, ‘nil’
			otherwise.  ‘nil’ is not a cons cell, although it _is_ a list.
****** -- Function: atom object
			This function returns ‘t’ if OBJECT is an atom, ‘nil’ otherwise.
			All objects except cons cells are atoms.  The symbol ‘nil’ is an
			atom and is also a list; it is the only Lisp object that is both.

           (atom OBJECT) ≡ (not (consp OBJECT))
****** -- Function: listp object
			This function returns ‘t’ if OBJECT is a cons cell or ‘nil’.
			Otherwise, it returns ‘nil’.
           (listp '(1))
								=> t
           (listp '())
								=> t
****** -- Function: nlistp object
			This function is the opposite of ‘listp’: it returns ‘t’ if OBJECT
			is not a list.  Otherwise, it returns ‘nil’.

           (listp OBJECT) ≡ (not (nlistp OBJECT))
****** -- Function: null object
			This function returns ‘t’ if OBJECT is ‘nil’, and returns ‘nil’
			otherwise.  This function is identical to ‘not’, but as a matter of
			clarity we use ‘null’ when OBJECT is considered a list and ‘not’
			when it is considered a truth value (see ‘not’ in *note Combining
			Conditions::).

           (null '(1))
								=> nil
           (null '())
								=> t

***** 5.3 Accessing Elements of Lists
****** Function: car cons-cell
	 This function returns the value referred to by the first slot of the
	 cons cell cons-cell.  In other words, it returns the CAR of
	 cons-cell.

	 As a special case, if cons-cell is nil, this function
	 returns nil.  Therefore, any list is a valid argument.  An
	 error is signaled if the argument is not a cons cell or nil.


	 (car '(a b c))
				=> a
	 (car '())
				=> nil
****** Function: cdr cons-cell
	 This function returns the value referred to by the second slot of the
	 cons cell cons-cell.  In other words, it returns the CDR of
	 cons-cell.

	 As a special case, if cons-cell is nil, this function
	 returns nil; therefore, any list is a valid argument.  An error
	 is signaled if the argument is not a cons cell or nil.


	 (cdr '(a b c))
				=> (b c)
	 (cdr '())
				=> nil
****** Function: car-safe object
	 This function lets you take the CAR of a cons cell while avoiding
	 errors for other data types.  It returns the CAR of object if
	 object is a cons cell, nil otherwise.  This is in contrast
	 to car, which signals an error if object is not a list.


	 (car-safe object)
	 ≡
	 (let ((x object))
		 (if (consp x)
				 (car x)
			 nil))
****** Function: cdr-safe object
	 This function lets you take the CDR of a cons cell while
	 avoiding errors for other data types.  It returns the CDR of
	 object if object is a cons cell, nil otherwise.
	 This is in contrast to cdr, which signals an error if
	 object is not a list.


	 (cdr-safe object)
	 ≡
	 (let ((x object))
		 (if (consp x)
				 (cdr x)
			 nil))
****** Macro: pop listname
	 This macro provides a convenient way to examine the CAR of a
	 list, and take it off the list, all at once.  It operates on the list
	 stored in listname.  It removes the first element from the list,
	 saves the CDR into listname, then returns the removed
	 element.
	 In the simplest case, listname is an unquoted symbol naming a
	 list; in that case, this macro is equivalent to (prog1 (car listname) (setq listname (cdr listname))).
	 x
				=> (a b c)
	 (pop x)
				=> a
	 x
				=> (b c)
	 More generally, listname can be a generalized variable.  In that
	 case, this macro saves into listname using setf.
	 See Generalized Variables.

	 For the push macro, which adds an element to a list,
	 See List Variables.
****** Function: nth n list
	 This function returns the nth element of list.  Elements
	 are numbered starting with zero, so the CAR of list is
	 element number zero.  If the length of list is n or less,
	 the value is nil.
	 (nth 2 '(1 2 3 4))
				=> 3
	 (nth 10 '(1 2 3 4))
				=> nil
	 (nth n x) ≡ (car (nthcdr n x))
	 The function elt is similar, but applies to any kind of sequence.
	 For historical reasons, it takes its arguments in the opposite order.
	 See Sequence Functions.
****** Function: nthcdr n list
	 This function returns the nth CDR of list.  In other
	 words, it skips past the first n links of list and returns
	 what follows.

	 If n is zero, nthcdr returns all of
	 list.  If the length of list is n or less,
	 nthcdr returns nil.


	 (nthcdr 1 '(1 2 3 4))
				=> (2 3 4)
	 (nthcdr 10 '(1 2 3 4))
				=> nil
	 (nthcdr 0 '(1 2 3 4))
				=> (1 2 3 4)
****** Function: last list &optional n
	 This function returns the last link of list.  The car of
	 this link is the list’s last element.  If list is null,
	 nil is returned.  If n is non-nil, the
	 nth-to-last link is returned instead, or the whole of list
	 if n is bigger than list’s length.
****** Function: safe-length list
	 This function returns the length of list, with no risk of either
	 an error or an infinite loop.  It generally returns the number of
	 distinct cons cells in the list.  However, for circular lists,
	 the value is just an upper bound; it is often too large.

	 If list is not nil or a cons cell, safe-length
	 returns 0.


	 The most common way to compute the length of a list, when you are not
	 worried that it may be circular, is with length.  See Sequence Functions.
****** Function: caar cons-cell
	 This is the same as (car (car cons-cell)).
****** Function: cadr cons-cell
	 This is the same as (car (cdr cons-cell))
	 or (nth 1 cons-cell).
****** Function: cdar cons-cell
	 This is the same as (cdr (car cons-cell)).
****** Function: cddr cons-cell
	 This is the same as (cdr (cdr cons-cell))
	 or (nthcdr 2 cons-cell).
	 In addition to the above, 24 additional compositions of car and
	 cdr are defined as cxxxr and cxxxxr,
	 where each x is either a or d.  cadr,
	 caddr, and cadddr pick out the second, third or fourth
	 elements of a list, respectively.  cl-lib provides the same
	 under the names cl-second, cl-third, and
	 cl-fourth.  See List Functions in Common Lisp
	 Extensions.
****** Function: butlast x &optional n
	 This function returns the list x with the last element,
	 or the last n elements, removed.  If n is greater
	 than zero it makes a copy of the list so as not to damage the
	 original list.  In general, (append (butlast x n)
	 (last x n)) will return a list equal to x.
****** Function: nbutlast x &optional n
	 This is a version of butlast that works by destructively
	 modifying the cdr of the appropriate element, rather than
	 making a copy of the list.

***** find in list
****** Here's a function that is included with Emacs 24.3 and later:
******* cl-position : 
(cl-position 2 '(6 7 8 2 3 4)) ;; => 3

(Before Emacs 24.3, use function position from library cl.el, which is included with Emacs.)

You can use the :test keyword to specify the comparison function:
(cl-position "bar" '("foo" "bar" "baz") :test 'equal) ;; => 1
(cl-position '(1 2) '((3) (5 6) (1 2) nil) :test 'equal) ;; => 2

******* -elem-index : 
Emacs Common Lisp Emulation Manual

    dash.el has a function that can do this: -elem-index
(-elem-index 2 '(6 7 8 2 3 4)) ;; => 3
(-elem-index "bar" '("foo" "bar" "baz")) ;; => 1
(-elem-index '(1 2) '((3) (5 6) (1 2) nil)) ;; => 2

It's not included with Emacs, but a lot of Emacs users already have it installed (it's a dependency of projectile, flycheck, and smartparens, which gives it a ton of coverage).

**** plist 
***** get
 (plist-get '(x 1 y 2) 'y) ; 2
 (plist-get '(x 1 y 2) 'b) ; nil
***** set 
 ;; create a property list xx
 (setq xx '(a 1 b 2))

 ;; set value to a existing key
 (setq xx (plist-put xx 'b 9))

 (plist-get xx 'b) ; 3
 xx
 ;; (a 1 b 3)
***** cheak 
 (setq xx '(a 1 b 2))

 ;; check if a key exist
 (plist-member xx 'b)
 ;; (b 2)
***** keywords : 
 (setq tem '(:x 10 :y 20))
 (plist-get tem :y)
***** The Problem

The reason is probably that the found object is the first in list, in which case (delete item list) returns (cdr list) instead of modifying its structure to preserve identity.

The important point here is that delete cannot guarantee that

(eq x (delete item x))
==> t

e.g. when item is the only element of x, delete will return nil which cannot be eq to the original cons.
The Solution

The solution is to return the new value of list from remove-lambda-helper by replacing

(dolist (item list) ...)

with

(dolist (item list list) ...)

and use it in remove-hook-name-lambda like in add-to-list:

(defun remove-hook-name-lambda (name hook-name)
  (set hook-name
       (remove-lambda-helper (symbol-value hook)
                             (lambda (body)
                               (equal (cadr (cadr (caddr body))) name)))))

The Final Remark

Adding lambdas to hooks is not a very good idea, especially if you want to remove them later. Note that your lambda removal test will fail if you happen to compile your code.

Lambdas also accumulate in the hook if you modify them, e.g., if you have

(add-hook 'my-hook (lambda () ...))

and then you modify the lambda and evaluate the add-hook form again, you will end up with two lambdas in the hook.

The much better solution is to use defun to define the functions:

(defmacro add-project-specifics (name &rest body)
  (let ((ffh (intern (concat name "-find-file-hook")))
        (darh (intern (concat name "-dired-after-readin-hook"))))
    `(progn
       (defun ,ffh ()
         (when (string-match-p ,name (buffer-file-name))
           ,@body))
       (add-hook 'find-file-hook ',ffh)
       (defun ,darh ()
         (when (string-match-p ,name (dired-current-directory))
           ,@body))
       (add-hook 'dired-after-readin-hook ',darh))))

(defmacro remove-project-specifics (name)
  (let ((ffh (intern (concat name "-find-file-hook")))
        (darh (intern (concat name "-dired-after-readin-hook"))))
    `(progn
       (remove-hook 'find-file-hook ',ffh)
       (unintern ',ffh nil)
       (remove-hook 'dired-after-readin-hook ',darh)
       (unintern ',darh nil))))

PS

Responding to the concern you expressed in a comment, special characters in symbols are okay as long as you quote them when dealing with the reader; since you are not going to do that - you will be only using add-project-specifics and remove-project-specifics - you should be fine with interning them.
The Best Solution to Your Actual Problem

Use Per-Directory Local Variables in .dir-locals.el.

**** map over 
***** [[https://emacs.stackexchange.com/questions/2961/how-can-i-map-over-a-vector-and-get-a-vector][How can I map over a vector and get a vector?]]
****** The only thing I've found that works is
 (eval `(vector ,@(mapcar #'1+ [1 2 3 4])))
 => [2 3 4 5]
 but that seems far too complicated to be the 'right' way.
****** Use [[https://www.gnu.org/software/emacs/manual/html_node/cl/Mapping-over-Sequences.html][cl-map]], instead:
 (cl-map 'vector #'1+ [1 2 3 4])

 A little extra background: cl-map is the [[http://clhs.lisp.se/Body/f_map.htm][Common Lisp map function]] that generalizes to
 sequence types:

 (cl-map 'vector #'1+ '[1 2 3 4]) ;; ==> [2 3 4 5]
 (cl-map 'list   #'1+ '(1 2 3 4)) ;; ==> (2 3 4 5)
 (cl-map 'string #'upcase "abc")  ;; ==> "ABC"

 It can also convert between sequence types (eg, here, the input is a list and the output
 is a vector):

 (cl-map 'vector #'1+ '(1 2 3 4)) ;; ==> [2 3 4 5]
****** :) Don't the cl libraries give compiler : 
	18 seconds the 'winner' :) Don't the cl libraries give compiler warnings, though?
	(Mostly because the FSF is obnoxious?) – [[https://emacs.stackexchange.com/users/2264/sean-allred][Sean Allred]] Nov 1 '14 at 14:51 

	FWIW, I think the byte compilation problems were related to the old cl library rather
	than the rejiggered cl-lib library. I don't for example, get any warnings when I (defun
	fnx () (cl-map 'vector #'1+ '[1 2 3 4])) and then (byte-compile 'fnx). –  Nov 1 '14
 
 ,* 2 
	Even if you use the compatibility cl-lib, I think you'll get warnings on older emacs
	(24.2). I wouldn't worry about it though, you have to pick your battles. – [[https://emacs.stackexchange.com/users/50/malabarba][Malabarba]]
 ,* Note that this dynamically creates a list, then converts that to a vector and discards
	the temporary list. – [[https://emacs.stackexchange.com/users/2429/cl%c3%a9ment][Clément]] Apr 13 at 22:05 

****** without the cl : 
 Since I was beat by 18 seconds, here's a simpler and safer way to do it without the cl
 library. It also doesn't evaluate the elements. 

 (apply #'vector (mapcar #'1+ [1 2 3 4])) ;; => [2 3 4 5]

	,* That's also quite nice! Re: your earlier comment about older Emacs: it seems
	 especially helpful if you have to anticipate legacy users. It seems most helpful if you
	 only have to use it in a couple of spots, at which point you can trade off the slight
	 inconvenience against avoiding the cl-lib dependency. – [[https://emacs.stackexchange.com/users/253/dan][Dan♦]] Nov 1 '14 at 15:27 
	,* 1 
	 Very nifty!! I didn't think about using apply. – [[https://emacs.stackexchange.com/users/2264/sean-allred][Sean Allred]] Nov 1 '14 at 22:51 
	,* I think (apply #'vector ...) might be ever so slightly faster, but for completeness, it can
	 also be replaced with (vconcat ...). – [[https://emacs.stackexchange.com/users/15748/basil][Basil]] Nov 12 '18 at 20:03 

****** not so elegant inplace-variant : 
	The not so elegant inplace-variant for the case that the original vector is no longer
	needed afterwards and memory allocation is time-critical (e.g. the vector is big).

	(setq x [1 2 3 4])

	(cl-loop for var across-ref x do
					 (setf var (1+ var)))

	The result is stored in x. If you need the form to return x in the end you can add finally
	return x as follows:

	(cl-loop for var across-ref x do
					 (setf var (1+ var))
					 finally return x)

****** For completeness, using seq:
	 (require 'seq)
	 (seq-into (seq-map #'1+ [1 2 3 4]) 'vector)

	 ,* There is a deleted answer from [[https://emacs.stackexchange.com/users/19761/f%c3%b3lkvangr][Fólkvangr]] 2018-11-12 with the exact same seq-into
		line. The user has deleted his answer for the following reason: " My solution is less
		relevant because the seq library uses the underlying Common Lisp extensions. –
		Fólkvangr May 16 at 8:53" – [[https://emacs.stackexchange.com/users/2370/tobias][Tobias]] Jun 19 '19 at 7:28 
	 ,* @Tobias I guess I'd disagree with that logic. Everything is going to end up using
		vconcat or vector anyway, but the different interface paradigms are useful to have on
		record. – [[https://emacs.stackexchange.com/users/2264/sean-allred][Sean Allred]] Jun 19 '19 at 10:31 
	 ,* No problem. I just saw the deleted answer of Fólkvangr (almost) matching yours and
		wanted to notify you. For whatever reason seeing deleted answers requires 10000
		rep:-(. – [[https://emacs.stackexchange.com/users/2370/tobias][Tobias]] Jun 19 '19 at 11:02 
	 ,* @Tobias yeah, I never really understood why those privileges were site-specific :-) –

****** You can use loop

	 (let ((v (vector 1 2 3 4)))
		 (dotimes (i (length v))
			 (aset v i (1+ (aref v i))))
		 v)
	 ;; => [2 3 4 5]

	 Sometimes you don't want to modify the original vector, you can make a copy

	 (let* ((v0 (vector 1 2 3 4))
					(v (copy-sequence v0)))
		 (dotimes (i (length v))
			 (aset v i (1+ (aref v i))))
		 (list v0 v))
	 ;; => ([1 2 3 4] [2 3 4 5])

	 or create a new vector from scratch

	 (let* ((v0 (vector 1 2 3 4))
					(v (make-vector (length v0) nil)))
		 (dotimes (i (length v))
			 (aset v i (1+ (aref v0 i))))
		 (list v0 v))
	 ;; => ([1 2 3 4] [2 3 4 5])
	 [[https://emacs.stackexchange.com/a/45946][share]]
** Comparison : 
*** 4.5 Comparison of Characters and Strings
**** Function: char-equal character1 character2

		 This function returns t if the arguments represent the same character, nil otherwise. This function ignores differences in case if case-fold-search is non-nil.

		 (char-equal ?x ?x)
					=> t
		 (let ((case-fold-search nil))
			 (char-equal ?x ?X))
					=> nil
**** Function: string= string1 string2

		 This function returns t if the characters of the two strings match exactly. Symbols are also allowed as arguments, in which case the symbol names are used. Case is always significant, regardless of case-fold-search.

		 This function is equivalent to equal for comparing two strings (see Equality Predicates). In particular, the text properties of the two strings are ignored; use equal-including-properties if you need to distinguish between strings that differ only in their text properties. However, unlike equal, if either argument is not a string or symbol, string= signals an error.

		 (string= "abc" "abc")
					=> t
		 (string= "abc" "ABC")
					=> nil
		 (string= "ab" "ABC")
					=> nil

		 For technical reasons, a unibyte and a multibyte string are equal if and only if they contain the same sequence of character codes and all these codes are either in the range 0 through 127 (ASCII) or 160 through 255 (eight-bit-graphic). However, when a unibyte string is converted to a multibyte string, all characters with codes in the range 160 through 255 are converted to characters with higher codes, whereas ASCII characters remain unchanged. Thus, a unibyte string and its conversion to multibyte are only equal if the string is all ASCII. Character codes 160 through 255 are not entirely proper in multibyte text, even though they can occur. As a consequence, the situation where a unibyte and a multibyte string are equal without both being all ASCII is a technical oddity that very few Emacs Lisp programmers ever get confronted with. See Text Representations. 
**** Function: string-equal string1 string2
		 string-equal is another name for string=. 

 Function: string-collate-equalp string1 string2 &optional locale ignore-case

		 This function returns t if string1 and string2 are equal with respect to collation rules. A collation rule is not only determined by the lexicographic order of the characters contained in string1 and string2, but also further rules about relations between these characters. Usually, it is defined by the locale environment Emacs is running with.

		 For example, characters with different coding points but the same meaning might be considered as equal, like different grave accent Unicode characters:

		 (string-collate-equalp (string ?\uFF40) (string ?\u1FEF))
					=> t

		 The optional argument locale, a string, overrides the setting of your current locale identifier for collation. The value is system dependent; a locale "en_US.UTF-8" is applicable on POSIX systems, while it would be, e.g., "enu_USA.1252" on MS-Windows systems.

		 If ignore-case is non-nil, characters are converted to lower-case before comparing them.

		 To emulate Unicode-compliant collation on MS-Windows systems, bind w32-collate-ignore-punctuation to a non-nil value, since the codeset part of the locale cannot be "UTF-8" on MS-Windows.

		 If your system does not support a locale environment, this function behaves like string-equal.

		 Do not use this function to compare file names for equality, as filesystems generally don’t honor linguistic equivalence of strings that collation implements. 
**** Function: string< string1 string2
		 This function compares two strings a character at a time. It scans both the strings at the same time to find the first pair of corresponding characters that do not match. If the lesser character of these two is the character from string1, then string1 is less, and this function returns t. If the lesser character is the one from string2, then string1 is greater, and this function returns nil. If the two strings match entirely, the value is nil.

		 Pairs of characters are compared according to their character codes. Keep in mind that lower case letters have higher numeric values in the ASCII character set than their upper case counterparts; digits and many punctuation characters have a lower numeric value than upper case letters. An ASCII character is less than any non-ASCII character; a unibyte non-ASCII character is always less than any multibyte non-ASCII character (see Text Representations).

		 (string< "abc" "abd")
					=> t
		 (string< "abd" "abc")
					=> nil
		 (string< "123" "abc")
					=> t

		 When the strings have different lengths, and they match up to the length of string1, then the result is t. If they match up to the length of string2, the result is nil. A string of no characters is less than any other string.

		 (string< "" "abc")
					=> t
		 (string< "ab" "abc")
					=> t
		 (string< "abc" "")
					=> nil
		 (string< "abc" "ab")
					=> nil
		 (string< "" "")
					=> nil

		 Symbols are also allowed as arguments, in which case their print names are compared. 
**** Function: string-lessp string1 string2

		 string-lessp is another name for string<. 
**** Function: string-greaterp string1 string2

		 This function returns the result of comparing string1 and string2 in the opposite order, i.e., it is equivalent to calling (string-lessp string2 string1). 
**** Function: string-collate-lessp string1 string2 &optional locale ignore-case

		 This function returns t if string1 is less than string2 in collation order. A collation order is not only determined by the lexicographic order of the characters contained in string1 and string2, but also further rules about relations between these characters. Usually, it is defined by the locale environment Emacs is running with.

		 For example, punctuation and whitespace characters might be ignored for sorting (see Sequence Functions):

		 (sort (list "11" "12" "1 1" "1 2" "1.1" "1.2") 'string-collate-lessp)
					=> ("11" "1 1" "1.1" "12" "1 2" "1.2")

		 This behavior is system-dependent; e.g., punctuation and whitespace are never ignored on Cygwin, regardless of locale.

		 The optional argument locale, a string, overrides the setting of your current locale identifier for collation. The value is system dependent; a locale "en_US.UTF-8" is applicable on POSIX systems, while it would be, e.g., "enu_USA.1252" on MS-Windows systems. The locale value of "POSIX" or "C" lets string-collate-lessp behave like string-lessp:

		 (sort (list "11" "12" "1 1" "1 2" "1.1" "1.2")
					 (lambda (s1 s2) (string-collate-lessp s1 s2 "POSIX")))
					=> ("1 1" "1 2" "1.1" "1.2" "11" "12")

		 If ignore-case is non-nil, characters are converted to lower-case before comparing them.

		 To emulate Unicode-compliant collation on MS-Windows systems, bind w32-collate-ignore-punctuation to a non-nil value, since the codeset part of the locale cannot be "UTF-8" on MS-Windows.

		 If your system does not support a locale environment, this function behaves like string-lessp. 
**** Function: string-version-lessp string1 string2

		 This function compares strings lexicographically, except it treats sequences of numerical characters as if they comprised a base-ten number, and then compares the numbers. So ‘foo2.png’ is “smaller” than ‘foo12.png’ according to this predicate, even if ‘12’ is lexicographically “smaller” than ‘2’. 
**** Function: string-prefix-p string1 string2 &optional ignore-case

		 This function returns non-nil if string1 is a prefix of string2; i.e., if string2 starts with string1. If the optional argument ignore-case is non-nil, the comparison ignores case differences. 
**** Function: string-suffix-p suffix string &optional ignore-case

		 This function returns non-nil if suffix is a suffix of string; i.e., if string ends with suffix. If the optional argument ignore-case is non-nil, the comparison ignores case differences. 
**** Function: compare-strings string1 start1 end1 string2 start2 end2 &optional ignore-case

		 This function compares a specified part of string1 with a specified part of string2. The specified part of string1 runs from index start1 (inclusive) up to index end1 (exclusive); nil for start1 means the start of the string, while nil for end1 means the length of the string. Likewise, the specified part of string2 runs from index start2 up to index end2.

		 The strings are compared by the numeric values of their characters. For instance, str1 is considered less than str2 if its first differing character has a smaller numeric value. If ignore-case is non-nil, characters are converted to upper-case before comparing them. Unibyte strings are converted to multibyte for comparison (see Text Representations), so that a unibyte string and its conversion to multibyte are always regarded as equal.

		 If the specified portions of the two strings match, the value is t. Otherwise, the value is an integer which indicates how many leading characters agree, and which string is less. Its absolute value is one plus the number of characters that agree at the beginning of the two strings. The sign is negative if string1 (or its specified portion) is less. 
**** Function: string-distance string1 string2 &optional bytecompare

		 This function returns the Levenshtein distance between the source string string1 and the target string string2. The Levenshtein distance is the number of single-character changes—deletions, insertions, or replacements—required to transform the source string into the target string; it is one possible definition of the edit distance between strings.

		 Letter-case of the strings is significant for the computed distance, but their text properties are ignored. If the optional argument bytecompare is non-nil, the function calculates the distance in terms of bytes instead of characters. The byte-wise comparison uses the internal Emacs representation of characters, so it will produce inaccurate results for multibyte strings that include raw bytes (see Text Representations); make the strings unibyte by encoding them (see Explicit Encoding) if you need accurate results with raw bytes. 
**** Function: assoc-string key alist &optional case-fold
		 This function works like assoc, except that key must be a string or symbol, and comparison is done using compare-strings. Symbols are converted to strings before testing. If case-fold is non-nil, key and the elements of alist are converted to upper-case before comparison. Unlike assoc, this function can also match elements of the alist that are strings or symbols rather than conses. In particular, alist can be a list of strings or symbols rather than an actual alist. See Association Lists. 

 See also the function compare-buffer-substrings in Comparing Text, for a way to compare text in buffers. The function string-match, which matches a regular expression against a string, can be used for a kind of string comparison; see Regexp Search. 
*** check whether minor modes is enabled : 
Most minor modes are defined using the define-minor-mode macro. For buffer-local modes, that macro creates a buffer-local variable of the same name as the mode itself1. The variable is non-nil when the mode is enabled for the current buffer.
Therefore to check whether flymake-mode is enabled, you can test the variable flymake-mode (noting that this variable might not be defined at all if the mode has not been enabled):

(and (boundp 'flymake-mode) flymake-mode)

Which, as Thom point out in the comments, can be expressed using the convenient macro:

(bound-and-true-p flymake-mode)

Which we can use as the condition for an if or when or unless expression:

(if (bound-and-true-p flymake-mode)
    (message "flymake-mode is on")
  (message "flymake-mode is off"))
*** Control structurs 
**** cond : 
***** Help
cond is a special form in ‘C source code’.
(cond CLAUSES...)

Try each clause until one succeeds.
Each clause looks like (CONDITION BODY...).  CONDITION is evaluated
and, if the value is non-nil, this clause succeeds:
then the expressions in BODY are evaluated and the last one’s
value is the value of the cond-form.
If a clause has one element, as in (CONDITION), then the cond-form
returns CONDITION’s value, if that is non-nil.
If no clause succeeds, cond returns nil.
***** exempls
****** elscreen : 
 (defun elscreen-goto (screen)
	 "Switch to screen SCREEN."
	 (interactive "NGoto screen number: ")
	 (cond
		((eq (elscreen-get-current-screen) screen))
		((elscreen-screen-live-p screen)
		 (elscreen-set-window-configuration
			(elscreen-get-current-screen)
			(elscreen-current-window-configuration))
		 (elscreen-set-current-screen screen)
		 (elscreen-goto-internal screen)
		 (elscreen-notify-screen-modification 'force)
		 (run-hooks 'elscreen-goto-hook)
		 screen)
		(t
		 (elscreen-message (format "No screen %d" screen))
		 nil)))
 https://www.youtube.com/watch?v=m661lmrAYKY

** Text 
*** By Xah Lee : 
**** Elisp: Text Properties
 Elisp: Text Properties
 By Xah Lee. Date: 2017-06-17. Last updated: 2020-09-04.

 Text in a buffer can have “text properties”.

 Text properties is used to color text, or add keybinding to that text (for example, pressing Enter on a link in HTML opens the link instead of insert newline.), and other purposes.

 Here's a command that makes a region red, by adding a text property of 'font-lock-face to it.

 (defun x-make-word-red (begin end)
	 "make current region colored red, using text properties"
	 (interactive (list (region-beginning) (region-end)))
	 (put-text-property begin end 'font-lock-face '(:foreground "red")))

 Select a region, then
 Alt+x
 x-make-word-red

 Here's example of adding a keymap to text, so that when Enter is pressed, it tries to open the file, taking current line as file name/path.

 (setq x-keymap (make-sparse-keymap))
 (define-key x-keymap (kbd "RET") (lambda () (find-file (thing-at-point 'filename) )))

 (defun x-add-prop (begin end)
	 "add text properties to a region."
	 (interactive "r")
		 (put-text-property begin end 'font-lock-face '(:foreground "blue"))
		 (put-text-property begin end 'keymap x-keymap))


 try it:


 Open a new file, insert some text that contains file path.
 Go to a line that's a file path, select it, then Alt+x x-add-prop. The region will be colored blue, and pressing Enter key on it will call x-open-me


 What's Text Property

 Text Property is a property list attached to text.

 A property list is a list but interpreted as key and value pairs. Like this:

 '(key1 val1 key2 val2 …)

 [see Elisp: Property List]

 When a property list is attached to text, some keys have special meaning that are predefined by emacs.

 Here are some of the most useful property keys for writing a major/minor mode:


 'font-lock-face -> for syntax coloring. Value is a face. [see Elisp: How to Define Face]
 'face -> for syntax coloring. Value is a face. It overrides the 'font-lock-face property. This property is automatically updated/managed by font-lock-mode. [see Elisp: Font Lock Mode Basics]
 'syntax-table -> add syntax table to text. Value is a syntax table. This is useful for example, in a major mode for programing language, you want to make regex delimiter character such as SOLIDUS / to have string syntax, so regex string are colored as string. [see Elisp: Syntax Table]
 'keymap -> Add keybinding to text. Value is a keymap. When cursor is on the text, the keymap has priority in determining keystroke action. [see Elisp: How to Create Keymap for Major Mode]


 For a complete list, see
 (info "(elisp) Special Properties")

 Functions for Working with Text Property

 There are many functions to get values of text properties, add/change/delete them, or find out where a property begins, etc.
 See


 (info "(elisp) Text Properties")
*** [[https://stackoverflow.com/questions/2419225/printing-colored-characters-in-lisp-emacs][Printing Colored Characters in Lisp / Emacs]]
**** use a graphical toolkit : 
 what Lisp? Emacs Lisp? The 'HyperSpec' is not for Emacs Lisp, but Common
 Lisp. Printing colored text from Emacs Lisp should be covered in the Emacs
 manual. Common Lisp has no built-in facilities for colored text, because the user
 interface is outside the scope of the Common Lisp standard. Typically one would
 use a graphical toolkit (like CAPI, CLIM, ...) or something like a 'curses' interface. If
 you are using Emacs Lisp, then you can use Emacs built-in functionality. I guess you
 could also look at some of the games that are coming with Emacs for inspiration. –
 [[https://stackoverflow.com/users/69545/rainer-joswig][Rainer Joswig]] Mar 10 '10 at 17:57 SVG Image 
**** ,* It is possible that [[http://en.wikipedia.org/wiki/ANSI_escape_code][en.wikipedia.org/wiki/ANSI_escape_code]] is the simple solution
 you are looking for, depending on what you mean by "Lisp" as Rainer commented. –
 [[https://stackoverflow.com/users/139746/pascal-cuoq][Pascal Cuoq]] Mar 10 '10 at 18:04 SVG Image 
****  ,* I'm using SBCL which is one of the many flavors of CL, although it's running on
 SLIME in emacs. This should be covered by the emacs manual though, right?
 Thanks for the input, my world of lisp broadens daily. – [[https://stackoverflow.com/users/290763/limpoch][Limpoch]] Mar 10 '10 at 18:29
,* You have two very different choices: you can write the game in SBCL, in which case
 you'll need a Common Lisp user interface library, or you can write it in Emacs Lisp
 and use Emacs' built-in functionality. SLIME is what you use to edit Common Lisp
 code in emacs - like a text editor but with many more features. Your Lisp code is
 not running in Emacs. If you want code to run in Emacs (and use Emacs' built-in
 color text ability), it'll have to be Emacs Lisp. You'll need to decide which way you
 want to do things before you can solve this problem. – [[https://stackoverflow.com/users/446918/noah-lavine][Noah Lavine]] Mar 10 '10 at
 22:17 
,* did you find the solution you were looking for? – [[https://stackoverflow.com/users/3758484/johnbakers][johnbakers]] Nov 30 '13 at 15:08 
**** propertize : 
The appearance of text in Emacs is controlled by faces. Face can be changed through
either overlay or text properties. Here is an example using the latter:


;; Emacs-Lisp
(insert (propertize "foo" 'font-lock-face '(:foreground "red")))

However, if the game is implemented in SBCL, you'll need a way to communicate with
Emacs from your SBCL program. As it seems that you're using Slime, using Swank,
which is a part of Slime, might be the most convenient:


;; Common-Lisp
(swank::eval-in-emacs
 '(with-current-buffer (slime-repl-buffer)
    (insert (propertize "foo" 'font-lock-face '(:foreground "red")))))
[[https://stackoverflow.com/a/2421008][share]] | Submit | 
answered Mar 10 '10 at 22:10 
[[https://stackoverflow.com/users/16240/huaiyuan][*]][[https://stackoverflow.com/users/16240/huaiyuan][huaiyuan]]huaiyuan 
24.7k55 gold badges5252 silver badges6161 bronze badges 

**** self plug : 
Shameless self plug: you might want to try [[http://www.martin-loetzsch.de/gtfl/][this]], which is a graphical terminal for
Common Lisp running in a web browser. It uses html for printing stuff, so you could do
something like:

(gtfl-out (:p :style "color:red;" "some characters"))
****  wrote an Elisp defun : 
I just wrote an Elisp defun to test the colors. It could be useful for example when setting
up the general colors of the Linux VTs. Note that the color list ("black", "red", etc.) is
only how it is conventionally and usually defined - if you set them up as other colors,
perhaps red won't be red anymore. Still, it can be useful to test.

;;;; insert colored and/or bright text
(defun insert-colored-text (str clr bright)
  "Inserts str at point, in color clr, bright or not."
  (interactive (list (read-string " String: ")
										 (read-string " Color: ")
										 (y-or-n-p    " Bright? ") ))
  (insert (propertize str 'font-lock-face
          `(:weight ,(if bright 'bold 'normal) :foreground ,clr) )))
(defalias 'ict 'insert-colored-text)

(defun test-all-faces ()
  "Prints a test string in al colors, both normal and bright."
  (interactive)
  (let ((str "This is what it looks like"))
    (dolist (bold '(nil t) nil)
      (dolist (color
							 '("black" "red" "green" "yellow" "blue"
								 "magenta" "cyan" "white") nil)
        (insert-colored-text
				 (format "%s in %s (that is %sbold)\n" str color
								 (if bold "" "not ")) color bold) ))))
(defalias 'taf 'test-all-faces)

[[http://user.it.uu.se/~embe8573/cols.png][example output http://user.it.uu.se/~embe8573/cols.png]]


**** [[https://stackoverflow.com/questions/19208933/change-the-color-of-the-text-in-the-common-lisp-repl\]][Change the color of the text in the Common Lisp REPL]] : 
I am looking for the same answer and been here, and after a while found the answer
from another link[[[https://stackoverflow.com/questions/19208933/change-the-color-of-the-text-in-the-common-lisp-repl\]][Change the color of the text in the Common Lisp REPL]].

I think maybe you need it,the answer is:

 Blockquote
**** ANSI escape code : 
You can use ANSI escape code to print colorful texts:

(format t "~c[31mabc~c[0m~%" #\ESC #\ESC) ; this prints a red "abc" for most
modern terminals I'm not sure whether this works in slime, although.

shareimprove this answer answered Oct 6 '13 at 16:06

SaltyEgg 626412


**** #\ESC is not in the standard : 
,* Thank You This post lead me to a deeper understanding of how the format function
 works! Do you know where the #\ESC function is documented? – [[https://stackoverflow.com/users/2962623/rmoro][rmoro]] Oct 9 '16
 at 6:14 
,* #\ESC is not in the standard, a more portable expression might be (format t "~c
 [31mRed~:*~c[32mGreen~:*~c[34mBlue~:*~c[mPlain~%" (code-char 27)) – [[https://stackoverflow.com/users/3008405/devon][devon]]
 Jul 12 at 15:20 
*** face : 
(insert (propertize "bar" 'face '(:foreground "red")))
**** :background "gray30" : 
 (insert (propertize "bar" 'face '(:background "gray30")))
**** :foreground "#33AAFF" : 
 (insert (propertize "bar" 'face '(:foreground "#33AAFF")))
**** background : 
 (insert (propertize "bar" 'face '(:foreground "orange" :background "purple")))
** show maseges
*** message
(message "Load of init.el is ended")
показывает сообшение прям из проверки
(if nil "yes" "no")
(message "The name of this buffer is: %s." (buffer-name))
добавиь  в сообшение переменую

     (message "There are %d %s in the office!"
              (- fill-column 14) "pink elephants")
*** format
	 (format "sdfsdf")
*** (defun min-to-houre (min)
(defun min-to-houre (min)
		(setq min (+ min 10))
		 (message "value is %s" min))
** Time
*** Timer
**** run-with-idle-timer : 
(run-with-idle-timer 5 nil '(lambda () (message "Hi!")))
Command: run-at-time time repeat function &rest arg
**** run-at-time : 
(run-at-time "5 sec" nil '(lambda () (message "Hi!")))

**** cancel-timer
**** list-timers : 
The list-timers command lists all the currently active timers. The command c (timer-list-cancel) will cancel the timer on the line under point. You can sort the list by column using the command S (tabulated-list-sort). 

*** current-time : 

(current-time-string)
(float-time)

(format-time-string "%Y-%m-%d %H:%M:%S")
в мане все занчения они очень шировкие

(current-time) 
(current-idle-time)
** Proceses
(list-system-processes)
(process-attributes 7120)
(shell-command-to-string "ls") 

** Input 
*** read : 
	 (read)
** Functions : 
*** 13.4 Defining Functions
We usually give a name to a function when it is first created.  This
is called defining a function, and we usually do it with the
defun macro.  This section also describes other ways to define
a function.
**** Macro: defun : 
Macro: defun name args [doc] [declare] [interactive] body…
defun is the usual way to define new Lisp functions.  It
defines the symbol name as a function with argument list
args and body forms given by body.  Neither name nor
args should be quoted.

doc, if present, should be a string specifying the function’s
documentation string (see Function Documentation).  declare,
if present, should be a declare form specifying function
metadata (see Declare Form).  interactive, if present,
should be an interactive form specifying how the function is to
be called interactively (see Interactive Call).

The return value of defun is undefined.

Here are some examples:


(defun foo () 5)
(foo)
     => 5

(defun bar (a &optional b &rest c)
    (list a b c))
(bar 1 2 3 4 5)
     => (1 2 (3 4 5))
(bar 1)
     => (1 nil nil)
(bar)
error-> Wrong number of arguments.

(defun capitalize-backwards ()
  "Upcase the last letter of the word at point."
  (interactive)
  (backward-word 1)
  (forward-word 1)
  (backward-char 1)
  (capitalize-word 1))
Be careful not to redefine existing functions unintentionally.
defun redefines even primitive functions such as car
without any hesitation or notification.  Emacs does not prevent you
from doing this, because redefining a function is sometimes done
deliberately, and there is no way to distinguish deliberate
redefinition from unintentional redefinition.
**** Function: defalias name definition &optional doc
This function defines the symbol name as a function, with
definition definition (which can be any valid Lisp function).
Its return value is undefined.

If doc is non-nil, it becomes the function documentation
of name.  Otherwise, any documentation provided by
definition is used.


Internally, defalias normally uses fset to set the definition.
If name has a defalias-fset-function property, however,
the associated value is used as a function to call in place of fset.

The proper place to use defalias is where a specific function
name is being defined—especially where that name appears explicitly in
the source file being loaded.  This is because defalias records
which file defined the function, just like defun
(see Unloading).

By contrast, in programs that manipulate function definitions for other
purposes, it is better to use fset, which does not keep such
records.  See Function Cells.


You cannot create a new primitive function with defun or
defalias, but you can use them to change the function definition of
any symbol, even one such as car or x-popup-menu whose
normal definition is a primitive.  However, this is risky: for
instance, it is next to impossible to redefine car without
breaking Lisp completely.  Redefining an obscure function such as
x-popup-menu is less dangerous, but it still may not work as
you expect.  If there are calls to the primitive from C code, they
call the primitive’s C definition directly, so changing the symbol’s
definition will have no effect on them.

See also defsubst, which defines a function like defun
and tells the Lisp compiler to perform inline expansion on it.
See Inline Functions.

To undefine a function name, use fmakunbound.
See Function Cells.
*** def params
**** my exempl
(defun my-command (a &optional b)
  (let ((b (or b 10)))
    (+ a b)))

(my-command 1)

(my-command 1 2)
**** As suggested in the comments : 
As suggested in the comments, using unless may be preferable to or:

(defun command (a &optional b)
  (unless b (setq b default))
  (command-body a b))

Also from the comments: the more pure functional style would be to use let, as in the original question, but you don't need separate variable names:

(defun my-command (a &optional b)
  (let ((b (or b default)))
    (command-body a b)))

Of course, if the optional parameter is only needed once you should just do this:

(defun my-command (a &optional b)
    (command-body a (or b default)))


*** return 
**** How do you return from a function at an arbitrary point?
	How do you return early from a function before it's ended? 
 For example:
	(defun my-func () 
	 "for example."
	 (unless something (return nil))
	 ; continue as usual...
	 (+ 42 1))
	elisp
	functions
*****  We have a number of options available.
****** Throw
		You can catch / throw to exit the function.
		example:
		(defun my-func ()
			"thrown error"
			(catch 'my-catch
				(when t
					(throw 'my-catch "always going to throw"))
				(+ 42 1)))
****** Block
		 You can also use block and return-from (although you will need to require cl-macs)
		 example:
		 (require 'cl-macs)
		 (defun my-func ()
			 "block / return-from"
			 (block my-func
				 (when t
					 (return-from my-func))
				 (+ 42 1)))
****** cl-defun
		 We also have cl-defun which has an implicit block with the same name as the function, so we can do the block style with less.
		 example:
		 (require 'cl-macs)
		 (cl-defun my-func ()
			 "cl-defun implicit block"
			 (when t
				 (return-from my-func)) ; my-func is an implicit block.
			 (+ 42 1)))
****** defun*
		 cl-defun is also available as an alias defun* which is defined in cl.el so:
		 (require 'cl)
		 (defun* my-func ()
			 "defun* implicit block"
			 (when t
				 (return-from my-func)) ; my-func is an implicit block.
			 (+ 42 1)))
****** ocodo
		 Note that if you don't have a preference for the CL syntax, catch/throw is more idiomatic in elisp, as other approaches are ultimately implemented in terms of catch/throw. The elisp manual says: "Most other versions of Lisp, including Common Lisp, have several ways of transferring control nonsequentially: return, return-from, and go, for example. Emacs Lisp has only throw." – phils Jan 31 '15 at 5:28
****** In addition to what @EmacsFodder covered, just raise an error.
		 This will not help if the code is called within (dynamically, not lexically) the extent of error-handling constructs such as ignore-errors or condition-case, but otherwise it is a fine way to exit a function. It is in fact what is done most of the time.
		 (defun my-func () 
			"..."
			(unless something (error "Whoops!"))
			; continue as usual...
			(+ 42 1))
		 If you want to handle the error yourself then you can put the calling code (e.g. the call to something that ulimately calls my-func) inside a condition-case. Again, this is what is done most of the time, at least as often as using catch + throw. It all depends on what behavior you want.
***** Drew
		 59.3k55 gold badges8080 silver badges152152 bronze badges
		 Thanks for the answer Drew, I agree this is quite a common method. However, just doing an early return in a lot of other languages, doesn't incur the complexity of having to then deal with an error. When researching the question/answer set. I was specifically looking for alternatives to the "erroring out" style which always feels kludgy to me. I didn't specify this explicitly in the question text mind you. – ocodo Feb 1 '15 at 1:00 
****** 1
			It all depends on what you want to do. If you want to end immediately, with no further processing/handling, then raising an error is a good way to go for a nonlocal exit, in Emacs. If you want to do something during a nonlocal exit, i.e., handle it in some way, then catch, unwind-protect, condition-case and the like are useful. There is a whole section of the Elisp manual devoted to nonlocal exits. (And there is nothing particularly kludgy about any of them, IMO.) – Drew Feb 1 '15 at 2:54 
			"Feels" is entirely subjective of course. Thanks for the nonlocal manual ref. – ocodo Feb 1 '15 at 2:56
			add a comment
			Your Answer
*** interactive
**** (interactive (list (region-beginning) (region-end))) : 
	Text in a buffer can have “text properties”.

	Text properties is used to color text, or add keybinding to that text (for example, pressing Enter on a link in HTML opens the link instead of insert newline.), and other purposes.

	Here's a command that makes a region red, by adding a text property of 'font-lock-face to it.

	(defun x-make-word-red (begin end)
		"make current region colored red, using text properties"
		(interactive (list (region-beginning) (region-end)))
		(put-text-property begin end 'font-lock-face '(:foreground "red")))

	Select a region, then Alt+x x-make-word-red

**** (interactive "r") : 
	Here's example of adding a keymap to text, so that when Enter is pressed, it tries to open the file, taking current line as file name/path.

	(setq x-keymap (make-sparse-keymap))
	(define-key x-keymap (kbd "RET") (lambda () (find-file (thing-at-point 'filename) )))

	(defun x-add-prop (begin end)
		"add text properties to a region."
		(interactive "r")
			(put-text-property begin end 'font-lock-face '(:foreground "blue"))
			(put-text-property begin end 'keymap x-keymap))

	try it:

			Open a new file, insert some text that contains file path.
			Go to a line that's a file path, select it, then Alt+x x-add-prop. The region will be colored blue, and pressing Enter key on it will call x-open-me
*** lambda : 
(lambda (n) (* n 2))



(define-key evil-normal-state-map (kbd "M-c M-y") '(lambda() (interactive)
					(setq x-select-enable-clipboard t)
					;; (kill-ring-save (region-beginning) (region-end))
					(kill-ring-save (line-beginning-position) (line-beginning-position 2))
					(setq x-select-enable-clipboard nil)))
** compile
Emacs 24.3 or below

There's no built-in way of preventing these old files from being loaded, but there are easy ways to get rid of them.

***    You can recompile the entire elpa directory by calling:
   M-x byte-recompile-directory RET ~/.emacs.d/elpa/.
   This should get rid of outdated files.
***    You can use the auto-compile package
and activate auto-compile-on-load-mode which can compile files before they are loaded.

Emacs 24.4

Yes, and it turns out to be rather simple. The
***    load-prefer-newer
variable serves precisely this purpose.

(setq load-prefer-newer t)

Unfortunately, it won't work when some code specifically targets the .elc file, such as (load "server.elc"). But it should be enough as long as you're using requires or calling load without a suffix, which you should.

From the doc:

    load-prefer-newer is a variable defined in lread.c.
    Its value is nil

    Documentation:
    Non-nil means load prefers the newest version of a file.
    This applies when a filename suffix is not explicitly specified and load is trying various possible suffixes (see load-suffixes and load-file-rep-suffixes). Normally, it stops at the first file that exists unless you explicitly specify one or the other. If this option is non-nil, it checks all suffixes and uses whichever file is newest.
    Note that if you customize this, obviously it will not affect files that are loaded before your customizations are read!
** Docs
*** Pdfs
**** Land of lisp
https://drive.google.com/file/d/10mKcsFB0pDeLRM15T6QlmG4Rn979rBDl/view?usp=sharing
*** books 
**** list
    Practical eLisp Брайана Уильямса — это хорошая книга для новичков, которые хотят научиться программировать на eLisp. Книга начинается с основ языка, а затем постепенно переходит к более сложным темам. Книга также содержит множество практических упражнений, которые помогут читателям закрепить полученные знания.
    eLisp in Action Дэвида Смита — это более продвинутая книга, которая подходит для тех, кто уже имеет некоторые знания о программировании. Книга охватывает широкий спектр тем, связанных с eLisp, включая функциональное программирование, обработку символов и объектно-ориентированное программирование.
    eLisp by Example Стивена МакКеона — это книга, в которой основное внимание уделяется практическому использованию eLisp. Книга содержит множество примеров кода, которые помогут читателям научиться решать реальные задачи с помощью eLisp.

*** Cheat sheet 
**** from 

 https://harryrschwartz.com/2014/04/08/an-introduction-to-emacs-lisp.html

	43
	3.0
	"foo!"
**** ;; FUNCTIONS
	(+ 1 2 3 4 5)
**** ;; LISt Processing Language
		 #+begin_src emacs-lisp :tangle yes
	 (1 2 3)

	 `(1 2 3)

	 (list 1 2 3 4 5)

	 ;; "car" -- returns the first element of the list

	 (car
		(list 1 2 3))

	 ;; "cdr" -- returns the entire list except the first element

	 (cdr
		`(1 2 3 4 5))

	 ;; "cons" -- construct a list

	 (cons 1 `(2 3))

	 ;; "append" -- takes two lists and joins them together

	 (append `(1 2) `(3 4))
		 #+end_src
**** ;; VARIABLES
		 #+begin_src emacs-lisp :tangle yes
	 (setq my-list `(mac linux))

	 ;; TODO: READ ABOUT MACROS IN ELISP
	 ;; local variables
	 (let ((a 1)
				 (b 3))
		 (- a b))

		 #+end_src
**** ;; FUNCTIONS
		 #+begin_src emacs-lisp :tangle yes
	 (defun main ()
		 "A docstring that tells a little bit about my function"
		 "Hello!")

	 (main)

	 (defun square (x)
		 (* x x))

	 (square 2)

		 #+end_src
**** ;; CONDITIONALS
		 #+begin_src emacs-lisp :tangle yes
	 ;; every value is truthy except nil and the empty list ()

	 ;; and

	 (and t nil)

	 (and 1 13)

	 ;; or

	 (or t nil)

	 (or nil `())

	 ;; not

	 (not nil)

	 ;; don't try to be very clever and try to write code
	 ;; based on those return values that these functions give
	 ;; unless you wanna dab on the haters

	 ;; when -- only take an action if a predicate is true

	 (when (= (+ 2 2) 4)
		 "passed check")

	 ;; if, else -- good ol' if else

	 (defun even-or-odd (n)
		 (if (= (% n 2) 0)
				 "even"
			 "odd"))

	 (even-or-odd 2)
	 (even-or-odd 54)
	 (even-or-odd 32343)

	 ;; cond - much like a switch, i think
	 ;; takes in a "collection" of lists. Remember that.
	 ;; like "let"

	 (defun pick-sword (n)
		 (cond
			((= n 0) "Wood")
			((= n 1) "Plastic")
			((= n 2) "Gold")))

	 (pick-sword 2)


		 #+end_src
**** ;; anonymous functions -- lambdas!
		 #+begin_src emacs-lisp :tangle yes
	 ;; lambdas are function literals

	 (lambda (x) (+ x 5))

	 ;; call it 

	 ((lambda (x) (+ x 5)) 9)

	 ;; funcall -- calls a function

	 (funcall (lambda (x) (* x x)) 4)

	 (funcall '+ 1 2)

	 ;; store the lambda in a variable

	 (fset `square (lambda (x) (* x x)))

	 (square 3)

		 #+end_src
**** ;; HIGHER ORDER FUNCTIONS
		 #+begin_src emacs-lisp :tangle yes
	 (defun transform-until-zero (fn n)
		 "transforms n with the function given unless the number is 0"
		 (if (= n 0)
				 0
			 (funcall fn n)))

	 (transform-until-zero (lambda (n) (* n 2)) 0)

	 (transform-until-zero (lambda (n) (* n 2)) 3)

	 ;; a very important higher order function is mapcar
	 ;; takes in a list and a function and applies the function
	 ;; to every element in the list. NOW we're talking

		 #+end_src
**** ;; much like map in JS
	 #+begin_src emacs-lisp :tangle yes
	 (mapcar (lambda(n) (+ n 1)) '(1 2 3))

	 ;; non destructive!

	 (setq my-list '(1 2 3))
	 (mapcar (lambda (n) (+ n 1)) my-list)

	 #+end_src
*** Cool guid
 https://github.com/chrisdone/elisp-guide
** Emacs [[https://www.emacswiki.org/emacs?search=%22RegularExpression%22][RegularExpression]]
*** regular expression : 
 A [[https://www.emacswiki.org/emacs?search=%22regular+expression%22][regular expression]] (abbreviated “[[https://www.emacswiki.org/emacs?search=%22regexp%22][regexp]]” or sometimes just “[[https://www.emacswiki.org/emacs?search=%22re%22][re]]”) is a
 search-string with wildcards – and more. It is a pattern that is matched against the
 text to be searched. See [[https://www.emacswiki.org/info-ref?find=Regexps][Regexps]]. Examples:

     "alex"

 A plain string is a regular expression that matches the string exactly. The above
 regular expression matches “alex”.

     "alexa?"

 Some characters have special meanings in a regular expression. The question
 mark, for example, says that the preceding expression (the character “a” in this case)
 may or may not be present. The above regular expression matches “alex” or “alexa”.

 Regexps are important to Emacs users in many ways, including these: 

 ,* We search with them interactively. Try ‘C-M-s’ (command
	isearch-forward-regexp).
 ,* Emacs code uses them to parse text. We use regexps all the time, without knowing
	it, when we use Emacs.

 You can use a tool to construct regexps. For example, you can use ‘rx’ like this:

     (rx (or (and "\*" (*? anything) "*/") (and "//" (*? anything) eol)))

 To produce this regexp (which matches C-style multiline and single line comments):

     \\*\\(?:.\\|\n\\)*?\\*/\\|//\\(?:.\\|\n\\)*?$

 And there’s a package [[https://elpa.gnu.org/packages/xr.html][xr (available on GNU ELPA)]] that does the opposite
 conversion, from regexps to a human-readable form.
*** Regular Expression Syntax
**** Regexp Syntax Basics
	Any character matches itself, except for the list below.

	The following characters are special : . * + ? ^ $ \ [ 

	Between brackets [], the following are special : ] - ^ 

	Many characters are special when they follow a backslash – see below.

		.        any character (but newline)
		*        previous character or group, repeated 0 or more time
		+        previous character or group, repeated 1 or more time
		?        previous character or group, repeated 0 or 1 time
		^        start of line
		$        end of line
		[...]    any character between brackets
		[^..]    any character not in the brackets
		[a-z]    any character between a and z
		\        prevents interpretation of following special char
		\|       or
		\w       word constituent
		\b       word boundary
		\sc      character with c syntax (e.g. \s- for whitespace char)
		\( \)    start/end of group
		\&lt; \&gt;    start/end of word (faulty rendering: backslash + less-than and backslash + greater-than)
		\_< \_>  start/end of symbol
		\` \'    start/end of buffer/string
		\1       string matched by the first group
		\n       string matched by the nth group
		\{3\}    previous character or group, repeated 3 times
		\{3,\}   previous character or group, repeated 3 or more times
		\{3,6\}  previous character or group, repeated 3 to 6 times
		\=       match succeeds if it is located at point

	,*?, +?, and ?? are non-greedy versions of *, +, and ? – see [[https://www.emacswiki.org/emacs/NonGreedyRegexp][NonGreedyRegexp]]. Also,
	\W, \B, and \Sc match any character that does not match \w, \b, and \sc.
****  Character Groups

	Characters are organized by category. Use C-u C-x = to display the category of the
	character under the cursor.

		\ca      ascii character
		\Ca      non-ascii character (newline included)
		\cl      latin character
		\cg      greek character

	[[https://www.emacswiki.org/info-ref?find=Syntax%20Descriptors][Syntax classes]] provide a shorthand for representing some groups of related
	characters, hence they are also known as character classes. Syntax classes can
	themselves be represented in a square-bracket-delimited, and they must also be
	used between square brackets (more below). You can view all syntax classes [[https://www.gnu.org/software/emacs/manual/html_node/elisp/Char-Classes.html][here]].
	Some of the more useful square-bracket-delimited syntax classes are:

		[:digit:]  a digit, same as [0-9]
		[:alpha:]  a letter (an alphabetic character)
		[:alnum:]  a letter or a digit (an alphanumeric character)
		[:upper:]  a letter in uppercase
		[:lower:]  a letter in lowercase
		[:graph:]  a visible character
		[:print:]  a visible character plus the space character
		[:space:]  a whitespace character, as defined by the syntax table, but typically
							 [ \t\r\n\v\f ], which includes the newline character
		[:blank:]  a space or tab character
		[:xdigit:] an hexadecimal digit
		[:cntrl:]  a control character
		[:ascii:]  an ascii character
		[:nonascii:]  any non ascii character

	Syntax classes can also be represented using backslashes: e.g.,

		\s-   whitespace character        \s/   character quote character
		\sw   word constituent            \s$   paired delimiter
		\s_   symbol constituent          \s'   expression prefix
		\s.   punctuation character       \s<   comment starter
		\s(   open delimiter character    \s>   comment ender
		\s)   close delimiter character   \s!   generic comment delimiter
		\s"   string quote character      \s|   generic string delimiter
		\s\   escape character

	You can see the current [[https://www.emacswiki.org/info-ref?find=Syntax%20Tables][syntax table]] by typing C-h s. The syntax table depends on the
	current mode. As expected, letters a..z are listed as word constituents in text-mode.
	Other word constituents in this mode include A..Z, 0..9, $, %, currency units, accented
	letters, kanjis. See [[https://www.emacswiki.org/emacs/EmacsSyntaxTable][EmacsSyntaxTable]] for details.
****  Syntax Class Usage

	One must remember that syntax classes must be used within square brackets,
	as one would in specifying any other sequence to match or reject: e.g.
	[[:upper:]\|[:digit:]\.]. This is easy to overlook when using
	square-bracket-delimited syntax classes, since they include their own square
	brackets! E.g., if searching for a single whitespace character in a regexp, this

		[:space:]

	will fail. Just remember to add a 2nd/outer pair of square brackets: e.g., this

		[[:space:]]

	will succeed in finding a single whitespace character, this

		[[:space:]]*

	will succeed in finding zero-or-more single whitespace characters, etc.
****  Idiosyncrasies of Emacs Regular Expressions

	,* In an interactive search, a space character stands for one or more whitespace
	 characters (tabs are whitespace characters). You can use M-s SPC while searching
	 or replacing to toggle between this behavior and treating spaces as literal spaces.
	 Or put the following in your [[https://www.emacswiki.org/emacs/InitFile][InitFile]] to override this behaviour.

									 (setq search-whitespace-regexp nil)

	,* [^ … ] matches all characters not in the list, even newlines. Put a newline in the
	 list if you want it not to be matched. You can enter a newline character using ‘C-o’,
	 ‘C-q C-j’, ‘C-q 012 RET’, or as “\n” within an Emacs Lisp string. Note also that
	 \s- matches whitespace, sometimes including newlines, but is mode-dependent.
	,* Default case handling for replacing commands executes case conversion. This
	 means that both upper and lower case match in the regexp, whereas the case in
	 the replacement string is chosen according to the match syntax. Try for example
	 replacing john by harry below. Case conversion can be toggled on/off by typing
	 ‘M-c’ in the minibuffer during search. You can also set the variable
	 case-fold-search to nil to disable case conversion; see [[https://www.emacswiki.org/emacs/CaseFoldSearch][CaseFoldSearch]] for
	 more details. In the following example, only the last line would then be replaced.

														 John  =>  Harry
														 JOHN  =>  HARRY
														 john  =>  harry

	,* Backslashes must be double-quoted when used in Lisp code. Regular
	 expressions are often specified using strings in [[https://www.emacswiki.org/emacs/EmacsLisp][EmacsLisp]]. Some abbreviations
	 are available: \n for newline, \t for tab, \b for backspace, \u3501 for character with
	 unicode value 3501, and so on. Backslashes must be entered as \\. Here are two
	 ways to replace the decimal point by a comma (e.g. 1.5 -> 1,5), first by an
	 interactive command, second by executing Lisp code (type C-x C-e after the
	 expression to get it executed).

						 M-x replace-regexp RET \([0-9]+\)\. RET \1, RET
						(while (re-search-forward "\\([0-9]+\\)\\." nil t)
													(replace-match "\\1,"))

	,* The construct \d for any digit is not supported, use [0-9] or [:digit:] instead.
***  Some Regexp Examples

	 [-+[:digit:]]                     digit or + or - sign
	 \(\+\|-\)?[0-9]+\(\.[0-9]+\)?     decimal number (-2 or 1.5 but not .2 or 1.)
	 \&lt;\(\w+\) +\1\&gt;                     two consecutive, identical words
	 \&lt;[[:upper:]]\w*                  word starting with an uppercase letter
		+$                               trailing whitespaces (note the starting SPC)
	 \w\{20,\}                         word with 20 letters or more
	 \w+phony\&gt;                        word ending by phony
	 \(19\|20\)[0-9]\{2\}              year 1900-2099
	 ^.\{6,\}                          at least 6 symbols
	 ^[a-zA-Z0-9_]\{3,16\}$            decent string for a user name
	 <tag[^> C-q C-j ]*>\(.*?\)</tag>  html tag
***  Some Emacs Commands that Use Regular Expressions

	 C-M-s                   incremental forward search matching regexp
	 C-M-r                   incremental backward search matching regexp
	 replace-regexp          replace string matching regexp
	 query-replace-regexp    same, but query before each replacement
	 align-regexp            align, using strings matching regexp as delimiters
	 highlight-regexp        highlight strings matching regexp
	 occur                   show lines containing a match
	 multi-occur             show lines in all buffers containing a match
	 how-many                count the number of strings matching regexp
	 keep-lines              delete all lines except those containing matches
	 flush-lines             delete lines containing matches
	 grep                    call unix grep command and put result in a buffer
	 lgrep                   user-friendly interface to the grep command
	 rgrep                   recursive grep
	 dired-do-copy-regexp    copy files with names matching regexp
	 dired-do-rename-regexp  rename files matching regexp
	 find-grep-dired         display files containing matches for regexp with Dired

	Note that list-matching-lines is an alias for occur and delete-matching-lines is
	an alias for flush-lines. The command highlight-regexp is bound to C-x w h.
	Also query-replace-regexp is bound by default to C-M-%, although some people
	prefer using an alias, like M-x qrr. Put the following in your [[https://www.emacswiki.org/emacs/InitFile][InitFile]] to create such
	alias.

		 (defalias 'qrr 'query-replace-regexp)

	See also: [[https://www.emacswiki.org/emacs/IncrementalSearch][IncrementalSearch]], [[https://www.emacswiki.org/emacs/ReplaceRegexp][ReplaceRegexp]], [[https://www.emacswiki.org/emacs/AlignCommands][AlignCommands]], [[https://www.emacswiki.org/emacs/OccurBuffer][OccurBuffer]],
	[[https://www.emacswiki.org/emacs/DiredPower][DiredPower]]
***  Tools for Constructing Regexps

	,* Command ‘re-builder’ constructs a regular expression. You enter the regexp in
	 a small window at the bottom of the frame. The first 200 matches in the [[https://www.emacswiki.org/emacs/buffer][buffer]] are
	 highlighted, so you can see if the regexp does what you want. Use Lisp syntax,
	 which means doubling backslashes and using \\\\ to match a literal backslash.
	,* Macro ‘rx’ provides user-friendly syntax for regular expressions. For example, (rx
	 (one-or-more blank) line-end) returns the regexp string
	 "\\(?:[[:blank:]]+$\\)". See [[https://www.emacswiki.org/emacs/rx][rx]].
	,* [[https://www.emacswiki.org/emacs/SymbolicRegexp][SymbolicRegexp]] is similar in aim to ‘rx’.
***  Study and Practice

	,* Read about regexps in the [[https://www.emacswiki.org/info-ref?find=Regexps][Elisp manual]]. See also [[https://www.emacswiki.org/emacs/RegexpReferences][RegexpReferences]]. Study
	 [[https://www.emacswiki.org/emacs/EmacsLisp][EmacsLisp]] code that uses regexps.
	,* Regexp searching (‘C-M-s’) is a great way to learn about regexps – see [[https://www.emacswiki.org/emacs/IncrementalSearch#RegexpSearches][Regexp
	 Searches]]. Change your regexp on the fly and see immediately what difference the
	 change makes.
	,* Some examples of use (see also [[https://www.emacswiki.org/emacs/ReplaceRegexp][ReplaceRegexp]] and [[https://www.emacswiki.org/emacs/EmacsCrashRegexp][EmacsCrashRegexp]]):

	 * Search for trailing whitespace: C-M-s SPC+$
	 * Highlight all trailing whitespace: M-x highlight-regexp RET SPC+$ RET RET
	 * Delete trailing whitespace: M-x replace-regexp RET SPC+$ RET RET (same as
	 ‘M-x delete-trailing-whitespace’)
	 * Search for open delimiters: C-M-s \s( 
	 * Search for duplicated words (works across lines): C-M-s \(\<\w+\>\)\s-+\1
	 * Count number of words in [[https://www.emacswiki.org/emacs/buffer][buffer]]: M-x how-many RET \< RET
	 * Align words beginning with an uppercase letter followed by a lowercase letter:
	 M-: (setq case-fold-search nil) RET then M-x align-regexp RET
	 \<[[:upper:]][[:lower:]] RET
	 * Replace word foo by bar (won’t replace fool by barl): M-x replace-regexp
	 RET \<foo\> RET bar
	 * Keep only the first two words on each line: M-x replace-regexp RET
	 ^\(\W*\w+\W+\w+\).* RET \1 RET
	 * Suppress [[https://www.emacswiki.org/emacs/line][line]]s beginning with ;;: M-x flush-lines RET ^;; RET
	 * Remove the text after the first ; on each line: M-x replace-regexp RET
	 \([^;]*\);.* RET \1 RET
	 * Keep only lines that contain an email address: M-x keep-lines RET
	 \w+\(\.\w+\)?@\(\w\|\.\)+ RET
	 * Keep only one instance of consecutive empty lines: M-x replace-regexp RET
	 ^C-q C-j\{2,\} RET C-q C-j RET
	 * Keep words or letters in uppercase, one per line: M-x replace-regexp RET
	 [^[:upper:]]+ RET C-o RET
	 * List lines beginning with Chapter or Section: M-x occur RET
	 ^\(Chapter\|Section\) RET
	 * List lines with more than 80 characters: M-x occur RET ^.\{81,\} RET
***  Use Icicles to Learn about Regexps

	[[https://www.emacswiki.org/emacs/Icicles][Icicles]] provides these interactive ways to learn about regexps:

	,* `C-`’ (‘icicle-search’) shows you regexp matches, as does ‘C-M-s’, but it can
	 also show you (that is, highlight) regexp subgroup matches. Showing matched
	 subgroups is very helpful for learning. There are two ways that you can use this
	 Icicles feature:

	 * You can seach for a regexp, but limit the search context, used for further
	 searching, to a particular subgroup match. For example, you can search for and
	 highlight Lisp argument lists, by using a regexp subgroup that matches lists,
	 placing that subgroup after ‘defun’: (defun [^(]*\(([^(]*)\), that is, defun,
	 followed by non-`(’ character(s), followed by `(’, possibly followed by non-`)’
	 character(s), followed by `)’.
	 * You can search for a regexp without limiting the search context to a subgroup
	 match. In this case, Icicles highlights each subgroup match in a different color.
	 Here’s an example, showing how each subgroup of the complex regexp
	 (\([-a-z*]+\) *\((\(([-a-z]+ *\([^)]*\))\))\).* is matched:

	[[https://www.emacswiki.org/emacs/IciclesSearchContextLevelsScreenshot][IciclesSearchContextLevelsScreenshot]]

	,* `C-`’ also helps you learn by letting you use two simple regexps (search within a
	 search) as an alternative to coming up with a single, complex regexp to do the
	 same job. And, as with incremental search, you can change the second regexp on
	 the fly to see immediately what difference the change makes. See [[https://www.emacswiki.org/emacs/Icicles_-_Search_Commands%2c_Overview][Icicles - Search
	 Commands, Overview]]
	,* ‘S-TAB’ during [[https://www.emacswiki.org/emacs/minibuffer][minibuffer]] input shows you all matches for your input string, which
	 can be a regexp. So, just type a regexp whenever the minibuffer is active for
	 [[https://www.emacswiki.org/emacs/completion][completion]] and hit ‘S-TAB’ to see what the regexp matches. Try this with
	 [[https://www.emacswiki.org/emacs/command][command]] input (‘M-x’), [[https://www.emacswiki.org/emacs/buffer][buffer]] switching (‘C-x b’), file visiting (‘C-x f’), help
	 (‘C-h f’, ‘C-h v’), and so on. Almost any time you type input in the minibuffer, you
	 can type a regexp and use ‘S-TAB’ to see what it matches (and then choose one
	 of the matching candidates to input, if you want).
***  Questions
****  Does Emacs support lookahead/lookbehind? 

		No, Emacs does not support Perl-style lookahead/lookbehind expressions.

	 Note: If you have Python installed, you can add the package [[https://github.com/benma/visual-regexp-steroids.el/][visual regexp steroids]],
	 to use python based regular expressions. Interactive regular expressions (such as
	 isearch-forward-regexp and regexp-replace) written using this package do support
	 lookahead and lookbehind expressions.
**** 	Does Emacs support possessive quantifiers such as ?+, *+, ++ ? 

		No, Emacs does not support possessive quantifiers. 

	 The escape sequence \cC represents any character of category “C”, and according
	 to Emacs documentation invoked by “M-x describe-categories”, \c6 ought to match
	 any digit. Yet the ASCII digits 0-9 are not matched by \c6. Is this an error, or just
	 something on the to-do list? 

	 -------------------------------------------------------------------------
** Evil 
*** evil-state : 
(cond
 ((eq evil-state 'visual) (do-something))
 ((eq evil-state 'normal) (do-other-thing))
 ((eq evil-state 'insert) (do-another-thing)))
*** Evaluating Elisp in Emacs
You can't do much with Emacs Lisp if you can't evaluate the code you've written. Here I explain all the myriad ways of doing so: from evaluating one liners anywhere in Emacs, all the way up to a full-blown REPL.
By Mickey Petersen
Updated for emacs 28

There are several ways of evaluating elisp code in Emacs, and picking the right approach will help you get your job done faster and more efficiently. If you’re new to elisp it’s easy to learn about one or two methods and come away disappointed or frustrated because you’re using the wrong tool for the job.

Emacs is capable of evaluating elisp in a variety of ways, each with their own trade-offs and benefits, and all of them serve a distinct but important purpose. Knowing all them is important.
Evaluating a Region or Buffer

If you want to evaluate a whole file, then M-x eval-buffer is a good place to start.

It’ll re-evaluate everything except special forms like defface, defcustom and defvar. The reason is that they’re usually user-facing variables that you may have customized: for instance the fonts and faces you use for text, or the options you’ve picked in the Customize interface. Blindly resetting them when you evaluate a whole buffer is a blunderbuss approach that’ll likely cause more harm than good. So, Emacs will happily set special forms like defface if they’re undefined; if they’re already set, Emacs leaves them alone.

This also applies when you evaluate a region with M-x eval-region.

I frequently evaluate the current buffer – and rarely regions – when I’m writing elisp. As it’s annoying to type, and because it leaves no visual indication that the evaluation took place, I have a little helper function and key binding I like to use:

(defun mp-elisp-mode-eval-buffer ()
  (interactive)
  (message "Evaluated buffer")
  (eval-buffer))

(define-key emacs-lisp-mode-map (kbd "C-c C-c") #'mp-elisp-mode-eval-buffer)
(define-key lisp-interaction-mode-map (kbd "C-c C-c") #'mp-elisp-mode-eval-buffer)

Pressing C-c C-c – a common key binding used for this sort of thing in other major modes – now evaluates the whole buffer in both *scratch* (more on that below) and emacs-lisp-mode buffers.
Evaluating Expressions
By S-Expression

This is where Emacs starts to shine, for it has special tools available to it to evaluate S-expressions. An S-expression is, put simply, anything Emacs’s Lisp implementation can read, which has special meaning in Lisp. In Lisp, first you read; then you evaluate.

In Emacs’s case it’s not just balanced expressions – like (message "Hello World"), though that is most likely what you’ll use it for – but other, more primitive constructs also. Those primitives include numbers such as decimal 42 , #x12 as hexadecimal and #o44 as octal; vectors, like [1 2 3]; "strings" or ordinals like ?:; and so on.

To evaluate S-expressions, type C-x C-e or run M-x eval-last-sexp.

Although the function is designed for S-expressions, you can ask Emacs to evaluate nearly anything this way: numbers, strings, you name it. If what you’re asking it to evaluate is invalid or malformed, Emacs will tell you.

Its key binding, C-x C-e, is a global key. That means it’s available by default in most of Emacs’s major modes and, thus, buffers. That means you can safely evaluate elisp from an M-x info buffer; an M-x eww web browser session; or indeed anywhere else.

So it’s designed to work in a variety of situations — provided Emacs can guess what it is you’re asking it to evaluate! As its name alludes to, it’s called evaluate last S-expression: you must put your point at the end of the thing you want to evaluate.

Emacs will backtrack and find the logical beginning – the beginning of a number or string, or the opening ( that a ) belongs to – so keep that in mind when you evaluate stuff.

The result of the evaluation, if there is one, is printed in your minibuffer.

Prior to Emacs 28 C-x C-e would not re-evaluate special forms like defvar, defcustom and defface. That was actually rather annoying (hence the change) as more often than not you’d selectively evaluate a defvar with C-x C-e exactly because you wanted to change it.

So if you’re using older versions of Emacs, beware: you must evaluate by defun (see below) to change them.
By Form or Defun

Arguably the simplest way to evaluate a form is eval-defun, bound to C-M-x. Unlike C-x C-e (in versions leading up to Emacs 28 anyway) it re-evaluates special forms like defcustom, defface or defvar.

What makes C-M-x useful is that it looks for the outermost form your point is in. So if you’re deep inside a defun form, it’ll eval the whole shebang. And it’s not limited to just defun forms, of course; no, it’ll run anything, despite its name.

One way to determine – until you’re familiar with how it decides what to evaluate – is to type C-M-u repeatedly inside a form until you get an error saying it can’t go up. That is the top level form Emacs evaluates when you type C-M-x.

What makes it even better is its built-in support for edebug, Emacs’s elisp debugger. Using the universal argument C-u Emacs will evaluate the form as normal, but enable debug instrumentation.

Emacs is clever enough to detect that if you’re edebugging a defun that it’ll trigger the next time you, or any other part of Emacs, executes that function.

To remove debug instrumentation, re-evaluate the form with C-M-x but without C-u.

You should memorize this command. It’s handy as you can evaluate a block of code you’re working on without moving point, and without evaluating either the region it’s in, or the whole buffer.
By Expression

The command M-x eval-expression, bound to M-:, is meant for quick, one-off evaluations. Unlike C-x C-e, an evaluated expression does not have to be a form (like this (+ 1 2 3)) but can instead be anything Emacs is capable of evaluating:

    Variables, like default-directory
    Calling functions, like (shell)
    Evaluating complex forms, like (+ (* 3 42) 9)
    Setting variables, like (setq foo 42)

Evaluated expressions are printed to the echo area and the value prepended to the list variable values.

I use it frequently when I want to quickly change a variable or see its value. Usually because I’m testing or tweaking something.

What is also useful to know is that it evaluates code in the context of the buffer you called M-:. So if you’re curious about the definition of a buffer-local variable like default-directory you can switch to the buffer you want to check and use M-:. It’ll also set variables in the same context.

If you use the universal argument C-u, Emacs will insert the output into the current buffer. In a similar vein, you can tell Emacs to redo the previous command it did and let you edit the command beforehand by invoking C-x M-:.

C-x M-: is especially useful if you don’t know how an interactive command “works”. Try calling it after switching buffers; opening M-x dired; or doing a search and replace. Emacs spits out the elisp code required to repeat the last command. Pretty cool stuff, and it is a great way to bind complex commands to keys as I explain in my article on mastering key bindings.

One thing you cannot do is invoke multiple expressions. To get around this, you can wrap the expressions in the progn form, like so: (progn (foo) (bar) (baz)).

But if you find yourself in the habit of doing that frequently, you should use Emacs’s scratch buffer.
Interactive Evaluation
The Scratch Buffer

The *scratch* buffer is created for you automatically when you launch Emacs. I’m sure you wondered what on earth that buffer was about when you first started using Emacs. It does have a few specialized commands and, unlike the major mode (emacs-lisp-mode) you activate when you open a .el elisp file, the *scratch* buffer uses lisp-interaction-mode. It’s got all the features of emacs-lisp-mode – it inherits from that major mode – but with a few sweeteners that make it useful for one-off scripts and commands.

If you put point at the end of an sexp and type C-j Emacs will evaluate the expression and print the result straight into the buffer.

I find it useful. I’ll quite often switch to the scratch buffer – it’s an omnipresent thing in my Emacs, as I never kill it – and store snippets of code I’m working on. If I’m hacking on a third-party library or Emacs’s own code, I will often copy the defun I’m editing into *scratch* and modify and evaluate it there. That way I’m overwriting the old function with my own, but I don’t permanently change the original source file.

But the scratch buffer is a poor substitute for a proper REPL, but thankfully Emacs does come with one of those too.
IELM: The Interactive Emacs-Lisp Mode

IELM is a hidden gem. No, really: I’ve met Emacs users with decades of experience who’ve never heard of it. It really is hidden.

And it’s a proper REPL. Type M-x ielm to launch it. It comes with all the useful features you would expect from an interactive shell:

Multi-line editing

    When you press RET IELM will check whether you did so at the end of the input, or in the middle. If it’s the latter, it’ll insert a newline and let you continue editing and writing. Great if you want to write multi-line code.

    In all other instances it’ll evaluate what you wrote.
Output Variables

    The variables *, ** and *** contain the last three outputs from the shell.
History

    ielm inherits from comint mode, although it talks to no external process. That means it inherits a lot of the core functionality present in comint mode. I’ve written about comint history commands before so I won’t repeat myself here.

Another useful feature is the concept of a working buffer - a buffer through which your changes are evaluated. If you type C-c C-b you can change ielm’s working buffer to one of your choosing and then all the code you evaluate thereafter is treated as if you executed it in the context of that buffer. So in this sense it works like M-:. Not only is it useful, it’s downright essential as some variables are local to a particular buffer or directory on your file system.
From the Command Line

Both the emacs and emacsclient binaries support elisp evaluation on the command line. By passing -e to either binary, Emacs evaluates the code you give it and it then returns the result. If you use several distinct calls to -e you’ll get the return value (if any) for every single call. If you want to call multiple forms in one go you’ll need special forms like progn or prog1.

I recommend you use emacsclient as it’ll reuse your existing Emacs instance instead of spawning a brand new one.

In fact, I use this approach to good effect in Fuzzy Finding with Emacs instead of fzf where I demonstrate how you can “send” output from pipes into Emacs and back into the shell.
Honorable Mention: Eshell

You can evaluate elisp in Eshell directly from the prompt, with some limitations. I have covered this in greater detail in my article on Mastering Eshell.
Conclusion

That just about covers evaluating code in Emacs, from one-liners to entire buffers of code. If you’re hacking elisp you want C-M-x for your everyday editing and quick debugging; if you’re inspecting state or want to change something in Emacs real quick, use M-:; if you want to evaluate a buffer or region, use eval-buffer or eval-region; and if you’re exploring elisp and want an interactive environment, use ielm.
* Help Docs Gnus
  The Emacs news and email reader.
* Help Docs Mods
** use-package
*** docs links
https://elpa.gnu.org/packages//doc/use-package.html#Pinning-packages
*** Getting started
;; This is only needed once, near the top of the file
(eval-when-compile
  ;; Following line is not needed if use-package.el is in ~/.emacs.d
  (add-to-list 'load-path "<path where use-package is installed>")
  (require 'use-package))

(use-package foo)
This loads in the package foo, but only if foo is available on your system. If not, a warning is logged to the *Messages* buffer.
*** :init 
**** :init : 
Use the :init keyword to execute code before a package is loaded. It accepts one or more forms, up to the next keyword:

(use-package foo
  :init
  (setq foo-variable t))
Similarly, :config can be used to execute code after a package is loaded. In cases where loading is done lazily (see more about autoloading below), this execution is deferred until after the autoload occurs:

(use-package foo
  :init
  (setq foo-variable t)
  :config
  (foo-mode 1))
As you might expect, you can use :init and :config together:

(use-package color-moccur
  :commands (isearch-moccur isearch-all)
  :bind (("M-s O" . moccur)
         :map isearch-mode-map
         ("M-o" . isearch-moccur)
         ("M-O" . isearch-moccur-all))
  :init
  (setq isearch-lazy-highlight t)
  :config
  (use-package moccur-edit))
In this case, I want to autoload the commands isearch-moccur and isearch-all from color-moccur.el, and bind keys both at the global level and within the isearch-mode-map (see next section). When the package is actually loaded (by using one of these commands), moccur-edit is also loaded, to allow editing of the moccur buffer.
**** :init load-path : 
:init
	(add-to-list 'load-path "~/ELs/Org/Babel/ob-dot.el")
*** :config
*** Key-binding
**** info
Another common thing to do when loading a module is to bind a key to primary commands within that module:

(use-package ace-jump-mode
  :bind ("C-." . ace-jump-mode))
This does two things: first, it creates an autoload for the ace-jump-mode command and defers loading of ace-jump-mode until you actually use it. Second, it binds the key C-. to that command. After loading, you can use M-x describe-personal-keybindings to see all such keybindings you've set throughout your .emacs file.

A more literal way to do the exact same thing is:

(use-package ace-jump-mode
  :commands ace-jump-mode
  :init
  (bind-key "C-." 'ace-jump-mode))
When you use the :commands keyword, it creates autoloads for those commands and defers loading of the module until they are used. Since the :init form is always run -- even if ace-jump-mode might not be on your system -- remember to restrict :init code to only what would succeed either way.

The :bind keyword takes either a cons or a list of conses:

(use-package hi-lock
  :bind (("M-o l" . highlight-lines-matching-regexp)
         ("M-o r" . highlight-regexp)
         ("M-o w" . highlight-phrase)))
The :commands keyword likewise takes either a symbol or a list of symbols.

NOTE: inside strings, special keys like tab or F1-Fn have to be written inside angle brackets, e.g. "C-<up>". Standalone special keys (and some combinations) can be written in square brackets, e.g. [tab] instead of "<tab>". The syntax for the keybindings is similar to the "kbd" syntax: see https://www.gnu.org/software/emacs/manual/html_node/emacs/Init-Rebinding.html for more information.

Examples:

(use-package helm
  :bind (("M-x" . helm-M-x)
         ("M-<f5>" . helm-find-files)
         ([f10] . helm-buffers-list)
         ([S-f10] . helm-recentf)))
Furthermore, remapping commands with :bind and bind-key works as expected, because when the binding is a vector, it is passed straight to define-key. So the following example will rebind M-q (originally fill-paragraph) to unfill-toggle:

(use-package unfill
  :bind ([remap fill-paragraph] . unfill-toggle))
**** exempls
***** obsidiant for mode exempl
#+begin_src emacs-lisp :tangle yes
  :bind (:map obsidian-mode-map
  ;; Replace C-c C-o with Obsidian.el's implementation. It's ok to use another key binding.
  ("C-c C-o" . obsidian-follow-link-at-point)
  ;; Jump to backlinks
  ("C-c C-b" . obsidian-backlink-jump)
  ;; If you prefer you can use `obsidian-insert-link'
  ("C-c C-l" . obsidian-insert-wikilink)
	;; hydra menu : 
	("C-c M-o" . 'obsidian-hydra/body 'obsidian-mode-map))
#+end_src
***** (bind-key (kbd "C-c M-o") 'obsidian-hydra/body 'obsidian-mode-map)
*** Binding to keymaps
**** info
Normally :bind expects that commands are functions that will be autoloaded from the given package. However, this does not work if one of those commands is actually a keymap, since keymaps are not functions, and cannot be autoloaded using Emacs' autoload mechanism.

To handle this case, use-package offers a special, limited variant of :bind called :bind-keymap. The only difference is that the "commands" bound to by :bind-keymap must be keymaps defined in the package, rather than command functions. This is handled behind the scenes by generating custom code that loads the package containing the keymap, and then re-executes your keypress after the first load, to reinterpret that keypress as a prefix key.

For example:

(use-package projectile
  :bind-keymap
  ("C-c p" . projectile-command-map))
Binding within local keymaps

Slightly different from binding a key to a keymap, is binding a key within a local keymap that only exists after the package is loaded. use-package supports this with a :map modifier, taking the local keymap to bind to:

(use-package helm
  :bind (:map helm-command-map
         ("C-c h" . helm-execute-persistent-action)))
The effect of this statement is to wait until helm has loaded, and then to bind the key C-c h to helm-execute-persistent-action within Helm's local keymap, helm-mode-map.

Multiple uses of :map may be specified. Any binding occurring before the first use of :map are applied to the global keymap:

(use-package term
  :bind (("C-c t" . term)
         :map term-mode-map
         ("M-p" . term-send-up)
         ("M-n" . term-send-down)
         :map term-raw-map
         ("M-o" . other-window)
         ("M-p" . term-send-up)
         ("M-n" . term-send-down)))
**** exempls
***** obsidiant for mode exempl
#+begin_src emacs-lisp :tangle yes
  :bind (:map obsidian-mode-map
  ;; Replace C-c C-o with Obsidian.el's implementation. It's ok to use another key binding.
  ("C-c C-o" . obsidian-follow-link-at-point)
  ;; Jump to backlinks
  ("C-c C-b" . obsidian-backlink-jump)
  ;; If you prefer you can use `obsidian-insert-link'
  ("C-c C-l" . obsidian-insert-wikilink)
	;; hydra menu : 
	("C-c M-o" . 'obsidian-hydra/body 'obsidian-mode-map))
#+end_src
***** (bind-key (kbd "C-c M-o") 'obsidian-hydra/body 'obsidian-mode-map)
*** Modes and interpreters
Similar to :bind, you can use :mode and :interpreter to establish a deferred binding within the auto-mode-alist and interpreter-mode-alist variables. The specifier to either keyword can be a cons cell, a list of cons cells, or a string or regexp:

(use-package ruby-mode
  :mode "\\.rb\\'"
  :interpreter "ruby")

;; The package is "python" but the mode is "python-mode":
(use-package python
  :mode ("\\.py\\'" . python-mode)
  :interpreter ("python" . python-mode))
If you aren't using :commands, :bind, :bind*, :bind-keymap, :bind-keymap*, :mode, :interpreter, or :hook (all of which imply :defer; see the docstring for use-package for a brief description of each), you can still defer loading with the :defer keyword:

(use-package ace-jump-mode
  :defer t
  :init
  (autoload 'ace-jump-mode "ace-jump-mode" nil t)
  (bind-key "C-." 'ace-jump-mode))
This does exactly the same thing as the following:

(use-package ace-jump-mode
  :bind ("C-." . ace-jump-mode))
*** Magic handlers
Similar to :mode and :interpreter, you can also use :magic and :magic-fallback to cause certain function to be run if the beginning of a file matches a given regular expression. The difference between the two is that :magic-fallback has a lower priority than :mode. For example:

(use-package pdf-tools
  :load-path "site-lisp/pdf-tools/lisp"
  :magic ("%PDF" . pdf-view-mode)
  :config
  (pdf-tools-install :no-query))
This registers an autoloaded command for pdf-view-mode, defers loading of pdf-tools, and runs pdf-view-mode if the beginning of a buffer matches the string "%PDF".

*** Hooks
The :hook keyword allows adding functions onto hooks, here only the basename of the hook is required. Thus, all of the following are equivalent:

(use-package ace-jump-mode
  :hook prog-mode)

(use-package ace-jump-mode
  :hook (prog-mode . ace-jump-mode))

(use-package ace-jump-mode
  :commands ace-jump-mode
  :init
  (add-hook 'prog-mode-hook #'ace-jump-mode))
And likewise, when multiple hooks should be applied, the following are also equivalent:

(use-package ace-jump-mode
  :hook (prog-mode text-mode))

(use-package ace-jump-mode
  :hook ((prog-mode text-mode) . ace-jump-mode))

(use-package ace-jump-mode
  :hook ((prog-mode . ace-jump-mode)
         (text-mode . ace-jump-mode)))

(use-package ace-jump-mode
  :commands ace-jump-mode
  :init
  (add-hook 'prog-mode-hook #'ace-jump-mode)
  (add-hook 'text-mode-hook #'ace-jump-mode))
The use of :hook, as with :bind, :mode, :interpreter, etc., causes the functions being hooked to implicitly be read as :commands (meaning they will establish interactive autoload definitions for that module, if not already defined as functions), and so :defer t is also implied by :hook.
*** Conditional loading
**** :if
You can use the :if keyword to predicate the loading and initialization of modules.
For example, I only want edit-server running for my main, graphical Emacs, not for other Emacsen I may start at the command line:

(use-package edit-server
  :if window-system
  :init
  (add-hook 'after-init-hook 'server-start t)
  (add-hook 'after-init-hook 'edit-server-start t))
In another example, we can load things conditional on the operating system:

(use-package exec-path-from-shell
  :if (memq window-system '(mac ns))
  :ensure t
  :config
  (exec-path-from-shell-initialize))
**** :disabled
The :disabled keyword can turn off a module you're having difficulties with, or stop loading something you're not using at the present time:

(use-package ess-site
  :disabled
  :commands R)
When byte-compiling your .emacs file, disabled declarations are omitted from the output entirely, to accelerate startup times.
**** :when
NOTE: :when is provided as an alias for :if, and :unless foo means the same thing as :if (not foo). For example, the following will also stop :ensure from happening on Mac systems:

(when (memq window-system '(mac ns))
  (use-package exec-path-from-shell
    :ensure t
    :config
    (exec-path-from-shell-initialize)))
Conditional loading before :preface

If you need to conditionalize a use-package form so that the condition occurs before even the :preface is executed, simply use when around the use-package form itself:
*** Loading packages in sequence :demand t
Sometimes it only makes sense to configure a package after another has been loaded, because certain variables or functions are not in scope until that time. This can achieved using an :after keyword that allows a fairly rich description of the exact conditions when loading should occur. Here is an example:

(use-package hydra
  :load-path "site-lisp/hydra")

(use-package ivy
  :load-path "site-lisp/swiper")

(use-package ivy-hydra
  :after (ivy hydra))
In this case, because all of these packages are demand-loaded in the order they occur, the use of :after is not strictly necessary. By using it, however, the above code becomes order-independent, without an implicit depedence on the nature of your init file.

By default, :after (foo bar) is the same as :after (:all foo bar), meaning that loading of the given package will not happen until both foo and bar have been loaded. Here are some of the other possibilities:

:after (foo bar)
:after (:all foo bar)
:after (:any foo bar)
:after (:all (:any foo bar) (:any baz quux))
:after (:any (:all foo bar) (:all baz quux))
When you nest selectors, such as (:any (:all foo bar) (:all baz quux)), it means that the package will be loaded when either both foo and bar have been loaded, or both baz and quux have been loaded.

NOTE: pay attention if you set use-package-always-defer to t, and also use the :after keyword, as you will need to specify how the declared package is to be loaded: e.g., by some :bind. If you're not using one of tho mechanisms that registers autoloads, such as :bind or :hook, and your package manager does not provide autoloads, it's possible that without adding :demand t to those declarations, your package will never be loaded.

*** Prevent loading if dependencies are missing

While the :after keyword delays loading until the dependencies are loaded, the somewhat simpler :requires keyword simply never loads the package if the dependencies are not available at the time the use-package declaration is encountered. By "available" in this context it means that foo is available if (featurep 'foo) evaluates to a non-nil value. For example:

(use-package abbrev
  :requires foo)
This is the same as:

(use-package abbrev
  :if (featurep 'foo))
As a convenience, a list of such packages may be specified:

(use-package abbrev
  :requires (foo bar baz))
For more complex logic, such as that supported by :after, simply use :if and the appropriate Lisp expression.
*** Gathering Statistics

If you'd like to see how many packages you've loaded, what stage of initialization they've reached, and how much aggregate time they've spent (roughly), you can enable use-package-compute-statistics after loading use-package but before any use-package forms, and then run the command M-x use-package-report to see the results. The buffer displayed is a tabulated list. You can use S in a column to sort the rows based on it.
*** (use-package-chords)
The :chords keyword allows you to define key-chord bindings for use-package declarations in the same manner as the :bind keyword.

To enable the extension:

(use-package use-package-chords
  :ensure t
  :config (key-chord-mode 1))
Then you can define your chord bindings in the same manner as :bind using a cons or a list of conses:

(use-package ace-jump-mode
  :chords (("jj" . ace-jump-char-mode)
           ("jk" . ace-jump-word-mode)
           ("jl" . ace-jump-line-mode)))
*** Some timing results
On my Retina iMac, the "Mac port" variant of Emacs 24.4 loads in 0.57s, with around 218 packages configured (nearly all of them lazy-loaded). However, I experience no loss of functionality, just a bit of latency when I'm first starting to use Emacs (due to the autoloading). Since I also use idle-loading for many packages, perceived latency is typically reduced overall.

On Linux, the same configuration loads in 0.32s.

If I don't use Emacs graphically, I can test the absolute minimum times. This is done by running:

time emacs -l init.elc -batch --eval '(message "Hello, world!")'
On the Mac I see an average of 0.36s for the same configuration, and on Linux 0.26s.
*** DONE use-package exempl
	CLOSED: [2019-09-13 Пт 05:52]
The easiest way is to install use-package.
(package-initialize)
(require 'package)
(add-to-list 'package-archives
    '("melpa" . "http://melpa.milkbox.net/packages/") t)
(dolist (package '(use-package))
   (unless (package-installed-p package)
       (package-install package)))
Then
 (use-package paredit
   :ensure t)
The :ensure t is what ensures that the package is installed.
To just load ensure multiple packages are install
(dolist (package '(package-a package-b package-c))
 (unless (package-installed-p package)
   (package-install package))
   (require package))))
*** :quelpa
https://github.com/quelpa/quelpa-use-package
**** instal
(use-package quelpa-use-package :ensure t)
**** cfg exempl link 
	(find-file-other-frame "~/INI/dev/unity-cfg.el")
**** use exempl github
		 #+begin_src emacs-lisp :tangle yes
(unless (package-installed-p 'miracle)
	(use-package miracle 
	;; :ensure t 
		:quelpa (miracle :fetcher github :repo "Saikyun/miracle")))
		 #+end_src
		Следим что название пакаджа совподает с название гепозитория
		и если используем репо то нет домена гит в конце
		помним что репозитории бываю и другие например просто гит
		есть возможность задать плный урл
		также следим что нет инсура иначе он будет устанавливать с задынх
репо игноря гелп - нужны спец команды чтоб исур использовал гелп(на сайте есть) 
		 #+begin_src emacs-lisp :tangle yes
(quelpa
'(miracle
	:fetcher github
	:url "https://github.com/saikyun/miracle.git"))
		 #+end_src
		 это пример для гилпа но допускаю что этот параметр в озможежен и
для юза
(use-package abc-mode :quelpa)
вообше для установки достаточно этого
он сам обо всё догадается и найдт
все пораметры для уточнения и указани конкретики
**** Installation
Requirements: Emacs 25.1
Assuming you have bootstrapped quelpa, install quelpa-use-package (which installs use-package as a dependency) and require the library:
(quelpa
 '(quelpa-use-package
   :fetcher git
   :url "https://github.com/quelpa/quelpa-use-package.git"))
(require 'quelpa-use-package)
**** Usage use package
After that it is possible to call use-package with the :quelpa keyword:
#+begin_src emacs-lisp :tangle yes

;; installs abc-mode with quelpa
(use-package abc-mode :quelpa)

;; does the same (`t' is optional)
(use-package abc-mode :quelpa t)

;; again... (if the package would have another name)
(use-package abc-mode :quelpa abc-mode)

;; passes upgrade parameter to quelpa
(use-package abc-mode :quelpa (:upgrade t))

;; uses the given recipe
(use-package abc-mode
  :quelpa (abc-mode :fetcher github :repo "mkjunker/abc-mode"))

;; recipe with plist arguments
(use-package abc-mode
  :quelpa ((abc-mode :fetcher github :repo "mkjunker/abc-mode") :upgrade t))
#+end_src
***** Using quelpa with :ensure
To make :ensure t use quelpa instead of package.el set the use-package-ensure-function in your init file:
(setq use-package-ensure-function 'quelpa)
After that:
(use-package abc-mode :ensure t)
will install abc-mode with quelpa.
And if you enable use-package-always-ensure:
(setq use-package-always-ensure t)
then
(use-package abc-mode)
will install abc-mode with quelpa.
***** Conditional execution
Note that the :quelpa keyword is inserted after :if, :when, :unless and :requires so that you can make the installation of a package depend on some requirement, for example:
(use-package magit-filenotify
  :when (fboundp 'file-notify-add-watch)
  :quelpa (magit-filenotify :fetcher github :repo "magit/magit-filenotify")
In this case magit-filenotify is only installed if the function file-notify-add-watch is bound.
Likewise you can use :requires to make the installation depend on a feature being available:
(use-package magit-filenotify
  :requires filenotify
  :quelpa (magit-filenotify :fetcher github :repo "magit/magit-filenotify"))
***** Overriding use-package-always-ensure
To install some packages with quelpa but use use-package-always-ensure to install all others from an ELPA repo :ensure needs to be disabled if the :quelpa keyword is found.
quelpa-use-package provides an advice for this purpose which can be activated thus:
(quelpa-use-package-activate-advice)
To disable it again you can use:
(quelpa-use-package-deactivate-advice)
(quelpa '(hydra :repo "abo-abo/hydra" :fetcher github))
*** When to call package-refresh-contents in init.el
Asked 4 years, 11 months ago
Modified 4 years, 1 month ago
Viewed 4k times
3

I have found the following lisp code in an init.el file. I am wondering if this code logic is correct. I am learning Elisp and have reviewed the documentation and searched Stack Overflow. If this is too basic a question to ask, please direct me to a source:

(when (not package-archive-contents)
  (package-refresh-contents))

My understanding is that logic says that if there is no package-archive file, then refresh the cache .

Following are my questions:

    Does Emacs download a cache for each of the sources in the package-archive list?
    If package-refresh-contents is called only if the cache is absent, how do we (Emacs) keep the archive current? Do we have to manually use M-x package-refresh-contents?

    init-filepackage

Share
Improve this question
Follow
edited Jun 17, 2018 at 0:24
Drew's user avatar
Drew
74.5k99 gold badges108108 silver badges224224 bronze badges
asked Jun 16, 2018 at 22:45
Vinod's user avatar
Vinod
3111 silver badge22 bronze badges

    1
    Great question, I am currently running into a completely related issue. I have configured Emacs to automatically install packages by adding them to the package-selected-packages list and then calling the package-install-selected-packages function. Is there a way to make Emacs automatically run (package-refresh-contents) when it identifies that new packages ought to be installed? Currently, Emacs freezes when a package is not found in the cache simply because the cache is not updated. – 
    Arthur Colombini Gusmão
    Dec 9, 2019 at 14:06

Add a comment
1 Answer
Sorted by:
1

package-archive-content is used by use-package . it is the utility for installing packages. The snippet that you are quoting indeed refreshes the content or the list-packages in case it is empty.

It isn't a cache, it is only a list.

To update the list you need to manually call M-x list-packages and update it with U.

This update process might take a while therefore it shouldn't really be part of the init file for every time you fire up Emacs.
Share
Improve this answer
Follow
answered Jun 17, 2018 at 13:20
manandearth's user avatar
manandearth
2,04811 gold badge1111 silver badges2323 bronze badges

    <f1> v package-archive-contents RET: "Cache of the contents of the Emacs Lisp Package Archive.[...]". To some extent, this is just a question of semantics of course, what exactly do you mean when you say "cache". – 
    npostavs
    Jun 17, 2018 at 13:49
    @npostavs I meant if Emacs will download a copy of the Emacs Lisp Archive. It looks from your response that is what it does. – 
    Vinod
    Jun 18, 2018 at 3:47
    Ah, I think the confusion here is that this variable is a cache of the package list (i.e., it is indeed "only a list" and also a cache). – 
    npostavs
    Jun 18, 2018 at 12:17
    I.e. it is the "contents" in the sense of a "table of contents" at the beginning of a book. It's the list of what is available, rather than "the whole book". – 
    phils
    Dec 14, 2018 at 23:54


** web 
*** skewer-mode
**** use-package : 
#+begin_src emacs-lisp :results output silent
(package-refresh-contents)
(use-package skewer-mode :ensure t
  :config
	(add-hook 'js2-mode-hook 'skewer-mode)
	(add-hook 'css-mode-hook 'skewer-css-mode)
	(add-hook 'html-mode-hook 'skewer-html-mode))
#+end_src


**** Exempl 
***** make server
****** ferst
#+begin_src emacs-lisp :tangle yes
(find-file-other-frame "~/../../version-control/GitHub/HTML/skewer/myskewer.js")
#+end_src

#+begin_src emacs-lisp :tangle yes
(find-file-other-frame "~/../../version-control/GitHub/HTML/skewer/script.js")
#+end_src
#+RESULTS:
: #<buffer script.js>

#+begin_src emacs-lisp :tangle yes
(find-file-other-frame "~/../../version-control/GitHub/HTML/skewer/hello.html")
#+end_src

	#+RESULTS:
	: #<buffer hello.html>
	#+begin_src emacs-lisp :tangle yes
	(require 'simple-httpd)
	(setq httpd-root 
		"~/../../version-control/GitHub/HTML/skewer"
	;; "/home/user/Documents/javascript"
		)
	(httpd-start)
	#+end_src
	#+RESULTS:
****** boids-js
https://github.com/skeeto/boids-js
Skewer -- Emacs browser interaction - YouTube
https://www.youtube.com/watch?v=4tyTgyzUJqM
	#+begin_src emacs-lisp :tangle yes
	(setq httpd-port 4242)
	(require 'simple-httpd)
	(setq httpd-root 
		"~/../../version-control/GitHub/HTML/skewer"
		)
	(httpd-start)
	#+end_src

	#+RESULTS:

	#+begin_src emacs-lisp :tangle yes
	(find-file-other-frame "~/../../version-control/GitHub/HTML/skewer/example.html")
	#+end_src
	#+RESULTS:
	: #<buffer example.html>
	#+begin_src emacs-lisp :tangle yes
	(find-file-other-frame "~/../../version-control/GitHub/HTML/skewer/boids.js")
	#+end_src
	#+RESULTS:
	: #<buffer boids.js>
	#+begin_src emacs-lisp :tangle yes
	(find-file-other-frame "~/../../version-control/GitHub/HTML/skewer/boids_sanbox.js")
	#+end_src

	#+RESULTS:
	: #<buffer boids_sanbox.js>

 http://localhost:4242/example.html

	#+begin_src emacs-lisp :tangle yes
	(httpd-stop)
	#+end_src

	#+RESULTS:

***** connect to server
http://localhost:8080/hello.html
http://localhost:4242/example.html

	#+begin_src emacs-lisp :tangle yes
(httpd-stop)
	#+end_src
***** start repl
A REPL into the browser can be created with 
M-x skewer-repl, or C-c C-z. This
***** repl command 
****** console.log : 
console.log
('hey!')

console.log
('hello world!')

console.log ('hello world!');
****** alert : 
alert('hey!');
****** skewer.log : 
skewer.log("hi from brobser!");
***** live edit html 
***** live edit js 
JS2-mode

 C-x C-e
**** Docs
***** Skewer: live web development with Emacs
****** links
 GitHub - skeeto/skewer-mode: Live web development in Emacs
 https://github.com/skeeto/skewer-mode

Provides live interaction with JavaScript, CSS, and HTML in a web browser.
Expressions are sent on-the-fly from an editing buffer to be evaluated in the browser,
just like Emacs does with an inferior Lisp process in Lisp modes.

,* Watch the [[http://youtu.be/4tyTgyzUJqM][demo video on YouTube]] ([[http://nullprogram.s3.amazonaws.com/skewer/demo.webm][webm]])

Skewer is available from [[https://melpa.org/][MELPA]], which will install the dependencies for you. This
package and its dependencies are pure Elisp, meaning setup is a breeze, the whole
thing is highly portable, and it works with many browsers.

Dependencies:

,* [[https://github.com/skeeto/emacs-http-server][simple-httpd]] (available on MELPA)
,* [[https://github.com/mooz/js2-mode][js2-mode]] (available on ELPA)

Skewer requires Emacs 24.3 or later.
****** Usage
******* Quick version

If Skewer was installed from MELPA, skip to step 3.

1 Put this repository directory in your load-path
2 Load skewer-mode.el
3 M-x run-skewer to attach a browser to Emacs
4 From a js2-mode buffer with skewer-mode minor mode enabled, send forms to the
 browser to evaluate

The function skewer-setup can be used to configure all of mode hooks (previously
this was the default). This can also be done manually like so,

(add-hook 'js2-mode-hook 'skewer-mode)
(add-hook 'css-mode-hook 'skewer-css-mode)
(add-hook 'html-mode-hook 'skewer-html-mode)

The keybindings for evaluating expressions in the browser are just like the Lisp
modes. These are provided by the minor mode skewer-mode.

,* C-x C-e: Evaluate the form before the point and display the result in the minibuffer.
 If given a prefix argument, insert the result into the current buffer.
,* C-M-x: Evaluate the top-level form around the point.
,* C-c C-k: Load the current buffer.
,* C-c C-z: Select the REPL buffer.

The result of the expression is echoed in the minibuffer.

Additionally, css-mode and html-mode get similar sets of bindings for modifying the
CSS rules and HTML on the current page.
******* CSS

,* C-x C-e: Load the declaration at the point.
,* C-M-x: Load the entire rule around the point.
,* C-c C-k: Load the current buffer as a stylesheet.
******* HTML
,* C-M-x: Load the HTML tag immediately around the point.

Note: run-skewer uses browse-url to launch the browser. This may require further
setup depending on your operating system and personal preferences.

Multiple browsers and browser tabs can be attached to Emacs at once. JavaScript
forms are sent to all attached clients simultaneously, and each will echo back the
result individually. Use list-skewer-clients to see a list of all currently attached
clients.

Sometimes Skewer's long polls from the browser will timeout after a number of hours
of inactivity. If you find the browser disconnected from Emacs for any reason, use the
browser's console to call skewer() to reconnect. This avoids a page reload, which
would lose any fragile browser state you might care about.
****** Manual version
To skewer your own document rather than the provided blank one,

1 Load the dependencies
2 Load skewer-mode.el
3 Start the HTTP server (httpd-start)
4 Include "[[http://localhost:8080/skewer][http://localhost:8080/skewer]]" as a script (see example.html and check
 your httpd-port)
5 Visit the document from your browser

Skewer fully supports CORS so the document need not be hosted by Emacs itself. A
Greasemonkey userscript is provided, Skewer Everything, for injecting Skewer into
any arbitrary page you're visiting without needing to modify the page on the host.
More information below.

Don't copy skewer.js anywhere or use it directly. Emacs hosts this script itself,
manipulating it in memory before it reaches the browser. Always access it through the
servlet on the Emacs webserver as /skewer.
****** Browser Support
Skewer is known to work properly with Firefox, Chrome, Safari, Opera, and IE8+.
Except for CSS and HTML, Skewer will work in IE7 when document.querySelector
and JSON are polyfilled. If you find any other JavaScript-supported browser that
doesn't work with Skewer, please report it.
****** REPL
A REPL into the browser can be created with M-x skewer-repl, or C-c C-z. This
should work like a console within the browser. Messages can be logged to this REPL
with skewer.log() (like console.log()).

Results of expressions evaluated in the REPL are printed more verbosely than in the
minibuffer, when possible. This may help in debugging.
****** Skewering with CORS
Skewer supports [[http://en.wikipedia.org/wiki/Cross-origin_resource_sharing][Cross-origin Resource Sharing (CORS)]]. This means you can
Skewer a document hosted from any server without needing any special changes on
that server, except for including /skewer as a script in that document.

If you don't control the server from which you want to skewer pages -- such that you
can't add the Skewer's script -- the provided Greasemonkey userscript (.user.js)
https://github.com/skeeto/skewer-mode/blob/master/skewer-everything.user.js
can be used to inject it into any page you visit. Note that this userscript will assume
you're running the Skewer server at [[http://localhost:8080/][http://localhost:8080/]] (simple-httpd's default
port). If this isn't true, you need to edit the top of the userscript.

The script isn't actually injected until you switch the toggle in the top-right corner, the
red/green triangle.

Alternatively, the following bookmarklet will load skewer on demand:

javascript:(function(){var d=document;var s=d.createElement('script');s.src='http://localhost:8080/skewer';d.body.appendChild(s);})()

With a browser plugin like [[https://chrome.google.com/webstore/detail/custom-javascript-for-web/poakhlngfciodnhlhhgnaaelnpjljija?hl=en][Custom Javascript for Websites]], you can use the
bookmarklet to auto-skewer specific domains, saving you a mouse click on each
reload.
****** bower
Also provided are some functions for loading libraries from the bower infrastructure
on the fly. This is accessed with skewer-bower-load. For example, I often find it
useful to load jQuery when skewering a page that doesn't have jQuery installed.

Note: to use this bower does not need to be installed, only git. It's just the bower
infrastructure being used. Unfortunately this infrastructure is a mess right now; many
packages are in some sort of broken state -- missing dependencies, missing
metadata, broken metadata, or an invalid repository URL. Some of this is due to
under-specification of the metadata by the bower project.
****** Motivation

I wanted something like [[https://github.com/swank-js/swank-js][swank-js]] but without all the painful setup. Having already
written an Emacs web server I was halfway there. It took relatively little code to
accomplish.

I also didn't want to rely a browser-specific feature, like MozRepl or WebKit's remote
debugger ([[https://github.com/jscheid/kite][kite]]).

The name refers to the idea that Emacs is skewering the browser from server-side.
***** package - How to use skewer-mode? 
****** currently struggling : 
https://emacs.stackexchange.com/questions/2376/how-to-use-skewer-mode
I am currently struggling to use skewer-mode in Emacs.

I downloaded and installed skewer-mode via MELPA, so all the dependencies
should be inplace.

For testing purposes I even downloaded the boidsjs [[https://github.com/skeeto/boids-js][demo]].

I'll open up boids.js, then type M-xrun-skewer (opens up the browser with URL
http://127.0.0.1:8080/skewer/demo) and then finally run M-xskewer-mode (->
skewer-mode enabled).

But in the browser nothing happens.

What am I doing wrong?

[[https://emacs.stackexchange.com/questions/tagged/package][package]] [[https://emacs.stackexchange.com/questions/tagged/skewer-mode][skewer-mode]] [[https://emacs.stackexchange.com/questions/tagged/javascript][javascript]] 
[[https://emacs.stackexchange.com/q/2376][Share]] 
[[https://emacs.stackexchange.com/posts/2376/edit][Improve this question]] 
Submit 
[[https://emacs.stackexchange.com/posts/2376/revisions][edited Oct 23 '14 at 19:30]] 
[[https://emacs.stackexchange.com/users/193/caisah][*]][[https://emacs.stackexchange.com/users/193/caisah][caisah]] 
3,65611 gold badge2020 silver badges4040 bronze badges 
asked Oct 20 '14 at 18:31 
[[https://emacs.stackexchange.com/users/2158/jacksgt][*]][[https://emacs.stackexchange.com/users/2158/jacksgt][JacksGT]]JacksGT 
31322 silver badges77 bronze badges 
4 

,* As I understand it, skewer provides an interface for evaluation of javascript... Do
 you actually evaluate the content of the boids.js buffer? – [[https://emacs.stackexchange.com/users/184/t-verron][T. Verron]] Oct 20 '14 at
 18:33 
,* I'm loading the current buffer with <kbd>C-x C-k</kbd> ("boid.js loaded") and the
 trying to evaluate with <kbd>C-x C-e</kbd>. But it gives me an error that it could
 not parse the "$"-sign. That is because it did not load the jQuery from the
 corresponding HTML file (example.html) – [[https://emacs.stackexchange.com/users/2158/jacksgt][JacksGT]] Oct 20 '14 at 18:44 
,* 2 
 You need to eval the html file in skewer-html-mode. – [[https://emacs.stackexchange.com/users/160/jordon-biondo][Jordon Biondo]] Oct 20 '14 at
 18:45 SVG Image 
,* How? C-x C-k does not work in skewer-html-mode – [[https://emacs.stackexchange.com/users/2158/jacksgt][JacksGT]] Oct 20 '14 at 18:50

[[https://emacs.stackexchange.com/questions/2376/how-to-use-skewer-mode#][Add a comment]]  | 

3 Answers 

****** start the http server : 
TLDR; You have to start the http server ([[https://github.com/skeeto/emacs-web-server][simple-http]]) and load your HTML files
through it.

For example, let's say you have a HTML file named hello.html and a JS script file
named script.js in /home/user/Documents/javascript folder.

hello.html:

<!doctype html>
<html>
<head>
    <!-- Include skewer.js as a script -->
    <script src="http://localhost:8080/skewer"></script>
    <!-- Include my script.js file -->
    <script src="script.js"></script>
</head>
<body>
    <p>Hello world</p>
</body>
</html>

script.js:

alert('hey!');

init.el (or .emacs):

(require 'simple-httpd)
;; set root folder for httpd server
(setq httpd-root "/home/user/Documents/javascript")

It's time to start the server: M-x httpd-start, and open the index.html file in the
browser, by visiting http://localhost:8080/hello.html. You should get the alert in
the browser and now call skewer-repl.

You can further interact with the browser through the repl. So, everything you evaluate
in the repl will be transmitted to the browser. For example if you type console.log
('hey!') 
in the repl, you will get this message in the browser's console. 

If you want to interactively modify HTML (e.g. live update HTML tags from emacs),
add to your init.el (or .emacs):

(add-hook 'html-mode-hook 'skewer-html-mode)

Now when you are in your .html file you can evaluate tags with C-M-x
(skewer-html-eval-tag), and these will be immediately updated in your browser. 

Keep in mind that conversely, this also applies to CSS and CSS files.

[[https://emacs.stackexchange.com/a/2515][Share]] 
[[https://emacs.stackexchange.com/posts/2515/edit][Improve this answer]] 
Submit 
[[https://emacs.stackexchange.com/posts/2515/revisions][edited Sep 22 '18 at 7:16]] 
answered Oct 23 '14 at 18:31 
[[https://emacs.stackexchange.com/users/193/caisah][*]][[https://emacs.stackexchange.com/users/193/caisah][caisah]]caisah 
3,65611 gold badge2020 silver badges4040 bronze badges 
2 

,* 1 
 This is really great answer, thanks for posting it. Probably also worth nothing that if
 you don't want to hardcode the httpd-root in your config, you can run M-x
 eval-expression (setq httpd-root "/path/to/files") from within emacs at
 any time. – [[https://emacs.stackexchange.com/users/2762/cody-reichert][Cody Reichert]] Dec 15 '14 at 15:42 SVG Image 
,* useless '\' in example html <script
 src="http://localhost:8080/skewer"></script>\ (can't edit - edits must be
 >=6 characters) – [[https://emacs.stackexchange.com/users/18327/kai-dj][kai-dj]] Sep 18 '18 at 13:36 SVG Image 

****** Instead of running the demo : 
Instead of running the demo, just perform these minimal steps to ensure that
everything is working correctly.

1 Open a new buffer with the name myskewer.js
2 Enable JS2-mode (a dependency of skewer)
3 Enable skewer-mode
4 M-xrun-skewer (a browser opens, go back to myskewer.js)
5 Type alert("hello"); and hit C-xC-e at the end of that line
6 Go back to the browser.

You should see an alert box on the page.

[[https://emacs.stackexchange.com/users/294/gambo][*]][[https://emacs.stackexchange.com/users/294/gambo][Gambo]]Gambo 
,* Thank you for your answer! Unfortunately, I'm prompted the error "No collapsable
 element found at point" – [[https://emacs.stackexchange.com/users/2158/jacksgt][JacksGT]] Oct 20 '14 at 19:02 SVG Image 
,* Sorry, My mistake. C-x C-e is the actual keys to push. will edit my answer –
 [[https://emacs.stackexchange.com/users/294/gambo][Gambo]] Oct 20 '14 at 19:10 
,* That worked! However: How do I tell Skewer to load the HTML, too? (As shown in
 the demo) – [[https://emacs.stackexchange.com/users/2158/jacksgt][JacksGT]] Oct 20 '14 at 19:27 
,* 1 
 @JacksGT Place your downloaded files into ~/public_html then follow the
 instructions for "Manual version" at [[https://github.com/skeeto/skewer-mode#manual-version][this]] link. Once that is done visit [[http://localhost:8080][localhost:8080]]
 https://github.com/skeeto/skewer-mode#manual-version
 in your browser. – [[https://emacs.stackexchange.com/users/294/gambo][Gambo]] Oct 20 '14 at 19:52 SVG Image 

****** In case port 8080 is already in use : 
In case port 8080 is already in use: 

you can configure skewer/simple-httpd to use another port by customizing the
httpd-port variable. (M-x customize-variable<ret>httpd-port)

[[https://emacs.stackexchange.com/a/32372][Share]]
** Graph
*** PLANTUML
**** Guide : 
***** Welcome to The Hitchhiker’s Guide to PlantUML! — The Hitchhiker's Guide to PlantUML documentation
 https://crashedmind.github.io/PlantUMLHitchhikersGuide/
****** 1.4. Images
1.4.1. Add Images To A Diagram¶
This uses the image tag which is part of PlantUML creole Legacy HTML support per
PlantUML specification:

Some HTML tags are also working:

    <b> for bold text
    <u> or <u:#AAAAAA> or <u:[[color|colorName]]> for underline
    <i> for italic
    <s> or <s:#AAAAAA> or <s:[[color|colorName]]> for strike text
    <w> or <w:#AAAAAA> or <w:[[color|colorName]]> for wave underline text
    <color:#AAAAAA> or <color:[[color|colorName]]>
    <back:#AAAAAA> or <back:[[color|colorName]]> for background color
    <size:nn> to change font size
    <img:file> : the file must be accessible by the filesystem
    <img:http://plantuml.com/logo3.png> : the URL must be available from the Internet

'diagram from https://plantuml.com/creole
@startuml
:* You can change <color:red>text color</color>
 * You can change <back:cadetblue>background color</back>
 * You can change <size:18>size</size>
 * You use <u>legacy</u> <b>HTML <i>tag</i></b>
 * You use <u:red>color</u> <s:green>in HTML</s> <w:#0000FF>tag</w>
----
 * image x0.5 : <img:http://plantuml.com/logo3.png{scale=0.5}>
----
 * image x1.5 : <img:http://plantuml.com/logo3.png{scale=1.5}>
;
@enduml

 

  1  'diagram from https://plantuml.com/creole  
  2  @startuml  
  3  :* You can change <color:red>text color</color>  
  4  * You can change <back:cadetblue>background color</back>  
  5  * You can change <size:18>size</size>  
  6  * You use <u>legacy</u> <b>HTML <i>tag</i></b>  
  7  * You use <u:red>color</u> <s:green>in HTML</s> <w:#0000FF>tag</w>  
  8  ----  
  9  * image x0.5 : <img:http://plantuml.com/logo3.png{scale=0.5}>  
 10  ----  
 11  * image x1.5 : <img:http://plantuml.com/logo3.png{scale=1.5}>  
 12  ;  
 13  @enduml  
 14    

Tip

You can scale an image. In the diagram above, we made the image 0.5, and 1.5 times
bigger using the `scale` keyword.


**** man
***** PlantUML in a nutshell[[http://alphadoc.plantuml.com/action/dokuwiki/en/index?do=edit&title=97a7ead45486a5b61b181da8db9944e8&orig=https%3A%2F%2Fplantuml.com%2Fen%2Findex][
*]][[http://alphadoc.plantuml.com/action/asciidoc/en/index?do=edit&title=97a7ead45486a5b61b181da8db9944e8&orig=https%3A%2F%2Fplantuml.com%2Fen%2Findex][*]][[http://alphadoc.plantuml.com/action/markdown/en/index?do=edit&title=97a7ead45486a5b61b181da8db9944e8&orig=https%3A%2F%2Fplantuml.com%2Fen%2Findex][*]]
PlantUML is a component that allows to quickly write : 
,* [[https://plantuml.com/sequence-diagram][Sequence diagram]]
,* [[https://plantuml.com/use-case-diagram][Usecase diagram]]
,* [[https://plantuml.com/class-diagram][Class diagram]]
,* [[https://plantuml.com/object-diagram][Object diagram]]
,* [[https://plantuml.com/activity-diagram-beta][Activity diagram]] (here is [[https://plantuml.com/activity-diagram-legacy][the legacy syntax)]]
,* [[https://plantuml.com/component-diagram][Component diagram]]
,* [[https://plantuml.com/deployment-diagram][Deployment diagram]]
,* [[https://plantuml.com/state-diagram][State diagram]]
,* [[https://plantuml.com/timing-diagram][Timing diagram]]

The following non-UML diagrams are also supported: 

,* [[https://plantuml.com/json][JSON data]]
,* [[https://plantuml.com/yaml][YAML data]]
,* [[https://plantuml.com/nwdiag][Network diagram (nwdiag)]]
,* [[https://plantuml.com/salt][Wireframe graphical interface (salt)]]
,* [[https://plantuml.com/archimate-diagram][Archimate diagram]]
,* [[https://plantuml.com/activity-diagram-beta#sdl][Specification and Description Language (SDL)]]
,* [[https://plantuml.com/ditaa][Ditaa diagram]]
,* [[https://plantuml.com/gantt-diagram][Gantt diagram]]
,* [[https://plantuml.com/mindmap-diagram][MindMap diagram]]
,* [[https://plantuml.com/wbs-diagram][Work Breakdown Structure diagram (WBS)]]
,* [[https://plantuml.com/ascii-math][Mathematic with AsciiMath or JLaTeXMath notation]]
,* [[https://plantuml.com/ie-diagram][Entity Relationship diagram (IE/ER)]]

Diagrams are defined using a simple and intuitive language. ([[https://plantuml.com/guide][see PlantUML]]
[[https://plantuml.com/guide][Language Reference Guide]]). 

New users can read the [[https://plantuml.com/starting][quick start page]]. There is also a [[https://plantuml.com/faq][F.A.Q. page]]. PlantUML can
be used within [[https://plantuml.com/running][many other tools]]. 

Images can be generated in PNG, [[https://plantuml.com/svg][in SVG]] or [[https://plantuml.com/latex][in LaTeX]] format. It is also possible to
generate [[https://plantuml.com/ascii-art][ASCII art diagrams]] (only for sequence diagrams). 

 Example:  describes the following diagram :  
 (You can edit the text if you want,    
 the diagram will be dynamically updated!)    
                                           [[http://www.plantuml.com/plantuml][*]]  
This example is working thanks to the [[http://www.plantuml.com/plantuml][online demo server]]. 
***** Language specification
 [[https://plantuml.com/activity-diagram-legacy][activity]]  Description of PlantUML language for UML activity diagram.  
 [[https://plantuml.com/activity-diagram-beta][activity beta]]  Proposal of new syntax of PlantUML language for UML activity  
   diagram.  
 [[https://plantuml.com/archimate-diagram][archimate]]  Archimate Support  
 [[https://plantuml.com/ascii-math][AsciiMath]]  Support for mathematical expressions  
 [[https://plantuml.com/class-diagram][classes]]  Description of PlantUML language for UML class diagram  
 [[https://plantuml.com/color][color]]  Display all color names  
 [[https://plantuml.com/commons][commons]]  Some common commands available on all diagrams.  
 [[https://plantuml.com/component-diagram][component]]  Description of PlantUML language for UML component  
   diagram  
 [[https://plantuml.com/creole][creole]]  Use of Creole  
 [[https://plantuml.com/deployment-diagram][deployment]]  Description of PlantUML language for UML deployment  
   diagram  
 [[https://plantuml.com/gantt-diagram][gantt]]  Beta support for Gantt diagram  
 [[https://plantuml.com/incubation][incubation]]  Incubation of new features  
 [[https://plantuml.com/link][link]]  Using hyperlinks and URL  
 [[https://plantuml.com/mindmap-diagram][mindmap]]  Description of PlantUML language for MindMap diagram  
 [[https://plantuml.com/nwdiag][nwdiag]]  Quickly draw network diagrams  
 [[https://plantuml.com/object-diagram][objects]]  Description of PlantUML language for UML object diagram  
 [[https://plantuml.com/openiconic][openiconic]]  OpenIconic integration  
 [[https://plantuml.com/preprocessing][preprocessing]]  Information about Preprocessing  
 [[https://plantuml.com/salt][salt]]  Design graphical interface with a simple text description  
 [[https://plantuml.com/sequence-diagram][sequence]]  Description of PlantUML language for UML sequence diagram  
 [[https://plantuml.com/skinparam][skinparam]]  Use of skinparam command  
 [[https://plantuml.com/sprite][sprite]]  Defining and using sprites  
 [[https://plantuml.com/state-diagram][state]]  Description of PlantUML language for UML state diagram  
 [[https://plantuml.com/timing-diagram][timing-diagram]]  Description of PlantUML language for UML timing diagram  
   (beta)  
 [[https://plantuml.com/use-case-diagram][usecase]]  Description of PlantUML language for UML usecase diagram  
 [[https://plantuml.com/wbs-diagram][wbs]]  Description of PlantUML language for Work Breakdown  
   Structure  

--------------------------------------------------------------------------
***** Advanced usage
 [[https://plantuml.com/ascii-art][ascii_art]]  Use of ASCII art with PlantUML  
 [[https://plantuml.com/command-line][command_line]]  Usage as command line  
 [[https://plantuml.com/ditaa][ditaa]]  Integration with DIagrams Through Ascii Art  
 [[https://plantuml.com/dot][dot]]  Use Graphviz/Dot language from PlantUML  
 [[https://plantuml.com/eps][eps]]  Information about Encapsulated PostScript  
 [[https://plantuml.com/gui][gui]]  Use of PlantUML as standalone tool  
 [[https://plantuml.com/handwritten][handwritten]]  Generate handwritten diagrams  
 [[https://plantuml.com/link][link]]  Using hyperlinks  
 [[https://plantuml.com/oregon-trail][oregon-trail]]  Remember The Oregon Trail  
 [[https://plantuml.com/pdf][pdf]]  PDF Support from PlantUML  
 [[https://plantuml.com/sources][sources]]  Where to put PlantUML diagram text description  
 [[https://plantuml.com/statistics-report][statistics]]  Generate statistics about your PlantUML usage  
 [[https://plantuml.com/steve][steve]]  A special command dedicated to Steve Jobs and Steve  
   Wozniak  
 [[https://plantuml.com/smetana02][smetana02]]  Porting Graphviz To Java  
 [[https://plantuml.com/sudoku][sudoku]]  Have a break and generate Sudoku  
 [[https://plantuml.com/svg][svg]]  SVG support from PlantUML  
 [[https://plantuml.com/picoweb][picoweb]]  Use of PlantUML as PicoWeb HTTP server  
 [[https://plantuml.com/server][server]]  Use of PlantUML as HTTP server  
 [[https://plantuml.com/unicode][unicode]]  Use of unicode from PlantUML  
 [[https://plantuml.com/vizjs][vizjs]]  Running Graphviz in Javascript  
 [[https://plantuml.com/xearth][xearth]]  XEarth integration  
 [[https://plantuml.com/xmi][xmi]]  Beta support for XMI  
Ezoic
report this ad
--------------------------------------------------------------------------

***** Defining and using sprites 
****** A Sprite is a small graphic element that can be used in diagrams.
 In PlantUML, sprites are monochrome and can have either 4, 8 or 16 gray level.

 To define a sprite, you have to use a hexadecimal digit between 0 and F per pixel.

****** sprite : 
 Then you can use the sprite using <$XXX> where XXX is the name of the sprite.

 @startuml
 sprite $foo1 {
   FFFFFFFFFFFFFFF
   F0123456789ABCF
   F0123456789ABCF
   F0123456789ABCF
   F0123456789ABCF
   F0123456789ABCF
   F0123456789ABCF
   F0123456789ABCF
   F0123456789ABCF
   FFFFFFFFFFFFFFF
 }
 Alice -> Bob : Testing <$foo1>
 @enduml

****** You can scale the sprite.
 @startuml
 sprite $foo1 {
   FFFFFFFFFFFFFFF
   F0123456789ABCF
   F0123456789ABCF
   F0123456789ABCF
   F0123456789ABCF
   F0123456789ABCF
   F0123456789ABCF
   F0123456789ABCF
   F0123456789ABCF
   FFFFFFFFFFFFFFF
 }
 Alice -> Bob : Testing <$foo1{scale=3}>
 @enduml

****** Changing colors
 Although sprites are monochrome, it's possible to change their color.

 @startuml
 sprite $foo1 {
   FFFFFFFFFFFFFFF
   F0123456789ABCF
   F0123456789ABCF
   F0123456789ABCF
   F0123456789ABCF
   F0123456789ABCF
   F0123456789ABCF
   F0123456789ABCF
   F0123456789ABCF
   FFFFFFFFFFFFFFF
 }
 Alice -> Bob : Testing <$foo1,scale=3.4,color=orange>
 @enduml
****** Encoding Sprite 
 To encode sprite, you can use the command line like:

 java -jar plantuml.jar -encodesprite 16z foo.png

 where foo.png is the image file you want to use (it will be converted to gray automatically).

 After -encodesprite, you have to specify a format: 4, 8, 16, 4z, 8z or 16z.

 The number indicates the gray level and the optional z is used to enable compression in sprite definition.
****** Importing Sprite 
 You can also launch the GUI to generate a sprite from an existing image.

 Click in the menubar then on File/Open Sprite Window.

 After copying an image into you clipboard, several possible definitions of the corresponding sprite will be displayed : you will just have to pickup the one you want.
****** Examples 
 @startuml
 sprite $printer [15x15/8z] NOtH3W0W208HxFz_kMAhj7lHWpa1XC716sz0Pq4MVPEWfBHIuxP3L6kbTcizR8tAhzaqFvXwvFfPEqm0
 start
 :click on <$printer> to print the page;
 @enduml

 @startuml
	sprite $bug [15x15/16z] PKzR2i0m2BFMi15p__FEjQEqB1z27aeqCqixa8S4OT7C53cKpsHpaYPDJY_12MHM-BLRyywPhrrlw3qumqNThmXgd1TOterAZmOW8sgiJafogofWRwtV3nCF
	sprite $printer [15x15/8z] NOtH3W0W208HxFz_kMAhj7lHWpa1XC716sz0Pq4MVPEWfBHIuxP3L6kbTcizR8tAhzaqFvXwvFfPEqm0
	sprite $disk {
		444445566677881
		436000000009991
		43600000000ACA1
		53700000001A7A1
		53700000012B8A1
		53800000123B8A1
		63800001233C9A1
		634999AABBC99B1
		744566778899AB1
		7456AAAAA99AAB1
		8566AFC228AABB1
		8567AC8118BBBB1
		867BD4433BBBBB1
		39AAAAABBBBBBC1
 }
****** 	title Use of sprites (<$printer>, <$bug>...)
	class Example {
	Can have some bug : <$bug>
	Click on <$disk> to save
	}

	note left : The printer <$printer> is available

 @enduml
******  StdLib 
 The PlantUML StdLib includes a number of ready icons in various IT areas such as architecture, cloud services, logos etc. It including AWS, Azure, Kubernetes, C4, product Logos and many others. To explore these libraries:

     Browse the Github folders of PlantUML StdLib
     Browse the source repos of StdLib collections that interest you. Eg if you are interested in logos you can find that it came from gilbarbara-plantuml-sprites, and quickly find its 

 sprites-list. (The next section shows how to list selected sprites but unfortunately that's in grayscale whereas this custom listing is in color.)

     Study the in-depth Hitchhiker’s Guide to PlantUML, eg sections Standard Library Sprites and PlantUML Stdlib Overview
******  Listing Sprites 
 You can use the listsprites command to show available sprites:

     Used on its own, it just shows ArchiMate sprites
     If you include some sprite libraries in your diagram, the command shows all these sprites, as explained in View all the icons with listsprites.

 (Example from Hitchhikers Guide to PlantUML)

 @startuml

 !define osaPuml https://raw.githubusercontent.com/Crashedmind/PlantUML-opensecurityarchitecture2-icons/master
 !include osaPuml/Common.puml
 !include osaPuml/User/all.puml

 listsprites
 @enduml

 Most collections have files called all that allow you to see a whole sub-collection at once. Else you need to find the sprites that interest you and include them one by one. Unfortunately, the version of a collection included in StdLib often does not have such all files, so as you see above we include the collection from github, not from StdLib.

 All sprites are in grayscale, but most collections define specific macros that include appropriate (vendor-specific) colors. 

***** class
https://plantuml.com/class-diagram
******  Class Diagram  * [[https://plantuml.com/class-diagram#e5cec68ef9127fc4][Declaring element]]  
	[[http://alphadoc.plantuml.com/action/dokuwiki/en/class-diagram?do=edit&title=0bb074dd4a565b5d1779ebfaf53e719d&orig=https%3A%2F%2Fplantuml.com%2Fen%2Fclass-diagram][*]]  * [[https://plantuml.com/class-diagram#9dd2a6eca0c2a0e7][Relations between classes]]  
	[[http://alphadoc.plantuml.com/action/asciidoc/en/class-diagram?do=edit&title=0bb074dd4a565b5d1779ebfaf53e719d&orig=https%3A%2F%2Fplantuml.com%2Fen%2Fclass-diagram][*]]  * [[https://plantuml.com/class-diagram#4a705b44651caa59][Label on relations]]  
	[[http://alphadoc.plantuml.com/action/markdown/en/class-diagram?do=edit&title=0bb074dd4a565b5d1779ebfaf53e719d&orig=https%3A%2F%2Fplantuml.com%2Fen%2Fclass-diagram][*]]  * [[https://plantuml.com/class-diagram#090967fbee930909][Adding methods]]  
		* [[https://plantuml.com/class-diagram#3644720244dd6c6a][Defining visibility]]  
****** 	Declaring element  * [[https://plantuml.com/class-diagram#9fd9d25be2fbb118][Abstract and Static]]  
	*  * [[https://plantuml.com/class-diagram#08ca680401eefe3a][Advanced class body]]  
	[[http://alphadoc.plantuml.com/action/dokuwiki/en/class-diagram?do=edit&title=e5cec68ef9127fc4cb03b75d35fb2cd5&orig=https%3A%2F%2Fplantuml.com%2Fen%2Fclass-diagram][*]]  * [[https://plantuml.com/class-diagram#59c91a18bcc97bb0][Notes and stereotypes]]  
	[[http://alphadoc.plantuml.com/action/asciidoc/en/class-diagram?do=edit&title=e5cec68ef9127fc4cb03b75d35fb2cd5&orig=https%3A%2F%2Fplantuml.com%2Fen%2Fclass-diagram][*]]  * [[https://plantuml.com/class-diagram#23ca7846dedbb80a][More on notes]]  
	[[http://alphadoc.plantuml.com/action/markdown/en/class-diagram?do=edit&title=e5cec68ef9127fc4cb03b75d35fb2cd5&orig=https%3A%2F%2Fplantuml.com%2Fen%2Fclass-diagram][*]]  * [[https://plantuml.com/class-diagram#e9d98ede969e1bba][Note on field (field, attribut, member) or]]  
     [[https://plantuml.com/class-diagram#e9d98ede969e1bba][method]]  
	Submit   * [[https://plantuml.com/class-diagram#1d010d898a1fead2][Note on links]]  
	@startuml  * [[https://plantuml.com/class-diagram#a339d3559f33ad64][Abstract class and interface]]  
	abstract        abstract  * [[https://plantuml.com/class-diagram#03256bc1982e60f4][Using non-letters]]  
	abstract class  "abstract class"  * [[https://plantuml.com/class-diagram#6a8ec84e53ede3ae][Hide attributes, methods...]]  
	annotation      annotation  * [[https://plantuml.com/class-diagram#20ec7d48c223b142][Hide classes]]  
	circle          circle  * [[https://plantuml.com/class-diagram#b09695ba6d76313d][Use generics]]  
	()              circle_short_form  * [[https://plantuml.com/class-diagram#4b62dd14f1d33739][Specific Spot]]  
	class           class  * [[https://plantuml.com/class-diagram#27fe4eb3edbaff8f][Packages]]  
	diamond         diamond  * [[https://plantuml.com/class-diagram#a05971470d7fd711][Packages style]]  
	<>              diamond_short_form  * [[https://plantuml.com/class-diagram#13d28e8dfc702e34][Namespaces]]  
	entity          entity  * [[https://plantuml.com/class-diagram#e73aec79687e3638][Automatic namespace creation]]  
	enum            enum  * [[https://plantuml.com/class-diagram#8b64d7547fa4f699][Lollipop interface]]  
	interface       interface  * [[https://plantuml.com/class-diagram#9a49d5ae2dd333a4][Changing arrows direction]]  
	@enduml  * [[https://plantuml.com/class-diagram#fbbc0504d940020e][Association classes]]  
	*  * [[https://plantuml.com/class-diagram#ca121e2ba9f02322][Association on same classe]]  
		* [[https://plantuml.com/class-diagram#7aa53dbdfc2137bf][Skinparam]]  
****** 	Relations between classes  * [[https://plantuml.com/class-diagram#89a4c54a52d87715][Skinned Stereotypes]]  
	*  * [[https://plantuml.com/class-diagram#cfe920390b501516][Color gradient]]  
	[[http://alphadoc.plantuml.com/action/dokuwiki/en/class-diagram?do=edit&title=9dd2a6eca0c2a0e79ad6bfc27a583fb7&orig=https%3A%2F%2Fplantuml.com%2Fen%2Fclass-diagram][*]]  * [[https://plantuml.com/class-diagram#c08f8d9927fcb626][Help on layout]]  
	[[http://alphadoc.plantuml.com/action/asciidoc/en/class-diagram?do=edit&title=9dd2a6eca0c2a0e79ad6bfc27a583fb7&orig=https%3A%2F%2Fplantuml.com%2Fen%2Fclass-diagram][*]]  * [[https://plantuml.com/class-diagram#fc6a662f75b53104][Splitting large files]]  
	[[http://alphadoc.plantuml.com/action/markdown/en/class-diagram?do=edit&title=9dd2a6eca0c2a0e79ad6bfc27a583fb7&orig=https%3A%2F%2Fplantuml.com%2Fen%2Fclass-diagram][*]]  * [[https://plantuml.com/class-diagram#6e0d446ea2c5bf82][Extends and implements]]  
		* [[https://plantuml.com/class-diagram#74f446c1d06a4f04][Inline style of relations (Linking or]]  
	Relations between classes are defined using the following symbols :    [[https://plantuml.com/class-diagram#74f446c1d06a4f04][arrow)]]  
		* [[https://plantuml.com/class-diagram#372843e1093965d6][Change relation, linking or arrow color]]  
   Type   Symbol   Drawing      [[https://plantuml.com/class-diagram#372843e1093965d6][and style]]  
   Extension   <|--  *    * [[https://plantuml.com/class-diagram#4829cb0f596c9350][Arrows from/to class members]]  
   Composition  *--  *      
   Aggregation   o--  *      
     
	It is possible to replace -- by .. to have a dotted line.     
     
	Knowing those rules, it is possible to draw the following drawings:     
     
	Submit     
	@startuml    
	Class01 <|-- Class02    
	Class03 *-- Class04    
	Class05 o-- Class06    
	Class07 .. Class08    
	Class09 -- Class10    
	@enduml    
	*    
     
	Submit     
	@startuml    
	Class11 <|.. Class12    
	Class13 --> Class14    
	Class15 ..> Class16    
	Class17 ..|> Class18    
	Class19 <--* Class20    
	@enduml    
	*    
     
	Submit     
	@startuml    
	Class21 #-- Class22    
	Class23 x-- Class24    
	Class25 }-- Class26    
	Class27 +-- Class28    
	Class29 ^-- Class30    
	@enduml    
	*    
****** 	Label on relations    
	It is possible to add a label on the relation, using :, followed by the text    
	of the label.     
     
	For cardinality, you can use double-quotes "" on each side of the    
	relation.     
     
	Submit     
	@startuml    
     
	Class01 "1" *-- "many" Class02 : contains    
     
	Class03 o-- Class04 : aggregation    
     
	Class05 --> "1" Class06    
     
	@enduml    
	*    
     
	You can add an extra arrow pointing at one object showing which    
	object acts on the other object, using < or > at the begin or at the end    
	of the label.     
     
	Submit     
	@startuml    
	class Car    
     
	Driver - Car : drives >    
	Car *- Wheel : have 4 >    
	Car -- Person : < owns    
     
	@enduml    
	*    
****** 	Adding methods    
	*    
	[[http://alphadoc.plantuml.com/action/dokuwiki/en/class-diagram?do=edit&title=090967fbee9309097ce3bd7a98cd4aed&orig=https%3A%2F%2Fplantuml.com%2Fen%2Fclass-diagram][*]]    
	[[http://alphadoc.plantuml.com/action/asciidoc/en/class-diagram?do=edit&title=090967fbee9309097ce3bd7a98cd4aed&orig=https%3A%2F%2Fplantuml.com%2Fen%2Fclass-diagram][*]]    
	[[http://alphadoc.plantuml.com/action/markdown/en/class-diagram?do=edit&title=090967fbee9309097ce3bd7a98cd4aed&orig=https%3A%2F%2Fplantuml.com%2Fen%2Fclass-diagram][*]]    
     
	To declare fields and methods, you can use the symbol : followed by    
	the field's or method's name.     
     
	The system checks for parenthesis to choose between methods and    
	fields.     
     
	Submit     
	@startuml    
	Object <|-- ArrayList    
     
	Object : equals()    
	ArrayList : Object[] elementData    
	ArrayList : size()    
     
	@enduml    
	*    
     
	It is also possible to group between brackets {} all fields and methods.     
     
	Note that the syntax is highly flexible about type/name order.     
     
	Submit     
	@startuml    
	class Dummy {    
		String data    
		void methods()    
	}    
     
	class Flight {    
     flightNumber : Integer    
     departureTime : Date    
	}    
	@enduml    
	*    
     
	You can use {field} and {method} modifiers to override default    
	behaviour of the parser about fields and methods.     
     
	Submit     
	@startuml    
	class Dummy {    
		{field} A field (despite parentheses)    
		{method} Some method    
	}    
     
	@enduml    
	*    
****** 	Defining visibility    
	*    
	[[http://alphadoc.plantuml.com/action/dokuwiki/en/class-diagram?do=edit&title=3644720244dd6c6a9b9b9306d9577aeb&orig=https%3A%2F%2Fplantuml.com%2Fen%2Fclass-diagram][*]]    
	[[http://alphadoc.plantuml.com/action/asciidoc/en/class-diagram?do=edit&title=3644720244dd6c6a9b9b9306d9577aeb&orig=https%3A%2F%2Fplantuml.com%2Fen%2Fclass-diagram][*]]    
	[[http://alphadoc.plantuml.com/action/markdown/en/class-diagram?do=edit&title=3644720244dd6c6a9b9b9306d9577aeb&orig=https%3A%2F%2Fplantuml.com%2Fen%2Fclass-diagram][*]]    
     
	When you define methods or fields, you can use characters to define    
	the visibility of the corresponding item:     
     
   Character  Icon for field  Icon for  Visibility       
       method         
   -  *  *  private       
   #  *  *  protected       
   ~  *  *  package      
         private       
   +  *  *  public       
     
	Submit     
	@startuml    
     
	class Dummy {    
   -field1    
   #field2    
   ~method1()    
   +method2()    
	}    
     
	@enduml    
	*    
     
	You can turn off this feature using the skinparam classAttributeIconSize    
	0 command :     
     
	Submit     
	@startuml    
	skinparam classAttributeIconSize 0    
	class Dummy {    
   -field1    
   #field2    
   ~method1()    
   +method2()    
	}    
     
	@enduml    
	*    
****** 	Abstract and Static    
	*    
	[[http://alphadoc.plantuml.com/action/dokuwiki/en/class-diagram?do=edit&title=9fd9d25be2fbb118f4b55084f233c07d&orig=https%3A%2F%2Fplantuml.com%2Fen%2Fclass-diagram][*]]    
	[[http://alphadoc.plantuml.com/action/asciidoc/en/class-diagram?do=edit&title=9fd9d25be2fbb118f4b55084f233c07d&orig=https%3A%2F%2Fplantuml.com%2Fen%2Fclass-diagram][*]]    
	[[http://alphadoc.plantuml.com/action/markdown/en/class-diagram?do=edit&title=9fd9d25be2fbb118f4b55084f233c07d&orig=https%3A%2F%2Fplantuml.com%2Fen%2Fclass-diagram][*]]    
     
	You can define static or abstract methods or fields using the {static} or    
	{abstract} modifier.     
     
	These modifiers can be used at the start or at the end of the line. You    
	can also use {classifier} instead of {static}.     
     
	Submit     
	@startuml    
	class Dummy {    
		{static} String id    
		{abstract} void methods()    
	}    
	@enduml    
	*    
****** 	Advanced class body    
	*    
	[[http://alphadoc.plantuml.com/action/dokuwiki/en/class-diagram?do=edit&title=08ca680401eefe3a2fa918168d574a11&orig=https%3A%2F%2Fplantuml.com%2Fen%2Fclass-diagram][*]]    
	[[http://alphadoc.plantuml.com/action/asciidoc/en/class-diagram?do=edit&title=08ca680401eefe3a2fa918168d574a11&orig=https%3A%2F%2Fplantuml.com%2Fen%2Fclass-diagram][*]]    
	[[http://alphadoc.plantuml.com/action/markdown/en/class-diagram?do=edit&title=08ca680401eefe3a2fa918168d574a11&orig=https%3A%2F%2Fplantuml.com%2Fen%2Fclass-diagram][*]]    
     
	By default, methods and fields are automatically regrouped by    
	PlantUML. You can use separators to define your own way of ordering    
	fields and methods. The following separators are possible : --..==__.     
     
	You can also use titles within the separators:     
     
	Submit     
	@startuml    
	class Foo1 {    
		You can use    
		several lines    
		..    
		as you want    
		and group    
		==    
		things together.    
		__    
		You can have as many groups    
		as you want    
		--    
		End of class    
	}    
     
	class User {    
		.. Simple Getter ..    
		+ getName()    
		+ getAddress()    
		.. Some setter ..    
		+ setName()    
		__ private data __    
		int age    
		-- encrypted --    
		String password    
	}    
     
	@enduml    
	*    
****** 	Notes and stereotypes    
	*    
	[[http://alphadoc.plantuml.com/action/dokuwiki/en/class-diagram?do=edit&title=59c91a18bcc97bb0659545a3c33b21de&orig=https%3A%2F%2Fplantuml.com%2Fen%2Fclass-diagram][*]]    
	[[http://alphadoc.plantuml.com/action/asciidoc/en/class-diagram?do=edit&title=59c91a18bcc97bb0659545a3c33b21de&orig=https%3A%2F%2Fplantuml.com%2Fen%2Fclass-diagram][*]]    
	[[http://alphadoc.plantuml.com/action/markdown/en/class-diagram?do=edit&title=59c91a18bcc97bb0659545a3c33b21de&orig=https%3A%2F%2Fplantuml.com%2Fen%2Fclass-diagram][*]]    
     
	Stereotypes are defined with the class keyword, << and >>.     
     
	You can also define notes using note left of , note right of , note top of ,    
	note bottom of keywords.     
     
	You can also define a note on the last defined class using note left, note    
	right, note top, note bottom.     
     
	A note can be also define alone with the note keywords, then linked to    
	other objects using the .. symbol.     
     
	Submit     
	@startuml    
	class Object << general >>    
	Object <|--- ArrayList    
     
	note top of Object : In java, every class\nextends this one.    
     
	note "This is a floating note" as N1    
	note "This note is connected\nto several objects." as N2    
	Object .. N2    
	N2 .. ArrayList    
     
	class Foo    
	note left: On last defined class    
     
	@enduml    
	*    
****** 	More on notes    
	*    
	[[http://alphadoc.plantuml.com/action/dokuwiki/en/class-diagram?do=edit&title=23ca7846dedbb80ac370cfe62995f7b5&orig=https%3A%2F%2Fplantuml.com%2Fen%2Fclass-diagram][*]]    
	[[http://alphadoc.plantuml.com/action/asciidoc/en/class-diagram?do=edit&title=23ca7846dedbb80ac370cfe62995f7b5&orig=https%3A%2F%2Fplantuml.com%2Fen%2Fclass-diagram][*]]    
	[[http://alphadoc.plantuml.com/action/markdown/en/class-diagram?do=edit&title=23ca7846dedbb80ac370cfe62995f7b5&orig=https%3A%2F%2Fplantuml.com%2Fen%2Fclass-diagram][*]]    
     
	It is also possible to use few HTML tags (See [[https://plantuml.com/creole][Creole expression]]) like :    
     
	* <b>    
	* <u>    
	* <i>    
	* <s>, <del>, <strike>    
	* <font color="#AAAAAA"> or <font color="colorName">    
	* <color:#AAAAAA> or <color:colorName>    
	* <size:nn> to change font size    
	* <img src="file"> or <img:file>: the file must be accessible by the    
   filesystem    
****** 	You can also have a note on several lines.     
     
	You can also define a note on the last defined class using note left, note    
	right, note top, note bottom.     
     
	Submit     
	@startuml    
     
	class Foo    
	note left: On last defined class    
     
	note top of Object    
		In java, <size:18>every</size> <u>class</u>    
		<b>extends</b>    
		<i>this</i> one.    
	end note    
     
	note as N1    
		This note is <u>also</u>    
		<b><color:royalBlue>on several</color>    
		<s>words</s> lines    
		And this is hosted by <img:sourceforge.jpg>    
	end note    
     
	@enduml    
	*    
****** 	Note on field (field, attribut, member) or method    
	*    
	[[http://alphadoc.plantuml.com/action/dokuwiki/en/class-diagram?do=edit&title=e9d98ede969e1bba1f5b8c6885fc6683&orig=https%3A%2F%2Fplantuml.com%2Fen%2Fclass-diagram][*]]    
	[[http://alphadoc.plantuml.com/action/asciidoc/en/class-diagram?do=edit&title=e9d98ede969e1bba1f5b8c6885fc6683&orig=https%3A%2F%2Fplantuml.com%2Fen%2Fclass-diagram][*]]    
	[[http://alphadoc.plantuml.com/action/markdown/en/class-diagram?do=edit&title=e9d98ede969e1bba1f5b8c6885fc6683&orig=https%3A%2F%2Fplantuml.com%2Fen%2Fclass-diagram][*]]    
     
	It is possible to add a note on field (field, attribut, member) or on    
	method.     
****** 	Note on field or method    
     
	Submit     
	@startuml    
	class A {    
	{static} int counter    
	+void {abstract} start(int timeout)    
	}    
	note right of A::counter    
		This member is annotated    
	end note    
	note right of A::start    
		This method is now explained in a UML note    
	end note    
	@enduml    
	*    
     
	Note on method with the same name    
     
	Submit     
	@startuml    
	class A {    
	{static} int counter    
	+void {abstract} start(int timeoutms)    
	+void {abstract} start(Duration timeout)    
	}    
	note left of A::counter    
		This member is annotated    
	end note    
	note right of A::"start(int timeoutms)"    
		This method with int    
	end note    
	note right of A::"start(Duration timeout)"    
		This method with Duration    
	end note    
	@enduml    
	*    
     
	[Ref. [[https://forum.plantuml.net/3474][QA-3474]] and [[https://forum.plantuml.net/5835][QA-5835]]]    
****** 	Note on links    
	*    
	[[http://alphadoc.plantuml.com/action/dokuwiki/en/class-diagram?do=edit&title=1d010d898a1fead2d4c6d46c0288fe5e&orig=https%3A%2F%2Fplantuml.com%2Fen%2Fclass-diagram][*]]    
	[[http://alphadoc.plantuml.com/action/asciidoc/en/class-diagram?do=edit&title=1d010d898a1fead2d4c6d46c0288fe5e&orig=https%3A%2F%2Fplantuml.com%2Fen%2Fclass-diagram][*]]    
	[[http://alphadoc.plantuml.com/action/markdown/en/class-diagram?do=edit&title=1d010d898a1fead2d4c6d46c0288fe5e&orig=https%3A%2F%2Fplantuml.com%2Fen%2Fclass-diagram][*]]    
     
	It is possible to add a note on a link, just after the link definition, using    
	note on link.     
     
	You can also use note left on link, note right on link, note top on link,    
	note bottom on link if you want to change the relative position of the    
	note with the label.     
     
	Submit     
	@startuml    
     
	class Dummy    
	Dummy --> Foo : A link    
	note on link #red: note that is red    
     
	Dummy --> Foo2 : Another link    
	note right on link #blue    
	this is my note on right link    
	and in blue    
	end note    
     
	@enduml    
	*    
****** 	Abstract class and interface    
	*    
	[[http://alphadoc.plantuml.com/action/dokuwiki/en/class-diagram?do=edit&title=a339d3559f33ad64bec7e8282522fffa&orig=https%3A%2F%2Fplantuml.com%2Fen%2Fclass-diagram][*]]    
	[[http://alphadoc.plantuml.com/action/asciidoc/en/class-diagram?do=edit&title=a339d3559f33ad64bec7e8282522fffa&orig=https%3A%2F%2Fplantuml.com%2Fen%2Fclass-diagram][*]]    
	[[http://alphadoc.plantuml.com/action/markdown/en/class-diagram?do=edit&title=a339d3559f33ad64bec7e8282522fffa&orig=https%3A%2F%2Fplantuml.com%2Fen%2Fclass-diagram][*]]    
     
	You can declare a class as abstract using abstract or abstract class    
	keywords.     
     
	The class will be printed in italic.     
     
	You can use the interface, annotation and enum keywords too.     
     
	Submit     
	@startuml    
     
	abstract class AbstractList    
	abstract AbstractCollection    
	interface List    
	interface Collection    
     
	List <|-- AbstractList    
	Collection <|-- AbstractCollection    
     
	Collection <|- List    
	AbstractCollection <|- AbstractList    
	AbstractList <|-- ArrayList    
     
	class ArrayList {    
		Object[] elementData    
		size()    
	}    
     
	enum TimeUnit {    
		DAYS    
		HOURS    
		MINUTES    
	}    
****** 	annotation SuppressWarnings    
	@enduml    
	*    
     
	Using non-letters    
	*    
	[[http://alphadoc.plantuml.com/action/dokuwiki/en/class-diagram?do=edit&title=03256bc1982e60f464d168c5d711e289&orig=https%3A%2F%2Fplantuml.com%2Fen%2Fclass-diagram][*]]    
	[[http://alphadoc.plantuml.com/action/asciidoc/en/class-diagram?do=edit&title=03256bc1982e60f464d168c5d711e289&orig=https%3A%2F%2Fplantuml.com%2Fen%2Fclass-diagram][*]]    
	[[http://alphadoc.plantuml.com/action/markdown/en/class-diagram?do=edit&title=03256bc1982e60f464d168c5d711e289&orig=https%3A%2F%2Fplantuml.com%2Fen%2Fclass-diagram][*]]    
     
	If you want to use [[https://plantuml.com/unicode][non-letters]] in the class (or enum...) display, you can    
	either :     
     
	* Use the as keyword in the class definition    
	* Put quotes "" around the class name    
     
	Submit     
	@startuml    
	class "This is my class" as class1    
	class class2 as "It works this way too"    
     
	class2 *-- "foo/dummy" : use    
	@enduml    
	*    
****** 	Hide attributes, methods...    
	*    
	[[http://alphadoc.plantuml.com/action/dokuwiki/en/class-diagram?do=edit&title=6a8ec84e53ede3aef8fe23ab45f4af02&orig=https%3A%2F%2Fplantuml.com%2Fen%2Fclass-diagram][*]]    
	[[http://alphadoc.plantuml.com/action/asciidoc/en/class-diagram?do=edit&title=6a8ec84e53ede3aef8fe23ab45f4af02&orig=https%3A%2F%2Fplantuml.com%2Fen%2Fclass-diagram][*]]    
	[[http://alphadoc.plantuml.com/action/markdown/en/class-diagram?do=edit&title=6a8ec84e53ede3aef8fe23ab45f4af02&orig=https%3A%2F%2Fplantuml.com%2Fen%2Fclass-diagram][*]]    
     
	You can parameterize the display of classes using the hide/show    
	command.     
     
	The basic command is: hide empty members. This command will hide    
	attributes or methods if they are empty.     
     
	Instead of empty members, you can use:     
     
	* empty fields or empty attributes for empty fields,    
	* empty methods for empty methods,    
	* fields or attributes which will hide fields, even if they are described,    
	* methods which will hide methods, even if they are described,    
	* members which will hide fields and methods, even if they are    
   described,    
	* circle for the circled character in front of class name,    
	* stereotype for the stereotype.    
     
	You can also provide, just after the hide or show keyword:     
     
	* class for all classes,    
	* interface for all interfaces,    
	* enum for all enums,    
	* <<foo1>> for classes which are stereotyped with foo1,    
	* an existing class name.    
     
	You can use several show/hide commands to define rules and    
	exceptions.     
     
	Submit     
	@startuml    
     
	class Dummy1 {    
		+myMethods()    
	}    
     
	class Dummy2 {    
		+hiddenMethod()    
	}    
     
	class Dummy3 <<Serializable>> {    
	String name    
	}    
     
	hide members    
	hide <<Serializable>> circle    
	show Dummy1 methods    
	show <<Serializable>> fields    
     
	@enduml    
	*    
****** 	Hide classes    
	*    
	[[http://alphadoc.plantuml.com/action/dokuwiki/en/class-diagram?do=edit&title=20ec7d48c223b142e068a59ca0c056d5&orig=https%3A%2F%2Fplantuml.com%2Fen%2Fclass-diagram][*]]    
	[[http://alphadoc.plantuml.com/action/asciidoc/en/class-diagram?do=edit&title=20ec7d48c223b142e068a59ca0c056d5&orig=https%3A%2F%2Fplantuml.com%2Fen%2Fclass-diagram][*]]    
	[[http://alphadoc.plantuml.com/action/markdown/en/class-diagram?do=edit&title=20ec7d48c223b142e068a59ca0c056d5&orig=https%3A%2F%2Fplantuml.com%2Fen%2Fclass-diagram][*]]    
     
	You can also use the show/hide commands to hide classes.     
     
	This may be useful if you define a large [[https://plantuml.com/preprocessing][!included file]], and if you want to    
	hide come classes after [[https://plantuml.com/preprocessing][file inclusion]].     
     
	Submit     
	@startuml    
     
	class Foo1    
	class Foo2    
     
	Foo2 *-- Foo1    
     
	hide Foo2    
     
	@enduml    
	*    
****** 	Use generics    
	*    
	[[http://alphadoc.plantuml.com/action/dokuwiki/en/class-diagram?do=edit&title=b09695ba6d76313daa0b4ba36c182cf7&orig=https%3A%2F%2Fplantuml.com%2Fen%2Fclass-diagram][*]]    
	[[http://alphadoc.plantuml.com/action/asciidoc/en/class-diagram?do=edit&title=b09695ba6d76313daa0b4ba36c182cf7&orig=https%3A%2F%2Fplantuml.com%2Fen%2Fclass-diagram][*]]    
	[[http://alphadoc.plantuml.com/action/markdown/en/class-diagram?do=edit&title=b09695ba6d76313daa0b4ba36c182cf7&orig=https%3A%2F%2Fplantuml.com%2Fen%2Fclass-diagram][*]]    
     
	You can also use bracket < and > to define generics usage in a class.     
     
	Submit     
	@startuml    
     
	class Foo<? extends Element> {    
		int size()    
	}    
	Foo *- Element    
     
	@enduml    
	*    
     
	It is possible to disable this drawing using skinparam genericDisplay    
	old command.     
****** 	Specific Spot    
	*    
	[[http://alphadoc.plantuml.com/action/dokuwiki/en/class-diagram?do=edit&title=4b62dd14f1d33739da97fc2dba1f4c1e&orig=https%3A%2F%2Fplantuml.com%2Fen%2Fclass-diagram][*]]    
	[[http://alphadoc.plantuml.com/action/asciidoc/en/class-diagram?do=edit&title=4b62dd14f1d33739da97fc2dba1f4c1e&orig=https%3A%2F%2Fplantuml.com%2Fen%2Fclass-diagram][*]]    
	[[http://alphadoc.plantuml.com/action/markdown/en/class-diagram?do=edit&title=4b62dd14f1d33739da97fc2dba1f4c1e&orig=https%3A%2F%2Fplantuml.com%2Fen%2Fclass-diagram][*]]    
     
	Usually, a spotted character (C, I, E or A) is used for classes,    
	interface, enum and abstract classes.     
     
	But you can define your own spot for a class when you define the    
	stereotype, adding a single character and a color, like in this example:     
     
	Submit     
	@startuml    
     
	class System << (S,#FF7700) Singleton >>    
	class Date << (D,orchid) >>    
	@enduml    
	*    
****** 	Packages    
	You can define a package using the package keyword, and optionally    
	declare a background color for your package (Using a html color code    
	or name).     
     
	Note that package definitions can be nested.     
     
	Submit     
	@startuml    
     
	package "Classic Collections" #DDDDDD {    
		Object <|-- ArrayList    
	}    
     
	package net.sourceforge.plantuml {    
		Object <|-- Demo1    
		Demo1 *- Demo2    
	}    
     
	@enduml    
	*    
****** 	Packages style    
	*    
	[[http://alphadoc.plantuml.com/action/dokuwiki/en/class-diagram?do=edit&title=a05971470d7fd711d8aa14a16f3d88c4&orig=https%3A%2F%2Fplantuml.com%2Fen%2Fclass-diagram][*]]    
	[[http://alphadoc.plantuml.com/action/asciidoc/en/class-diagram?do=edit&title=a05971470d7fd711d8aa14a16f3d88c4&orig=https%3A%2F%2Fplantuml.com%2Fen%2Fclass-diagram][*]]    
	[[http://alphadoc.plantuml.com/action/markdown/en/class-diagram?do=edit&title=a05971470d7fd711d8aa14a16f3d88c4&orig=https%3A%2F%2Fplantuml.com%2Fen%2Fclass-diagram][*]]    
     
	There are different styles available for packages.     
     
	You can specify them either by setting a default style with the command    
	: skinparam packageStyle, or by using a stereotype on the package:     
     
	Submit     
	@startuml    
	scale 750 width    
	package foo1 <<Node>> {    
		class Class1    
	}    
     
	package foo2 <<Rectangle>> {    
		class Class2    
	}    
     
	package foo3 <<Folder>> {    
		class Class3    
	}    
     
	package foo4 <<Frame>> {    
		class Class4    
	}    
     
	package foo5 <<Cloud>> {    
		class Class5    
	}    
     
	package foo6 <<Database>> {    
		class Class6    
	}    
     
	@enduml    
	*    
     
	You can also define links between packages, like in the following    
	example:     
     
	Submit     
	@startuml    
     
	skinparam packageStyle rectangle    
     
	package foo1.foo2 {    
	}    
     
	package foo1.foo2.foo3 {    
		class Object    
	}    
     
	foo1.foo2 +-- foo1.foo2.foo3    
     
	@enduml    
	*    
****** 	Namespaces    
	*    
	[[http://alphadoc.plantuml.com/action/dokuwiki/en/class-diagram?do=edit&title=13d28e8dfc702e3456e0767dff9a128a&orig=https%3A%2F%2Fplantuml.com%2Fen%2Fclass-diagram][*]]    
	[[http://alphadoc.plantuml.com/action/asciidoc/en/class-diagram?do=edit&title=13d28e8dfc702e3456e0767dff9a128a&orig=https%3A%2F%2Fplantuml.com%2Fen%2Fclass-diagram][*]]    
	[[http://alphadoc.plantuml.com/action/markdown/en/class-diagram?do=edit&title=13d28e8dfc702e3456e0767dff9a128a&orig=https%3A%2F%2Fplantuml.com%2Fen%2Fclass-diagram][*]]    
     
	In packages, the name of a class is the unique identifier of this class. It    
	means that you cannot have two classes with the very same name in    
	different packages.     
     
	In that case, you should use [[http://en.wikipedia.org/wiki/Namespace_%28computer_science%29][namespaces]] instead of packages.     
     
	You can refer to classes from other namespaces by fully qualify them.    
	Classes from the default namespace are qualified with a starting dot.     
     
	Note that you don't have to explicitly create namespace : a fully    
	qualified class is automatically put in the right namespace.     
     
	Submit     
	@startuml    
     
	class BaseClass    
     
	namespace net.dummy #DDDDDD {    
			.BaseClass <|-- Person    
			Meeting o-- Person    
     
			.BaseClass <|- Meeting    
	}    
     
	namespace net.foo {    
		net.dummy.Person  <|- Person    
		.BaseClass <|-- Person    
     
		net.dummy.Meeting o-- Person    
	}    
     
	BaseClass <|-- net.unused.Person    
     
	@enduml    
	*    
****** 	Automatic namespace creation    
	*    
	[[http://alphadoc.plantuml.com/action/dokuwiki/en/class-diagram?do=edit&title=e73aec79687e363816b3b5745eea56c1&orig=https%3A%2F%2Fplantuml.com%2Fen%2Fclass-diagram][*]]    
	[[http://alphadoc.plantuml.com/action/asciidoc/en/class-diagram?do=edit&title=e73aec79687e363816b3b5745eea56c1&orig=https%3A%2F%2Fplantuml.com%2Fen%2Fclass-diagram][*]]    
	[[http://alphadoc.plantuml.com/action/markdown/en/class-diagram?do=edit&title=e73aec79687e363816b3b5745eea56c1&orig=https%3A%2F%2Fplantuml.com%2Fen%2Fclass-diagram][*]]    
     
	You can define another separator (other than the dot) using the    
	command : set namespaceSeparator ???.     
     
	Submit     
	@startuml    
     
	set namespaceSeparator ::    
	class X1::X2::foo {    
		some info    
	}    
     
	@enduml    
	*    
     
	You can disable automatic package creation using the command set    
	namespaceSeparator none.     
     
	Submit     
	@startuml    
     
	set namespaceSeparator none    
	class X1.X2.foo {    
		some info    
	}    
     
	@enduml    
	*    
****** 	Lollipop interface    
	*    
	[[http://alphadoc.plantuml.com/action/dokuwiki/en/class-diagram?do=edit&title=8b64d7547fa4f699553de52bc5b2cfde&orig=https%3A%2F%2Fplantuml.com%2Fen%2Fclass-diagram][*]]    
	[[http://alphadoc.plantuml.com/action/asciidoc/en/class-diagram?do=edit&title=8b64d7547fa4f699553de52bc5b2cfde&orig=https%3A%2F%2Fplantuml.com%2Fen%2Fclass-diagram][*]]    
	[[http://alphadoc.plantuml.com/action/markdown/en/class-diagram?do=edit&title=8b64d7547fa4f699553de52bc5b2cfde&orig=https%3A%2F%2Fplantuml.com%2Fen%2Fclass-diagram][*]]    
     
	You can also define lollipops interface on classes, using the following    
	syntax:     
     
	* bar ()- foo    
	* bar ()-- foo    
	* foo -() bar    
     
	Submit     
	@startuml    
	class foo    
	bar ()- foo    
	@enduml    
	*    
****** 	Changing arrows direction    
	*    
	[[http://alphadoc.plantuml.com/action/dokuwiki/en/class-diagram?do=edit&title=9a49d5ae2dd333a4383349c978d76966&orig=https%3A%2F%2Fplantuml.com%2Fen%2Fclass-diagram][*]]    
	[[http://alphadoc.plantuml.com/action/asciidoc/en/class-diagram?do=edit&title=9a49d5ae2dd333a4383349c978d76966&orig=https%3A%2F%2Fplantuml.com%2Fen%2Fclass-diagram][*]]    
	[[http://alphadoc.plantuml.com/action/markdown/en/class-diagram?do=edit&title=9a49d5ae2dd333a4383349c978d76966&orig=https%3A%2F%2Fplantuml.com%2Fen%2Fclass-diagram][*]]    
     
	By default, links between classes have two dashes -- and are vertically    
	orien(or    
	dot) like this:     
     
	Submit     
	@startuml    
	Room o- Student    
	Room *-- Chair    
	@enduml    
	*    
     
	You can also change directions by reversing the link:     
     
	Submit     
	@startuml    
	Student -o Room    
	Chair --* Room    
	@enduml    
	*    
     
	It is also possible to change arrow direction by adding left, right, up or    
	down keywords inside the arrow:     
     
	Submit     
	@startuml    
	foo -left-> dummyLeft    
	foo -right-> dummyRight    
	foo -up-> dummyUp    
	foo -down-> dummyDown    
	@enduml    
	*    
     
	You can shorten the arrow by using only the first character of the    
	direction (for example, -d- instead of -down-) or the two first characters    
	(-do-).     
     
	Please note that you should not abuse this functionality : Graphviz    
	gives usually good results without tweaking.     
     
	And with the [[https://plantuml.com/use-case-diagram#d551e48d272b2b07][left to right direction]] parameter:     
     
	Submit     
	@startuml    
	left to right direction    
	foo -left-> dummyLeft    
	foo -right-> dummyRight    
	foo -up-> dummyUp    
	foo -down-> dummyDown    
	@enduml    
	*    
****** 	Association classes    
	*    
	[[http://alphadoc.plantuml.com/action/dokuwiki/en/class-diagram?do=edit&title=fbbc0504d940020ef0cff1c2cf295041&orig=https%3A%2F%2Fplantuml.com%2Fen%2Fclass-diagram][*]]    
	[[http://alphadoc.plantuml.com/action/asciidoc/en/class-diagram?do=edit&title=fbbc0504d940020ef0cff1c2cf295041&orig=https%3A%2F%2Fplantuml.com%2Fen%2Fclass-diagram][*]]    
	[[http://alphadoc.plantuml.com/action/markdown/en/class-diagram?do=edit&title=fbbc0504d940020ef0cff1c2cf295041&orig=https%3A%2F%2Fplantuml.com%2Fen%2Fclass-diagram][*]]    
     
	You can define association class after that a relation has been defined    
	between two classes, like in this example:     
     
	Submit     
	@startuml    
	class Student {    
		Name    
	}    
	Student "0..*" - "1..*" Course    
	(Student, Course) .. Enrollment    
     
	class Enrollment {    
		drop()    
		cancel()    
	}    
	@enduml    
	*    
     
	You can define it in another direction:     
     
	Submit     
	@startuml    
	class Student {    
		Name    
	}    
	Student "0..*" -- "1..*" Course    
	(Student, Course) . Enrollment    
     
	class Enrollment {    
		drop()    
		cancel()    
	}    
	@enduml    
	*    
****** 	Association on same classe    
	*    
	[[http://alphadoc.plantuml.com/action/dokuwiki/en/class-diagram?do=edit&title=ca121e2ba9f023220c07b2ecb6974a90&orig=https%3A%2F%2Fplantuml.com%2Fen%2Fclass-diagram][*]]    
	[[http://alphadoc.plantuml.com/action/asciidoc/en/class-diagram?do=edit&title=ca121e2ba9f023220c07b2ecb6974a90&orig=https%3A%2F%2Fplantuml.com%2Fen%2Fclass-diagram][*]]    
	[[http://alphadoc.plantuml.com/action/markdown/en/class-diagram?do=edit&title=ca121e2ba9f023220c07b2ecb6974a90&orig=https%3A%2F%2Fplantuml.com%2Fen%2Fclass-diagram][*]]    
     
	Submit     
	@startuml    
	class Station {    
			+name: string    
	}    
     
	class StationCrossing {    
			+cost: TimeInterval    
	}    
     
	<> diamond    
     
	StationCrossing . diamond    
	diamond - "from 0..*" Station    
	diamond - "to 0..* " Station    
	@enduml    
	*    
     
	[Ref. [[http://wiki.plantuml.net/site/incubation#associations][Incubation: Associations]]]    
****** 	Skinparam    
	*    
	[[http://alphadoc.plantuml.com/action/dokuwiki/en/class-diagram?do=edit&title=7aa53dbdfc2137bf0189ecb9ea1dc7d8&orig=https%3A%2F%2Fplantuml.com%2Fen%2Fclass-diagram][*]]    
	[[http://alphadoc.plantuml.com/action/asciidoc/en/class-diagram?do=edit&title=7aa53dbdfc2137bf0189ecb9ea1dc7d8&orig=https%3A%2F%2Fplantuml.com%2Fen%2Fclass-diagram][*]]    
	[[http://alphadoc.plantuml.com/action/markdown/en/class-diagram?do=edit&title=7aa53dbdfc2137bf0189ecb9ea1dc7d8&orig=https%3A%2F%2Fplantuml.com%2Fen%2Fclass-diagram][*]]    
     
	You can use the [[https://plantuml.com/skinparam][skinparam]] command to change colors and fonts for    
	the drawing.     
     
	You can use this command :     
     
	* In the diagram definition, like any other commands,    
	* In an [[https://plantuml.com/preprocessing][included file]],    
	* In a configuration file, provided in the [[https://plantuml.com/command-line][command line]] or the [[https://plantuml.com/ant-task][ANT task]].    
     
	Submit     
	@startuml    
     
	skinparam class {    
	BackgroundColor PaleGreen    
	ArrowColor SeaGreen    
	BorderColor SpringGreen    
	}    
	skinparam stereotypeCBackgroundColor YellowGreen    
     
	Class01 "1" *-- "many" Class02 : contains    
     
	Class03 o-- Class04 : aggregation    
     
	@enduml    
	*    
****** 	Skinned Stereotypes    
	*    
	[[http://alphadoc.plantuml.com/action/dokuwiki/en/class-diagram?do=edit&title=89a4c54a52d87715bf13ba50af377720&orig=https%3A%2F%2Fplantuml.com%2Fen%2Fclass-diagram][*]]    
	[[http://alphadoc.plantuml.com/action/asciidoc/en/class-diagram?do=edit&title=89a4c54a52d87715bf13ba50af377720&orig=https%3A%2F%2Fplantuml.com%2Fen%2Fclass-diagram][*]]    
	[[http://alphadoc.plantuml.com/action/markdown/en/class-diagram?do=edit&title=89a4c54a52d87715bf13ba50af377720&orig=https%3A%2F%2Fplantuml.com%2Fen%2Fclass-diagram][*]]    
     
	You can define specific color and fonts for stereotyped classes.     
     
	Submit     
	@startuml    
     
	skinparam class {    
	BackgroundColor PaleGreen    
	ArrowColor SeaGreen    
	BorderColor SpringGreen    
	BackgroundColor<<Foo>> Wheat    
	BorderColor<<Foo>> Tomato    
	}    
	skinparam stereotypeCBackgroundColor YellowGreen    
	skinparam stereotypeCBackgroundColor<< Foo >> DimGray    
     
	Class01 <<Foo>>    
	Class03 <<Foo>>    
	Class01 "1" *-- "many" Class02 : contains    
     
	Class03 o-- Class04 : aggregation    
     
	@enduml    
	*    
****** 	Color gradient    
	*    
	[[http://alphadoc.plantuml.com/action/dokuwiki/en/class-diagram?do=edit&title=cfe920390b50151693307bdf09d95c7f&orig=https%3A%2F%2Fplantuml.com%2Fen%2Fclass-diagram][*]]    
	[[http://alphadoc.plantuml.com/action/asciidoc/en/class-diagram?do=edit&title=cfe920390b50151693307bdf09d95c7f&orig=https%3A%2F%2Fplantuml.com%2Fen%2Fclass-diagram][*]]    
	[[http://alphadoc.plantuml.com/action/markdown/en/class-diagram?do=edit&title=cfe920390b50151693307bdf09d95c7f&orig=https%3A%2F%2Fplantuml.com%2Fen%2Fclass-diagram][*]]    
     
	It's possible to declare individual color for classes or note using the #    
	notation.     
     
	You can use either [[https://plantuml.com/color][standard color name]] or RGB code.     
     
	You can also use color gradient in background, with the following    
	syntax: two colors names separated either by:     
     
	* |,    
	* /,    
	* \,    
	* or -    
     
	depending the direction of the gradient.     
     
	For example, you could have:     
     
	Submit     
	@startuml    
     
	skinparam backgroundcolor AntiqueWhite/Gold    
	skinparam classBackgroundColor Wheat|CornflowerBlue    
     
	class Foo #red-green    
	note left of Foo #blue\9932CC    
		this is my    
		note on this class    
	end note    
     
	package example #GreenYellow/LightGoldenRodYellow {    
		class Dummy    
	}    
     
	@enduml    
	*    
****** 	Help on layout    
	*    
	[[http://alphadoc.plantuml.com/action/dokuwiki/en/class-diagram?do=edit&title=c08f8d9927fcb626db83893dde0269a9&orig=https%3A%2F%2Fplantuml.com%2Fen%2Fclass-diagram][*]]    
	[[http://alphadoc.plantuml.com/action/asciidoc/en/class-diagram?do=edit&title=c08f8d9927fcb626db83893dde0269a9&orig=https%3A%2F%2Fplantuml.com%2Fen%2Fclass-diagram][*]]    
	[[http://alphadoc.plantuml.com/action/markdown/en/class-diagram?do=edit&title=c08f8d9927fcb626db83893dde0269a9&orig=https%3A%2F%2Fplantuml.com%2Fen%2Fclass-diagram][*]]    
     
	Sometimes, the default layout is not perfect...     
     
	You can use together keyword to group some classes together : the    
	layout engine will try to group them (as if they were in the same    
	package).     
     
	You can also use hidden links to force the layout.     
     
	Submit     
	@startuml    
     
	class Bar1    
	class Bar2    
	together {    
		class Together1    
		class Together2    
		class Together3    
	}    
	Together1 - Together2    
	Together2 - Together3    
	Together2 -[hidden]--> Bar1    
	Bar1 -[hidden]> Bar2    
     
     
	@enduml    
	*    
****** 	Splitting large files    
	*    
	[[http://alphadoc.plantuml.com/action/dokuwiki/en/class-diagram?do=edit&title=fc6a662f75b53104862a06bf33c4fa05&orig=https%3A%2F%2Fplantuml.com%2Fen%2Fclass-diagram][*]]    
	[[http://alphadoc.plantuml.com/action/asciidoc/en/class-diagram?do=edit&title=fc6a662f75b53104862a06bf33c4fa05&orig=https%3A%2F%2Fplantuml.com%2Fen%2Fclass-diagram][*]]    
	[[http://alphadoc.plantuml.com/action/markdown/en/class-diagram?do=edit&title=fc6a662f75b53104862a06bf33c4fa05&orig=https%3A%2F%2Fplantuml.com%2Fen%2Fclass-diagram][*]]    
     
	Sometimes, you will get some very large image files.     
     
	You can use the page (hpages)x(vpages) command to split the    
	generated image into several files :     
     
	hpages is a number that indicated the number of horizontal pages, and    
	vpages is a number that indicated the number of vertical pages.     
     
	You can also use some specific skinparam settings to put borders on    
	splitted pages (see example).     
     
	Submit     
	@startuml    
	' Split into 4 pages    
	page 2x2    
	skinparam pageMargin 10    
	skinparam pageExternalColor gray    
	skinparam pageBorderColor black    
     
	class BaseClass    
     
	namespace net.dummy #DDDDDD {    
			.BaseClass <|-- Person    
			Meeting o-- Person    
     
			.BaseClass <|- Meeting    
     
	}    
     
	namespace net.foo {    
		net.dummy.Person  <|- Person    
		.BaseClass <|-- Person    
     
		net.dummy.Meeting o-- Person    
	}    
     
	BaseClass <|-- net.unused.Person    
	@enduml    
	*    
****** 	Extends and implements    
	*    
	[[http://alphadoc.plantuml.com/action/dokuwiki/en/class-diagram?do=edit&title=6e0d446ea2c5bf82fcb8e5903bb3df98&orig=https%3A%2F%2Fplantuml.com%2Fen%2Fclass-diagram][*]]    
	[[http://alphadoc.plantuml.com/action/asciidoc/en/class-diagram?do=edit&title=6e0d446ea2c5bf82fcb8e5903bb3df98&orig=https%3A%2F%2Fplantuml.com%2Fen%2Fclass-diagram][*]]    
	[[http://alphadoc.plantuml.com/action/markdown/en/class-diagram?do=edit&title=6e0d446ea2c5bf82fcb8e5903bb3df98&orig=https%3A%2F%2Fplantuml.com%2Fen%2Fclass-diagram][*]]    
     
	It is also possible to use extends and implements keywords.     
     
	Submit     
	@startuml    
	class ArrayList implements List    
	class ArrayList extends AbstractList    
	@enduml    
	*    
     
	Inline style of relations (Linking or arrow)    
	*    
	[[http://alphadoc.plantuml.com/action/dokuwiki/en/class-diagram?do=edit&title=74f446c1d06a4f0425e5dfc5f2a31425&orig=https%3A%2F%2Fplantuml.com%2Fen%2Fclass-diagram][*]]    
	[[http://alphadoc.plantuml.com/action/asciidoc/en/class-diagram?do=edit&title=74f446c1d06a4f0425e5dfc5f2a31425&orig=https%3A%2F%2Fplantuml.com%2Fen%2Fclass-diagram][*]]    
	[[http://alphadoc.plantuml.com/action/markdown/en/class-diagram?do=edit&title=74f446c1d06a4f0425e5dfc5f2a31425&orig=https%3A%2F%2Fplantuml.com%2Fen%2Fclass-diagram][*]]    
     
	It's also possible to have explicitly bold, dashed, dotted, hidden or plain    
	relation, links or arrows:    
     
	* without label    
     
	Submit     
	@startuml    
	class foo    
	foo --> bar    
	foo -[bold]-> bar1    
	foo -[dashed]-> bar2    
	foo -[dotted]-> bar3    
	foo -[hidden]-> bar4    
	foo -[plain]-> bar5    
	@enduml    
	*    
     
	* with label    
     
	Submit     
	@startuml    
	class foo    
	foo --> bar          : ∅    
	foo -[bold]-> bar1   : bold    
	foo -[dashed]-> bar2 : dashed    
	foo -[dotted]-> bar3 : dotted    
	foo -[hidden]-> bar4 : hidden    
	foo -[plain]-> bar5  : plain    
	@enduml    
	*    
     
	[Adapted from [[https://forum.plantuml.net/4181/how-change-width-line-in-a-relationship-between-two-classes?show=4232#a4232][QA-4181]]]    
     
	Change relation, linking or arrow color and style    
	*    
	[[http://alphadoc.plantuml.com/action/dokuwiki/en/class-diagram?do=edit&title=372843e1093965d603c6aa5ed7c7647b&orig=https%3A%2F%2Fplantuml.com%2Fen%2Fclass-diagram][*]]    
	[[http://alphadoc.plantuml.com/action/asciidoc/en/class-diagram?do=edit&title=372843e1093965d603c6aa5ed7c7647b&orig=https%3A%2F%2Fplantuml.com%2Fen%2Fclass-diagram][*]]    
	[[http://alphadoc.plantuml.com/action/markdown/en/class-diagram?do=edit&title=372843e1093965d603c6aa5ed7c7647b&orig=https%3A%2F%2Fplantuml.com%2Fen%2Fclass-diagram][*]]    
     
	You can change the [[https://plantuml.com/color][color]] of individual relation or arrows using the    
	following notation: [#color] or #color;line.    
	[bold|dashed|dotted];text:color:     
     
	* old method    
     
	Submit     
	@startuml    
	class foo    
	foo --> bar    
	foo -[#red]-> bar1    
	foo -[#green]-> bar2    
	foo -[#blue]-> bar3    
	'foo -[#blue;#yellow;#green]-> bar4    
	@enduml    
	*    
     
	* new method    
     
	Submit     
	@startuml    
	class foo    
	foo --> bar : normal    
	foo --> bar1 #line:red;line.bold;text:red  : red bold    
	foo --> bar2 #green;line.dashed;text:green : green dashed     
	foo --> bar3 #blue;line.dotted;text:blue   : blue dotted    
	@enduml    
	*    
     
	[See similar feature on [[https://plantuml.com/deployment-diagram#0b2e57c3d4eafdda][deployment]]]    
****** 	Arrows from/to class members    
	*    
	[[http://alphadoc.plantuml.com/action/dokuwiki/en/class-diagram?do=edit&title=4829cb0f596c935081b3c3f776b9af0e&orig=https%3A%2F%2Fplantuml.com%2Fen%2Fclass-diagram][*]]    
	[[http://alphadoc.plantuml.com/action/asciidoc/en/class-diagram?do=edit&title=4829cb0f596c935081b3c3f776b9af0e&orig=https%3A%2F%2Fplantuml.com%2Fen%2Fclass-diagram][*]]    
	[[http://alphadoc.plantuml.com/action/markdown/en/class-diagram?do=edit&title=4829cb0f596c935081b3c3f776b9af0e&orig=https%3A%2F%2Fplantuml.com%2Fen%2Fclass-diagram][*]]    
     
	Submit     
	@startuml    
	class Foo {    
	+ field1    
	+ field2    
	}    
     
	class Bar {    
	+ field3    
	+ field4    
	}    
     
	Foo::field1 --> Bar::field3 : foo    
	Foo::field2 --> Bar::field4 : bar    
	@enduml    
	*    
     
	[Ref. [[https://forum.plantuml.net/3636][QA-3636]]]    
     
	Submit     
	@startuml    
	left to right direction    
     
	class User {    
		id : INTEGER    
		..    
		other_id : INTEGER    
	}    
     
	class Email {    
		id : INTEGER    
		..    
		user_id : INTEGER    
		address : INTEGER    
	}    
     
	User::id *-- Email::user_id    
	@enduml    
	*    
     
	[Ref. [[https://forum.plantuml.net/5261][QA-5261]]]    
***** Object Diagram  * [[https://plantuml.com/object-diagram#29df1b044e936302][Definition of objects]]  
 [[http://alphadoc.plantuml.com/action/dokuwiki/en/object-diagram?do=edit&title=fb01426efa51410ac5531ec0842d4db1&orig=https%3A%2F%2Fplantuml.com%2Fen%2Fobject-diagram][*]]  * [[https://plantuml.com/object-diagram#e79e7df1fbafe644][Relations between objects]]  
 [[http://alphadoc.plantuml.com/action/asciidoc/en/object-diagram?do=edit&title=fb01426efa51410ac5531ec0842d4db1&orig=https%3A%2F%2Fplantuml.com%2Fen%2Fobject-diagram][*]]  * [[https://plantuml.com/object-diagram#5f6416a7e094d77e][Associations objects]]  
 [[http://alphadoc.plantuml.com/action/markdown/en/object-diagram?do=edit&title=fb01426efa51410ac5531ec0842d4db1&orig=https%3A%2F%2Fplantuml.com%2Fen%2Fobject-diagram][*]]  * [[https://plantuml.com/object-diagram#60a833de4109a30e][Adding fields]]  
   * [[https://plantuml.com/object-diagram#7e9e334df13386bb][Common features with class diagrams]]  
******  Definition of objects  * [[https://plantuml.com/object-diagram#6c738a9019f7ac08][Map table or associative array]]  
	*    
	[[http://alphadoc.plantuml.com/action/dokuwiki/en/object-diagram?do=edit&title=29df1b044e936302611ca3538ecdb583&orig=https%3A%2F%2Fplantuml.com%2Fen%2Fobject-diagram][*]]    
	[[http://alphadoc.plantuml.com/action/asciidoc/en/object-diagram?do=edit&title=29df1b044e936302611ca3538ecdb583&orig=https%3A%2F%2Fplantuml.com%2Fen%2Fobject-diagram][*]]    
	[[http://alphadoc.plantuml.com/action/markdown/en/object-diagram?do=edit&title=29df1b044e936302611ca3538ecdb583&orig=https%3A%2F%2Fplantuml.com%2Fen%2Fobject-diagram][*]]    
     
	You define instance of objects using the object    
	keywords.     
     
	Submit     
	@startuml    
	object firstObject    
	object "My Second Object" as o2    
	@enduml    
	*    
****** 	Relations between objects    
	 *    
	 [[http://alphadoc.plantuml.com/action/dokuwiki/en/object-diagram?do=edit&title=e79e7df1fbafe6440a5beafe333dd97c&orig=https%3A%2F%2Fplantuml.com%2Fen%2Fobject-diagram][*]]    
	 [[http://alphadoc.plantuml.com/action/asciidoc/en/object-diagram?do=edit&title=e79e7df1fbafe6440a5beafe333dd97c&orig=https%3A%2F%2Fplantuml.com%2Fen%2Fobject-diagram][*]]    
	 [[http://alphadoc.plantuml.com/action/markdown/en/object-diagram?do=edit&title=e79e7df1fbafe6440a5beafe333dd97c&orig=https%3A%2F%2Fplantuml.com%2Fen%2Fobject-diagram][*]]    
     
	 Relations between objects are defined using the    
	 following symbols :     
     
		Type   Symbol   Image       
		Extension   <|--  *      
		Composition  *--  *      
		Aggregation   o--  *      
     
	 It is possible to replace -- by .. to have a dotted    
	 line.     
     
	 Knowing those rules, it is possible to draw the    
	 following drawings.     
     
	 It is possible a add a label on the relation, using :    
	 followed by the text of the label.     
     
	 For cardinality, you can use double-quotes "" on    
	 each side of the relation.     
     
	 Submit     
	 @startuml    
	 object Object01    
	 object Object02    
	 object Object03    
	 object Object04    
	 object Object05    
	 object Object06    
	 object Object07    
	 object Object08    
     
	 Object01 <|-- Object02    
	 Object03 *-- Object04    
	 Object05 o-- "4" Object06    
	 Object07 .. Object08 : some labels    
	 @enduml    
	 *    
****** 	 Associations objects    
	 *    
	 [[http://alphadoc.plantuml.com/action/dokuwiki/en/object-diagram?do=edit&title=5f6416a7e094d77e27bbd1489978f032&orig=https%3A%2F%2Fplantuml.com%2Fen%2Fobject-diagram][*]]    
	 [[http://alphadoc.plantuml.com/action/asciidoc/en/object-diagram?do=edit&title=5f6416a7e094d77e27bbd1489978f032&orig=https%3A%2F%2Fplantuml.com%2Fen%2Fobject-diagram][*]]    
	 [[http://alphadoc.plantuml.com/action/markdown/en/object-diagram?do=edit&title=5f6416a7e094d77e27bbd1489978f032&orig=https%3A%2F%2Fplantuml.com%2Fen%2Fobject-diagram][*]]    
     
	 Submit     
	 @startuml    
	 object o1    
	 object o2    
	 diamond dia    
	 object o3    
     
	 o1  --> dia    
	 o2  --> dia    
	 dia --> o3    
	 @enduml    
	 *    
****** 	 Adding fields    
	 *    
	 [[http://alphadoc.plantuml.com/action/dokuwiki/en/object-diagram?do=edit&title=60a833de4109a30edc95bbc697741f60&orig=https%3A%2F%2Fplantuml.com%2Fen%2Fobject-diagram][*]]    
	 [[http://alphadoc.plantuml.com/action/asciidoc/en/object-diagram?do=edit&title=60a833de4109a30edc95bbc697741f60&orig=https%3A%2F%2Fplantuml.com%2Fen%2Fobject-diagram][*]]    
	 [[http://alphadoc.plantuml.com/action/markdown/en/object-diagram?do=edit&title=60a833de4109a30edc95bbc697741f60&orig=https%3A%2F%2Fplantuml.com%2Fen%2Fobject-diagram][*]]    
     
	 To declare fields, you can use the symbol : followed    
	 by the field's name.     
     
	 Submit     
	 @startuml    
     
	 object user    
     
	 user : name = "Dummy"    
	 user : id = 123    
     
	 @enduml    
	 *    
     
	 It is also possible to group all fields between    
	 brackets {}.     
     
	 Submit     
	 @startuml    
     
	 object user {    
		 name = "Dummy"    
		 id = 123    
	 }    
     
	 @enduml    
	 *    
****** 	 Common features with class diagrams    
	 *    
	 [[http://alphadoc.plantuml.com/action/dokuwiki/en/object-diagram?do=edit&title=7e9e334df13386bbf82a97708cad40f4&orig=https%3A%2F%2Fplantuml.com%2Fen%2Fobject-diagram][*]]    
	 [[http://alphadoc.plantuml.com/action/asciidoc/en/object-diagram?do=edit&title=7e9e334df13386bbf82a97708cad40f4&orig=https%3A%2F%2Fplantuml.com%2Fen%2Fobject-diagram][*]]    
	 [[http://alphadoc.plantuml.com/action/markdown/en/object-diagram?do=edit&title=7e9e334df13386bbf82a97708cad40f4&orig=https%3A%2F%2Fplantuml.com%2Fen%2Fobject-diagram][*]]    
     
	 * [[https://plantuml.com/class-diagram#Hide][Hide attributes, methods...]]    
	 * [[https://plantuml.com/class-diagram#Notes][Defines notes]]    
	 * [[https://plantuml.com/class-diagram#Using][Use packages]]    
	 * [[https://plantuml.com/class-diagram#Skinparam][Skin the output]]    
****** 	 Map table or associative array    
	 *    
	 [[http://alphadoc.plantuml.com/action/dokuwiki/en/object-diagram?do=edit&title=6c738a9019f7ac08639e17899239078a&orig=https%3A%2F%2Fplantuml.com%2Fen%2Fobject-diagram][*]]    
	 [[http://alphadoc.plantuml.com/action/asciidoc/en/object-diagram?do=edit&title=6c738a9019f7ac08639e17899239078a&orig=https%3A%2F%2Fplantuml.com%2Fen%2Fobject-diagram][*]]    
	 [[http://alphadoc.plantuml.com/action/markdown/en/object-diagram?do=edit&title=6c738a9019f7ac08639e17899239078a&orig=https%3A%2F%2Fplantuml.com%2Fen%2Fobject-diagram][*]]    
     
	 You can define a map table or [[https://en.wikipedia.org/wiki/Associative_array][associative array]],    
	 with map keyword and => separator.     
     
	 Submit     
	 @startuml    
	 map CapitalCity {    
		UK => London    
		USA => Washington    
		Germany => Berlin    
	 }    
	 @enduml    
	 *    
     
	 Submit     
	 @startuml    
	 map "Map **Contry => CapitalCity**" as CC {    
		UK => London    
		USA => Washington    
		Germany => Berlin    
	 }    
	 @enduml    
	 *    
     
	 Submit     
	 @startuml    
	 map "map: Map<Integer, String>" as users {    
		1 => Alice    
		2 => Bob    
		3 => Charlie    
	 }    
	 @enduml    
	 *    
     
	 And add link with object.     
     
	 Submit     
	 @startuml    
	 object London    
     
	 map CapitalCity {    
		UK *-> London    
		USA => Washington    
		Germany => Berlin    
	 }    
	 @enduml    
	 *    
     
	 Submit     
	 @startuml    
	 object London    
	 object Washington    
	 object Berlin    
	 object NewYork    
     
	 map CapitalCity {    
		UK *-> London    
		USA *--> Washington    
		Germany *---> Berlin    
	 }    
     
	 NewYork --> CapitalCity::USA    
	 @enduml    
	 *    
     
	 [Ref. [[https://github.com/plantuml/plantuml/issues/307][#307]]]    
***** Use Case Diagram 
https://plantuml.com/use-case-diagram
Let's have a few examples:
****** Usecases nclosed using between parentheses (because two parentheses looks like an oval).

 You can also use the usecase keyword to define a usecase. And you can define an alias, using the as keyword. This alias will be used later, when defining relations.

 @startuml

 (First usecase)
 (Another usecase) as (UC2)
 usecase UC3
 usecase (Last\nusecase) as UC4

 @enduml
******  Actors 
 The name defining an actor is enclosed between colons.

 You can also use the actor keyword to define an actor. An alias can be assigned using the as keyword and can be used later instead of the actor's name, e. g. when defining relations.

 You can see from the following examples, that the actor definitions are optional.

 @startuml

 :First Actor:
 :Another\nactor: as Man2
 actor Woman3
 actor :Last actor: as Person1

 @enduml
******  Change Actor style 
 You can change the actor style from stick man (by default) to:

     an awesome man with the skinparam actorStyle awesome command;
     a hollow man with the skinparam actorStyle hollow command.

 Stick man (by default)

 @startuml
 :User: --> (Use)
 "Main Admin" as Admin
 "Use the application" as (Use)
 Admin --> (Admin the application)
 @enduml

 Awesome man

 @startuml
 skinparam actorStyle awesome
 :User: --> (Use)
 "Main Admin" as Admin
 "Use the application" as (Use)
 Admin --> (Admin the application)
 @enduml

 [Ref. QA-10493]

 Hollow man

 @startuml
 skinparam actorStyle Hollow 
 :User: --> (Use)
 "Main Admin" as Admin
 "Use the application" as (Use)
 Admin --> (Admin the application)
 @enduml

 [Ref. PR#396]
******  Usecases description 

 If you want to have a description spanning several lines, you can use quotes.

 You can also use the following separators:

     -- (dashes)
     .. (periods)
     == (equals)
     __ (underscores)

 By using them pairwise and enclosing text between them, you can created separators with titles.

 @startuml

 usecase UC1 as "You can use
 several lines to define your usecase.
 You can also use separators.
 --
 Several separators are possible.
 ==
 And you can add titles:
 ..Conclusion..
 This allows large description."

 @enduml
******  Use package 
 You can use packages to group actors or use cases.

 @startuml
 left to right direction
 actor Guest as g
 package Professional {
   actor Chef as c
   actor "Food Critic" as fc
 }
 package Restaurant {
   usecase "Eat Food" as UC1
   usecase "Pay for Food" as UC2
   usecase "Drink" as UC3
   usecase "Review" as UC4
 }
 fc --> UC4
 g --> UC1
 g --> UC2
 g --> UC3
 @enduml

 You can use rectangle to change the display of the package.

 @startuml
 left to right direction
 actor "Food Critic" as fc
 rectangle Restaurant {
   usecase "Eat Food" as UC1
   usecase "Pay for Food" as UC2
   usecase "Drink" as UC3
 }
 fc --> UC1
 fc --> UC2
 fc --> UC3
 @enduml
******  Basic example 
 To link actors and use cases, the arrow --> is used.

 The more dashes - in the arrow, the longer the arrow. You can add a label on the arrow, by adding a : character in the arrow definition.

 In this example, you see that User has not been defined before, and is used as an actor.

 @startuml

 User -> (Start)
 User --> (Use the application) : A small label

 :Main Admin: ---> (Use the application) : This is\nyet another\nlabel

 @enduml
******  Extension 
 If one actor/use case extends another one, you can use the symbol <|--.

 @startuml
 :Main Admin: as Admin
 (Use the application) as (Use)

 User <|-- Admin
 (Start) <|-- (Use)

 @enduml
******  Using notes 
 You can use the note left of , note right of , note top of , note bottom of keywords to define notes related to a single object.

 A note can be also define alone with the note keywords, then linked to other objects using the .. symbol.

 @startuml
 :Main Admin: as Admin
 (Use the application) as (Use)

 User -> (Start)
 User --> (Use)

 Admin ---> (Use)

 note right of Admin : This is an example.

 note right of (Use)
   A note can also
   be on several lines
 end note

 note "This note is connected\nto several objects." as N2
 (Start) .. N2
 N2 .. (Use)
 @enduml
******  Stereotypes 
 You can add stereotypes while defining actors and use cases using << and >>.

 @startuml
 User << Human >>
 :Main Database: as MySql << Application >>
 (Start) << One Shot >>
 (Use the application) as (Use) << Main >>

 User -> (Start)
 User --> (Use)

 MySql --> (Use)

 @enduml
******  Changing arrows direction 
 By default, links between classes have two dashes -- and are vertically oriented. It is possible to use horizontal link by putting a single dash (or dot) like this:

 @startuml
 :user: --> (Use case 1)
 :user: -> (Use case 2)
 @enduml

 You can also change directions by reversing the link:

 @startuml
 (Use case 1) <.. :user:
 (Use case 2) <- :user:
 @enduml

 It is also possible to change arrow direction by adding left, right, up or down keywords inside the arrow:

 @startuml
 :user: -left-> (dummyLeft)
 :user: -right-> (dummyRight)
 :user: -up-> (dummyUp)
 :user: -down-> (dummyDown)
 @enduml

 You can shorten the arrow by using only the first character of the direction (for example, -d- instead of -down-) or the two first characters (-do-).

 Please note that you should not abuse this functionality : Graphviz gives usually good results without tweaking.

 And with the left to right direction parameter:

 @startuml
 left to right direction
 :user: -left-> (dummyLeft)
 :user: -right-> (dummyRight)
 :user: -up-> (dummyUp)
 :user: -down-> (dummyDown)
 @enduml
******  Splitting diagrams 
 The newpage keywords to split your diagram into several pages or images.

 @startuml
 :actor1: --> (Usecase1)
 newpage
 :actor2: --> (Usecase2)
 @enduml
******  Left to right direction 
 The general default behavior when building diagram is top to bottom.

 @startuml
 'default
 top to bottom direction
 user1 --> (Usecase 1)
 user2 --> (Usecase 2)

 @enduml

 You may change to left to right using the left to right direction command. The result is often better with this direction.

 @startuml

 left to right direction
 user1 --> (Usecase 1)
 user2 --> (Usecase 2)

 @enduml
******  Skinparam 
 You can use the skinparam command to change colors and fonts for the drawing.

 You can use this command :

     In the diagram definition, like any other commands,
     In an included file,
     In a configuration file, provided in the command line or the ANT task.

 You can define specific color and fonts for stereotyped actors and usecases.

 @startuml
 skinparam handwritten true

 skinparam usecase {
 BackgroundColor DarkSeaGreen
 BorderColor DarkSlateGray

 BackgroundColor<< Main >> YellowGreen
 BorderColor<< Main >> YellowGreen

 ArrowColor Olive
 ActorBorderColor black
 ActorFontName Courier

 ActorBackgroundColor<< Human >> Gold
 }

 User << Human >>
 :Main Database: as MySql << Application >>
 (Start) << One Shot >>
 (Use the application) as (Use) << Main >>

 User -> (Start)
 User --> (Use)

 MySql --> (Use)

 @enduml
******  Complete example 
 @startuml
 left to right direction
 skinparam packageStyle rectangle
 actor customer
 actor clerk
 rectangle checkout {
   customer -- (checkout)
   (checkout) .> (payment) : include
   (help) .> (checkout) : extends
   (checkout) -- clerk
 }
 @enduml
***** Deployment Diagram 
https://plantuml.com/deployment-diagram
****** Declaring element 
 @startuml
 actor actor
 actor/ "actor/"
 agent agent
 artifact artifact
 boundary boundary
 card card
 circle circle
 cloud cloud
 collections collections
 component component
 control control
 database database
 entity entity
 file file
 folder folder
 frame frame
 hexagon hexagon
 interface interface
 label label
 node node
 package package
 queue queue
 rectangle rectangle
 stack stack
 storage storage
 usecase usecase
 usecase/ "usecase/"
 @enduml

 You can optionaly put text using bracket [] for a long description.

 @startuml
 folder folder [
 This is a <b>folder
 ----
 You can use separator
 ====
 of different kind
 ....
 and style
 ]

 node node [
 This is a <b>node
 ----
 You can use separator
 ====
 of different kind
 ....
 and style
 ]

 database database [
 This is a <b>database
 ----
 You can use separator
 ====
 of different kind
 ....
 and style
 ]

 usecase usecase [
 This is a <b>usecase
 ----
 You can use separator
 ====
 of different kind
 ....
 and style
 ]

 card card [
 This is a <b>card
 ----
 You can use separator
 ====
 of different kind
 ....
 and style
 <i><color:blue>(add from V1.2020.7)</color></i>
 ]
 @enduml
****** Declaring element (using short form) 
 We can declare element using some short forms.

 Long form Keyword 	Short form Keyword 	Long form example 	Short form example 	Ref.
 actor	:a:	actor actor1	:actor2:	Actors
 component	[c]	component component1	[component2]	Components
 interface	()i	interface interface1	() "interface2"	Interfaces
 usecase	(u)	usecase usecase1	(usecase2)	Usecases

 Actor

 @startuml

 actor actor1
 :actor2:

 @enduml

 NB: There is an old syntax for actor with guillemet which is now deprecated and will be removed some days. Please do not use in your diagram.

 Component

 @startuml

 component component1
 [component2]

 @enduml

 Interface

 @startuml

 interface interface1
 () "interface2"

 label "//interface example//"
 @enduml

 Usecase

 @startuml

 usecase usecase1
 (usecase2)

 @enduml
****** Linking or arrow 
 You can create simple links between elements with or without labels:

 @startuml

 node node1
 node node2
 node node3
 node node4
 node node5
 node1 -- node2 : label1
 node1 .. node3 : label2
 node1 ~~ node4 : label3
 node1 == node5

 @enduml

 It's also possible to have explicitly bold, dashed, dotted, hidden or plain links or arrows.

 @startuml
 node foo
 foo --> bar          : ∅
 foo -[bold]-> bar1   : bold
 foo -[dashed]-> bar2 : dashed
 foo -[dotted]-> bar3 : dotted
 foo -[hidden]-> bar4 : hidden
 foo -[plain]-> bar5  : plain
 @enduml

 It is possible to use several types of links:

 @startuml

 artifact artifact1
 artifact artifact2
 artifact artifact3
 artifact artifact4
 artifact artifact5
 artifact artifact6
 artifact artifact7
 artifact artifact8
 artifact artifact9
 artifact artifact10
 artifact1 --> artifact2
 artifact1 --* artifact3
 artifact1 --o artifact4
 artifact1 --+ artifact5
 artifact1 --# artifact6
 artifact1 -->> artifact7
 artifact1 --0 artifact8
 artifact1 --^ artifact9
 artifact1 --(0 artifact10

 @enduml

 You can also have the following types:

 @startuml

 cloud cloud1
 cloud cloud2
 cloud cloud3
 cloud cloud4
 cloud cloud5
 cloud1 -0- cloud2
 cloud1 -0)- cloud3
 cloud1 -(0- cloud4
 cloud1 -(0)- cloud5

 @enduml

 or another example:

 @startuml
 actor foo1
 actor foo2
 foo1 <-0-> foo2
 foo1 <-(0)-> foo2
 
 (ac1) -le(0)-> left1
 ac1 -ri(0)-> right1
 ac1 .up(0).> up1
 ac1 ~up(0)~> up2
 ac1 -do(0)-> down1
 ac1 -do(0)-> down2
 
 actor1 -0)- actor2
 
 component comp1
 component comp2
 comp1 *-0)-+ comp2
 [comp3] <-->> [comp4]
 @enduml

 [Ref. QA-1736]
****** Change arrow color and style 
 You can change the color of individual arrows using the following notation: [#color].

 @startuml
 node foo
 foo --> bar
 foo -[#red]-> bar1
 foo -[#green]-> bar2
 foo -[#blue]-> bar3
 foo -[#blue;#yellow;#green]-> bar4
 @enduml

 Then you can change color and style of individual arrows using the following notation:

		 old method [#color;style]

 @startuml
 node foo
 foo --> bar
 foo -[#red;bold]-> bar1                  : <color:red>[#red;bold]
 foo -[#green;dashed]-> bar2              : <color:green>[#green;dashed]
 foo -[#blue;dotted]-> bar3               : <color:blue>[#blue;dotted]
 foo -[#blue;#yellow;#green;plain]-> bar4 : [#blue;#yellow;#green;plain]
 @enduml

		 new method #color;line.[bold|dashed|dotted];text:color

 @startuml
 node foo
 foo --> bar : normal
 foo --> bar1 #line:red;line.bold;text:red  : red bold
 foo --> bar2 #green;line.dashed;text:green : green dashed 
 foo --> bar3 #blue;line.dotted;text:blue   : blue dotted
 @enduml

 [See similar feature on class diagram]
****** Nestable elements 
 Here are the nestable elements:

 @startuml
 artifact artifact {
 }
 card card {
 }
 cloud cloud {
 }
 component component {
 }
 database database {
 }
 file file {
 }
 folder folder {
 }
 frame frame {
 }
 hexagon hexagon {
 }
 node node {
 }
 package package {
 }
 queue queue {
 }
 rectangle rectangle {
 }
 stack stack {
 }
 storage storage {
 }
 @enduml
****** Packages and nested elements 
 Example with one level

 @startuml
 artifact    artifactVeryLOOOOOOOOOOOOOOOOOOOg    as "artifact" {
 file f1
 }
 card        cardVeryLOOOOOOOOOOOOOOOOOOOg        as "card" {
 file f2
 }
 cloud       cloudVeryLOOOOOOOOOOOOOOOOOOOg       as "cloud" {
 file f3
 }
 component   componentVeryLOOOOOOOOOOOOOOOOOOOg   as "component" {
 file f4
 }
 database    databaseVeryLOOOOOOOOOOOOOOOOOOOg    as "database" {
 file f5
 }
 file        fileVeryLOOOOOOOOOOOOOOOOOOOg        as "file" {
 file f6
 }
 folder      folderVeryLOOOOOOOOOOOOOOOOOOOg      as "folder" {
 file f7
 }
 frame       frameVeryLOOOOOOOOOOOOOOOOOOOg       as "frame" {
 file f8
 }
 hexagon     hexagonVeryLOOOOOOOOOOOOOOOOOOOg     as "hexagon" {
 file f9
 }
 node        nodeVeryLOOOOOOOOOOOOOOOOOOOg        as "node" {
 file f10
 }
 package     packageVeryLOOOOOOOOOOOOOOOOOOOg     as "package" {
 file f11
 }
 queue       queueVeryLOOOOOOOOOOOOOOOOOOOg       as "queue" {
 file f12
 }
 rectangle   rectangleVeryLOOOOOOOOOOOOOOOOOOOg   as "rectangle" {
 file f13
 }
 stack       stackVeryLOOOOOOOOOOOOOOOOOOOg       as "stack" {
 file f14
 }
 storage     storageVeryLOOOOOOOOOOOOOOOOOOOg     as "storage" {
 file f15
 }
 @enduml

 Other example

 @startuml
 artifact Foo1 {
	 folder Foo2
 }

 folder Foo3 {
	 artifact Foo4
 }

 frame Foo5 {
	 database Foo6
 }

 cloud vpc {
	 node ec2 {
		 stack stack
	 }
 }

 @enduml

 @startuml
 node Foo1 {
	cloud Foo2
 }

 cloud Foo3 {
	 frame Foo4
 }

 database Foo5  {
	 storage Foo6
 }

 storage Foo7 {
	 storage Foo8
 }
 @enduml

 Full nesting

 Here is all the nested elements:

		 by alphabetical order:

 @startuml
 artifact artifact {
 card card {
 cloud cloud {
 component component {
 database database {
 file file {
 folder folder {
 frame frame {
 hexagon hexagon {
 node node {
 package package {
 queue queue {
 rectangle rectangle {
 stack stack {
 storage storage {
 }
 }
 }
 }
 }
 }
 }
 }
 }
 }
 }
 }
 }
 }
 }
 @enduml

		 or reverse alphabetical order

 @startuml
 storage storage {
 stack stack {
 rectangle rectangle {
 queue queue {
 package package {
 node node {
 hexagon hexagon {
 frame frame {
 folder folder {
 file file {
 database database {
 component component {
 cloud cloud {
 card card {
 artifact artifact {
 }
 }
 }
 }
 }
 }
 }
 }
 }
 }
 }
 }
 }
 }
 }
 @enduml
******  Alias 
 Simple alias with as

 @startuml
 node Node1 as n1
 node "Node 2" as n2
 file f1 as "File 1"
 cloud c1 as "this
 is
 a
 cloud"
 cloud c2 [this
 is
 another
 cloud]

 n1 -> n2
 n1 --> f1
 f1 -> c1
 c1 -> c2
 @enduml

 Examples of long alias

 @startuml
 actor        "actor"       as actorVeryLOOOOOOOOOOOOOOOOOOOg
 agent        "agent"       as agentVeryLOOOOOOOOOOOOOOOOOOOg
 artifact     "artifact"    as artifactVeryLOOOOOOOOOOOOOOOOOOOg
 boundary     "boundary"    as boundaryVeryLOOOOOOOOOOOOOOOOOOOg
 card         "card"        as cardVeryLOOOOOOOOOOOOOOOOOOOg
 cloud        "cloud"       as cloudVeryLOOOOOOOOOOOOOOOOOOOg
 collections  "collections" as collectionsVeryLOOOOOOOOOOOOOOOOOOOg
 component    "component"   as componentVeryLOOOOOOOOOOOOOOOOOOOg
 control      "control"     as controlVeryLOOOOOOOOOOOOOOOOOOOg
 database     "database"    as databaseVeryLOOOOOOOOOOOOOOOOOOOg
 entity       "entity"      as entityVeryLOOOOOOOOOOOOOOOOOOOg
 file         "file"        as fileVeryLOOOOOOOOOOOOOOOOOOOg
 folder       "folder"      as folderVeryLOOOOOOOOOOOOOOOOOOOg
 frame        "frame"       as frameVeryLOOOOOOOOOOOOOOOOOOOg
 hexagon      "hexagon"     as hexagonVeryLOOOOOOOOOOOOOOOOOOOg
 interface    "interface"   as interfaceVeryLOOOOOOOOOOOOOOOOOOOg
 label        "label"       as labelVeryLOOOOOOOOOOOOOOOOOOOg
 node         "node"        as nodeVeryLOOOOOOOOOOOOOOOOOOOg
 package      "package"     as packageVeryLOOOOOOOOOOOOOOOOOOOg
 queue        "queue"       as queueVeryLOOOOOOOOOOOOOOOOOOOg
 stack        "stack"       as stackVeryLOOOOOOOOOOOOOOOOOOOg
 rectangle    "rectangle"   as rectangleVeryLOOOOOOOOOOOOOOOOOOOg
 storage      "storage"     as storageVeryLOOOOOOOOOOOOOOOOOOOg
 usecase      "usecase"     as usecaseVeryLOOOOOOOOOOOOOOOOOOOg
 @enduml

 @startuml
 actor       actorVeryLOOOOOOOOOOOOOOOOOOOg       as "actor"
 agent       agentVeryLOOOOOOOOOOOOOOOOOOOg       as "agent"
 artifact    artifactVeryLOOOOOOOOOOOOOOOOOOOg    as "artifact"
 boundary    boundaryVeryLOOOOOOOOOOOOOOOOOOOg    as "boundary"
 card        cardVeryLOOOOOOOOOOOOOOOOOOOg        as "card"
 cloud       cloudVeryLOOOOOOOOOOOOOOOOOOOg       as "cloud"
 collections collectionsVeryLOOOOOOOOOOOOOOOOOOOg as "collections"
 component   componentVeryLOOOOOOOOOOOOOOOOOOOg   as "component"
 control     controlVeryLOOOOOOOOOOOOOOOOOOOg     as "control"
 database    databaseVeryLOOOOOOOOOOOOOOOOOOOg    as "database"
 entity      entityVeryLOOOOOOOOOOOOOOOOOOOg      as "entity"
 file        fileVeryLOOOOOOOOOOOOOOOOOOOg        as "file"
 folder      folderVeryLOOOOOOOOOOOOOOOOOOOg      as "folder"
 frame       frameVeryLOOOOOOOOOOOOOOOOOOOg       as "frame"
 hexagon     hexagonVeryLOOOOOOOOOOOOOOOOOOOg     as "hexagon"
 interface   interfaceVeryLOOOOOOOOOOOOOOOOOOOg   as "interface"
 label       labelVeryLOOOOOOOOOOOOOOOOOOOg       as "label"
 node        nodeVeryLOOOOOOOOOOOOOOOOOOOg        as "node"
 package     packageVeryLOOOOOOOOOOOOOOOOOOOg     as "package"
 queue       queueVeryLOOOOOOOOOOOOOOOOOOOg       as "queue"
 stack       stackVeryLOOOOOOOOOOOOOOOOOOOg       as "stack"
 rectangle   rectangleVeryLOOOOOOOOOOOOOOOOOOOg   as "rectangle"
 storage     storageVeryLOOOOOOOOOOOOOOOOOOOg     as "storage"
 usecase     usecaseVeryLOOOOOOOOOOOOOOOOOOOg     as "usecase"
 @enduml

 [Ref. QA-12082]
******  Type of arrow head or '0' arrow 
 Type of arrow head

 @startuml
 left to right direction

 f13 --0   b13 : ""--0""
 f12 --@   b12 : ""--@""
 f11 --:|> b11 : ""--:|>""
 f10 --||> b10 : ""--||>""
 f9  --|>  b9  : ""--|>""
 f8  --^   b8  : ""--^ ""
 f7  --\\  b7  : ""--\\\\""
 f6  --#   b6  : ""--# ""
 f5  --+   b5  : ""--+ ""
 f4  --o   b4  : ""--o ""
 f3  --*   b3  : ""--* ""
 f2  -->>  b2  : ""-->>""
 f1  -->   b1  : ""--> ""
 f0  --    b0  : ""--  ""
 @enduml

 Type of '0' arrow or circle arrow

 @startuml
 left to right direction

 f10 0--0 b10 : "" 0--0 ""
 f9 )--(  b9  : "" )--(""
 f8 0)--(0 b8 : "" 0)--(0""
 f7 0)--  b7  : "" 0)-- ""
 f6 -0)-  b6  : "" -0)-\n ""
 f5 -(0)- b5  : "" -(0)-\n""
 f4 -(0-  b4  : "" -(0-\n ""
 f3 --(0  b3  : "" --(0 ""
 f2 --(   b2  : "" --(  ""
 f1 --0   b1  : "" --0  ""
 @enduml
******  Round corner 
 @startuml
 skinparam rectangle {
		 roundCorner<<Concept>> 25
 }

 rectangle "Concept Model" <<Concept>> {
 rectangle "Example 1" <<Concept>> as ex1
 rectangle "Another rectangle"
 }
 @enduml
******  Specific SkinParameter 

 roundCorner

 @startuml
 skinparam roundCorner 15
 actor actor
 agent agent
 artifact artifact
 boundary boundary
 card card
 circle circle
 cloud cloud
 collections collections
 component component
 control control
 database database
 entity entity
 file file
 folder folder
 frame frame
 hexagon hexagon
 interface interface
 label label
 node node
 package package
 queue queue
 rectangle rectangle
 stack stack
 storage storage
 usecase usecase
 @enduml
***** Timing Diagram
https://plantuml.com/timing-diagram
This is still under construction. You can propose new features if you need some.
****** Declaring participant 

You declare participant using the following keywords, depending on how you want them to be drawn.

    concise: A simplified signal designed to show the movement of data (great for messages).
    robust: A complex line signal designed to show the transition from one state to another (can have many states).
    clock: A 'clocked' signal that repeatedly transitions from high to low
    binary: A specific signal restricted to only 2 states (binary).

You define state change using the @ notation, and the is verb.

@startuml
robust "Web Browser" as WB
concise "Web User" as WU

@0
WU is Idle
WB is Idle

@100
WU is Waiting
WB is Processing

@300
WB is Waiting
@enduml
****** Binary and Clock 
It's also possible to have binary and clock signal, using the following keywords:

    binary
    clock

@startuml
clock clk with period 1
binary "Enable" as EN

@0
EN is low

@5
EN is high

@10
EN is low
@enduml
****** Adding message 
You can add message using the following syntax.

@startuml
robust "Web Browser" as WB
concise "Web User" as WU

@0
WU is Idle
WB is Idle

@100
WU -> WB : URL
WU is Waiting
WB is Processing

@300
WB is Waiting
@enduml
****** Relative time 
It is possible to use relative time with @.

@startuml
robust "DNS Resolver" as DNS
robust "Web Browser" as WB
concise "Web User" as WU

@0
WU is Idle
WB is Idle
DNS is Idle

@+100
WU -> WB : URL
WU is Waiting
WB is Processing

@+200
WB is Waiting
WB -> DNS@+50 : Resolve URL

@+100
DNS is Processing

@+300
DNS is Idle
@enduml
****** Anchor Points 
Instead of using absolute or relative time on an absolute time you can define a time as an anchor point by using the as keyword and starting the name with a :.

@XX as :<anchor point name>

@startuml
clock clk with period 1
binary "enable" as EN
concise "dataBus" as db

@0 as :start
@5 as :en_high 
@10 as :en_low


@:start
EN is low
db is "0x0000"

@:en_high
EN is high

@:en_low
EN is low

@:en_high-2
db is "0xf23a"

@:en_high+6
db is "0x0000"
@enduml
****** Participant oriented 
Rather than declare the diagram in chronological order, you can define it by participant.

@startuml
robust "Web Browser" as WB
concise "Web User" as WU

@WB
0 is idle
+200 is Proc.
+100 is Waiting

@WU
0 is Waiting
+500 is ok
@enduml
****** Setting scale pecific scale.
@startuml
concise "Web User" as WU
scale 100 as 50 pixels

@WU
0 is Waiting
+500 is ok
@enduml
****** Initial state n inital state.
@startuml
robust "Web Browser" as WB
concise "Web User" as WU

WB is Initializing
WU is Absent

@WB
0 is idle
+200 is Processing
+100 is Waiting

@WU
0 is Waiting
+500 is ok
@enduml
****** Intricated state 
A signal could be in some undefined state.

@startuml
robust "Signal1" as S1
robust "Signal2" as S2
S1 has 0,1,2,hello
S2 has 0,1,2
@0
S1 is 0
S2 is 0
@100
S1 is {0,1} #SlateGrey
S2 is {0,1}
@200
S1 is 1
S2 is 0
@300
S1 is hello
S2 is {0,2}
@enduml
****** Hidden state 
It is also possible to hide some state.

@startuml
concise "Web User" as WU

@0
WU is {-}

@100
WU is A1

@200
WU is {-}

@300
WU is {hidden}

@400
WU is A3

@500
WU is {-}
@enduml
****** Hide time axis 
It is possible to hide time axis.

@startuml
hide time-axis
concise "Web User" as WU

WU is Absent

@WU
0 is Waiting
+500 is ok
@enduml
****** Using Time and Date 
It is possible to use time or date.

@startuml
robust "Web Browser" as WB
concise "Web User" as WU

@2019/07/02
WU is Idle
WB is Idle

@2019/07/04
WU is Waiting : some note
WB is Processing : some other note

@2019/07/05
WB is Waiting
@enduml

@startuml
robust "Web Browser" as WB
concise "Web User" as WU

@1:15:00
WU is Idle
WB is Idle

@1:16:30
WU is Waiting : some note
WB is Processing : some other note

@1:17:30
WB is Waiting
@enduml
****** Adding constraint isplay time constraints on the diagrams.
@startuml
robust "Web Browser" as WB
concise "Web User" as WU

WB is Initializing
WU is Absent

@WB
0 is idle
+200 is Processing
+100 is Waiting
WB@0 <-> @50 : {50 ms lag}

@WU
0 is Waiting
+500 is ok
@200 <-> @+150 : {150 ms}
@enduml
****** Highlighted period 
You can higlight a part of diagram.

@startuml
robust "Web Browser" as WB
concise "Web User" as WU

@0
WU is Idle
WB is Idle

@100
WU -> WB : URL
WU is Waiting #LightCyan;line:Aqua

@200
WB is Proc.

@300
WU -> WB@350 : URL2
WB is Waiting

@+200
WU is ok

@+200
WB is Idle

highlight 200 to 450 #Gold;line:DimGrey : This is my caption
@enduml
****** Adding texts 
You can optionally add a title, a header, a footer, a legend and a caption:

@startuml
Title This is my title
header: some header
footer: some footer
legend
Some legend
end legend
caption some caption

robust "Web Browser" as WB
concise "Web User" as WU

@0
WU is Idle
WB is Idle

@100
WU is Waiting
WB is Processing

@300
WB is Waiting
@enduml
****** Complete example 
Thanks to Adam Rosien for this example.

@startuml
concise "Client" as Client
concise "Server" as Server
concise "Response freshness" as Cache

Server is idle
Client is idle

@Client
0 is send
Client -> Server@+25 : GET
+25 is await
+75 is recv
+25 is idle
+25 is send
Client -> Server@+25 : GET\nIf-Modified-Since: 150
+25 is await
+50 is recv
+25 is idle
@100 <-> @275 : no need to re-request from server

@Server
25 is recv
+25 is work
+25 is send
Server -> Client@+25 : 200 OK\nExpires: 275
+25 is idle
+75 is recv
+25 is send
Server -> Client@+25 : 304 Not Modified
+25 is idle

@Cache
75 is fresh
+200 is stale
@enduml
****** Digital Example 
@startuml
scale 5 as 150 pixels

clock clk with period 1
binary "enable" as en
binary "R/W" as rw
binary "data Valid" as dv
concise "dataBus" as db
concise "address bus" as addr

@6 as :write_beg
@10 as :write_end

@15 as :read_beg
@19 as :read_end


@0
en is low
db is "0x0"
addr is "0x03f"
rw is low
dv is 0

@:write_beg-3
 en is high
@:write_beg-2
 db is "0xDEADBEEF"
@:write_beg-1
dv is 1
@:write_beg
rw is high


@:write_end
rw is low
dv is low
@:write_end+1
rw is low
db is "0x0"
addr is "0x23"

@12
dv is high
@13 
db is "0xFFFF"

@20
en is low
dv is low
@21 
db is "0x0"

highlight :write_beg to :write_end #Gold:Write
highlight :read_beg to :read_end #lightBlue:Read

db@:write_beg-1 <-> @:write_end : setup time
db@:write_beg-1 -> addr@:write_end+1 : hold
@enduml
****** Adding color 
You can add color.

@startuml
concise "LR" as LR
concise "ST" as ST

LR is AtPlace #palegreen
ST is AtLoad #gray

@LR
0 is Lowering
100 is Lowered #pink
350 is Releasing
 
@ST
200 is Moving
@enduml
***** Network diagram (nwdiag) 
****** https://plantuml.com/nwdiag
nwdiag has been created by Takeshi Komiya and allows to quickly draw network diagrams. So we thank him for his creation!

Since the syntax is clear and simple, this has been integrated within PlantUML. We reuse here the examples that Takeshi has documented.

Simple
******  diagram 
@startuml
nwdiag {
  network dmz {
      address = "210.x.x.x/24"

      web01 [address = "210.x.x.1"];
      web02 [address = "210.x.x.2"];
  }
  network internal {
      address = "172.x.x.x/24";

      web01 [address = "172.x.x.1"];
      web02 [address = "172.x.x.2"];
      db01;
      db02;
  }
}
@enduml
****** Define multiple addresses 
@startuml
nwdiag {
  network dmz {
      address = "210.x.x.x/24"

      // set multiple addresses (using comma)
      web01 [address = "210.x.x.1, 210.x.x.20"];
      web02 [address = "210.x.x.2"];
  }
  network internal {
      address = "172.x.x.x/24";

      web01 [address = "172.x.x.1"];
      web02 [address = "172.x.x.2"];
      db01;
      db02;
  }
}
@enduml
****** Grouping nodes 
Define group inside network definitions

@startuml
nwdiag {
  network Sample_front {
    address = "192.168.10.0/24";

    // define group
    group web {
      web01 [address = ".1"];
      web02 [address = ".2"];
    }
  }
  network Sample_back {
    address = "192.168.20.0/24";
    web01 [address = ".1"];
    web02 [address = ".2"];
    db01 [address = ".101"];
    db02 [address = ".102"];

    // define network using defined nodes
    group db {
      db01;
      db02;
    }
  }
}
@enduml

Define group at outside network definitions

@startuml
nwdiag {
  // define group at outside network definitions
  group {
    color = "#FFAAAA";

    web01;
    web02;
    db01;
  }

  network dmz {
    web01;
    web02;
  }
  network internal {
    web01;
    web02;
    db01;
    db02;
  }
}
@enduml

Define several groups on same network

@startuml
nwdiag {
  group {
    color = "#FFaaaa";
    web01;
    db01;
  }
  group {
    color = "#aaaaFF";
    web02;
    db02;
  }
  network dmz {
      address = "210.x.x.x/24"

      web01 [address = "210.x.x.1"];
      web02 [address = "210.x.x.2"];
  }
  network internal {
      address = "172.x.x.x/24";

      web01 [address = "172.x.x.1"];
      web02 [address = "172.x.x.2"];
      db01 ;
      db02 ;
  }
}
@enduml

[Ref. QA-12663]
****** Extended Syntax (for network or group) 
Network

For network or network's component, you can add or change:

    address (separated by comma ,);
    color;
    description;
    shape.

@startuml
nwdiag {
  network Sample_front {
    address = "192.168.10.0/24"
    color = "red"

    // define group
    group web {
      web01 [address = ".1", shape = "node"]
      web02 [address = ".2"]
    }
  }
  network Sample_back {
    address = "192.168.20.0/24"
    color = "palegreen"
    web01 [address = ".1"]
    web02 [address = ".2"]
    db01 [address = ".101", shape = database ]
    db02 [address = ".102"]

    // define network using defined nodes
    group db {
      db01;
      db02;
    }
  }
}
@enduml

Group

For group, you can add or change:

    color;
    description.

@startuml
nwdiag {
  group {
    color = "#CCFFCC";
    description = "Long group label";

    web01;
    web02;
    db01;
  }

  network dmz {
    web01;
    web02;
  }
  network internal {
    web01;
    web02;
    db01 [address = ".101", shape = database];
  }
}
@enduml

[Ref. QA-12056]
****** Using Sprite on nwdiag 
You can use all the Sprite of all Standard Library or other.

@startuml
!include <office/Servers/application_server>
!include <office/Servers/database_server>

nwdiag {
  network dmz {
      address = "210.x.x.x/24"

      // set multiple addresses (using comma)
      web01 [address = "210.x.x.1, 210.x.x.20",  description = "<$application_server>\n web01"]
      web02 [address = "210.x.x.2",  description = "<$application_server>\n web02"];
  }
  network internal {
      address = "172.x.x.x/24";

      web01 [address = "172.x.x.1"];
      web02 [address = "172.x.x.2"];
      db01 [address = "172.x.x.100",  description = "<$database_server>\n db01"];
      db02 [address = "172.x.x.101",  description = "<$database_server>\n db02"];
  }
}
@enduml

[Ref. QA-11862]
****** Using OpenIconic on nwdiag 
You can also use the icons from OpenIconic on the description.

@startuml

nwdiag {
  network dmz {
      address = "210.x.x.x/24"

      user [description = "<&person*5>\n user1"];
      // set multiple addresses (using comma)
      web01 [address = "210.x.x.1, 210.x.x.20",  description = "<&cog*4>\nweb01"]
      web02 [address = "210.x.x.2",  description = "<&cog*4>\nweb02"];

  }
  network internal {
      address = "172.x.x.x/24";

      web01 [address = "172.x.x.1"];
      web02 [address = "172.x.x.2"];
      db01 [address = "172.x.x.100",  description = "<&spreadsheet*4>\n db01"];
      db02 [address = "172.x.x.101",  description = "<&spreadsheet*4>\n db02"];
      ptr  [address = "172.x.x.110",  description = "<&print*4>\n ptr01"];
  }
}
@enduml
****** Same nodes on more than two networks 
You can use same nodes on different networks (more than two networks); nwdiag use in this case 'jump line' over networks.

@startuml
nwdiag {
  // define group at outside network definitions
  group {
    color = "#7777FF";

    web01;
    web02;
    db01;
  }

  network dmz {
    color = "pink"

    web01;
    web02;
  }

  network internal {
    web01;
    web02;
    db01 [shape = database ];
  }

  network internal2 {
    color = "LightBlue";

    web01;
    web02;
    db01;
  }

}
@enduml
****** Peer networks 
@startuml
nwdiag {
  inet [shape = cloud];
  inet -- router;

  network {
    router;
    web01;
    web02;
  }
}
@enduml
****** Peer networks and group 
Without group

@startuml
nwdiag {
    internet [ shape = cloud];
    internet -- router;

    network proxy {
        router;
        app;
    }
    network default {
    	app;
        db;
    }
}
@enduml

Group on first

@startuml
nwdiag {
    internet [ shape = cloud];
    internet -- router;

    group {
      color = "pink";
      app;
      db;
    }

    network proxy {
        router;
        app;
    }

    network default {
    	app;
        db;
    }
}
@enduml

Group on second

@startuml
nwdiag {
    internet [ shape = cloud];
    internet -- router;

    network proxy {
        router;
        app;
    }

    group {
      color = "pink";
      app;
      db;
    }

    network default {
    	app;
        db;
    }
}
@enduml

FIXME
Why the line on proxy for 'db'? ('db' must be only on 'default network') [See example without group]

Group on third

@startuml
nwdiag {
    internet [ shape = cloud];
    internet -- router;

    network proxy {
        router;
        app;
    }
    network default {
    	app;
        db;
    }
    group {
      color = "pink";
      app;
      db;
    }
}
@enduml

FIXME
[Ref. Issue#408 and QA-12655]Not totally fixed
****** Add title, caption, header, footer or legend on network diagram 
@startuml

header some header

footer some footer

title My title

nwdiag {
  network inet {
      web01 [shape = cloud]
  }
}

legend
The legend
end legend

caption This is caption
@enduml

[Ref. QA-11303 and Common commands]
****** Change width of the networks 
You can change the width of the networks, especially in order to have the same full width for only some or all networks.

Here are some examples, with all the possibilities:

    without

@startuml
nwdiag {
  network NETWORK_BASE {
   dev_A   [address = "dev_A" ]
   dev_B [address = "dev_B" ]
  }
  network IntNET1 {
   dev_B [address = "dev_B1" ]
   dev_M [address = "dev_M1" ]
  }
  network IntNET2 {
   dev_B [address = "dev_B2" ]
   dev_M [address = "dev_M2" ]
 }
}
@enduml

    only the first

@startuml
nwdiag {
  network NETWORK_BASE {
   width = full
   dev_A   [address = "dev_A" ]
   dev_B [address = "dev_B" ]
  }
  network IntNET1 {
   dev_B [address = "dev_B1" ]
   dev_M [address = "dev_M1" ]
  }
  network IntNET2 {
   dev_B [address = "dev_B2" ]
   dev_M [address = "dev_M2" ]
 }
}
@enduml

    the first and the second

@startuml
nwdiag {
  network NETWORK_BASE {
   width = full
   dev_A   [address = "dev_A" ]
   dev_B [address = "dev_B" ]
  }
  network IntNET1 {
   width = full
   dev_B [address = "dev_B1" ]
   dev_M [address = "dev_M1" ]
  }
  network IntNET2 {
   dev_B [address = "dev_B2" ]
   dev_M [address = "dev_M2" ]
 }
}
@enduml

    all the network (with same full width)

@startuml
nwdiag {
  network NETWORK_BASE {
   width = full
   dev_A   [address = "dev_A" ]
   dev_B [address = "dev_B" ]
  }
  network IntNET1 {
   width = full
   dev_B [address = "dev_B1" ]
   dev_M [address = "dev_M1" ]
  }
  network IntNET2 {
   width = full
   dev_B [address = "dev_B2" ]
   dev_M [address = "dev_M2" ]
 }
}
@enduml
***** Archimate Diagram 
****** https://plantuml.com/archimate-diagram
This is only a proposal and subject to change.

You are very welcome to create a new discussion on this future syntax. Your feedbacks, ideas and suggestions help us to find the right solution.
****** Archimate keyword 
You can use the archimate keyword to define an element. Stereotype can optionally specify an additional icon. Some colors (Business, Application, Motivation, Strategy, Technology, Physical, Implementation) are also available.

@startuml
archimate #Technology "VPN Server" as vpnServerA <<technology-device>>

rectangle GO #lightgreen
rectangle STOP #red
rectangle WAIT #orange
@enduml
****** Defining Junctions 
Using the circle keyword and the preprocessor, you can also create junctions.

@startuml
!define Junction_Or circle #black
!define Junction_And circle #whitesmoke

Junction_And JunctionAnd
Junction_Or JunctionOr

archimate #Technology "VPN Server" as vpnServerA <<technology-device>>

rectangle GO #lightgreen
rectangle STOP #red
rectangle WAIT #orange
GO -up-> JunctionOr
STOP -up-> JunctionOr
STOP -down-> JunctionAnd
WAIT -down-> JunctionAnd
@enduml
****** Example 1 

@startuml
skinparam rectangle<<behavior>> {
	roundCorner 25
}
sprite $bProcess jar:archimate/business-process
sprite $aService jar:archimate/application-service
sprite $aComponent jar:archimate/application-component

rectangle "Handle claim"  as HC <<$bProcess>><<behavior>> #Business
rectangle "Capture Information"  as CI <<$bProcess>><<behavior>> #Business
rectangle "Notify\nAdditional Stakeholders" as NAS <<$bProcess>><<behavior>> #Business
rectangle "Validate" as V <<$bProcess>><<behavior>> #Business
rectangle "Investigate" as I <<$bProcess>><<behavior>> #Business
rectangle "Pay" as P <<$bProcess>><<behavior>> #Business

HC *-down- CI
HC *-down- NAS
HC *-down- V
HC *-down- I
HC *-down- P

CI -right->> NAS
NAS -right->> V
V -right->> I
I -right->> P

rectangle "Scanning" as scanning <<$aService>><<behavior>> #Application
rectangle "Customer admnistration" as customerAdministration <<$aService>><<behavior>> #Application
rectangle "Claims admnistration" as claimsAdministration <<$aService>><<behavior>> #Application
rectangle Printing <<$aService>><<behavior>> #Application
rectangle Payment <<$aService>><<behavior>> #Application

scanning -up-> CI
customerAdministration  -up-> CI
claimsAdministration -up-> NAS
claimsAdministration -up-> V
claimsAdministration -up-> I
Payment -up-> P

Printing -up-> V
Printing -up-> P

rectangle "Document\nManagement\nSystem" as DMS <<$aComponent>> #Application
rectangle "General\nCRM\nSystem" as CRM <<$aComponent>>  #Application
rectangle "Home & Away\nPolicy\nAdministration" as HAPA <<$aComponent>> #Application
rectangle "Home & Away\nFinancial\nAdministration" as HFPA <<$aComponent>>  #Application

DMS .up.|> scanning
DMS .up.|> Printing
CRM .up.|> customerAdministration
HAPA .up.|> claimsAdministration
HFPA .up.|> Payment

legend left
Example from the "Archisurance case study" (OpenGroup).
See
====
<$bProcess> :business process
====
<$aService> : application service
====
<$aComponent> : application component
endlegend
@enduml
****** Example 2 
@startuml
skinparam roundcorner 25
rectangle "Capture Information"  as CI <<$archimate/business-process>> #Business
@enduml
****** List possible sprites 

You can list all possible sprites for Archimate using the following diagram:

@startuml
listsprite
@enduml
****** ArchiMate Macros 
Archimate Macros and Library

A list of Archimate macros are defined Archimate-PlantUML here which simplifies the creation of ArchiMate diagrams, and Archimate is natively on the Standard Library of PlantUML.

Archimate elements
Using the macros, creation of ArchiMate elements are done using the following format: Category_ElementName(nameOfTheElement, "description")

For example:

    To define a Stakeholder element, which is part of Motivation category, the syntax will be Motivation_Stakeholder(StakeholderElement, "Stakeholder Description"):

@startuml
!include <archimate/Archimate>
Motivation_Stakeholder(StakeholderElement, "Stakeholder Description")
@enduml

    To define a Business Service element, Business_Service(BService, "Business Service"):

@startuml
!include <archimate/Archimate>
Business_Service(BService, "Business Service")
@enduml

Archimate relationships
The ArchiMate relationships are defined with the following pattern: Rel_RelationType(fromElement, toElement, "description") and to define the direction/orientation of the two elements: Rel_RelationType_Direction(fromElement, toElement, "description")

The RelationTypes supported are:

    Access
    Aggregation
    Assignment
    Association
    Composition
    Flow
    Influence
    Realization
    Serving
    Specialization
    Triggering

The Directions supported are:

    Up
    Down
    Left
    Right

For example:

    To denote a composition relationship between the Stakeholder and Business Service defined above, the syntax will be

Rel_Composition(StakeholderElement, BService, "Description for the relationship")

@startuml
!include <archimate/Archimate>
Motivation_Stakeholder(StakeholderElement, "Stakeholder Description")
Business_Service(BService, "Business Service")
Rel_Composition(StakeholderElement, BService, "Description for the relationship")
@enduml

    Unordered List ItemTo orient the two elements in top - down position, the syntax will be

Rel_Composition_Down(StakeholderElement, BService, "Description for the relationship")

@startuml
!include <archimate/Archimate>
Motivation_Stakeholder(StakeholderElement, "Stakeholder Description")
Business_Service(BService, "Business Service")
Rel_Composition_Down(StakeholderElement, BService, "Description for the relationship")
@enduml

Appendice: Examples of all Archimate RelationTypes

@startuml
left to right direction
!include <archimate/Archimate>
Rel_Triggering(i15, j15, Triggering)
Rel_Specialization(i14, j14, Specialization)
Rel_Serving(i13, j13, Serving)
Rel_Realization(i12, j12, Realization)
Rel_Influence(i11, j11, Influence)
Rel_Flow(i10, j10, Flow)
Rel_Composition(i9, j9, Composition)
'Rel_Association_dir(i8, j8, Association_dir)
Rel_Association(i7, j7, Association)
Rel_Assignment(i6, j6, Assignment)
Rel_Aggregation(i5, j5, Aggregation)
Rel_Access_w(i4, j4, Access_w)
Rel_Access_rw(i3, j3, Access_rw)
Rel_Access_r(i2, j2, Access_r)
Rel_Access(i1, j1, Access)
@enduml
***** Gantt Diagram 
****** https://plantuml.com/gantt-diagram
The Gantt is described in natural language, using very simple sentences (subject-verb-complement).
****** Declaring tasks 

Tasks defined using square bracket.

Duration

Their durations are defined using the last verb:

@startgantt
[Prototype design] lasts 15 days
[Test prototype] lasts 10 days
-- All example --
[Task 1 (1 day)] lasts 1 day
[T2 (5 days)] lasts 5 days
[T3 (1 week)] lasts 1 week
[T4 (1 week and 4 days)] lasts 1 week and 4 days
[T5 (2 weeks)] lasts 2 weeks
@endgantt

Start

Their beginning are defined using the start verb:

@startuml
[Prototype design] lasts 15 days
[Test prototype] lasts 10 days

Project starts 2020-07-01
[Prototype design] starts 2020-07-01
[Test prototype] starts 2020-07-16
@enduml

End

Their ending are defined using the end verb:

@startuml
[Prototype design] lasts 15 days
[Test prototype] lasts 10 days

Project starts 2020-07-01
[Prototype design] ends 2020-07-15
[Test prototype] ends 2020-07-25

@enduml

Start/End

It is possible to define both absolutely, by specifying dates:

@startuml

Project starts 2020-07-01
[Prototype design] starts 2020-07-01
[Test prototype] starts 2020-07-16
[Prototype design] ends 2020-07-15
[Test prototype] ends 2020-07-25

@enduml
****** One-line declaration (with the and conjunction) 

It is possible to combine declaration on one line with the and conjunction.

@startuml
Project starts 2020-07-01
[Prototype design] starts 2020-07-01 and ends 2020-07-15
[Test prototype] starts 2020-07-16 and lasts 10 days
@enduml
****** Adding constraints onstraints between tasks.

@startgantt
[Prototype design] lasts 15 days
[Test prototype] lasts 10 days
[Test prototype] starts at [Prototype design]'s end
@endgantt

@startgantt
[Prototype design] lasts 10 days
[Code prototype] lasts 10 days
[Write tests] lasts 5 days
[Code prototype] starts at [Prototype design]'s end
[Write tests] starts at [Code prototype]'s start
@endgantt
****** Short names efine short name for tasks with the as keyword.

@startgantt
[Prototype design] as [D] lasts 15 days
[Test prototype] as [T] lasts 10 days
[T] starts at [D]'s end
@endgantt
****** Customize colors ustomize colors with is colored in.

@startgantt
[Prototype design] lasts 13 days
[Test prototype] lasts 4 days
[Test prototype] starts at [Prototype design]'s end
[Prototype design] is colored in Fuchsia/FireBrick
[Test prototype] is colored in GreenYellow/Green
@endgantt
****** Completion status ompletion status of a task.

@startgantt
[foo] lasts 21 days
[foo] is 40% completed
[bar] lasts 30 days and is 10% complete
@endgantt
****** Milestone ilestones using the happen verb.

Relative milestone (use of constraints)

@startgantt
[Test prototype] lasts 10 days
[Prototype completed] happens at [Test prototype]'s end
[Setup assembly line] lasts 12 days
[Setup assembly line] starts at [Test prototype]'s end
@endgantt

Absolute milestone (use of fixed date)

@startgantt
Project starts 2020-07-01
[Test prototype] lasts 10 days
[Prototype completed] happens 2020-07-10
[Setup assembly line] lasts 12 days
[Setup assembly line] starts at [Test prototype]'s end
@endgantt

Milestone of maximum end of tasks

@startgantt
[Task1] lasts 4 days
then [Task1.1] lasts 4 days
[Task1.2] starts at [Task1]'s end and lasts 7 days

[Task2] lasts 5 days
then [Task2.1] lasts 4 days

[MaxTaskEnd] happens at [Task1.1]'s end
[MaxTaskEnd] happens at [Task1.2]'s end
[MaxTaskEnd] happens at [Task2.1]'s end

@endgantt

[Ref. QA-10764]
****** Hyperlinks yperlinks to tasks.

@startgantt
[task1] lasts 10 days
[task1] links to [[http://plantuml.com]]
@endgantt
****** Calendar pecify a starting date for the whole project. By default, the first task starts at this date.

@startgantt
Project starts the 20th of september 2017
[Prototype design] as [TASK1] lasts 13 days
[TASK1] is colored in Lavender/LightBlue
@endgantt
****** Coloring days 

It is possible to add colors to some days.

@startgantt
Project starts the 2020/09/01 

2020/09/07 is colored in salmon
2020/09/13 to 2020/09/16 are colored in lightblue

[Prototype design] as [TASK1] lasts 22 days
[TASK1] is colored in Lavender/LightBlue
[Prototype completed] happens at [TASK1]'s end
@endgantt
****** Changing scale or very long project, with one of those parameters:

    printscale
    ganttscale
    projectscale

and one of the values:

    daily (by default)
    weekly
    monthly

(See QA-11272, QA-9041 and QA-10948)

Daily (by default)

@startuml
saturday are closed
sunday are closed

Project starts the 1st of january 2021
[Prototype design end] as [TASK1] lasts 19 days
[TASK1] is colored in Lavender/LightBlue
[Testing] lasts 14 days
[TASK1]->[Testing]

2021-01-18 to 2021-01-22 are named [End's committee]
2021-01-18 to 2021-01-22 are colored in salmon 
@enduml

Weekly

@startuml
printscale weekly
saturday are closed
sunday are closed

Project starts the 1st of january 2021
[Prototype design end] as [TASK1] lasts 19 days
[TASK1] is colored in Lavender/LightBlue
[Testing] lasts 14 days
[TASK1]->[Testing]

2021-01-18 to 2021-01-22 are named [End's committee]
2021-01-18 to 2021-01-22 are colored in salmon 
@enduml

@startgantt
printscale weekly
Project starts the 20th of september 2020
[Prototype design] as [TASK1] lasts 130 days
[TASK1] is colored in Lavender/LightBlue
[Testing] lasts 20 days
[TASK1]->[Testing]

2021-01-18 to 2021-01-22 are named [End's committee]
2021-01-18 to 2021-01-22 are colored in salmon 
@endgantt

Monthly

@startgantt
projectscale monthly
Project starts the 20th of september 2020
[Prototype design] as [TASK1] lasts 130 days
[TASK1] is colored in Lavender/LightBlue
[Testing] lasts 20 days
[TASK1]->[Testing]

2021-01-18 to 2021-01-22 are named [End's committee]
2021-01-18 to 2021-01-22 are colored in salmon 
@endgantt
****** Close day o close some day.

@startgantt
project starts the 2018/04/09
saturday are closed
sunday are closed
2018/05/01 is closed
2018/04/17 to 2018/04/19 is closed
[Prototype design] lasts 14 days
[Test prototype] lasts 4 days
[Test prototype] starts at [Prototype design]'s end
[Prototype design] is colored in Fuchsia/FireBrick
[Test prototype] is colored in GreenYellow/Green
@endgantt

Then it is possible to open some closed day.

@startgantt
2020-07-07 to 2020-07-17 is closed
2020-07-13 is open

Project starts the 2020-07-01
[Prototype design] lasts 10 days
Then [Test prototype] lasts 10 days
@endgantt
****** Simplified task succession eyword to denote consecutive tasks.

@startgantt
[Prototype design] lasts 14 days
then [Test prototype] lasts 4 days
then [Deploy prototype] lasts 6 days
@endgantt

You can also use arrow ->

@startgantt
[Prototype design] lasts 14 days
[Build prototype] lasts 4 days
[Prepare test] lasts 6 days
[Prototype design] -> [Build prototype]
[Prototype design] -> [Prepare test]
@endgantt
****** Separator 

You can use -- to separate sets of tasks.

@startgantt
[Task1] lasts 10 days
then [Task2] lasts 4 days
-- Phase Two --
then [Task3] lasts 5 days
then [Task4] lasts 6 days
@endgantt
****** Working with resources esources using the on keyword and brackets for resource name.

@startgantt
[Task1] on {Alice} lasts 10 days
[Task2] on {Bob:50%} lasts 2 days
then [Task3] on {Alice:25%} lasts 1 days
@endgantt

Multiple resources can be assigned to a task:

@startgantt
[Task1] on {Alice} {Bob} lasts 20 days
@endgantt

Resources can be marked as off on specific days:

@startgantt
project starts on 2020-06-19
[Task1] on {Alice} lasts 10 days
{Alice} is off on 2020-06-24 to 2020-06-26
@endgantt
****** Complex example se the and conjunction.

You can also add delays in constraints.

@startgantt
[Prototype design] lasts 13 days and is colored in Lavender/LightBlue
[Test prototype] lasts 9 days and is colored in Coral/Green and starts 3 days after [Prototype design]'s end
[Write tests] lasts 5 days and ends at [Prototype design]'s end
[Hire tests writers] lasts 6 days and ends at [Write tests]'s start
[Init and write tests report] is colored in Coral/Green
[Init and write tests report] starts 1 day before [Test prototype]'s start and ends at [Test prototype]'s end
@endgantt
****** Comments 

As is mentioned on Common Commands page:

    Everything that starts with simple quote ' is a comment.

    You can also put comments on several lines using /' to start and '/ to end. 

(i.e.: the first character (except space character) of a comment line must be a simple quote ')

@startgantt
' This is a comment

[T1] lasts 3 days

/' this comment
is on several lines '/

[T2] starts at [T1]'s end and lasts 1 day
@endgantt
****** Using style 

Without style (by default)

@startuml
[Task1] lasts 20 days
note bottom
  memo1 ...
  memo2 ...
  explanations1 ...
  explanations2 ...
end note
[Task2] lasts 4 days
[Task1] -> [Task2]
-- Separator title --
[M1] happens on 5 days after [Task1]'s end
-- end --
@enduml

With style

You can use style to change rendering of elements.

@startuml
<style>
ganttDiagram {
	task {
		FontName Helvetica
		FontColor red
		FontSize 18
		FontStyle bold
		BackGroundColor GreenYellow
		LineColor blue
	}
	milestone {
		FontColor blue
		FontSize 25
		FontStyle italic
		BackGroundColor yellow
		LineColor red
	}
	note {
		FontColor DarkGreen
		FontSize 10
		LineColor OrangeRed
	}
	arrow {
		FontName Helvetica
		FontColor red
		FontSize 18
		FontStyle bold
		BackGroundColor GreenYellow
		LineColor blue
	}
	separator {
		LineColor red
		BackGroundColor green
		FontSize 16
		FontStyle bold
		FontColor purple
	}
}
</style>
[Task1] lasts 20 days
note bottom
  memo1 ...
  memo2 ...
  explanations1 ...
  explanations2 ...
end note
[Task2] lasts 4 days
[Task1] -> [Task2]
-- Separator title --
[M1] happens on 5 days after [Task1]'s end
-- end --
@enduml

[Ref. QA-10835, QA-12045, QA-11877 and PR-438]

TODO
Awaiting style for Separator and all style for Arrow (thickness...)
****** Add notes 

@startgantt
[task01] lasts 15 days
note bottom
  memo1 ...
  memo2 ...
  explanations1 ...
  explanations2 ...
end note

[task01] -> [task02]

@endgantt

Example with overlap.

@startgantt
[task01] lasts 15 days
note bottom
  memo1 ...
  memo2 ...
  explanations1 ...
  explanations2 ...
end note

[task01] -> [task02]
[task03] lasts 5 days

@endgantt

@startgantt

-- test01 --

[task01] lasts 4 days
note bottom
'note left
memo1 ...
memo2 ...
explanations1 ...
explanations2 ...
end note

[task02] lasts 8 days
[task01] -> [task02]
note bottom
'note left
memo1 ...
memo2 ...
explanations1 ...
explanations2 ...
end note
-- test02 --

[task03] as [t3] lasts 7 days
[t3] -> [t4]
@endgantt

DONE
Thanks for correction (of #386 on v1.2020.18) when overlapping

@startgantt

Project starts 2020-09-01

[taskA] starts 2020-09-01 and lasts 3 days
[taskB] starts 2020-09-10 and lasts 3 days
[taskB] displays on same row as [taskA]

[task01] starts 2020-09-05 and lasts 4 days

then [task02] lasts 8 days
note bottom
  note for task02
  more notes
end note

then [task03] lasts 7 days
note bottom
  note for task03
  more notes
end note

-- separator --

[taskC] starts 2020-09-02 and lasts 5 days
[taskD] starts 2020-09-09 and lasts 5 days
[taskD] displays on same row as [taskC]

[task 10] starts 2020-09-05 and lasts 5 days
then [task 11] lasts 5 days
note bottom
  note for task11
  more notes
end note
@endgantt
****** Pause tasks 

@startgantt
Project starts the 5th of december 2018
saturday are closed
sunday are closed
2018/12/29 is opened
[Prototype design] lasts 17 days
[Prototype design] pauses on 2018/12/13
[Prototype design] pauses on 2018/12/14
[Prototype design] pauses on monday
[Test prototype] starts at [Prototype design]'s end and lasts 2 weeks
@endgantt
****** Change link colors 

@startgantt
[T1] lasts 4 days
[T2] lasts 4 days and starts 3 days after [T1]'s end with blue dotted link
[T3] lasts 4 days and starts 3 days after [T2]'s end with green bold link
[T4] lasts 4 days and starts 3 days after [T3]'s end with green dashed link
@endgantt

@startuml
Links are colored in blue
[Prototype design] lasts 14 days
[Build prototype] lasts 4 days
[Prepare test] lasts 6 days
[Prototype design] -[#FF00FF]-> [Build prototype]
[Prototype design] -[dotted]-> [Prepare test]
@enduml
****** Tasks or Milestones on the same line 

@startgantt
[Prototype design] lasts 13 days
[Test prototype] lasts 4 days and 1 week
[Test prototype] starts 1 week and 2 days after [Prototype design]'s end
[Test prototype] displays on same row as [Prototype design]
[r1] happens on 5 days after [Prototype design]'s end
[r2] happens on 5 days after [r1]'s end
[r3] happens on 5 days after [r2]'s end
[r2] displays on same row as [r1]
[r3] displays on same row as [r1]
@endgantt
****** Highlight today 

@startgantt
Project starts the 20th of september 2018
sunday are close
2018/09/21 to 2018/09/23 are colored in salmon
2018/09/21 to 2018/09/30 are named [Vacation in the Bahamas] 

today is 30 days after start and is colored in #AAF
[Foo] happens 40 days after start
[Dummy] lasts 10 days and starts 10 days after start

@endgantt
****** Task between two milestones 

@startgantt
project starts on 2020-07-01
[P_start] happens 2020-07-03
[P_end]   happens 2020-07-13
[Prototype design] occurs from [P_start] to [P_end]
@endgantt
****** Grammar and verbal form 

Verbal form 	Example
[T] starts 	
[M] happens 	
****** Add title, header, footer, caption or legend on gantt diagram 

@startuml

header some header

footer some footer

title My title

[Prototype design] lasts 13 days

legend
The legend
end legend

caption This is caption

@enduml

(See also: Common commands)
****** Removing Foot Boxes 

You can use the hide footbox keywords to remove the foot boxes of the gantt diagram (as for sequence diagram).

Examples on:

    daily scale (without project start)

@startgantt

hide footbox
title Foot Box removed

[Prototype design] lasts 15 days
[Test prototype] lasts 10 days
@endgantt

    daily scale

@startgantt

Project starts the 20th of september 2017
[Prototype design] as [TASK1] lasts 13 days
[TASK1] is colored in Lavender/LightBlue

hide footbox
@endgantt

    weekly scale

@startgantt
hide footbox

printscale weekly
saturday are closed
sunday are closed

Project starts the 1st of january 2021
[Prototype design end] as [TASK1] lasts 19 days
[TASK1] is colored in Lavender/LightBlue
[Testing] lasts 14 days
[TASK1]->[Testing]

2021-01-18 to 2021-01-22 are named [End's committee]
2021-01-18 to 2021-01-22 are colored in salmon 
@endgantt

    monthly scale

@startgantt

hide footbox

projectscale monthly
Project starts the 20th of september 2020
[Prototype design] as [TASK1] lasts 130 days
[TASK1] is colored in Lavender/LightBlue
[Testing] lasts 20 days
[TASK1]->[Testing]

2021-01-18 to 2021-01-22 are named [End's committee]
2021-01-18 to 2021-01-22 are colored in salmon 
@endgantt
***** Component Diagram 
****** https://plantuml.com/component-diagram
Let's have few examples.
****** Components e bracketed.
You can also use the component keyword to define a component. And you can define an alias, using the as keyword. This alias will be used later, when defining relations.

@startuml

[First component]
[Another component] as Comp2
component Comp3
component [Last\ncomponent] as Comp4

@enduml
****** Interfaces 

Interface can be defined using the () symbol (because this looks like a circle).

You can also use the interface keyword to define an interface. And you can define an alias, using the as keyword. This alias will be used latter, when defining relations.

We will see latter that interface definition is optional.

@startuml

() "First Interface"
() "Another interface" as Interf2
interface Interf3
interface "Last\ninterface" as Interf4

[component]
footer //Adding "component" to force diagram to be a **component diagram**//
@enduml
****** Basic example 

Links between elements are made using combinations of dotted line (..), straight line (--), and arrows (-->) symbols.

@startuml

DataAccess - [First Component]
[First Component] ..> HTTP : use

@enduml
****** Using notes 

You can use the note left of , note right of , note top of , note bottom of keywords to define notes related to a single object.

A note can be also define alone with the note keywords, then linked to other objects using the .. symbol.

@startuml

interface "Data Access" as DA

DA - [First Component]
[First Component] ..> HTTP : use

note left of HTTP : Web Service only

note right of [First Component]
  A note can also
  be on several lines
end note

@enduml
****** Grouping Components 

You can use several keywords to group components and interfaces together:

    package
    node
    folder
    frame
    cloud
    database

@startuml

package "Some Group" {
  HTTP - [First Component]
  [Another Component]
}

node "Other Groups" {
  FTP - [Second Component]
  [First Component] --> FTP
}

cloud {
  [Example 1]
}


database "MySql" {
  folder "This is my folder" {
    [Folder 3]
  }
  frame "Foo" {
    [Frame 4]
  }
}


[Another Component] --> [Example 1]
[Example 1] --> [Folder 3]
[Folder 3] --> [Frame 4]

@enduml
****** Changing arrows direction 

By default, links between classes have two dashes -- and are vertically oriented. It is possible to use horizontal link by putting a single dash (or dot) like this:

@startuml
[Component] --> Interface1
[Component] -> Interface2
@enduml

You can also change directions by reversing the link:

@startuml
Interface1 <-- [Component]
Interface2 <- [Component]
@enduml

It is also possible to change arrow direction by adding left, right, up or down keywords inside the arrow:

@startuml
[Component] -left-> left
[Component] -right-> right
[Component] -up-> up
[Component] -down-> down
@enduml

You can shorten the arrow by using only the first character of the direction (for example, -d- instead of -down-) or the two first characters (-do-).

Please note that you should not abuse this functionality : Graphviz gives usually good results without tweaking.

And with the left to right direction parameter:

@startuml
left to right direction
[Component] -left-> left
[Component] -right-> right
[Component] -up-> up
[Component] -down-> down
@enduml
****** Use UML2 notation 

By default (from v1.2020.13-14), UML2 notation is used.

@startuml

interface "Data Access" as DA

DA - [First Component]
[First Component] ..> HTTP : use

@enduml
****** Use UML1 notation 

The skinparam componentStyle uml1 command is used to switch to UML1 notation.

@startuml
skinparam componentStyle uml1

interface "Data Access" as DA

DA - [First Component]
[First Component] ..> HTTP : use

@enduml
****** Use rectangle notation (remove UML notation) 

The skinparam componentStyle rectangle command is used to switch to rectangle notation (without any UML notation).

@startuml
skinparam componentStyle rectangle

interface "Data Access" as DA

DA - [First Component]
[First Component] ..> HTTP : use

@enduml
****** Long description escription on several lines using square brackets.

@startuml
component comp1 [
This component
has a long comment
on several lines
]
@enduml
****** Individual colors 

You can specify a color after component definition.

@startuml
component  [Web Server] #Yellow
@enduml
****** Using Sprite in Stereotype tereotype components.

@startuml
sprite $businessProcess [16x16/16] {
FFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFF
FFFFFFFFFF0FFFFF
FFFFFFFFFF00FFFF
FF00000000000FFF
FF000000000000FF
FF00000000000FFF
FFFFFFFFFF00FFFF
FFFFFFFFFF0FFFFF
FFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFF
}


rectangle " End to End\nbusiness process" <<$businessProcess>> {
 rectangle "inner process 1" <<$businessProcess>> as src
 rectangle "inner process 2" <<$businessProcess>> as tgt
 src -> tgt
}
@enduml
****** Skinparam 

You can use the skinparam command to change colors and fonts for the drawing.

You can use this command :

    In the diagram definition, like any other commands;
    In an included file;
    In a configuration file, provided in the command line or the Ant task.

You can define specific color and fonts for stereotyped components and interfaces.

@startuml

skinparam interface {
  backgroundColor RosyBrown
  borderColor orange
}

skinparam component {
  FontSize 13
  BackgroundColor<<Apache>> Red
  BorderColor<<Apache>> #FF6655
  FontName Courier
  BorderColor black
  BackgroundColor gold
  ArrowFontName Impact
  ArrowColor #FF6655
  ArrowFontColor #777777
}

() "Data Access" as DA

DA - [First Component]
[First Component] ..> () HTTP : use
HTTP - [Web Server] << Apache >>

@enduml

@startuml
[AA] <<static lib>>
[BB] <<shared lib>>
[CC] <<static lib>>

node node1
node node2 <<shared node>>
database Production

skinparam component {
    backgroundColor<<static lib>> DarkKhaki
    backgroundColor<<shared lib>> Green
}

skinparam node {
borderColor Green
backgroundColor Yellow
backgroundColor<<shared node>> Magenta
}
skinparam databaseBackgroundColor Aqua

@enduml
****** Specific SkinParameter 
componentStyle

    By default (or with skinparam componentStyle uml2), you have an icon for component

@startuml
skinparam BackgroundColor transparent
skinparam componentStyle uml2
component A {
   component "A.1" {
}
   component A.44 {
      [A4.1]
}
   component "A.2"
   [A.3]
   component A.5 [
A.5] 
   component A.6 [
]
}
[a]->[b]
@enduml

    If you want to suppress it, and to have only the rectangle, you can use skinparam componentStyle rectangle

@startuml
skinparam BackgroundColor transparent
skinparam componentStyle rectangle
component A {
   component "A.1" {
}
   component A.44 {
      [A4.1]
}
   component "A.2"
   [A.3]
   component A.5 [
A.5] 
   component A.6 [
]
}
[a]->[b]
@enduml
***** ditaa fom plantuml 
****** Generalisation 
PlantUML now can generate diagrams other than UML. In such cases the usual @startuml does not make sense anymore. So now we allow diagrams start with @startXYZ and finish with @endXYZ, where XYZ can change with the type of diagram and can be any characters (including spaces).

    This means that plugin developers are encouraged to change their code to recognize @start instead of @startuml. 

DITAA diagrams are usually formatted as @startditaa...@endditaa.
****** Ditaa 

Ditaa (DIagrams Through Ascii Art) is an Open Source project that allows to generate general diagrams from a text descriptions. The idea is close to PlantUML, and it may be useful for documentation to generate other diagrams than UML.

So last version of PlantUML allows this :

@startuml
ditaa
+--------+   +-------+    +-------+
|        +---+ ditaa +--> |       |
|  Text  |   +-------+    |diagram|
|Document|   |!magic!|    |       |
|     {d}|   |       |    |       |
+---+----+   +-------+    +-------+
    :                         ^
    |       Lots of work      |
    +-------------------------+
@enduml

You will find the complete documentation about ditaa on:

    ditaa.sourceforge.net
    github.com/stathissideris/ditaa

If your plugin does not support @startditaa yet, a temporary feature has been set up : it is also possible to use Ditaa with @startuml by using ditaa keyword on the very first line of your description.

 On PlantUML, only PNG generation is supported.
****** Option supported by PlantUML 

You can also use some option, after the @startditaa or ditaa keyword:

    -E or --no-separation to remove separator
    -S or --no-shadows to remove shadow
    scale=<XYZ> to scale up or down the diagram

Without option

@startditaa
+---------+  /--------\   +-------+
| cBLU    +--+cAAA    +---+Version|
|         |  |  Data  |   |   V3  |
|    +----+  |  Base  |   |cRED{d}|
|    |cPNK|  |     {s}|   +-------+
|    |    |  \---+----/
+----+----+    
@endditaa

Remove separator

@startditaa -E
+---------+  /--------\   +-------+
| cBLU    +--+cAAA    +---+Version|
|         |  |  Data  |   |   V3  |
|    +----+  |  Base  |   |cRED{d}|
|    |cPNK|  |     {s}|   +-------+
|    |    |  \---+----/
+----+----+    
@endditaa

Remove shadow or scale diagram

@startuml
ditaa(--no-shadows, scale=0.7)
+---------+  /--------\   +-------+
| cBLU    +--+cAAA    +---+Version|
|         |  |  Data  |   |   V3  |
|    +----+  |  Base  |   |cRED{d}|
|    |cPNK|  |     {s}|   +-------+
|    |    |  \---+----/
+----+----+    
@enduml
****** Tags 

Tag 	Description
{c} 	Choice or Decision
{d} 	Document - Symbol representing a document
{io} 	Input/Output - Symbol representing input/output
{mo} 	Manual operation
{o} 	Ellipse
{s} 	Storage - Symbol representing a form of storage, like a database or a hard disk.
{tr} 	Trapezoid

@startditaa
+------+------+------+------+------+------+------+
| c {c}|d {d} |io{io}|mo{mo}|o{o}  |s{s}  |tr{tr}|
+------+------+------+------+------+------+------+
@endditaa
****** More documentation 

You will find the complete documentation about ditaa on:

    ditaa.sourceforge.net
    github.com/stathissideris/ditaa

**** Diagrams 
***** MindMap
******  MindMap  * [[https://plantuml.com/mindmap-diagram#d7b611f2392a9772][OrgMode syntax]]  
 Submit   * [[https://plantuml.com/mindmap-diagram#2971d30e503e588e][Markdown syntax]]  
 [[http://alphadoc.plantuml.com/doc/dokuwiki/en/mindmap-diagram#0][*Edit in Dokuwiki]]  * [[https://plantuml.com/mindmap-diagram#f2e4466bf5f64a4f][Arithmetic notation]]  
 [[http://alphadoc.plantuml.com/doc/asciidoc/en/mindmap-diagram#0][*Edit in Asciidoc]]  * [[https://plantuml.com/mindmap-diagram#c52a6bf8d847484d][Multilines]]  
 [[http://alphadoc.plantuml.com/doc/markdown/en/mindmap-diagram#0][*Edit in Markdown]]  * [[https://plantuml.com/mindmap-diagram#5d50889672f6f860][Colors]]  
   * [[https://plantuml.com/mindmap-diagram#d97958298b577d46][Removing box]]  
 MindMap diagram are still in beta: the syntax may change without notice.   * [[https://plantuml.com/mindmap-diagram#fbe1d8b1a91aa486][Changing diagram direction]]  
   * [[https://plantuml.com/mindmap-diagram#d23dee2d0707a741][Complete example]]  
 *OrgMode syntax  * [[https://plantuml.com/mindmap-diagram#edc06c934e9e5fc5][Changing style]]  
 Submit   * [[https://plantuml.com/mindmap-diagram#9a9f568761f736f4][Word Wrap]]  
 [[http://alphadoc.plantuml.com/doc/dokuwiki/en/mindmap-diagram#1][*Edit in Dokuwiki]]    
 [[http://alphadoc.plantuml.com/doc/asciidoc/en/mindmap-diagram#1][*Edit in Asciidoc]]    
 [[http://alphadoc.plantuml.com/doc/markdown/en/mindmap-diagram#1][*Edit in Markdown]]    
     
****** This syntax is compatible with OrgMode     
  🎉 Copied!   @startmindmap      
  *  * Debian      
    ** Ubuntu      
    *** Linux Mint      
    *** Kubuntu      
    *** Lubuntu      
    *** KDE Neon      
    ** LMDE      
    ** SolydXK      
    ** SteamOS      
    ** Raspbian with a very long name      
    *** <s>Raspmbc</s> => OSMC      
    *** <s>Raspyfi</s> => Volumio      
    @endmindmap      
    *      
     
******  *Markdown syntax    
 Submit     
 [[http://alphadoc.plantuml.com/doc/dokuwiki/en/mindmap-diagram#2][*Edit in Dokuwiki]]    
 [[http://alphadoc.plantuml.com/doc/asciidoc/en/mindmap-diagram#2][*Edit in Asciidoc]]    
 [[http://alphadoc.plantuml.com/doc/markdown/en/mindmap-diagram#2][*Edit in Markdown]]    
     
 This syntax is compatible with Markdown     
     
  🎉 Copied!   @startmindmap      
  *  * root node      
    	* some first level node      
    		* second level node      
    		* another second level node      
    	* another first level node      
    @endmindmap      
    *      
     
******  *Arithmetic notation    
 Submit     
 [[http://alphadoc.plantuml.com/doc/dokuwiki/en/mindmap-diagram#3][*Edit in Dokuwiki]]    
 [[http://alphadoc.plantuml.com/doc/asciidoc/en/mindmap-diagram#3][*Edit in Asciidoc]]    
 [[http://alphadoc.plantuml.com/doc/markdown/en/mindmap-diagram#3][*Edit in Markdown]]    
     
 You can use the following notation to choose diagram side.     
     
  🎉 Copied!   @startmindmap      
  *  + OS      
    ++ Ubuntu      
    +++ Linux Mint      
    +++ Kubuntu      
    +++ Lubuntu      
    +++ KDE Neon      
    ++ LMDE      
    ++ SolydXK      
    ++ SteamOS      
    ++ Raspbian      
    -- Windows 95      
    -- Windows 98      
    -- Windows NT      
    --- Windows 8      
    --- Windows 10      
    @endmindmap      
    *      
     
******  *Multilines    
 Submit     
 [[http://alphadoc.plantuml.com/doc/dokuwiki/en/mindmap-diagram#4][*Edit in Dokuwiki]]    
 [[http://alphadoc.plantuml.com/doc/asciidoc/en/mindmap-diagram#4][*Edit in Asciidoc]]    
 [[http://alphadoc.plantuml.com/doc/markdown/en/mindmap-diagram#4][*Edit in Markdown]]    
     
 You can use : and ; to have multilines box.     
     
  🎉 Copied!   @startmindmap      
  *  * Class Templates      
    **:Example 1      
    <code>      
    template <typename T>      
    class cname{      
    void f1()<U+003B>      
    ...      
    }      
    </code>      
    ;      
    **:Example 2      
    <code>      
    other template <typename T>      
    class cname{      
    ...      
    </code>      
    ;      
    @endmindmap      
    *      
     
  🎉 Copied!   @startmindmap      
  *  + root      
    **:right_1.1      
    right_1.2;      
    ++ right_2      
          
    left side      
          
    -- left_1      
    -- left_2      
    **:left_3.1      
    left_3.2;      
    @endmindmap      
    *      
     
******  *Colors    
 Submit     
 [[http://alphadoc.plantuml.com/doc/dokuwiki/en/mindmap-diagram#5][*Edit in Dokuwiki]]    
 [[http://alphadoc.plantuml.com/doc/asciidoc/en/mindmap-diagram#5][*Edit in Asciidoc]]    
 [[http://alphadoc.plantuml.com/doc/markdown/en/mindmap-diagram#5][*Edit in Markdown]]    
     
 It is possible to change node [[https://plantuml.com/color][color]].     
     
 With inline color    
     
 * OrgMode syntax mindmap    
     
  🎉 Copied!   @startmindmap      
  *  *[#Orange] Colors      
    **[#lightgreen] Green      
    **[#FFBBCC] Rose      
    **[#lightblue] Blue      
    @endmindmap      
    *      
     
******* Arithmetic notation syntax mindmap    
     
   🎉 Copied!   @startmindmap      
   *  +[#Orange] Colors      
     ++[#lightgreen] Green      
     ++[#FFBBCC] Rose      
     --[#lightblue] Blue      
     @endmindmap      
     *      
     
******* Markdown syntax mindmap    
     
   🎉 Copied!   @startmindmap      
   *  *[#Orange] root node      
			*[#lightgreen] some first level node      
       *[#FFBBCC] second level node      
       *[#lightblue] another second level node      
			*[#lightgreen] another first level node      
     @endmindmap      
     *      
     
	With style color    
     
******* OrgMode syntax mindmap    
     
   🎉 Copied!   @startmindmap      
   *  <style>      
     mindmapDiagram {      
       .green {      
         BackgroundColor lightgreen      
       }      
       .rose {      
         BackgroundColor #FFBBCC      
       }      
       .your_style_name {      
         BackgroundColor lightblue      
       }      
     }      
     </style>      
     * Colors      
     ** Green <<green>>      
     ** Rose <<rose>>      
     ** Blue <<your_style_name>>      
     @endmindmap      
     *      
     
******* Arithmetic notation syntax mindmap    
     
   🎉 Copied!   @startmindmap      
   *  <style>      
     mindmapDiagram {      
       .green {      
         BackgroundColor lightgreen      
       }      
       .rose {      
         BackgroundColor #FFBBCC      
       }      
       .your_style_name {      
         BackgroundColor lightblue      
       }      
     }      
     </style>      
     + Colors      
     ++ Green <<green>>      
     ++ Rose <<rose>>      
     -- Blue <<your_style_name>>      
     @endmindmap      
     *      
     
	* Markdown syntax mindmap    
     
   🎉 Copied!   @startmindmap      
   *  <style>      
     mindmapDiagram {      
       .green {      
         BackgroundColor lightgreen      
       }      
       .rose {      
         BackgroundColor #FFBBCC      
       }      
       .your_style_name {      
         BackgroundColor lightblue      
       }      
     }      
     </style>      
     * root node      
			* some first level node <<green>>      
       * second level node <<rose>>      
       * another second level node <<your_style_name>>      
			* another first level node <<green>>      
     @endmindmap      
     *      
     
******  Removing box    
 Submit     
 [[http://alphadoc.plantuml.com/doc/dokuwiki/en/mindmap-diagram#6][*Edit in Dokuwiki]]    
 [[http://alphadoc.plantuml.com/doc/asciidoc/en/mindmap-diagram#6][*Edit in Asciidoc]]    
 [[http://alphadoc.plantuml.com/doc/markdown/en/mindmap-diagram#6][*Edit in Markdown]]    
     
 You can remove the box drawing using an underscore.     
     
  🎉 Copied!   @startmindmap      
  *  * root node      
    ** some first level node      
    ***_ second level node      
    ***_ another second level node      
    ***_ foo      
    ***_ bar      
    ***_ foobar      
    ** another first level node      
    @endmindmap      
    *      
     
  🎉 Copied!   @startmindmap      
  *  *_ root node      
    **_ some first level node      
    ***_ second level node      
    ***_ another second level node      
    ***_ foo      
    ***_ bar      
    ***_ foobar      
    **_ another first level node      
    @endmindmap      
    *      
     
  🎉 Copied!   @startmindmap      
  *  + root node      
    ++ some first level node      
    +++_ second level node      
    +++_ another second level node      
    +++_ foo      
    +++_ bar      
    +++_ foobar      
    ++_ another first level node      
    -- some first right level node      
    --_ another first right level node      
    @endmindmap      
    *      
     
******  *Changing diagram direction    
 Submit     
 [[http://alphadoc.plantuml.com/doc/dokuwiki/en/mindmap-diagram#7][*Edit in Dokuwiki]]    
 [[http://alphadoc.plantuml.com/doc/asciidoc/en/mindmap-diagram#7][*Edit in Asciidoc]]    
 [[http://alphadoc.plantuml.com/doc/markdown/en/mindmap-diagram#7][*Edit in Markdown]]    
     
 It is possible to use both sides of the diagram.     
     
  🎉 Copied!   @startmindmap      
  *  * count      
    ** 100      
    *** 101      
    *** 102      
    ** 200      
          
    left side      
          
    ** A      
    *** AA      
    *** AB      
    ** B      
    @endmindmap      
    *      
     
 *Complete example    
 Submit     
 [[http://alphadoc.plantuml.com/doc/dokuwiki/en/mindmap-diagram#8][*Edit in Dokuwiki]]    
 [[http://alphadoc.plantuml.com/doc/asciidoc/en/mindmap-diagram#8][*Edit in Asciidoc]]    
 [[http://alphadoc.plantuml.com/doc/markdown/en/mindmap-diagram#8][*Edit in Markdown]]    
     
  🎉 Copied!   @startmindmap      
  *  caption figure 1      
    title My super title      
          
    * <&flag>Debian      
    ** <&globe>Ubuntu      
    *** Linux Mint      
    *** Kubuntu      
    *** Lubuntu      
    *** KDE Neon      
    ** <&graph>LMDE      
    ** <&pulse>SolydXK      
    ** <&people>SteamOS      
    ** <&star>Raspbian with a very long name      
    *** <s>Raspmbc</s> => OSMC      
    *** <s>Raspyfi</s> => Volumio      
          
    header      
    My super header      
    endheader      
          
    center footer My super footer      
          
    legend right      
      Short      
      legend      
    endlegend      
    @endmindmap      
    *      
     
******  *Changing style    
 Submit     
 [[http://alphadoc.plantuml.com/doc/dokuwiki/en/mindmap-diagram#9][*Edit in Dokuwiki]]    
 [[http://alphadoc.plantuml.com/doc/asciidoc/en/mindmap-diagram#9][*Edit in Asciidoc]]    
 [[http://alphadoc.plantuml.com/doc/markdown/en/mindmap-diagram#9][*Edit in Markdown]]    
     
 node, depth    
     
  🎉 Copied!   @startmindmap      
  *  <style>      
    mindmapDiagram {      
        node {      
            BackgroundColor lightGreen      
        }      
        :depth(1) {      
          BackGroundColor white      
        }      
    }      
    </style>      
    * Linux      
    ** NixOS      
    ** Debian      
    *** Ubuntu      
    **** Linux Mint      
    **** Kubuntu      
    **** Lubuntu      
    **** KDE Neon      
    @endmindmap      
    *      
     
 boxless    
     
  🎉 Copied!   @startmindmap      
  *  <style>      
    mindmapDiagram {      
      node {      
        BackgroundColor lightGreen      
      }      
      boxless {      
        FontColor darkgreen      
      }      
    }      
    </style>      
    * Linux      
    ** NixOS      
    ** Debian      
    ***_ Ubuntu      
    **** Linux Mint      
    **** Kubuntu      
    **** Lubuntu      
    **** KDE Neon      
    @endmindmap      
    *      
     
 *Word Wrap    
 Submit     
 [[http://alphadoc.plantuml.com/doc/dokuwiki/en/mindmap-diagram#10][*Edit in Dokuwiki]]    
 [[http://alphadoc.plantuml.com/doc/asciidoc/en/mindmap-diagram#10][*Edit in Asciidoc]]    
 [[http://alphadoc.plantuml.com/doc/markdown/en/mindmap-diagram#10][*Edit in Markdown]]    
     
 Using MaximumWidth setting you can control automatic word wrap. Unit used is pixel.     
     
  🎉 Copied!   @startmindmap      
  *        
          
    <style>      
    node {      
        Padding 12      
        Margin 3      
        HorizontalAlignment center      
        LineColor blue      
        LineThickness 3.0      
        BackgroundColor gold      
        RoundCorner 40      
        MaximumWidth 100      
    }      
          
    rootNode {      
        LineStyle 8.0;3.0      
        LineColor red      
        BackgroundColor white      
        LineThickness 1.0      
        RoundCorner 0      
        Shadowing 0.0      
    }      
          
    leafNode {      
        LineColor gold      
        RoundCorner 0      
        Padding 3      
    }      
          
    arrow {      
        LineStyle 4      
        LineThickness 0.5      
        LineColor green      
    }      
    </style>      
          
    * Hi =)      
    ** sometimes i have node in wich i want to write a long text      
    *** this results in really huge diagram      
    **** of course, i can explicit split with a\nnew line      
    **** but it could be cool if PlantUML was able to split long lines, maybe with an option       
          
    @endmindmap      
    *      
-------------------------------------------------------------------------
***** MindMap more help
****** Insert the PlantUML mindmap into diagrams.net
    In the diagrams.net or draw.io editor, click Arrange > Insert > Advanced > PlantUML.
    Add the text for your mindmap into the text field, and click Insert.
    Generate a mindmap from text in diagrams.net by inserting PlantUML in arithmetic notation via Arrange > Insert > Advanced > PlantUML

The diagram will be generated and inserted as an SVG image on the drawing canvas.
Generate a mindmap from text in diagrams.net by inserting PlantUML in arithmetic notation via Arrange > Insert > Advanced > PlantUML

Hover over the mindmap on the drawing canvas to see a tooltip with the PlantUML text.

If you see an error on the drawing canvas, there is likely a mistake in the text notation. Double check the PlantUML for mistakes, and make sure you use the arithmetic notation, and not the Markdown or OrgMode syntax for your mindmap.
If you see this error when inserting PlantUML, double check that you are using arithmetic notation in your text mindmap, and everything is correct

Double click on the mindmap to open and edit the PlantUML text. Click Apply when you have finished, and the diagram on the canvas will be regenerated.
Generate a mindmap from text in diagrams.net by inserting PlantUML in arithmetic notation via Arrange > Insert > Advanced > PlantUML
****** Do more with your PlantUML mindmaps
    Add a second root topic - + second topic
    Add colours - [#colour-name or RGB value] (directly after the indicator characters)
    Add an icon - <&star> (directly before the topic text)
    Strike through topics - <s>topic</s>
    Add one or more of the following, as shown in the example below:
        heading
        caption
        section heading
        footer
        legend

Mindmaps are easy to create from text with diagrams.net and PlantUML
Open this example in diagrams.net
****** Example: Tasks in a one-sided mindmap

@startuml
@startmindmap

caption Tasks
title Onboarding and offboarding tasks

+[#lightgreen] Onboarding
++ Prior to first day
+++_ <&star>Contract signed
+++_ Employee handbook
+++_ IT equipment reserved
++ First day
+++_ <&people>Office tour
+++_ <&people>Team intros
+++ Account setup
++ First week
+++_ <&people>Shadow team members
+++_ Software training
++ First month
+++_ Assign projects/tasks
+++_ Set goals
+++_ <&people>Get team feedback

+[#orange] Offboarding
++ <&people>Feedback and review
++[#999999] <s>Exit interview</s>
++ Tasks/projects reassigned
+++_ <&people>Handover
++ Account deactivation/deletion
++ IT hardware return

header
Currently under review
endheader

legend right
  <&star> priority
  <&people> meetings
endlegend

center footer Last updated: May

@endmindmap 
@enduml

Refer to the PlantUML language specification for the full set of options in the various supported syntaxes.

**** exempls
***** My user cose and component style 
E:\Temp\my-TTRPG.jpg 
#+HEADER: :noweb yes 
#+HEADER: :file e:\Temp\my-TTRPG.jpg
 #+begin_src plantuml :results output silent
skinparam componentStyle rectangle

title my Table Top RPG System
i2c_driver_stm "master cmd" <|..+ "slave msg" i2c_driver 
"my Table Top RPG System" <--> "(sdf sdfsdf)"
[First component]
[Another component] as Comp2
component Comp3
[Last\ncomponent] as Comp4 
(Last\nusecose) as Comp5 

Comp2 <---> Comp3

note right of Comp2
  A note can also
  be on several lines
end note

note left of Comp3 : Web\nService only
 #+end_src

***** seqvese
	#+begin_src plantuml :file e:\Temp\my-diagram.png
	title Authentication Sequence

	note right of Bob: Bob idle
	note right of Alice: Alice thinks
	Alice->Bob: Authentication Request
	note right of Bob: Bob thinks about it
	Bob->Alice: Authentication Response
	#+end_src
	#+results:
	[[file:e:\Temp\my-diagram.png]]

	#+begin_src plantuml :file my-diagram.png
	title Authentication Sequence

	note right of Bob: Bob idle
	note right of Alice: Alice thinks
	Alice->Bob: Authentication Request
	note right of Bob: Bob thinks about it
	Bob->Alice: Authentication Response
	#+end_src

	#+begin_src plantuml :file my-diagram.png
	participant Bob
	actor Alice

	Bob -> Alice : hello
	Alice -> Bob : Is it ok?
	#+end_src
	#+results:
	[[file:my-diagram.png]]
***** class 
	#+begin_src plantuml :file e:\Temp\my-diagram.png
	title Authentication Sequence
	Object <|-- ArrayList    
	Object : equals()    
	ArrayList : Object[] elementData    
	ArrayList : size()    
	#+end_src
	#+results:
	[[file:e:\Temp\my-diagram.png]]
     
	#+begin_src plantuml :file my-diagram.png
	scale 12
	title Authentication Sequence
	Object <|-- ArrayList    
	Object : equals()    
	ArrayList : Object[] elementData    
	ArrayList : size()    
	#+end_src
	#+RESULTS:
	[[file:my-diagram.png]]
***** img:https:
	#+begin_src plantuml :file e:\Temp\my-diagram.png
	title Authentication Sequence
object "inbound message" as m1
object "XML Splitter" as s1

m1 : <img:https://images.saymedia-content.com/.image/t_share/MTc0NDYwNzc3ODAxODUyMjY0/top-magic-the-gathering-cards-of-all-time.jpg> 
s1 : <img:https://upload.wikimedia.org/wikipedia/en/a/aa/Magic_the_gathering-card_back.jpg>

m1 -> s1
	#+end_src
	#+RESULTS:
	[[file:e:\Temp\my-diagram.png]]

	#+begin_src plantuml :file e:\Temp\my-diagram.png
	title  <size:48>Authentication Sequence</size>
object "inbound message" as m1
object "XML Splitter" as s1

m1 : <img:https://images.saymedia-content.com/.image/t_share/MTc0NDYwNzc3ODAxODUyMjY0/top-magic-the-gathering-cards-of-all-time.jpg>
s1 : <img:https://upload.wikimedia.org/wikipedia/en/a/aa/Magic_the_gathering-card_back.jpg>

m1 -> s1
	#+end_src
	#+RESULTS:
	[[file:e:\Temp\my-diagram.png]]

	#+begin_src plantuml :file e:\Temp\my-diagram.png
title  <size:48>Authentication Sequence</size>
object "inbound message" as m1

m1 : <img:https://images.saymedia-content.com/.image/t_share/MTc0NDYwNzc3ODAxODUyMjY0/top-magic-the-gathering-cards-of-all-time.jpg>
m1 : <size:48>10d2 +1</size> 
m1 : <size:48>It is New Text</size> 

	#+end_src
	#+RESULTS:
	[[file:e:\Temp\my-diagram.png]]
***** Legacy HTML Use image
You can mix Creole with the following HTML tags:

    <b> for bold text
    <u> or <u:#AAAAAA> or <u:[[color|colorName]]> for underline
    <i> for italic
    <s> or <s:#AAAAAA> or <s:[[color|colorName]]> for strike text
    <w> or <w:#AAAAAA> or <w:[[color|colorName]]> for wave underline text
    <plain> for plain text
    <color:#AAAAAA> or <color:[[color|colorName]]>
    <back:#AAAAAA> or <back:[[color|colorName]]> for background color
    <size:nn> to change font size
    <img:file> : the file must be accessible by the filesystem
    <img:http://plantuml.com/logo3.png> : the URL must be available from the Internet
#+begin_src plantuml :tangle yes
@startuml
	:* You can change <color:red>text color</color>
	* You can change <back:cadetblue>background color</back>
	* You can change <size:18>size</size>
	* You use <u>legacy</u> <b>HTML <i>tag</i></b>
	* You use <u:red>color</u> <s:green>in HTML</s> <w:#0000FF>tag</w>
	----
	* Use image : <img:http://plantuml.com/logo3.png>
	;
@enduml
#+end_src
**** plantuml-mode 
***** doc
****** github 
******* PlantUML mode for Emacs
 https://github.com/skuro/plantuml-mode
 A PlantUML major mode for Emacs.
******* Quick Guide
     Install with M-x package-install<RET>
     Enable mode for current buffer M-x plantuml-mode<RET>
     Write some PlantUML:

 @startuml
 Alice -> Bob: Authentication Request
 Bob --> Alice: Authentication Response

 Alice -> Bob: Another authentication Request
 Alice <-- Bob: Another authentication Response
 @enduml

     Preview diagrams with C-c C-c (plantuml-preview).

 WARNING: This may send information to "https://www.plantuml.com/plantuml"! Check that plantuml-default-exec-mode is configured correctly for your use case before previewing any sensitive material.

     ;; Sample jar configuration
     (setq plantuml-jar-path "/path/to/your/copy/of/plantuml.jar")
     (setq plantuml-default-exec-mode 'jar)

     ;; Sample executable configuration
     (setq plantuml-executable-path "/path/to/your/copy/of/plantuml.bin")
     (setq plantuml-default-exec-mode 'executable)

 See Execution modes for more information.
******* Installation
 Make sure you have MELPA enabled in your emacs.d. Then, you can just

 M-x package-install<RET>
 plantuml-mode<RET>

 Also, to enable preview you need to tell plantuml-mode where to locate the PlantUML JAR file. By default it will look for it in ~/plantuml.jar, but you can specify any location with:

 M-x customize-variable<RET>
 plantuml-jar-path<RET>

 You can also download the latest version of PlantUML straight into plantuml-jar-path:
 M-x plantuml-download-jar<RET>
******* Features
     Syntax highlight
     Autocompletion
     Preview of buffer or region
     [EXPERIMENTAL] Use either local JAR or remote server for preview
******* Enable the major mode
 You can automatically enable plantuml-mode for files with extension .plantuml by adding the following to your .emacsrc:

 ;; Enable plantuml-mode for PlantUML files
 (add-to-list 'auto-mode-alist '("\\.plantuml\\'" . plantuml-mode))

 Of course, you can always enable manually the major mode by typing M-x plantuml-mode once in the desired PlantUML file buffer.
******* Usage
 You can tell plantuml-mode to autocomplete the word before the cursor by typing M-x plantuml-complete-symbol. This will open a popup with all the available completions as found in the list of keywords given by running PlantUML with the -language flag.

 To render the PlantUML diagram within Emacs, you can hit M-x plantuml-preview. This will run PlantUML and display the result in the *PLANTUML-Preview* buffer. The format used to render the diagram is automagically chosen from what's supported by your Emacs. It will be one of the following, in order of preference:

     SVG
     PNG
     Unicode ASCII art
		 "svg"
		 "png"
		 "txt"

 The diagram will be either created from the selected region if one is available in the current buffer, or using the whole buffer otherwise.

 If you want to force a specific output format, you can customize the variable plantuml-output-type to the value you prefer.
 Default key bindings

 The following shortcuts are enabled by default:

 C-c C-c  plantuml-preview: renders a PlantUML diagram from the current buffer in the best supported format

 C-u C-c C-c  plantuml-preview in other window

 C-u C-u C-c C-c plantuml-preview in other frame
******* Integration with org-mode
 You can use plantuml-mode to edit PlantUML source snippets within an org-mode document. To do so, you need to first register it with the plantuml language:

 (add-to-list
   'org-src-lang-modes '("plantuml" . plantuml))

 Then you can edit a plantuml code block with plantuml-mode by hitting C-' while inside of the code block itself:

 #+BEGIN_SRC plantuml
   <hit C-c ' here to open a plantuml-mode buffer>
 #+END_SRC

 When in the plantuml-mode buffer you can then hit again C-' to return to the original org-mode document.
******* Execution modes
 EXPERIMENTAL
 As of v1.3.0 support is added for switching execution mode. The following two modes are available:
     jar (default) to run PlantUML as a local JAR file. This is the traditional system used by plantuml-mode
     server (experimental) to let an instance of plantuml-server render the preview
     executable to run PlantUML as a local executable file. This is useful if your package manager provides a executable for PlantUML.

 You can customize plantuml-default-exec-mode or run plantuml-set-exec-mode from a plantuml-mode buffer to switch modes.
 Configure server rendering

 When selecting server execution modes, you can customize the following variable to set the server to use for rendering:

 plantuml-server-url

 It defaults to "https://www.plantuml.com/plantuml".
 Migration from puml-mode

 If you were previously using puml-mode, you should change any reference to a puml-.. variable or function to its plantuml-.. counterpart. Most notably, puml-plantuml-jar-path is now just plantuml-jar-path.
 Deprecation warning

 If puml-mode is still being loaded by your Emacs, a Warning will be shown any time you open a PlantUML file. This is to remind you that you are running deprecated software. If you want to suppress the (intentionally) annoying warning, you can customize the variable plantuml-suppress-deprecation-warning.
 Troubleshooting
******* Debug messages
 As of v0.6.2 the following commands have been added to help resolving problems:

 plantuml-enable-debug
 plantuml-disable-debug

 With debug enabled, the actual command used to invoke PlantUML is printed into a buffer called *PLANTUML Messages*. You can inspect that buffer to make sure that PlantUML is properly set up, or use it to supply extra information when opening issues.
 Blank previews

 If you are using SVG rendering and plantuml-preview shows you an empty buffer, chances are something is wrong with the PlantUML output. While inside the preview buffer, hit C-c C-c to switch to the textual mode and see if the output is valid SVG.
**** setings FAQ 
***** I want to generate huge diagrams!

PlantUML limits image width and height to 4096. There is an environment variable that you can set to override this limit: PLANTUML_LIMIT_SIZE. You have to define this variable before launching PlantUML, something like:

set PLANTUML_LIMIT_SIZE=8192

or

setenv PLANTUML_LIMIT_SIZE 8192

Another way is an option in the command line:

java -DPLANTUML_LIMIT_SIZE=8192 -jar /path/to/plantuml.jar ...

Note that if you generate very big diagrams, (for example, something like 20 000 x 10 000 pixels), you can have some memory issues. The solution is to add this parameter to the java vm : -Xmx1024m.
***** Frequently Asked Questions (FAQ)
****** What's the goal of PlantUML?

PlantUML is used to draw UML diagrams, using a simple and human readable text description.
Be careful, because it does not prevent you from drawing inconsistent diagrams (such as having two classes inheriting from each other, for example). So it's more a drawing tool than a modeling tool.
[Back to top]
How long do the images generated by PlantUML Server live for?

Links to png or svg generated by PlantUML Server are valid forever (that is as long as the server is up).
However, we do not store any diagrams on our servers.

This may sound contradictory. It is not: the whole diagram is compressed into the URL itself. When the server receives the URL, it decompresses the URL to retrieve the diagram text and generates the image. There is no need to store anything. Even if the server is down, you can retrieve the diagram using the flag -decodeurl with the command line. Furthermore, the diagram data is stored in PNG metadata, so you can fetch it even from a downloaded image.

Occasionally we may activate HTTP traces on our server. This is mainly for performance issues (when we have some) to understand the traffic we get. Once the issue solved, we turn back off HTTP traces and we remove the logs.

Concerning sensitive content: even if we do not store the generated diagrams, please be aware that all traffic goes through HTTP, so it's easy to catch.

So you should probably install a local server on your own network if you plan to generate diagrams with sensitive information. You can do this with no Java/J2EE knowledge since there is a tiny web server included in PlantUML.jar.
[Back to top]
It does not work on my config!

PlantUML has been installed on various systems, and some users have reported minor issues when installing it.
You can have a look on this page which give advises if something is wrong.
[Back to top]
Which version of Graphviz should I use?

You have more information about Graphviz about Graphviz here.

The following version have been tested, and are known to work:

    2.26.3
    2.28
    2.30.1
    2.34
    2.36
    2.38
    2.44

Note that versions 2.39 to 2.42 do not work very well with PlantUML.

With version 2.44, under Windows, you may have to run dot -c in a command line to finalize the installation, like in the following example:

You may have to run dot -c with Administrator Right.

Another option is to install Win32 version of GraphViz 2.44 which does not require this post-install process.

If you compile Graphviz by yourself, you have to build it with libexpat in order to work with PlantUML.
[Back to top]
****** Is this mature? I don't see any new release?

Google Trends are somehow positive. And there are few books that mention PlantUML. So yes, it's mature.

Note that PlantUML is developed with continuous integration in mind. That means that there are new releases quite often, with (hopefully!) backward compatibility. So the file PlantUML.jar may changed over time, while keeping the same name.

If you want to know the exact version you are using, you can type in the command line:

java -jar plantuml.jar -version

or use the following small special diagram description:

@startuml
version
@enduml

[Back to top]
****** How to know if a new release is available?

To check if a newer version is available for download, you can go to the download page.

You can also subscribe to the following rss flows:

    Recent activities on the Q&A forum
    Recent questions and answers on the Q&A forum

Or you can use the command line:

java -jar plantuml.jar -version

Or use the following small special diagram description:

@startuml
version
@enduml

[Back to top]
****** I have an error message with the Eclipse Plugin.

If you have the following error message :

The currently displayed page contains invalid values

when displaying the Windows/Preferences/PlantUML, you should try to quit Eclipse and use the -clean flag on the command line:

eclipse -clean

[Back to top]
****** I want to generate huge diagrams!

PlantUML limits image width and height to 4096. There is an environment variable that you can set to override this limit: PLANTUML_LIMIT_SIZE. You have to define this variable before launching PlantUML, something like:

set PLANTUML_LIMIT_SIZE=8192

or

setenv PLANTUML_LIMIT_SIZE 8192

Another way is an option in the command line:

java -DPLANTUML_LIMIT_SIZE=8192 -jar /path/to/plantuml.jar ...

Note that if you generate very big diagrams, (for example, something like 20 000 x 10 000 pixels), you can have some memory issues. The solution is to add this parameter to the java vm : -Xmx1024m.
[Back to top]
****** I have issues with accented characters.

Characters encoding is a subtle thing... By default, PlantUML use the default charset of your platform, which may or may not be UTF-8 . If you want to know which charset you are using, you can type the following command:

java -jar plantuml.jar -help

...
-charset XYZ To use a specific charset (default is windows-1252)
...

If you want to use a different charset, for example UTF-8, you can use the -charset flag :

java -jar plantuml.jar -charset UTF-8 ...

You can also find here information about unicode . Note that even if Java does not support B.O.M. (Byte Order Mark) in UTF-8 format file, a workaround has been put into PlantUML, so this should not be an issue.
[Back to top]
****** I have issues with Asian characters.

Some Japanese users reported that they have to set the LANG variable to ja_JP.UTF-8 in their shell before launching PlantUML.

export LANG = ja_JP.UTF-8

Since the new architecture, it should simply work, because Java knows how to draw East Asian characters.
[Back to top]
How to generate EPS?

You can use the -eps flag in the command line, or format="eps" in the ANT task.
[Back to top]
What about XMI?

Work is in progress.
[Back to top]
****** Is @startuml needed in with -pipe flag?

Short answer: You do have to use @startuml (or @startditaa/@startjcckit...) when starting a diagram.

Long answer:

The @startuml/@startditaa/@startjcckit is useful to determine the type of diagram (uml, ditaa, jcckit...), and because you can optionally put a filename after the @startXYZ. This also allows to have several diagrams inside the same file.

Earlier versions of PlantUML were not supporting ditaa or jcckit. When you use -pipe flag, since the diagram is generated to standard output, there could be only one diagram in the standard input. And there is no need to specify a filename. For all those reasons, @startuml was not needed when using -pipe flag at that time.

Later, it has been decided to normalize this, and to impose @startXYZ everywhere, even with -pipe flag, because it was confusing for users. Unfortunately, since some existing scripts were already using the fact that @startuml is not needed in -pipe flag, it has been decided to keep this as a deprecated option, just to allow older scripts to run. We indeed do pay attention of ascending compatibility.

For newer scripts, you should not rely on this, and use @startXYZ/@endXYZ with the -pipe flag.
[Back to top]
****** Under which license is PlantUML distributed?

PlantUML is distributed under the GPL license.
You can print the license using the command line option:

java -jar plantuml.jar -license

Or you can use the special diagram:

@startuml
license
@enduml

[Back to top]
****** I don't like GPL!

You can also use:

    LGPL license
    Apache license
    Eclipse Public license
    MIT license

Those versions miss few features (DITAA for example), but are 100% able to generate UML diagrams.

You can print the license of these versions using the command line option:

java -jar plantuml.jar -license

Or you can use the special diagram:

@startuml
license
@enduml

[Back to top]
****** Are images generated by PlantUML covered by the GPL/LGPL/ASL/EPL/MIT license?

No, they are not.

Images (whatever their format : PNG, SVG...) generated by the execution of PlantUML are owned by the author of their corresponding sources code (that is, their textual description in PlantUML language).

Images generated by the execution of PlantUML are not considered as covered work. You can do whatever you want with them.

The generated images can then be used without any reference to the GPL/LGPL/ASL/EPL/MIT license. It is not even necessary to stipulate that they have been generated with PlantUML, although this will be appreciated by PlantUML team.

There is an exception : if the textual description in PlantUML language is also covered by some license (like the GPL/LGPL/ASL/EPL/MIT), then the generated images are logically covered by this license.
[Back to top]
Can I redistribute the LGPL binary file PlantUML.jar and if there any constraints about it?

As long as you do not modify the Java source code and the jar file, you can integrate PlantUML.jar in your own closed source software.

The only constraint is that you have to mention somewhere in your own license or in your documentation that you are using PlantUML and that PlantUML is distributed under LGPL.

You can then even sell your software and earn money, without any other constraints (although donation will be appreciate in that case :-)

[Back to top]
****** What is the license of the PlantUML syntax?

There are no license for the PlantUML syntax itself : this means that everybody can use it.

So you can use PlantUML comments into your own code : those comments are owned by yourself, and are not considered as covered work, and are not covered by the GPL/LGPL/APL/EPL/MIT license.

Only the current implementation (that is, PlantUML program) is licensed under GPL, LGPL, ASL, EPL or MIT. On the other hand note that the documentation (examples, notices, ...) published in the PlantUML website is copyrighted. But you can still write your own documentation.
[Back to top]
****** What does EmptySvgException mean?

PlantUML is using Graphviz to generate some diagrams. So PlantUML is launching dot program and retrieve the information generated by dot as a SVG flow.

This message means that PlantUML is getting an empty flow from dot execution, and therefore cannot generate UML diagrams. There may be several reasons why this happens:

    There is an issue with your Graphviz installation. Try a very simple diagram, with only one class for example.
    Your version of Graphviz is too old and is crashing with information provided by PlantUML. Check your version with testdot
    Your diagram is too complex.
    There is a bug in PlantUML and/or in dot.

[Back to top]
****** Could not initialize class net.sourceforge.plantuml.ugraphic.UFont

If you have the error message java.lang.NoClassDefFoundError: Could not initialize class net.sourceforge.plantuml.ugraphic.UFont, it probably means that there are no fonts installed on your server.

You can solve it by adding fontconfig on your system:

sudo yum install fontconfig

or

sudo apt-get install fontconfig

[Back to top]
****** I have a message complaining about X11 or headless!

If you are running PlantUML on a linux server without graphical capability, you may have some error message:

    Can't connect to X11 window
    X11 connection rejected because of wrong authentication.
    HeadlessException

Basically, this is because PlantUML needs to have access to some graphical resources (more information here). You can turn PlantUML to headless mode, using the flag -Djava.awt.headless=true. For example:

/usr/bin/java -Djava.awt.headless=true -jar /data/PlantUml/plantuml.jar ...

[Back to top]
****** I have an UnsatisfiedLinkError under Mac OS X!

Under Mac OS X, if you have some error message like:

Error java.lang.UnsatisfiedLinkError / liblwawt.dylib /libosxapp.dylib

You need to follow the instructions on http://stackoverflow.com/questions/25914757/osx-yosemite-jvm-shared-library-does-not-contain-the-jni-createjavavm-symbol:

    Download and install the package: JavaForOSX.
    Found the file AptanaStidio3.ini, the file by default located under the directory here: /Applications/Aptana Studio 3/AptanaStudio3.app/Contents/MacOS
    Add -vm argument to specify the java which will be used to lunch Aptana Studio: -vm /Library/Java/JavaVirtualMachines/1.6.0.jdk/Contents/Home/bin/java

This seems to work only under Java 6, so you may define the following alias to be used in your scripts.

alias java6="export JAVA_HOME=$(/usr/libexec/java_home -v 1.6.0)"

[Back to top]
****** PlantUML scripts are grabbing keyboard/window focus!

Depending on your configuration, you can try the flag -Djava.awt.headless=true.
For example:

/usr/bin/java -Djava.awt.headless=true -jar /path/to/plantuml.jar ...

[Back to top]
****** I found an issue, but I cannot provide my diagram showing the issue because my diagram contains confidential data

There is a -cypher option the command line that generates a .preproc file instead of regular image file.

The .preproc generated file looks like the input diagram expect that all words (except PlantUML language keywords) have been replaced by a random set of letters.

You can double check this by running several time the -cypher option (you will get a different text each time). You may also look at the Cypher.java class used to execute this transformation to be sure that there are no backdoor there to retrieve back your original diagram.

If there is an issue in your original diagram, the same issue is likely to also occur with the cyphered one. Since the cyphered text is really meaningless, you can safely share it with us : there will be no way for us to guess what you are really working on.

But we will be able to reproduce the issue and fix it so that you can have your original (and confidential) diagram working.

[Back to top]
****** I have a question that is not here!

You can use the forum facility.

Someone will try to answer your question there. 

*** DITAA
**** DIagrams Through Ascii Art 
***** Command line
 You need the latest Java runtimes (JRE) to use ditaa. The best anti-aliasing can be
 achieved using Java 1.5 or higher.

 To start from the command line, type (where XXX is the version number):

 java -jar ditaaXXX.jar

 You will be presented with the command-line options help:


	-A,--no-antialias          Turns anti-aliasing off.
	-d,--debug                 Renders the debug grid over the resulting
														 image.
	-E,--no-separation         Prevents the separation of common edges of
														 shapes. You can see the difference below:

	+---------+  *  *  
	| cBLU    |      
	|         |      
	|    +----+      
	|    |cPNK|      
	|    |    |      
	+----+----+      
	Before processing  Common edge  No separation  
		separation (default)  (with the -E option)  
 ,* 
 ,* 

	-e,--encoding <ENCODING>   The encoding of the input file.
	-h,--html                  In this case the input is an HTML file. The
														 contents of the <pre class="textdiagram"> tags
														 are rendered as diagrams and saved in the
														 images directory and a new HTML file is
														 produced with the appropriate <img> tags.
														 See the [[http://ditaa.sourceforge.net/#html_mode][HTML section]].
		 --help                  Prints usage help.
	-o,--overwrite             If the filename of the destination image
														 already exists, an alternative name is chosen.
														 If the overwrite option is selected, the image
														 file is instead overwriten.
	-r,--round-corners         Causes all corners to be rendered as round
														 corners.
	-s,--scale <SCALE>         A natural number that determines the size of
														 the rendered image. The units are fractions of
														 the default size (2.5 renders 1.5 times bigger
														 than the default).
	-S,--no-shadows            Turns off the drop-shadow effect.
	-t,--tabs <TABS>           Tabs are normally interpreted as 8 spaces but
														 it is possible to change that using this
														 option. It is not advisable to use tabs in
														 your diagrams.
	-v,--verbose               Makes ditaa more verbose.
***** Syntax
****** Round corners
	If you use / and \ to connect corners, they are rendered as round corners:

	 /--+  round corner demo  
	 |  |    
	 +--/    
	 Before processing  Rendered  
	round corner demo 
****** Color
	Color codes can be used to add color to the diagrams. The syntax of color codes is
	cXXX
	where XXX is a hex number. The first digit of the number represents the red
	compoment of the color, the second digit represents green and the third blue (good
	ol' RGB). See below for an example of use of color codes:

	 /----\ /----\  color demo  
	 |c33F| |cC02|    
	 |    | |    |    
	 \----/ \----/    
     
	 /----\ /----\    
	 |c1FF| |c1AB|    
	 |    | |    |    
	 \----/ \----/    
	 Before processing  Rendered  
	color demo 

	This can become a bit tedious after a while, so there are (only some for now) human
	readable color codes provided:

	 Color codes  color code  
	 /-------------+-------------\    
	 |cRED RED     |cBLU BLU     |    
	 +-------------+-------------+    
	 |cGRE GRE     |cPNK PNK     |    
	 +-------------+-------------+    
	 |cBLK BLK     |cYEL YEL     |    
	 \-------------+-------------/    
	 Before processing  Rendered  
	color code 
	As you can see above, if a colored shape contains any text, the color of the text is
	adjusted according to the underlying color. If the undelying color is dark, the text color
	is changed to white (from the default black).
	Note that color codes only apply if they are within closed shapes, and they have no
	effect anywhere outside.
****** Tags
	ditaa recognises some tags that change the way a rectangular shape is rendered. All
	tags are between { and }. See the table below:
	 Name  Original  Rendered  Comment  
	 Document  +-----+  *  Symbol representing a document.  
		 |{d}  |      
		 |     |      
		 |     |      
		 +-----+      
	 Storage  +-----+  *  Symbol representing a form of  
		 |{s}  |    storage,  
		 |     |    like a database or a hard disk.  
		 |     |      
		 +-----+      
	 Input/Output  +-----+  *  Symbol representing input/output.  
		 |{io} |      
		 |     |      
		 |     |      
		 +-----+      

Tag 	Description
{c} 	Choice or Decision
{d} 	Document - Symbol representing a document
{io} 	Input/Output - Symbol representing input/output
{mo} 	Manual operation
{o} 	Ellipse
{s} 	Storage - Symbol representing a form of storage, like a database or a hard disk.
{tr} 	Trapezoid

@startditaa
+------+------+------+------+------+------+------+
| c {c}|d {d} |io{io}|mo{mo}|o{o}  |s{s}  |tr{tr}|
+------+------+------+------+------+------+------+
@endditaa

****** Dashed lines
	Any lines that contain either at least one = (for horizontal lines) or at least one : (for
	vertical lines) are rendered as dashed lines. Only one of those characters can make a
	whole line dashed, so this feature "spreads". The rationale behind that is that you only
	have to change one character to switch from normal to dashed (and vice versa), rather
	than redrawing the whole line/shape. Special symbols (like document or storage
	symbols) can also be dashed. See below:

	 ----+  /----\  +----+  *  
			 :  |    |  :    |    
			 |  |    |  |{s} |    
			 v  \-=--+  +----+    
	 Before processing  Rendered  
	,* 
****** Point markers
	If * is encountered on a line (but not at the end of the line), it is rendered as a special
	marker, called the point marker (this feature is still experimental). See below:

	 *----*  point marker demo  
	 |    |      /--*    
	 *    *      |    
	 |    |  -*--+    
	 *----*    
	 Before processing  Rendered  
	point marker demo 
****** Text handling
	(This section is still being written)
	If the pattern ' o XXXXX' is encountered, where XXXXX is any text, the 'o' is
	interpreted and rendered as a bullet point. Note that there must be a space before the
	'o' as well as after it. See below:

	 /-----------------\  bullet point demo  
	 | Things to do    |    
	 | cGRE            |    
	 | o Cut the grass |    
	 | o Buy jam       |    
	 | o Fix car       |    
	 | o Make website  |    
	 \-----------------/    
	 Before processing  Rendered  
	bullet point demo 
****** HTML mode
	When ditaa is run using the --html option, the input is an HTML file. The contents of
	the <pre class="textdiagram"> tags are rendered as diagrams and saved in the
	images directory and a new HTML file is produced with the appropriate <img> tags.

	If the id parameter is present in the <pre> tag, its value is used as the filename of the
	rendered png. Otherwise a filename of the form ditaa_diagram_X.png is used, where
	X is a number. Similarly, if there is no output filename specified, the converted html file
	is named in the form of xxxx_processed.html, where xxxx is the filename of the
	original file.

	In this mode, files that exist are not generated again, they are just skipped. You can
	force overwrite of the files using the --overwrite option.
****** Remove shadow or scale diagram
@startuml
ditaa(--no-shadows, scale=0.7)
+---------+  /--------\   +-------+
| cBLU    +--+cAAA    +---+Version|
|         |  |  Data  |   |   V3  |
|    +----+  |  Base  |   |cRED{d}|
|    |cPNK|  |     {s}|   +-------+
|    |    |  \---+----/
+----+----+    
@enduml

***** by Stathis Sideris
 (((-[[http://ditaa.sourceforge.net/#intro][intro]]-))) (((-[[http://ditaa.sourceforge.net/#download][download]]-))) (((-[[http://ditaa.sourceforge.net/#usage][usage and syntax]]-))) (((-[[http://ditaa.sourceforge.net/#friends][friends]]-))) (((-[[http://ditaa.sourceforge.net/#contact][contact]]-)))

 ditaa is a small command-line utility written in Java, that can convert diagrams drawn
 using ascii art ('drawings' that contain characters that resemble lines like | / - ), into
 proper bitmap graphics. This is best illustrated by the following example -- which also
 illustrates the benefits of using ditaa in comparison to other methods :)

			+--------+   +-------+    +-------+  
			|        | --+ ditaa +--> |       |  
			|  Text  |   +-------+    |diagram|  
			|Document|   |!magic!|    |       |  
			|     {d}|   |       |    |       |  
			+---+----+   +-------+    +-------+  
					:                         ^  
					|       Lots of work      |  
					+-------------------------+  
	After conversion using ditaa, the above file becomes:  
	round corner demo  
 round
		 corner demo 

 ditaa interprets ascci art as a series of open and closed shapes, but it also uses
 special markup syntax to increase the possibilities of shapes and symbols that can be
 rendered.

 ditaa is open source and free software (free as in free speech), since it is released
 under the GPL license.

 BUT WHY? Does this thing have any real use?

 There are several reasons why I did this:

 1 Simply for hack value. I wanted to know if/how it could be done and how easily.
 2 Aesthetic reasons and legacy formats: there are several old FAQs with ascii
	diagrams lying out there. At this time and age ascii diagrams make my eyes hurt
	due to their ugliness. ditaa can be used to convert them to something nicer.
	Although ditaa would not be able to convert all of them (due to differences in drawing
	'style' in each case), it could prove useful in the effort of modernising some of those
	documents without too much effort. I also know a lot of people that can make an
	ascii diagram easily, but when it gets to using a diagram program, they don't do
	very well. Maybe this utility could help them make good-looking diagrams
	easily/quickly.
 3 Embedding diagrams to text-only formats: There is a number of formats that
	are text-based (html, docbook, LaTeX, programming language comments), but
	when rendered by other software (browsers, interpreters, the javadoc tool etc), they
	can contain images as part of their content. If ditaa was intergrated with those tools
	(and I'm planning to do the javadoc bit myself soon), then you would have
	readable/editable diagrams within the text format itself, something that would make
	things much easier. ditaa syntax can currently be embedded to [[http://ditaa.sourceforge.net/#html_mode][HTML]].
 4 Reusability of "code": Suppose you make a diagram in ascii art and you render
	it with version 0.6b of ditaa. You keep the ascii diagram, and then version 0.8
	comes out, which features some new cool effects. You re-render your old diagram
	with the new version of ditaa, and it looks better, with zero effort! In that sense ditaa
	is a diagram markup language, with very loose syntax.
***** Download
 (((-[[http://ditaa.sourceforge.net/#intro][intro]]-))) (((-[[http://ditaa.sourceforge.net/#download][download]]-))) (((-[[http://ditaa.sourceforge.net/#usage][usage and syntax]]-))) (((-[[http://ditaa.sourceforge.net/#friends][friends]]-))) (((-[[http://ditaa.sourceforge.net/#contact][contact]]-)))

 The latest version of ditaa can be obtained from its [[http://sourceforge.net/projects/ditaa/][SourceForge project page]].

 You can checkout the code using:

		svn co https://ditaa.svn.sourceforge.net/svnroot/ditaa ditaa

 You can also [[http://ditaa.svn.sourceforge.net/viewvc/ditaa/][browse the code online]].
***** Friends and relatives
 (((-[[http://ditaa.sourceforge.net/#intro][intro]]-))) (((-[[http://ditaa.sourceforge.net/#download][download]]-))) (((-[[http://ditaa.sourceforge.net/#usage][usage and syntax]]-))) (((-[[http://ditaa.sourceforge.net/#friends][friends]]-))) (((-[[http://ditaa.sourceforge.net/#contact][contact]]-)))

 Here is a list of projects that are related to ditaa and add to its functionality: 

 ,* Mikael Brännström's [[http://ditaa-addons.sourceforge.net/][ditaa-addons]] offers two very interesting pieces of functionality:
	The Textdiagram Javadoc taglet allows you to embedd ascii diagrams to Java
	comments and have them rendered as ditaa diagrams in the HTML output. The
	Ditaa Eps program allows you to render to EPS instead of PNG.
 ,* Mathieu Lecarme's [[http://github.com/athoune/Ditaa-web/][ditaa-web]] allows you to install ditaa on your web server and use
	it as a webservice through a HTTP POST request.
 ,* Bill Baker's [[http://ditaa.org/][ditaa.org]] allows you to run ditaa from the web.
 ,* ditaa comes bundled within [[http://orgmode.org/][org-mode]], a major mode for emacs. [[http://doc.norang.ca/org-mode.html#sec-13.1][Here's]] an example
	of how you can use it.
 ,* There is a [[http://www.dokuwiki.org/plugin:ditaa][plugin]] for [[http://www.dokuwiki.org][DocuWiki]] that allows you to render ditaa diagrams in the wiki
	pages. Written by Dennis Ploeger.

 Here's a list of projects that are somehow related to ditaa, and could prove
 useful/relevant while using it: 

 ,* Nadim Khemir's [[http://search.cpan.org/dist/App-Asciio/][asciio]] could be used for producing the ascii diagrams more
	easily. It would require some modifications to its default settings for the diagrams to
	render properly (specifically the characters used for corners should all be set to +).
	Here is a [[http://www.youtube.com/watch?v=IiOHYNHo_Nw][screencast]] of how asciio works.
 ,* Markus Gebhard's [[http://www.jave.de/][JavE]] could be used for the same purpose, although I've never
	tried it.
 ,* If you make sure to keep the lines straight, [[http://www.cinsk.org/emacs/emacs-artist.html][artist-mode]] for emacs can be used to
	produce ditaa-compatible diagrams.
***** Contact
 (((-[[http://ditaa.sourceforge.net/#intro][intro]]-))) (((-[[http://ditaa.sourceforge.net/#download][download]]-))) (((-[[http://ditaa.sourceforge.net/#usage][usage and syntax]]-))) (((-[[http://ditaa.sourceforge.net/#friends][friends]]-))) (((-[[http://ditaa.sourceforge.net/#contact][contact]]-)))

 The author of ditaa is Stathis Sideris. Please feel free to contact me with any
 questions, suggestions, bug fixes, hate mail etc. at:

 stathissideris {at} users {dot} sourceforge {dot} net
 Thanks to John Tsiombikas and Leonidas Tsampros for beta testing of ditaa. :)
 Thanks to Steve Purcell for writing [[http://jargs.sourceforge.net/][JArgs]].
 Thanks to Mr. Jericho for writing [[http://jerichohtml.sourceforge.net/][Jericho HTML Parser]].
 You might also be interested in my [[http://www.stathis.co.uk][personal website]].
**** exempls
***** hello-world : 
[[~/../../../274px.png]]
#+BEGIN_SRC ditaa :file hello-world.png
/--------------+    +--------------+
| cRED         |    |   Datebase   |
| Hello World! *--->* {d} cYEL     |
|              |    |  Datebase    |
+--------------+    +--------------/

#+END_SRC

#+RESULTS:
[[file:hello-world.png]]


#+BEGIN_SRC ditaa :file hello-world.png
/--------------+    /--------------+
| cRED         |    |              |
| Hello World! *--->| {s} cYEL     |
|              |    |  Datebase    |
|              |    |              |
|    +--+      |    |              |
|    |  |      |    |              |
|    +--+   ++-+    |              |
+-----------+       +--------------/
										
										


#+END_SRC

#+results:
[[file:hello-world.png]]

#+BEGIN_SRC ditaa :file hello-world.png
/--------------+    /--------------+
| cRED         |    |              |
| Hello World! *--->* {s} cYEL     |
|              |    |  Datebase    |
|              |    |              |
|    +--+ +----+    |              |
|    |  | |cYEL|    |              |
+-+  +--+ |    |    |              |
  +-------+----+    +--------------/
					 					
										


#+END_SRC
#+results:
[[file:hello-world.png]]

#+BEGIN_SRC ditaa :file hello-world.png :cmdline -r -s 0.8 
${0}
#+END_SRC 
#+results:
[[file:hello-world.png]]
*** ARTIST
**** exempls
#+begin_src artist
					 +-----+   -%%++		         ------+-+--+- ..	 .-	.-
	<-cursor |r..ht|.----.mm.         --/  ++m/mm+-+-m.+-+--++%%%*+----+
			. .  |----+-------------+  --/----++m/+*+*+#m+mm%-mm-#++#**.-. |
		 .   --/----+/---\+*##m*m-+m++------+-/-+---------+%m###%###+-..-|
		....+/ -----/-----\\*#+++mm+%++++-+--/--m-m-+m-+-+|#*%%#m%m##m-m |
		..-m(+(..m**+m-%--|#)#\.###mm##+|###.###*####m%.#||**  |  %#%%-. --
		. -.%\m----\+---+-|/*/ \+####m#%*##############%*|| |. *  %|*%#+.+
			 ++m-\ +/.|.  ./+-.%m|-#%####################|%||    #  %|#mm%+mm
			 .....--++\-----.%%++m%*##################**+*+++m-.-m#%##mm+#%m .
				...++.|(+\-- ..++m-+m#################*#++*--+---+---+.%-+++*|..
					 .*m|#+++--#%m-#%##m###############	 	 ###m-....--++*+...- |
				 .++++\m/+*++++..+-m#+m*%%##################m%.. . %||m--+-%-+
					 .-.+/+-.mm-+m#.- +m%#########m#*-m######%.*-- m . | .	 ..
							--m	----*%*%-#.###############|##.#|*||   | .m.| .+
							.-% ##%%r- -..-mm####*##+m####+----+-----------+m
							..m-.+.-.. . ...m-##m%#%#m#*%#%. . -.	...  ...+.-. .
							 .. ... .  .  .. -+ -. --+. ... -	++ . .  - +...
								 - +.						 .----	 + ..	.	++		-..	..
							 .																												 







																																											 -
#+end_src
*** SVG
**** exepl 
***** 01
(require 'svg)
(insert-image
(svg-image
(let ((svg (svg-create 100 100)))
(svg-circle svg 50 50 20 :stroke-width 6 :stroke 'blue :fill 'yellow)
svg)))  
***** tmp.svg file
image mode
c-c c-c to text
<svg width="100" height="100">
<rect
x="0"
y="0"
width="100"
height="10"
fill="blue"
/>
</svg> 
***** svg-insert-image
#+begin_src emacs-lisp :tangle yes
(setf svg (svg-create 400 400))
(setq svg (svg-create 800 800 :stroke "orange" :stroke-width 5))
(svg-circle svg 50 50 20 :stroke-width 6 :stroke 'blue :fill 'yellow)
(svg-circle svg 100 50 20 :stroke-width 6 :stroke 'blue :fill 'yellow)
(save-excursion (goto-char (point-max)) (svg-insert-image svg))
(svg-circle svg 100 50 20 :stroke-width 6 :stroke 'blue :fill 'yellow)
#+end_src

*** graphviz-dot-mode
**** Emacs package :
Emacs package for working with Graphviz DOT-format files.

The features of this package help you to create .dot or .gv files containing syntax compatible with Graphviz and use Graphviz to convert these files to diagrams. Graphviz is a set of open source graph visualization tools created by AT&T Labs Research. A graph is a way of representing information as a network of connected nodes (shapes) and edges (lines).
**** Installing
***** Installing Dependencies
This of course depends on Emacs and Graphviz. Installation from the command prompt should be something like

$ sudo dnf install emacs graphviz
***** Setting up MELPA
Add the MELPA archive to the list of archives used by the Emacs package manager by adding the following lines to your .emacs or other Emacs start-up file.

(require 'package)
(add-to-list 'package-archives
             '("melpa" . "https://melpa.org/packages/"))
(package-initialize)

Evaluate above code or restart Emacs.
***** Setting up use-package
Add the use-package package to your Emacs by adding the following lines to your start-up file.

(unless (package-installed-p 'use-package)
  (package-refresh-contents)
  (package-install 'use-package))

Evaluate above code or restart Emacs.
***** Setting up graphviz-dot-mode
Now you can finally add Graphviz support to your Emacs by adding the following lines to your start-up file.

(use-package graphviz-dot-mode
  :ensure t
  :config
  (setq graphviz-dot-indent-width 4))

(use-package company-graphviz-dot
  )

Evaluate above code or restart Emacs.
**** Using graphviz-dot-mode
***** Using graphviz-dot-mode
Once installation and setup is completed, usage is as simple as creating or opening a .dot file with C-x C-f (find-file). The file will open in dot mode. Syntax should be highlighted, completion should work and viewing your work is only one keystroke away with C-c C-p. Some useful commands are described below.
Indenting

    C-M-q (graphviz-dot-indent-graph)

    This command will indent the graph, digraph, or subgraph at point and any subgraph within it.

    TAB

    This key will automatically indent the line.
***** Completion
Completion makes use of company-mode:
    company-complete

    This command will complete the attribute or value keyword at point. If more than one completion is possible, a list with suggestions is displayed.
***** Commenting

    M-; (comment-dwim)

    This command will perform the comment command you want (Do What I Mean). If the region is active and transient-mark-mode is on, it will comment the region, unless it only consists of comments, in which case it will un-comment the region. Else, if the current line is empty, it will insert a blank comment line, otherwise it will append a comment to the line and indent it.

    Use C-u M-; to kill the comment on the current line.

    C-x C-; (comment-line)

    This command will comment or un-comment the current line.

    M-j (comment-indent-newline)

    This command will break line the at point and indent, continuing a comment if within one. This indents the body of the continued comment under the previous comment line.
***** Compiling

    C-c C-c (compile)

    This command compiles the current dot file visited by the Emacs buffer. The output file is in the same directory and has the extension determined by the variable graphviz-dot-preview-extension.

    C-x ` (next-error)

    This command will jump to the location in the source file of the next error from the most recent compile. Use C-c c to compile first.
***** Viewing

    C-c C-p (graphviz-dot-preview)

    This command compiles and then (if it compiled successfully) shows the output of the current dot file visited by the Emacs buffer, provided that Emacs is running on a graphical display capable of displaying the graphic file output by dot.

    See image-file-name-extensions to customize the graphic files that can be displayed.

    C-c v (graphviz-dot-view)

    This command invokes an external viewer specified by the variable graphviz-dot-view-command. If graphviz-dot-view-edit-command is t, you will be prompted to enter a new graphviz-dot-view-command. If graphviz-dot-save-before-view is t, the buffer is saved before the external viewer command is invoked.

    See https://graphviz.gitlab.io/resources/ for a list of Graphviz viewers.
**** Customizing
***** graphviz-dot-customize : 
You may customize variables by typing
M-x graphviz-dot-customize RET
or by setting them to different values in your start-up file.
***** graphviz-dot-dot-program : 
    graphviz-dot-dot-program string, default: “dot”
    This variable determines the command name (and path, if necessary) used to invoke the Graphviz dot program. The C-c C-c (compile) function invokes this command.
***** graphviz-dot-preview-extension : 
    graphviz-dot-preview-extension string, default “png”
    This variable determines the file extension used for the C-c C-c (compile) and C-c C-p (graphviz-dot-preview) functions. The format for the compile command is
    dot -T<extension> <filename>.dot > <filename>.<extension>
***** graphviz-dot-save-before-view : 
    graphviz-dot-save-before-view boolean, default t
    This variable controls whether the buffer will be saved to the visited file before the C-c C-v (graphviz-dot-view) function invokes the external dot-file viewer command. Set this boolean variable to t (true) or nil (false).
***** graphviz-dot-view-command : 
    graphviz-dot-view-command string, default: “dotty %s”

    This variable determines the command name (and path, if necessary) used to invoke an external dot-file viewer program. The C-c C-v (graphviz-dot-view) function invokes this command. The name of the file visited by the buffer will be substituted for %s in this string.

    See https://graphviz.gitlab.io/resources/ for a list of Graphviz viewers.
***** graphviz-dot-view-edit-command : 
    graphviz-dot-view-edit-command boolean, default: nil

    This variable controls whether you will be prompted for the external dot-file viewer command name when you use C-c C-v graphviz-dot-view. Set this to t (true) to be prompted to edit the viewer command variable graphviz-dot-view-command every time you use C-c C-v or nil to avoid the prompt.
***** graphviz-dot-indent-width : 
    graphviz-dot-indent-width integer, default: default-tab-width

    This variable determines the indentation used in graphviz-dot-mode buffers.
***** graphviz-dot-mode-hook : 
    graphviz-dot-mode-hook list of functions, default: nil
    This variable determines which functions are called when graphviz-dot-mode starts. To use it, add a line like below to your .emacs or other startup file.
(add-hook 'graphviz-dot-mode-hook 'my-hook)
**** Support :
Support

    Issues, requests and questions can go on its issue tracker: https://github.com/ppareit

    /graphviz-dot-mode/issues
    This mode is maintained at its github page: https://github.com/ppareit/graphviz-dot-mode
    You can support the maintainer through a paypal donation
**** Credits
graphviz-dot-mode was written by:

    Pieter Pareit pieter.pareit@gmail.com
    Rubens Ramos rubensr@users.sourceforge.net
    Eric Anderson http://www.ece.cmu.edu/~andersoe/
    Daniel Birket danielb@birket.com

Other contributors are noted in the version history in the graphviz-dot-mode.el file and the commit history on GitHub.

The source code is maintained on GitHub at https://github.com/ppareit/graphviz-dot-mode by Pieter Pareit (pieter.pareit@gmail.com).
About

Emacs mode for the DOT language, used by graphviz.
ppareit.github.io/graphviz-dot-mode
Resources
Readme
License
GPL-2.0 license
Stars
182 stars
Watchers
12 watching
Forks
44 forks
Releases
3 tags
Packages
No packages published
Contributors 20

    @ppareit
    @ljos
    @daniel-birket
    @petere
    @phst
    @barik
    @DamienCassou
    @PierreTechoueyres
    @kanru
    @kryde
    @tarsius

+ 9 contributors
Languages

Emacs Lisp 94.9%

    Makefile 5.1% 

**** bable
***** install
#+begin_src emacs-lisp :results output silent
(add-to-list 'load-path "~/ELs/Org/Babel/ob-dot.el")
(use-package ob-dot 
	:ensure t
	:config
	(org-babel-do-load-languages
			org-babel-load-languages
			((dot . t))))
#+end_src
#+begin_src emacs-lisp :results output silent
(package-refresh-contents)
(use-package graphviz-dot-mode
	:ensure t
	:config
		(setq graphviz-dot-indent-width 4)
		(setq graphviz-dot-dot-program "~/AddApps/Graphviz/bin/dot.exe"))
#+end_src
#+begin_src emacs-lisp :results output silent
(use-package company-graphviz-dot)
#+end_src

***** exempl
(org-babel-do-load-languages
    org-babel-load-languages
    ((dot . t)))


(use-package graphviz-dot-mode
  :ensure t
  :config
  (setq graphviz-dot-indent-width 4))

(use-package company-graphviz-dot
  )

(load "~/ELs/Org/Babel/ob-dot.el")

(add-to-list 'load-path "~/ELs/Org/Babel/ob-dot.el")
(use-package read-aloud :ensure t
  ;; :config
)
***** experement
****** 1
#+begin_src dot :file e:\Temp\my-dot-diagram.png :cmdline -Kdot -Tpng
graph graphname { 
		a -- b; 
		b -- c;
		b -- d;
		d -> a;
	} 
#+end_src

#+RESULTS:
[[file:e:\Temp\my-dot-diagram.png]]

****** 1
#+begin_src dot :file e:\Temp\my-dot-diagram.png 
graph graphname { 
		a -- b; 
		b -- c;
		b -- d;
		d -- a;
	} 
#+end_src

#+RESULTS:
[[file:e:\Temp\my-dot-diagram.png]]

** TRANSLATE-MOD
*** ob-translate
Each block supports the following arguments:
Argument	Description	Example	Default
:src	Source language.
#+BEGIN_SRC translate :src de	‘auto’ (for auto detection).
:dest	Destination language(s).
#+BEGIN_SRC translate :dest it,fr	‘en’ (for English).
#+end_src

:dest may be a single country-code, or a comma-separated list.
перевод на украинский
#+begin_src translate :dest uk
#+end_src
All defaults are customizable with M-x customize-group RET ob-translate.
:dest may be a single country-code, or a comma-separated list.

All defaults are customizable with M-x customize-group RET ob-translate.
*** google-translate
**** set in
(find-file-other-frame "~/../Dropbox/orgs/adm/2023-06-08_trans.org")
**** google-translate-smooth-translate
A current translation direction could be changed directly in the
minibuffer by means of key bindings such as C-n and C-p for
changing to the next translation direction and to the previous
one respectively.
**** ‘google-translate-core-ui.el’.
Its value is nil

  You can customize this variable.

Documentation:
Determines where translation output will be displayed.

- If it is ‘nil’, output to temporary pop up buffer (default).
- ‘echo-area’: output to the Echo Area.
- ‘popup’: output to the popup tooltip using ‘popup’ package.
- ‘kill-ring’: the output will be added in ‘kill-ring’.
- ‘current-buffer’: the output will be inserted to current buffer.
- ‘help’: output to help buffer.
- ‘paragraph-overlay’: output in current buffer overlay paragraph by paragraph.
- ‘paragraph-insert’: output will be inserted in buffer paragraph by paragraph.
**** auto-toggling : 
While switching among languages I noticed that I change input method quite often. Input method auto toggling allows switch on appropriate input method while switching among languages. Auto toggling will work in case of google-translate-input-method-auto-toggling is set to t and google-translate-preferable-input-methods-alist is defined properly.

This variable may be defined as follow (just for example):

(setq google-translate-preferable-input-methods-alist '((nil . ("en"))
                                                        (ukrainian-programmer-dvorak . ("ru" "uk"))))

In this way, input method is disabled (because of nil) for the minibuffer when source language is English. And "ukrainian-programmer-dvorak" input method is enabled when source language is Russian or Ukrainian.
**** suport mode
***** google-translate-mode
****** What is this?

Emacs minor mode for displaying translated text using Google Translate in real time.
Installation
Prerequirement

This package requires google-translate.el as it's backend. Please install it first if you haven't installed yet.
Configure .emacs

Make sure that 'google-translate-mode.el' is placed in correct location which included in load-path. Add following lines to your .emacs file.

(require 'google-translate-mode)

You can customize time to wait before execute translate from when idle state has began.

(custom-set-variables '(google-translate-mode-idle-wait-time 0.2))
****** Usage

Just enable google-translate-mode in buffer you want to translate.

M-x google-translate-mode RET
**** keys
  (global-set-key "\C-ct" 'google-translate-smooth-translate)

*** go-translate
**** Go-Translate (v1, deprecated)

Improved Google Translate interface with asynchronous request and better user experience.

点击查看中文版文档

I have used translation frequently in recent days.

I tried Google Translate, it is cool, but something troubled me:

    It's synchronous, every query will block anything, and the user experience is not good enough, especially when the network is poor
    The result buffer is not formatted enough, and the operation is less user-friendly
    The code is too long too old, make it hard to hack and extend new functions

So I wrote this plugin. It borrows some ideas and codes from Google Translate, and its main features are:

    Completely asynchronous, without any blocking problems, so very smoothly
    Optimize the display of translation results, the interface is more beautiful and natural
    It is convenient for switch between different languages, and support many interactive operations
    The code is clean, and easy to expand. New functions can be constructed very simply

Installation

With MELPA and package.el:

M-x package-install RET go-translate RET

(require 'go-translate)

Or manually download go-translate.el then put into /some-path, then add this to .emacs:

(add-to-list 'load-path "/some-path")
(require 'go-translate)

Configuration

First, config the local language and your default target language:

(setq go-translate-local-language "en")
(setq go-translate-target-language "fr")

If you have any other translation plans, then put them into go-translate-extra-directions:

(add-to-list go-translate-extra-directions (cons "ja" "ru"))  ; from japanese to russian
(add-to-list go-translate-extra-directions (cons "en" "fr"))  ; from english to french

;; or
(setq go-translate-extra-directions '(("ja" . "ru") ("en" . "fr")))

Other customizations you can look into custom-group - go-translate, eg:

(setq go-translate-buffer-follow-p t)       ; focus the result window
(setq go-translate-buffer-source-fold-p t)  ; fold the source text in the result window
(setq go-translate-buffer-window-config ..) ; config the result window as your wish

Usage

The core command is go-translate, and there are several extended commands such as go-translate-popup. You can bind keys for them. such as:

(global-set-key "\C-ct" 'go-translate)
(global-set-key "\C-cT" 'go-translate-popup)

go-translate will use a buffer to display translation results. In the result buffer, there are several shortcut keys:

    g refresh q exit
    x exchanges source language and target language and refresh the translation
    M-n and M-p, switch to the next/prev available translation direction, and refresh
    y to speak the current selection or word. You should have mplayer installed, or on Windows it will fallback to use powershell to do the tts job.

The go-translate will take the currently selected text or word-at-point as the default input. In the pop-up read-from-minibuffer interface, you can use C-l to clear the input, and fire the translation with Return or C-return. C-return will force the cursor follow the result window after translation. Also, you can use C-n and C-p to switch translation direcitons. These direcitons are those configured in go-translate-extra-directions above.

Other commands based on go-translate:

    go-translate-popup is to display a short translation by popping up a posframe at the cursor.
    go-translate-popup-current is to pop the result for the current selection or word, without prompt.
    go-translate-kill-ring-save will not pop any user interface, but save the result into king-ring for later use.

Extending commands is easy and happy, go and have a try!
Extend

If you want to expand your own command, you only need to overwrite or let-binding the variables below:

    go-translate-text-function the default translation content. If not specified, the text selected or at the cursor will be read
    go-translate-inputs-function is used to process user input and select translation languages
    go-translate-url-function is used to generate the request url
    go-translate-prepare-function some preparatory work done before the request is send. For example, create a buffer and render something
    go-translate-request-function asynchronously request to the server to get the translation content
    go-translate-render-function render the returned result

You can take the source code of go-translate-popup for example.

In addition, a number of go-translate-result-* methods are also encapsulated to extract relevant content from the request result. They are useful when customizing the render function.
Miscellaneous
**** This is a translation framework for emacs, and is flexible and powerful.

    点击查看《中文版文档》
    Documentation of the old version (v1, deprecated)

In addition to Google Translate, it now supports more engines like Google RPC API, Bing, DeepL. You can easily add other translation engines on the basis of the framework.

Very scalable, very flexible, asynchronous request and better user experience.

The reason I rewrite this is that I want to add the new RPC API of Google translation to this plugin. Since adding new API, it's not nice to implement the plugin as a translation framework first.

Then, there is it.
**** Installation

With MELPA and package.el:

M-x package-install RET go-translate RET

(require 'go-translate)

Or manually download go-translate.el then put into /some-path, then add this to .emacs:

(add-to-list 'load-path "/some-path")
(require 'go-translate)
**** Basic Usage

Add this to your configuration file:

(require 'go-translate)

(setq gts-translate-list '(("en" "zh")))

;; (setq gts-default-translator (gts-translator :engines (gts-bing-engine)))

(setq gts-default-translator
      (gts-translator
       :picker (gts-prompt-picker)
       :engines (list (gts-bing-engine) (gts-google-engine))
       :render (gts-buffer-render)))

Then use gts-do-translate to start translation.
**** More configuration

;; your languages pair used to translate
(setq gts-translate-list '(("en" "zh") ("fr" "en")))

;; config the default translator, it will be used by command gts-do-translate
(setq gts-default-translator
      (gts-translator

       :picker ; used to pick source text, from, to. choose one.

       ;;(gts-noprompt-picker)
       ;;(gts-noprompt-picker :texter (gts-whole-buffer-texter))
       (gts-prompt-picker)
       ;;(gts-prompt-picker :single t)
       ;;(gts-prompt-picker :texter (gts-current-or-selection-texter) :single t)

       :engines ; engines, one or more. Provide a parser to give different output.

       (list
        (gts-bing-engine)
        ;;(gts-google-engine)
        ;;(gts-google-rpc-engine)
        ;;(gts-deepl-engine :auth-key [YOUR_AUTH_KEY] :pro nil)
        (gts-google-engine :parser (gts-google-summary-parser))
        ;;(gts-google-engine :parser (gts-google-parser))
        ;;(gts-google-rpc-engine :parser (gts-google-rpc-summary-parser) :url "https://translate.google.com")
        (gts-google-rpc-engine :parser (gts-google-rpc-parser) :url "https://translate.google.com")
        )

       :render ; render, only one, used to consumer the output result. Install posframe yourself when use gts-posframe-xxx

       (gts-buffer-render)
       ;;(gts-posframe-pop-render)
       ;;(gts-posframe-pop-render :backcolor "#333333" :forecolor "#ffffff")
       ;;(gts-posframe-pin-render)
       ;;(gts-posframe-pin-render :position (cons 1200 20))
       ;;(gts-posframe-pin-render :width 80 :height 25 :position (cons 1000 20) :forecolor "#ffffff" :backcolor "#111111")
       ;;(gts-kill-ring-render)

       :splitter ; optional, used to split text into several parts, and the translation result will be a list.

       (gts-paragraph-splitter)
       ))

Slots picker/engines/render/splitter can be a function or lambda, it allows the dynamic initialization of slots while translating. For example, set a separate translation behavior for pdf-tools:

(setq gts-default-translator
      (gts-translator
       :picker
       (lambda ()
         (cond ((equal major-mode 'pdf-view-mode)
                (gts-noprompt-picker :texter (gts-current-or-selection-texter)))
               (t (gts-prompt-picker))))
       :engines
       (lambda ()
         (cond ((equal major-mode 'pdf-view-mode)
                (gts-bing-engine))
               (t (list
                   (gts-bing-engine)
                   (gts-google-engine :parser (gts-google-summary-parser))
                   (gts-google-rpc-engine)))))
       :render
       (lambda ()
         (cond ((equal major-mode 'pdf-view-mode)
                (gts-posframe-pop-render))
               (t (gts-buffer-render))))))

Another example, adopt different translation strategies according to your variable or translate content:

(defvar your-gts-split-enable nil
  "Split translate?")

(setq gts-default-translator
      (gts-translator
       :picker (gts-prompt-picker)
       :splitter (lambda ()
                   (if your-gts-split-enable (gts-paragraph-splitter)))
       :engines (lambda ()
                  (with-slots (text) gts-default-translator
                    (if your-gts-split-enable
                        (gts-deepl-engine :auth-key "xxx")
                      (list
                       (gts-bing-engine)
                       (gts-deepl-engine :auth-key "xxx")
                       (if (string-match-p " " text)
                           (gts-google-rpc-engine)
                         (gts-google-engine))))))
       :render (gts-buffer-render)))

You can look into customize-group - go-translate for more configurations.
Extend your commands

In addition to setup gts-default-translator and direct use gts-do-translate, you can define your own commands.

Eg, pick directly and use Google RPC API to translate:

(defun my-translate-command-1 ()
  (interactive)
  (gts-translate (gts-translator
                  :picker (gts-noprompt-picker)
                  :engines (gts-google-rpc-engine)
                  :render (gts-buffer-render))))

Eg, pick directly and add the results into kill-ring:

(defun my-translate-command-2 ()
  (interactive)
  (gts-translate (gts-translator
                  :picker (gts-noprompt-picker)
                  :engines (gts-google-rpc-engine)
                  :render (gts-kill-ring-render))))

Eg, pop a childframe to show the translation result:

(defun my-translate-command-3 ()
  (interactive)
  (gts-translate (gts-translator
                  :picker (gts-prompt-picker)
                  :engines (gts-google-rpc-engine)
                  :render (gts-posframe-pop-render))))

Eg, show multiple engines's result (Google/DeepL) in a pin childframe:

(defun my-translate-command-4 ()
  (interactive)
  (gts-translate (gts-translator
                  :picker (gts-prompt-picker)
                  :engines (list (gts-google-rpc-engine :parser (gts-google-rpc-summary-parser)) (gts-deepl-engine))
                  :render (gts-kill-ring-render))))

To avoid the cost of creating objects every time you call a command, you can define your command this way:

;; predefine
(defvar my-translator-n
  (gts-translator :picker .. :engines .. :render ..))

;; reference
(defun my-translate-command-n ()
  (interactive)
  (gts-translate my-translator-n)

Compose yourself. Whatever you like.
Builtin Components

The command gts-do-translate will take gts-default-translator as the default translator.
gts-buffer-render

By default, it use gts-buffer-render to display translation results. In the result buffer, there are several shortcut keys:

    h show help
    g refresh q exit
    x exchanges source language and target language and refresh the translation
    M-n and M-p, switch to the next/prev available translation direction, and refresh
    y to speak the current selection or word. You should have mplayer/mpv installed, or on Windows it will fallback to use powershell to do the tts job.
    C clear all caches in gts-default-cacher

gts-posframe-pop-render/gts-posframe-pin-render

Use childframe to show the results.

You should install posframe from MELPA first if you want to use these renders.

gts-posframe-pop-render will pop a childframe in current position to show the results. The frame will be disappeared by any user action, except when you focus into it. When you focus into the frame, you can use all keybindings that like in gts-buffer-render.

gts-posframe-pin-render will pin a childframe to service for the translation result. It is draggable and resizable, and you can change the position/color/etc as you wish.
gts-prompt-picker/gts-noprompt-picker

By default, translator uses gts-prompt-picker to pick the source text and translation from/to languages.

gts-prompt-picker uses a texter to decide the initial source text, the default texter is gts-current-or-selection-texter, it takes the currently selected text or word-at-point as the default source text.

In the pop-up read-from-minibuffer interface triggled by gts-prompt-picker, you can use C-l to clear the input, and fire the translation with Return. Also, you can use C-n and C-p to switch translation directions. These directions are those configured in gts-translate-list above.

The gts-noprompt-picker is another choice if you don't like the prompting style's picking. It will automately take the text from texter and choose a suitable from/to, then translate directly.
gts-paragraph-splitter

Make mix-source-and-target-style translation possible. This is a basic implement to split source text to several parts.
Extend your components

Extending components is easy and happy, go and have a try!

You can replace almost everything. logger/cacher/http-client, picker/texter/render and engine...

For example, you want to insert the results directly into the buffer, create your own render like below.

Define class and override methods:

;; A class
(defclass your-render (gts-render) ())

;; A method
(cl-defmethod gts-out ((_ your-render) task)
  (deactivate-mark)
  (with-slots (err parsed) task
    (if err (user-error "%s" err))
    (insert (if (listp parsed) (string-join parsed "\n\n") parsed))))

Use them in your translator:

(defun my-translate-command-5 ()
  (interactive)
  (gts-translate (gts-translator
                  :picker (gts-noprompt-picker)
                  :engines (gts-google-rpc-engine)
                  :render (your-render) ; yeap!
                  )))

Of course, it's relatively easy to build a new translation engine too:

    create a class from gts-engine, implement gts-translate/gts-tts
    create a class from gts-parser, implement gts-parse

For example, if you can't stand the poor performance of url.el, you can implement your own gts-http-client with curl, etc.
Miscellaneous

More documentation will be added later.
** yasnippet
*** Path to my snipets 
cd D:\Development\lisp\HOME\.emacs.d\snippets\python-mode 
*** Path to lib snipets 
cd D:\Development\lisp\HOME\.emacs.d\elpa\yasnippet-snippets-20200122.1140\snippets 
*** doc 
**** my
		 снипеты из твоей папки переписывают орегиналые
		 если уних совподают имен
		 снипеты подгрухаются вместе емаком
		 по команда из меню all - a  
yas-reload-all переподгружает их
**** manual
[[http://joaotavora.github.io/yasnippet/][Yet another snippet extension]]
***** Expanding
****** Inserting region or register contents into snippet
It's often useful to inject already written text in the middle of a snippet. The variable
[[http://joaotavora.github.io/yasnippet/snippet-reference.html#yas-wrap-around-region][yas-wrap-around-region]] when to t substitute the region contents into the $0
placeholder of a snippet expanded by [[http://joaotavora.github.io/yasnippet/snippet-reference.html#yas-insert-snippet][yas-insert-snippet]]. Setting it to a character
value (e.g. ?0) will insert the contents of corresponding register. 

Older (versions 0.9.1 and below) of Yasnippet, supported a setting of cua that is
equivalent to ?0 but only worked with cua-mode turned on. This setting is still
supported for backwards compatibility, but is now entirely equivalent to ?0. 
***** Writing snippets 
http://joaotavora.github.io/yasnippet/snippet-development.html
****** Mirrors 
We refer the tab stops with placeholders as a field. A field can have mirrors. All
mirrors get updated whenever you update any field text. Here's an example: 

\begin{${1:enumerate}}
    $0
\end{$1}

When you type "document" at ${1:enumerate}, the word "document" will also be
inserted at \end{$1}. The best explanation is to see the screencast([[http://www.youtube.com/watch?v=vOj7btx3ATg][YouTube]] or [[http://yasnippet.googlecode.com/files/yasnippet.avi][avi]]
[[http://yasnippet.googlecode.com/files/yasnippet.avi][video]]). 

The tab stops with the same number to the field act as its mirrors. If none of the tab
stops has an initial value, the first one is selected as the field and others mirrors. 
****** Mirrors with transformations 

If the value of an ${n:-construct starts with and contains $(, then it is interpreted as a
mirror for field n with a transformation. The mirror's text content is calculated according
to this transformation, which is Emacs-lisp code that gets evaluated in an environment
where the variable [[http://joaotavora.github.io/yasnippet/snippet-reference.html#yas-text][yas-text]] is bound to the text content (string) contained in the field n.
Here's an example for Objective-C: 

- (${1:id})${2:foo}
{
    return $2;
}

- (void)set${2:$(capitalize yas-text)}:($1)aValue
{
    [$2 autorelease];
    $2 = [aValue retain];
}
$0

Look at ${2:$(capitalize yas-text)}, it is a mirror with transformation instead of a field.
The actual field is at the first line: ${2:foo}. When you type text in ${2:foo}, the
transformation will be evaluated and the result will be placed there as the transformed
text. So in this example, if you type "baz" in the field, the transformed text will be
"Baz". This example is also available in the screencast. 

Another example is for rst-mode. In reStructuredText, the document title can be some
text surrounded by "=" below and above. The "=" should be at least as long as the
text. So 

=====
Title
=====

is a valid title but 

===
Title
===

is not. Here's an snippet for rst title: 

${1:$(make-string (string-width yas-text) ?\=)}
${1:Title}
${1:$(make-string (string-width yas-text) ?\=)}

$0

Note that a mirror with a transform is not restricted to the text of the field it is mirroring.
By making use of [[http://joaotavora.github.io/yasnippet/snippet-reference.html#yas-field-value][yas-field-value]], a mirror can look at any of the snippet's field (as
mentioned above, all mirrors are updated when any field is updated). Here is an
example which shows a "live" result of calling format: 

(format "${1:formatted %s}" "${2:value}")
=> "${1:$(ignore-errors (format (yas-field-value 1) (yas-field-value 2)))}"

To keep the example simple, it uses ignore-errors to suppress errors due to
incomplete format codes. 

****** Fields with transformations

From version 0.6 on, you can also have lisp transformation inside fields. These work
mostly like mirror transformations. However, they are evaluated when you first enter the
field, after each change you make to the field and also just before you exit the field. 

The syntax is also a tiny bit different, so that the parser can distinguish between fields
and mirrors. In the following example 


#define "${1:mydefine$(upcase yas-text)}"

mydefine gets automatically upcased to MYDEFINE once you enter the field. As you
type text, it gets filtered through the transformation every time. 

Note that to tell this kind of expression from a mirror with a transformation, YASnippet
needs extra text between the : and the transformation's $. If you don't want this
extra-text, you can use two $'s instead. 


#define "${1:$$(upcase yas-text)}"

Please note that as soon as a transformation takes place, it changes the value of the
field and sets it its internal modification state to true. As a consequence, the
auto-deletion behaviour of normal fields does not take place. This is by design. 

****** Choosing fields value from a list and other tricks

As mentioned, the field transformation is invoked just after you enter the field, and with
some useful variables bound, notably [[http://joaotavora.github.io/yasnippet/snippet-reference.html#yas-modified-p][yas-modified-p]] and [[http://joaotavora.github.io/yasnippet/snippet-reference.html#yas-moving-away-p][yas-moving-away-p]].
Because of this feature you can place a transformation in the primary field that lets you
select default values for it. 

The [[http://joaotavora.github.io/yasnippet/snippet-reference.html#yas-choose-value][yas-choose-value]] does this work for you. For example: 

<div align="${2:$$(yas-choose-value '("right" "center" "left"))}">
  $0
</div>

See the definition of [[http://joaotavora.github.io/yasnippet/snippet-reference.html#yas-choose-value][yas-choose-value]] to see how it was written using the two
variables. 

Here's another use, for LaTeX-mode, which calls reftex-label just as you enter snippet
field 2. This one makes use of [[http://joaotavora.github.io/yasnippet/snippet-reference.html#yas-modified-p][yas-modified-p]] directly. 

\section{${1:"Titel der Tour"}}%
\index{$1}%
\label{{2:"waiting for reftex-label call..."$(unless yas-modified-p (reftex-label nil 'dont-
insert))}}%

The function [[http://joaotavora.github.io/yasnippet/snippet-reference.html#yas-verify-value][yas-verify-value]] has another neat trick, and makes use of
[[http://joaotavora.github.io/yasnippet/snippet-reference.html#yas-moving-away-p][yas-moving-away-p]]. Try it and see! Also, check out this [[http://groups.google.com/group/smart-snippet/browse_thread/thread/282a90a118e1b662][thread]] 

****** Nested placeholder fields

From version 0.6 on, you can also have nested placeholders of the type: 

<div${1: id="${2:some_id}"}>$0</div>

This allows you to choose if you want to give this div an id attribute. If you tab forward
after expanding, it will let you change "some\id" to whatever you like. Alternatively, you
can just press C-d (which executes [[http://joaotavora.github.io/yasnippet/snippet-reference.html#yas-skip-and-clear-or-delete-char][yas-skip-and-clear-or-delete-char]]) and go straight
to the exit marker. 

By the way, C-d will only clear the field if you cursor is at the beginning of the field and
it hasn't been changed yet. Otherwise, it performs the normal Emacs delete-char
command. 

****** Indentation markers

If [[http://joaotavora.github.io/yasnippet/snippet-reference.html#yas-indent-line][yas-indent-line]] is not set to 'auto, it's still possible to indent specific lines by adding
an indentation marker, $>, somewhere on the line. 


***** Organizing snippets 
http://joaotavora.github.io/yasnippet/snippet-organization.html	
***** Reference
http://joaotavora.github.io/yasnippet/snippet-reference.html#yas-wrap-around-region
** hidra mod
    https://github.com/abo-abo/hydra
This is a package for GNU Emacs that can be used to tie related commands into a family of short bindings with a common prefix - a Hydra.
** Org-brain
*** help
https://github.com/Kungsgeten/org-brain
**** help on keys
***** SVG Imageorg-brain-visualize
The primary usage of org-brain is through M-x org-brain-visualize (which you might
want to bind to a key). From there you can browse entries, add/remove
relationships, open entries for editing etc. The following keybindings are available in
org-brain-visualize:
***** Key  Command  Description : 
 Key  Command  Description  
 m  org-brain-visualize-mind-map  Toggle between normal and  
		 mind-map visualization.  
 j or TAB  forward-button  Goto next link  
 k or S-TAB  backward-button  Goto previous link  
 b  org-brain-visualize-back  Like the back button in a web  
		 browser.  
 h or *  org-brain-add-child-headline *  Add a new child headline to  
		 entry  
 c  org-brain-add-child *  Add an existing entry, or a new  
		 file, as a child  
 C  org-brain-remove-child *  Remove one the entry’s child  
		 relations  
 e  org-brain-annotate-edge  Annotate the connection  
		 between the visualized entry  
		 and the entry link at point.  
 p  org-brain-add-parent *  Add an existing entry, or a new  
		 file, as a parent  
 P  org-brain-remove-parent *  Remove one of the entry’s  
		 parent relations  
 f  org-brain-add-friendship *  Add an existing entry, or a new  
		 file, as a friend  
 F  org-brain-remove-friendship *  Remove one of the entry’s  
		 friend relations  
 n  org-brain-pin *  Toggle if the entry is pinned  
		 or not  
 N  org-brain-add-nickname  Add a nickname for the entry  
		 (you can have several names  
		 for the same entry)  
 s  org-brain-select-dwim  Select an entry for batch  
		 processing.  
 S  org-brain-select-map  Prefix key to do batch  
		 processing with selected  
		 entries.  
 t  org-brain-set-title  Change the title of the entry.  
 T  org-brain-set-tags  Change the tags of the entry.  
 d  org-brain-delete-entry  Choose an entry to delete.  
 l  org-brain-visualize-add-resource  Add a new resource link in  
		 entry  
 r  org-brain-open-resource  Choose and open a resource  
		 from the entry.  
 C-y  org-brain-visualize-paste-resource  Add a new resource link from  
		 clipboard  
 a  org-brain-visualize-attach  Run org-attach on entry  
		 (headline entries only)  
 A  org-brain-archive  Archive the entry (headline  
		 entries only)  
 o  org-brain-goto-current  Open current entry for editing  
 O  org-brain-goto  Choose and edit one of your  
		 org-brain entries  
 v  org-brain-visualize  Choose and visualize a  
		 different entry  
 V  org-brain-visualize-follow  Similar to  
		 org-agenda-follow-mode; view  
		 visualized entry in another  
		 window.  
 w  org-brain-visualize-random  Visualize one of your entries  
		 at random.  
 W  org-brain-visualize-wander  Visualize at random, in a set  
		 interval. W again to cancel.  
 C-c C-x C-v  org-toggle-inline-images  Display org-mode images in  
		 the entry text.  
 M  Move prefix  Move (refile) the current entry.  
 M r  org-brain-refile  Move current entry to another  
		 entry (change local parent).  
 M p  org-brain-change-local-parent  Choose among the entry’s  
		 parents and make another of  
		 them the local parent.  

The commands above marked with * can be run with the universal argument C-u in
order to operate on the entry link at point instead of the visualized entry.

You may use org-store-link inside of org-brain-visualize in order to store a link to the
currently visualized org-brain entry.
***** universal argument C-u : 
If the universal argument C-u is used when running org-brain-visualize-random or
org-brain-visualize-wander, the randomized targets are restricted to descendants
(children, grandchildren, grand-grandchildren etc) of the currently visualized entry.
Use for instance C-u W to wander among the descendants.

The universal argument C-u can also be used with org-brain-open-resource. This
lets you choose not only resource from the visualized entry, but also from
descendants (children, grand-children, etc) of that entry.

If the universal argument C-u is used when calling org-brain-annotate-edge then the
annotation will be “one-way”. The default behaviour is otherwise to annotate the
connection in both directions.

***** toggle by Zooming : 
When using the mind map visualization (toggle by pressing m), you can use the
following keybindings in order to show or hide successive levels of hierarchy relative
to the current entry.

 Key  Command  Description  
 +  org-brain-show-descendant-level  Show one more level of entries to the  
		 right (children of children, etc.)  
 -  org-brain-hide-descendant-level  Hide rightmost level of descendant  
		 entries  
 z  org-brain-show-ancestor-level  Show one more level of entries to the  
		 left (parents of parents, etc.)  
 Z  org-brain-hide-ancestor-level  Hide leftmost level of ancestor entries  

***** batch processing : 
If you want to select several entries and then remove/add them as
children/parents/friends you can use the s key (org-brain-select-dwim) to select an
entry. If the point is over a button link to an entry, that entry will be selected, otherwise
it will select the currently visualized entry. If the entry is already selected, it will be
unselected instead.

Once you have selected all the entries you wish to use, you can use the S prefix key
to do batch processing on the selected entries. The keybindings in this prefix keymap
is identical to those in org-brain-visualize. You could for instance use S c to add all
selected entries as children to the visualized entry, or S P to remove the parent
relationship of the selected entries. When you’re done and wish to clear the selection
use org-brain-clear-selected, which is bound to S s.
**** ID
***** M-x org-brain-update-id-locations
			Удобно в ручную можно удалить любые айди
потом запустить эту команду и он удалит эти айди из списка
поскольку сам фали содержит пути к файлам
и как результат если в файле больше нет айди
он удаляет его из файла-списка
org-brain use org-id in order to speed things up. Because of this, the variable org-id-track-globally should be t (which it already is by default). You may want to modify org-id-locations-file too. If you add entries to org-brain directly from org-mode you must assign headliens an ID. A comfortable way to do this is with the command org-brain-ensure-ids-in-buffer. Even more comfortable is to add that to before-save-hook, so that it runs when saving.
If you find that org-brain is missing entries, or list entries which doesn’t exist, try using M-x org-brain-update-id-locations, which syncs the org-brain entries with the org-id caching system.
****** exempl
 (setq org-id-track-globally t)
  (setq org-id-locations-file "~/.emacs.d/.org-id-locations")
  (add-hook 'before-save-hook #'org-brain-ensure-ids-in-buffer)
***** M-x org-brain-headline-to-file. : 
If you have a headline entry, which you want to convert to a file entry, use M-x org-brain-headline-to-file. Unfortunately there is currently no function to convert a file entry into a headline entry.
***** M-x org-brain-get-id
You can edit org-brain entries directly from org-mode. You can use the default org-mode outline structure to define parent/children relationships, but keep in mind that only entries with an ID property will be considered as entries to org-brain; use M-x org-brain-get-id to create an ID property to the current org-mode headline. Another alternative is to use M-x org-brain-refile which will create the ids for you. You can also create IDs for all headlines in the buffer with M-x org-brain-ensure-ids-in-buffer, and you might find it useful to add this to before-save-hook.
**** From ORG-MODE 
***** org-brain-prefix-map
Most of the commands available in org-brain-visualize-mode is also bound to the prefix keymap org-brain-prefix-map. You can bind this to a key in org-mode, for instance C-c b, and you could then type C-c b p to add a parent to the current entry. Example config: (define-key org-mode-map (kbd "C-c b") 'org-brain-prefix-map).
***** org-brain-add-entry
You could also use M-x org-brain-add-entry if you do not want to visualize the new entry. Also commands which add children, parents and friends, or links to entries, can create new entries in the same way. Se General information below.
***** org-brain-add-child : 
Most of the commands available in org-brain-visualize can also be used in org-mode directly, in which case they will operate on the “entry at point”. In other words you can use M-x org-brain-add-child directly from org-mode in order to add a child to the org-brain entry at point. 
***** org-brain-goto-<relationsship> : 
You may also want to use the commands org-brain-goto-<relationsship> to navigate between entries.
***** headline convert to file: 
If you have a headline entry, which you want to convert to a file entry, use M-x
org-brain-headline-to-file. Unfortunately there is currently no function to convert a file
entry into a headline entry.
***** Editing from org-mode
 You can edit org-brain entries directly from org-mode. You can use the default
 org-mode outline structure to define parent/children relationships, but keep in mind
 that only entries with an ID property will be considered as entries to org-brain; use
 M-x org-brain-get-id to create an ID property to the current org-mode headline.
 Another alternative is to use M-x org-brain-refile which will create the ids for you. You
 can also create IDs for all headlines in the buffer with M-x
 org-brain-ensure-ids-in-buffer, and you might find it useful to add this to
 before-save-hook.

 Most of the commands available in org-brain-visualize can also be used in org-mode
 directly, in which case they will operate on the “entry at point”. In other words you can
 use M-x org-brain-add-child directly from org-mode in order to add a child to the
 org-brain entry at point. You may also want to use the commands
 org-brain-goto-<relationsship> to navigate between entries.

 Most of the commands available in org-brain-visualize-mode is also bound to the
 prefix keymap org-brain-prefix-map. You can bind this to a key in org-mode, for
 instance C-c b, and you could then type C-c b p to add a parent to the current entry.
 Example config: (define-key org-mode-map (kbd "C-c b") 'org-brain-prefix-map).

 You may want to create a link to an org-brain entry in an org-mode file (not
 necessarily an org-brain file itself). org-brain provides several link types for this
 purpose. You can use org-insert-link (bound to C-c C-l in org-mode by default) to
 insert one of these links. They all have in common that they, when clicked, will open
 the org-brain entry for editing. When inserting a link like this, org-brain will run
 completion upon all your entries.

****** brain:
	 The default kind of link. Just let’s you visit another org-brain entry when clicked.
	 If the variable org-brain-backlink is t a brain-link will also be created as a
	 resource in the link target, linking back to where the link was created. If
	 org-brain-backlink is set to a string, that string will be added as a prefix to the
	 title of the backlink. Example: You set org-brain-backlink to =”<– “= and create
	 a brain: link in Rabbits linking to Carrots. Now a resource with the description
	 <-- Rabbits will be created in Carrots. 
****** brain-child:
	 When inserted using org-insert-link this will make the linked entry a child to the
	 current org-brain entry, upon completion. Keep in mind that this doesn’t work if
	 you type the link manually; only by completion through org-insert-link. 
****** brain-parent:
	 Like brain-child: but makes the linked entry a parent of the current entry. 
******  brain-friend:
	 Like brain-child: but adds the linked entry as a friend. 
******  brainswitch
	 If you have multiple brains you may want a link which switches to a specific brain
	 and one of its entries. The brainswitch link allows for this. 
****** inserting links : 
	The names of the relationship inserting links (brain-child, brain-parent and
	brain-friend) can be customized with the variables org-brain-child-link-name,
	org-brain-parent-link-name, and org-brain-friend-link-name. This customization
	should be done before loading org-brain. If you’re using use-package, put the
	customization in the :init block.
**** Renaming files in org-brain
Headline entries use org-id to identify themselves, so the headlines can be manually renamed without worries. File entries, on the other hand, uses the filename as the identifier. This will cause problems if you try to manually rename files inside of org-brain.

In order to rename a file, use M-x org-brain-rename-file.
**** Special tags
You might have a headline which you do not really want as an entry in org-brain. The most basic way to exclude such a headline is simply to not add an ID property to it. However, org-brain also provide two tags, which you can use to tag the headline:
***** :nobrain:
This tag excludes the headline, and its subheadings, from your org-brain entries. You can change the tag name by modifying org-brain-exclude-tree-tag.
***** :childless:
This tag does not exclude the headline, but it excludes the subheadings. You can change the tag name by modifying org-brain-exclude-children-tag. Works on file entries.
The following tags modifies the kind of information that is shown when an entry is visualized:

***** :notext:
Do not show the entry’s text in org-brain-visualize. You can change the tag name by modifying org-brain-exclude-text-tag.
***** :resourceless:
Do not show the entry’s resources in org-brain-visualize. You can change the tag name by modifying org-brain-exclude-resources-tag.
***** :showchildren:
By default local child entries aren’t shown as text. By setting this tag the entry get the entire subtree as text. You can change the tag name by modifying org-brain-show-children-tag. Works on file entries.
***** :nosiblings:
You may have an entry with lots of children, and when you visualize one of these children you might not want to see the siblings from this parent. A good example would be if you have an index entry or similar. By tagging the parent with nosiblings the parent’s children will not show siblings from that parent. You can change the tag name by modifying org-brain-exclude-siblings-tag.
***** :nolocalparent:
This is similar to :nosiblings: but the tagged parent will not be shown at all when one of its local children are visualized.
The following tags modify the way how information is shown when an entry is visualized.
***** :ownline:
Make each child of the tagged entry appear on its own line when the tagged entry is visualized. This only affects the tagged entry. It works akin to temporarily setting org-brain-child-fill-column-sexp to 0.
***** :nosort:
Display each child of the tagged node in the order the children are listed in the file, rather than in the sorted order determined by org-brain-visualize-sort-function. This affects the order of the node’s children in both the child list (when the tagged node is being visited) and in the sibling list (when one of the tagged node’s children is being visited).
**** Having multiple brains
You can have multiple brains simply by having more than one brain folder. In this way, each folder becomes a separate brain. You can switch between these using M-x org-brain-switch-brain. You can also use brainswitch: links in org-mode to switch brains.

If you run org-brain-visualize from inside an org-file in the root of an org-brain directory, org-brain will automatically switch to this brain.
**** Customizing the look of entry titles
When visualizing you might want to see additional information about the entries. This
can be done by customizing the following variables:

 org-brain-vis-title-prepend-functions
 org-brain-vis-title-append-functions
 org-brain-vis-current-title-prepend-functions
 org-brain-vis-current-title-append-functions

Each of these variables should be a list of functions, which all takes an entry as the
single parameter and returns a string. This string is the prepended or appended to
the entry’s title, according to the name of the function. The variables with the name
current in them only applies the functions on the currently visualized entry (the focused
one).

Suitable functions to add to these lists might be:

 org-brain-entry-icon (included in org-brain-vis-title-prepend-functions by default)
 org-brain-entry-todo-state
 org-brain-entry-tags-string
** Elpy
*** keys short help
**** my keys 
	 (kbd "C-SPC") 'company-complete)
	 (kbd "M-e M-f M-p") 'xref-find-definitions)
	 (kbd "M-e M-f M-P") 'xref-find-definitions-other-frame)
	 (kbd "M-e M-f M-o") 'elpy-occur-definitions)
	 (kbd "M-e M-f M-a") 'elpy-goto-assignment)
	 (kbd "M-e M-f M-d") 'elpy-goto-definition)
	 (kbd "M-e M-f M-D") 'elpy-goto-definition-other-window)
	 (kbd "<f8>") save & recompile
**** Navigation
	 M-. (elpy-goto-definition)[[https://elpy.readthedocs.io/en/latest/ide.html#command-elpy-goto-definition][¶]]
	 C-x 4 M-. (elpy-goto-definition-other-window)[[https://elpy.readthedocs.io/en/latest/ide.html#command-elpy-goto-definition-other-window][¶]]
	 M-* (pop-tag-mark)[[https://elpy.readthedocs.io/en/latest/ide.html#command-pop-tag-mark][¶]]
	 C-c C-o (elpy-occur-definitions)[[https://elpy.readthedocs.io/en/latest/ide.html#command-elpy-occur-definitions][¶]]
	 M-x elpy-goto-assignment[[https://elpy.readthedocs.io/en/latest/ide.html#command-elpy-goto-assignment][¶]]
	 M-. (xref-find-definitions)[[https://elpy.readthedocs.io/en/latest/ide.html#command-xref-find-definitions][¶]]
	 C-x 4 . (xref-find-definition-other-window)[[https://elpy.readthedocs.io/en/latest/ide.html#command-xref-find-definition-other-window][¶]]
	 C-x 5 . (xref-find-definition-other-frame)[[https://elpy.readthedocs.io/en/latest/ide.html#command-xref-find-definition-other-frame][¶]]
	 M-, (xref-pop-marker-stack)[[https://elpy.readthedocs.io/en/latest/ide.html#command-xref-pop-marker-stack][¶]]
	 M-? (xref-find-references)[[https://elpy.readthedocs.io/en/latest/ide.html#command-xref-find-references][¶]]
	 C-M-. (xref-find-apropos)[[https://elpy.readthedocs.io/en/latest/ide.html#command-xref-find-apropos][¶]]
**** elpy-doc : 
	 C-c C-d (elpy-doc)[[https://elpy.readthedocs.io/en/latest/ide.html#command-elpy-doc][¶]]
**** syntax check : 
	 C-c C-n (elpy-flymake-next-error)[[https://elpy.readthedocs.io/en/latest/ide.html#command-elpy-flymake-next-error][¶]]
	 C-c C-p (elpy-flymake-previous-error)[[https://elpy.readthedocs.io/en/latest/ide.html#command-elpy-flymake-previous-error][¶]]
	 C-c C-v (elpy-check)[[https://elpy.readthedocs.io/en/latest/ide.html#command-elpy-check][¶]]
	 python-check-command (Customize Option)[[https://elpy.readthedocs.io/en/latest/ide.html#option-python-check-command][¶]]
**** Debugging[[https://elpy.readthedocs.io/en/latest/ide.html#debugging][¶]]
	 C-c C-u d (elpy-pdb-debug-buffer)[[https://elpy.readthedocs.io/en/latest/ide.html#command-elpy-pdb-debug-buffer][¶]]
	 C-c C-u b (elpy-pdb-toggle-breakpoint-at-point)[[https://elpy.readthedocs.io/en/latest/ide.html#command-elpy-pdb-toggle-breakpoint-at-point][¶]]
	 C-c C-u p (elpy-pdb-break-at-point)[[https://elpy.readthedocs.io/en/latest/ide.html#command-elpy-pdb-break-at-point][¶]]
	 C-c C-u e (elpy-pdb-debug-last-exception)[[https://elpy.readthedocs.io/en/latest/ide.html#command-elpy-pdb-debug-last-exception][¶]]
**** Testing[[https://elpy.readthedocs.io/en/latest/ide.html#testing][¶]]
	 C-c C-t (elpy-test)[[https://elpy.readthedocs.io/en/latest/ide.html#command-elpy-test][¶]]
	 M-x elpy-set-test-runner[[https://elpy.readthedocs.io/en/latest/ide.html#command-elpy-set-test-runner][¶]]
**** Refactoring[[https://elpy.readthedocs.io/en/latest/ide.html#refactoring][¶]]
	 C-c C-e (elpy-multiedit-python-symbol-at-point)[[https://elpy.readthedocs.io/en/latest/ide.html#command-elpy-multiedit-python-symbol-at-point][¶]]
	 C-c C-r f (elpy-format-code)[[https://elpy.readthedocs.io/en/latest/ide.html#command-elpy-format-code][¶]]
	 elpy-formatter (Customize Option)[[https://elpy.readthedocs.io/en/latest/ide.html#option-elpy-formatter][¶]]
	 Jedi refactoring[[https://elpy.readthedocs.io/en/latest/ide.html#jedi-refactoring][¶]]
	 C-c C-r r (elpy-refactor-rename)[[https://elpy.readthedocs.io/en/latest/ide.html#command-elpy-refactor-rename][¶]]
	 C-c C-r v (elpy-refactor-extract-variable)[[https://elpy.readthedocs.io/en/latest/ide.html#command-elpy-refactor-extract-variable][¶]]
	 C-c C-r f (elpy-refactor-extract-function)[[https://elpy.readthedocs.io/en/latest/ide.html#command-elpy-refactor-extract-function][¶]]
	 C-c C-r i (elpy-refactor-inline)[[https://elpy.readthedocs.io/en/latest/ide.html#command-elpy-refactor-inline][¶]]
*** IDE Features
**** Projects[[https://elpy.readthedocs.io/en/latest/ide.html#projects][¶]]
	Elpy supports the notion of projects, a related collection of files under a common
	directory. This common directory is called the project root. A number of Elpy’s
	commands work on all files inside the project root.

	C-c C-f (elpy-find-file)[[https://elpy.readthedocs.io/en/latest/ide.html#command-elpy-find-file][¶]]

	 Find a file in the current project. This uses a search-as-you-type interface for all
	 files under the project root.

	 A prefix argument enables “do what I mean” mode. On an import statement, it will
	 try to open the module imported. Elsewhere in a file, it will look for an associated
	 test or implementation file, and if found, open that. If this fails, either way, it will fall
	 back to the normal find file in project behavior.

	 If the current file is called foo.py, then this will search for a test_foo.py in the same
	 directory, or in a test or tests subdirectory. If the current file is already called
	 test_foo.py, it will try and find a foo.py nearby.

	 This command uses [[https://github.com/bbatsov/projectile][projectile]] or [[https://github.com/technomancy/find-file-in-project][find-file-in-project]] under the hood, so you need
	 one of them to be installed.

	C-c C-s (elpy-rgrep-symbol)[[https://elpy.readthedocs.io/en/latest/ide.html#command-elpy-rgrep-symbol][¶]]

	 Search the files in the current project for a string. By default, this uses the symbol
	 at point. With a prefix argument, it will prompt for a regular expression to search.

	 This is basically a grep -r through the project.

	In addition to these two commands, [[https://elpy.readthedocs.io/en/latest/ide.html#command-elpy-check][elpy-check]] also supports optionally checking all
	files in the current project.

	Elpy’s idea of the project root and which files belong to a project and which don’t can
	be influenced as well.

	M-x elpy-set-project-root[[https://elpy.readthedocs.io/en/latest/ide.html#command-elpy-set-project-root][¶]]

	 Set the current project root directory. This directory should contain all files related
	 to the current project.

	elpy-project-ignored-directories (Customize Option)[[https://elpy.readthedocs.io/en/latest/ide.html#option-elpy-project-ignored-directories][¶]]

	 When Elpy searches for files in the current project, it will ignore files in directories
	 listed here.

	elpy-project-root-finder-functions (Customize Option)[[https://elpy.readthedocs.io/en/latest/ide.html#option-elpy-project-root-finder-functions][¶]]

	 To find the project root, Elpy can utilize a number of heuristics. With this option,
	 you can configure which are used.

	To configure Elpy specifically for a single project, you can use Emacs’ [[https://www.gnu.org/software/emacs/manual/html_node/emacs/Directory-Variables.html][Directory]]
	[[https://www.gnu.org/software/emacs/manual/html_node/emacs/Directory-Variables.html][Variables]]. Elpy provides a simple interface to this.

	M-x elpy-set-project-variable[[https://elpy.readthedocs.io/en/latest/ide.html#command-elpy-set-project-variable][¶]]

	 Set or change the value of a project-wide variable. With a prefix argument, the
	 value for the variable is removed.

	 This only takes effect in new buffers.
**** Completion[[https://elpy.readthedocs.io/en/latest/ide.html#completion][¶]]
	When you type Python code, Elpy will try and figure out possible completions and
	provide them in a suggestion window. If Elpy doesn’t do so automatically, you can
	force it to complete right where you are.

	M-TAB (elpy-company-backend)[[https://elpy.readthedocs.io/en/latest/ide.html#command-elpy-company-backend][¶]]

	 Provide completion suggestions for a completion at point.

	You can use cursor keys or M-n and M-p to scroll through the options, RET to use the
	selected completion, or TAB to complete the common part.

	On any completion option, C-d or <f1> will display a temporary window with
	documentation. C-w will display a temporary window showing the source code of the
	completion to get some context.

	Elpy uses [[https://company-mode.github.io/][Company Mode]] for the completion interface, so its documentation is a good
	place for further information.

	elpy-get-info-from-shell (Customize Option)[[https://elpy.readthedocs.io/en/latest/ide.html#option-elpy-get-info-from-shell][¶]]

	 If t, use the shell to gather docstrings and completions. Normally elpy provides
	 completion and documentation using static code analysis (from jedi). With this
	 option, elpy will add the completion candidates and the docstrings from the
	 associated python shell; This activates fallback completion candidates for cases
	 when the static code analysis fails.
**** Navigation[[https://elpy.readthedocs.io/en/latest/ide.html#navigation][¶]]
	Elpy supports advanced navigation features.

	M-. (elpy-goto-definition)[[https://elpy.readthedocs.io/en/latest/ide.html#command-elpy-goto-definition][¶]]

	 Go to the location where the identifier at point is defined. This is not always easy
	 to make out, so the result can be wrong. Also, the backends can not always
	 identify what kind of symbol is at point. Especially after a few indirections, they
	 have basically no hope of guessing right, so they don’t.

	C-x 4 M-. (elpy-goto-definition-other-window)[[https://elpy.readthedocs.io/en/latest/ide.html#command-elpy-goto-definition-other-window][¶]]

	 Same as elpy-go-to-definition (with the same caveats) but goes to the definition
	 of the symbol at point in other window, if defined.

	M-* (pop-tag-mark)[[https://elpy.readthedocs.io/en/latest/ide.html#command-pop-tag-mark][¶]]

	 Go back to the last place where M-. was used, effectively turning M-. and M-* into
	 a forward and backward motion for definition lookups.

	C-c C-o (elpy-occur-definitions)[[https://elpy.readthedocs.io/en/latest/ide.html#command-elpy-occur-definitions][¶]]

	 Search the buffer for a list of definitions of classes and functions.

	M-x elpy-goto-assignment[[https://elpy.readthedocs.io/en/latest/ide.html#command-elpy-goto-assignment][¶]]

	 Go to the location where the identifier at point is assigned. It is not bound by
	 default, so you will have to bind it manually. You can also use it as a replacement
	 to elpy-goto-definition (see [[http://elpy.readthedocs.org/en/latest/customization_tips.html#jumping-to-assignment][Jumping to assignment]]).

	If you use an Emacs version superior to 25, Elpy will define the necessary backends
	for the [[https://www.gnu.org/software/emacs/manual/html_node/emacs/Xref.html][xref]] package.

	M-. (xref-find-definitions)[[https://elpy.readthedocs.io/en/latest/ide.html#command-xref-find-definitions][¶]]

	 Find the definition of the identifier at point.

	C-x 4 . (xref-find-definition-other-window)[[https://elpy.readthedocs.io/en/latest/ide.html#command-xref-find-definition-other-window][¶]]

	 Like M-. but switch to the other window.

	C-x 5 . (xref-find-definition-other-frame)[[https://elpy.readthedocs.io/en/latest/ide.html#command-xref-find-definition-other-frame][¶]]

	 Like M-. but switch to the other frame.

	M-, (xref-pop-marker-stack)[[https://elpy.readthedocs.io/en/latest/ide.html#command-xref-pop-marker-stack][¶]]

	 Go back to the last place where M-. was used, effectively turning M-. and M-, into
	 a forward and backward motion for definition lookups.

	M-? (xref-find-references)[[https://elpy.readthedocs.io/en/latest/ide.html#command-xref-find-references][¶]]

	 Find references for an identifier of the current buffer.

	C-M-. (xref-find-apropos)[[https://elpy.readthedocs.io/en/latest/ide.html#command-xref-find-apropos][¶]]

	 Find all meaningful symbols that match a given pattern.
**** Interactive Python[[https://elpy.readthedocs.io/en/latest/ide.html#interactive-python][¶]]
	Emacs can run a Python interpreter in a special buffer, making it much easier to send
	code snippets over. Elpy provides additional functionality to seamlessly work with
	interactive Python in a style similar to [[http://ess.r-project.org][ESS]].
***** Interpreter Setup[[https://elpy.readthedocs.io/en/latest/ide.html#interpreter-setup][¶]]

	 Elpy uses the Python interpreter setup from the Emacs python package. This section
	 briefly summarizes some common setups; add the one you need to your .emacs file.
	 Note that the code below (and Elpy in general) require at least Emacs 24.4.

	 Use the Python standard interpreter (default):

	 (setq python-shell-interpreter "python"
				 python-shell-interpreter-args "-i")

	 Use Jupyter console (recommended for interactive Python):

	 (setq python-shell-interpreter "jupyter"
				 python-shell-interpreter-args "console --simple-prompt"
				 python-shell-prompt-detect-failure-warning nil)
	 (add-to-list 'python-shell-completion-native-disabled-interpreters
								"jupyter")

	 Use IPython:

	 (setq python-shell-interpreter "ipython"
				 python-shell-interpreter-args "-i --simple-prompt")

	 Note that various issues with plotting have been reported when running IPython 5 in
	 Emacs under Windows. We recommend using Jupyter console instead.

	 If you have an older version of IPython and the above code does not work for you, you
	 may also try:

	 (setenv "IPY_TEST_SIMPLE_PROMPT" "1")
	 (setq python-shell-interpreter "ipython"
				 python-shell-interpreter-args "-i")

	 As an IPython_ user, you might be interested in the `Emacs IPython
	 Notebook`_ or an `Elpy layer`_ for Spacemacs_, too.

	 Note for MacOS users: In some configurations, display artifacts (lines of ^G s) can
	 appear in the shell. This can be fixed by prepending -c exec('__import__
	 (\\'readline\\')') to python-shell-interpeter-args (e.g. (setq python-shell-interpreter-args
	 "-c exec('__import__(\\'readline\\')') -i") for python)
***** The Shell Buffer[[https://elpy.readthedocs.io/en/latest/ide.html#the-shell-buffer][¶]]

	 C-c C-z (elpy-shell-switch-to-shell)[[https://elpy.readthedocs.io/en/latest/ide.html#command-elpy-shell-switch-to-shell][¶]]

		Switch to buffer with a Python interpreter running, starting one if necessary.

		By default, Elpy tries to find the root directory of the current project (git, svn or hg
		repository, python package or projectile project) and starts the python interpreter
		here. This behaviour can be suppressed with the option
		elpy-shell-starting-directory.

	 elpy-shell-starting-directory (Customize Option)[[https://elpy.readthedocs.io/en/latest/ide.html#option-elpy-shell-starting-directory][¶]]

		Govern the directory in which Python shells will be started. Can be 'project-root
		(default) to use the current project root, 'current-directory to use the buffer current
		directory, or a string indicating a specific path.

	 M-x elpy-shell-toggle-dedicated-shell[[https://elpy.readthedocs.io/en/latest/ide.html#command-elpy-shell-toggle-dedicated-shell][¶]]

		By default, python buffers are all attached to a same python shell (that lies in the
		*Python* buffer), meaning that all buffers and code fragments will be send to this
		shell. elpy-shell-toggle-dedicated-shell attaches a dedicated python shell (not
		shared with the other python buffers) to the current python buffer. To make this the
		default behavior (like the deprecated option elpy-dedicated-shells did), use the
		following snippet:

	 (add-hook 'elpy-mode-hook (lambda () (elpy-shell-toggle-dedicated-shell 1)))

	 M-x elpy-shell-set-local-shell[[https://elpy.readthedocs.io/en/latest/ide.html#command-elpy-shell-set-local-shell][¶]]

		Attach the current python buffer to a specific python shell (whose name is asked
		with completion). You can use this function to have one python shell per project,
		with:

	 (add-hook 'elpy-mode-hook (lambda () (elpy-shell-set-local-shell (elpy-project-root))))

	 C-c C-k (elpy-shell-kill)[[https://elpy.readthedocs.io/en/latest/ide.html#command-elpy-shell-kill][¶]]

		Kill the associated python shell.

	 C-c C-K (elpy-shell-kill-all)[[https://elpy.readthedocs.io/en/latest/ide.html#command-elpy-shell-kill-all][¶]]

		Kill all active python shells.
***** Evaluating code fragments[[https://elpy.readthedocs.io/en/latest/ide.html#evaluating-code-fragments][¶]]
	 Elpy provides commands to send the current Python statement (e), function definition
	 (f), class definition (c), top-level statement (s), group of Python statements (g), cell (w),
	 region (r), or buffer (b) to the Python shell for evaluation. These commands are bound
	 to prefix C-c C-y, followed by the single character indicating what to send; e.g., C-c
	 C-y e sends the Python statement at point.

	 Each of the commands to send code fragments to the shell has four variants, one for
	 each combination of: whether or not the point should move after sending (“step”), and
	 whether or not the Python shell should be focused after sending (“go”). Step is
	 activated by C-, go by S-. For example:

	 C-c C-y e (elpy-shell-send-statement)[[https://elpy.readthedocs.io/en/latest/ide.html#command-elpy-shell-send-statement][¶]]

		Send the current statement to the Python shell and keep point position. Here
		statement refers to the Python statement the point is on, including potentially
		nested statements. If point is on an if/elif/else clause send the entire if statement
		(with all its elif/else clauses). If point is on a decorated function, send the
		decorator as well.

	 C-c C-y C-e (elpy-shell-send-statement-and-step)[[https://elpy.readthedocs.io/en/latest/ide.html#command-elpy-shell-send-statement-and-step][¶]]

		Send the current statement to the Python shell and move point to first subsequent
		statement.

		Also bound to C-RET.

	 C-c C-y E (elpy-shell-send-statement-and-go)[[https://elpy.readthedocs.io/en/latest/ide.html#command-elpy-shell-send-statement-and-go][¶]]

		Send the current statement to the Python shell, keeping point position, and switch
		focus to the Python shell buffer.

	 C-c C-y C-S-E (elpy-shell-send-statement-and-step-and-go)[[https://elpy.readthedocs.io/en/latest/ide.html#command-elpy-shell-send-statement-and-step-and-go][¶]]

		Send the current statement to the Python shell, move point to first subsequent
		statement, and switch focus to the Python shell buffer.

	 Elpy provides support for sending multiple statements to the shell.

	 C-c C-y O (elpy-shell-send-group-and-step)[[https://elpy.readthedocs.io/en/latest/ide.html#command-elpy-shell-send-group-and-step][¶]]

		Send the current or next group of top-level statements to the Python shell and
		step. A sequence of top-level statements is a group if they are not separated by
		empty lines. Empty lines within each top-level statement are ignored.

		If the point is within a statement, send the group around this statement.
		Otherwise, go to the top-level statement below point and send the group around
		this statement.

	 C-c C-y W (elpy-shell-send-codecell-and-step)[[https://elpy.readthedocs.io/en/latest/ide.html#command-elpy-shell-send-codecell-and-step][¶]]

		Send the current code cell to the Python shell and step. A code cell is a piece of
		code surrounded by special separator lines; see below. For example, you can
		insert two lines starting with ## to quickly send the code in-between.

	 elpy-shell-codecell-beginning-regexp (Customize Option)[[https://elpy.readthedocs.io/en/latest/ide.html#option-elpy-shell-codecell-beginning-regexp][¶]]

		Regular expression for matching a line indicating the beginning of a code cell. By
		default, ##.* is treated as a beginning of a code cell, as are the code cell
		beginnings in Python files exported from IPython or Jupyter notebooks (e.g., #
		<codecell> or # In[1]:).

	 elpy-shell-cell-boundary-regexp (Customize Option)[[https://elpy.readthedocs.io/en/latest/ide.html#option-elpy-shell-cell-boundary-regexp][¶]]

		Regular expression for matching a line indicating the boundary of a cell
		(beginning or ending). By default, ##.* is treated as a cell boundary, as are the
		boundaries in Python files exported from IPython or Jupyter notebooks (e.g., #
		<markdowncell>, # In[1]:, or # Out[1]:).

		Note that [[https://elpy.readthedocs.io/en/latest/ide.html#option-elpy-shell-codecell-beginning-regexp][elpy-shell-codecell-beginning-regexp]] must also match the cell
		boundaries defined here.

	 The functions for sending the entire buffer have special support for avoiding
	 accidental code execution, e.g.:

	 C-c C-y r (elpy-shell-send-region-or-buffer)[[https://elpy.readthedocs.io/en/latest/ide.html#command-elpy-shell-send-region-or-buffer][¶]]

		Send the the active region (if any) or the entire buffer (otherwise) to the Python
		shell and keep point position.

		When sending the whole buffer, this command will also escape any uses of the if
		__name__ == '__main__' idiom, to prevent accidental execution of a script. If you
		want this to be evaluated, pass a prefix argument with C-u.

		Also bound to C-c C-c.

	 elpy-shell-add-to-shell-history (Customize Option)[[https://elpy.readthedocs.io/en/latest/ide.html#option-elpy-shell-add-to-shell-history][¶]]

		If t, Elpy will make the code sent available in the shell history. This allows to use
		comint-previous-input (C-up) in the python shell to get back the pieces of code
		sent by Elpy.

	 The list of remaining commands to send code fragments is:

	 C-c C-y s (elpy-shell-send-top-statement)[[https://elpy.readthedocs.io/en/latest/ide.html#command-elpy-shell-send-top-statement][¶]]

	 C-c C-y S (elpy-shell-send-top-statement-and-go)[[https://elpy.readthedocs.io/en/latest/ide.html#command-elpy-shell-send-top-statement-and-go][¶]]

	 C-c C-y f (elpy-shell-send-defun)[[https://elpy.readthedocs.io/en/latest/ide.html#command-elpy-shell-send-defun][¶]]

	 C-c C-y F (elpy-shell-send-defun-and-go)[[https://elpy.readthedocs.io/en/latest/ide.html#command-elpy-shell-send-defun-and-go][¶]]

	 C-c C-y c (elpy-shell-send-defclass)[[https://elpy.readthedocs.io/en/latest/ide.html#command-elpy-shell-send-defclass][¶]]

	 C-c C-y C (elpy-shell-send-defclass-and-go)[[https://elpy.readthedocs.io/en/latest/ide.html#command-elpy-shell-send-defclass-and-go][¶]]

	 C-c C-y o (elpy-shell-send-group)[[https://elpy.readthedocs.io/en/latest/ide.html#command-elpy-shell-send-group][¶]]

	 C-c C-y O (elpy-shell-send-group-and-go)[[https://elpy.readthedocs.io/en/latest/ide.html#command-elpy-shell-send-group-and-go][¶]]

	 C-c C-y w (elpy-shell-send-codecell)[[https://elpy.readthedocs.io/en/latest/ide.html#command-elpy-shell-send-codecell][¶]]

	 C-c C-y W (elpy-shell-send-codecell-and-go)[[https://elpy.readthedocs.io/en/latest/ide.html#command-elpy-shell-send-codecell-and-go][¶]]

	 C-c C-y R (elpy-shell-send-region-or-buffer-and-go)[[https://elpy.readthedocs.io/en/latest/ide.html#command-elpy-shell-send-region-or-buffer-and-go][¶]]

	 C-c C-y b (elpy-shell-send-buffer)[[https://elpy.readthedocs.io/en/latest/ide.html#command-elpy-shell-send-buffer][¶]]

	 C-c C-y B (elpy-shell-send-buffer-and-go)[[https://elpy.readthedocs.io/en/latest/ide.html#command-elpy-shell-send-buffer-and-go][¶]]

	 C-c C-y C-s (elpy-shell-send-top-statement-and-step)[[https://elpy.readthedocs.io/en/latest/ide.html#command-elpy-shell-send-top-statement-and-step][¶]]

	 C-c C-y C-S-S (elpy-shell-send-top-statement-and-step-and-go)[[https://elpy.readthedocs.io/en/latest/ide.html#command-elpy-shell-send-top-statement-and-step-and-go][¶]]

	 C-c C-y C-f (elpy-shell-send-defun-and-step)[[https://elpy.readthedocs.io/en/latest/ide.html#command-elpy-shell-send-defun-and-step][¶]]

	 C-c C-y C-S-F (elpy-shell-send-defun-and-step-and-go)[[https://elpy.readthedocs.io/en/latest/ide.html#command-elpy-shell-send-defun-and-step-and-go][¶]]

	 C-c C-y C-c (elpy-shell-send-defclass-and-step)[[https://elpy.readthedocs.io/en/latest/ide.html#command-elpy-shell-send-defclass-and-step][¶]]

	 C-c C-y C-S-C (elpy-shell-send-defclass-and-step-and-go)[[https://elpy.readthedocs.io/en/latest/ide.html#command-elpy-shell-send-defclass-and-step-and-go][¶]]

	 C-c C-y C-S-O (elpy-shell-send-group-and-step-and-go)[[https://elpy.readthedocs.io/en/latest/ide.html#command-elpy-shell-send-group-and-step-and-go][¶]]

	 C-c C-y C-W (elpy-shell-send-codecell-and-step-and-go)[[https://elpy.readthedocs.io/en/latest/ide.html#command-elpy-shell-send-codecell-and-step-and-go][¶]]

	 C-c C-y C-r (elpy-shell-send-region-or-buffer-and-step)[[https://elpy.readthedocs.io/en/latest/ide.html#command-elpy-shell-send-region-or-buffer-and-step][¶]]

	 C-c C-y C-S-R (elpy-shell-send-region-or-buffer-and-step-and-go)[[https://elpy.readthedocs.io/en/latest/ide.html#command-elpy-shell-send-region-or-buffer-and-step-and-go][¶]]

	 C-c C-y C-b (elpy-shell-send-buffer-and-step)[[https://elpy.readthedocs.io/en/latest/ide.html#command-elpy-shell-send-buffer-and-step][¶]]

	 C-c C-y C-S-B (elpy-shell-send-buffer-and-step-and-go)[[https://elpy.readthedocs.io/en/latest/ide.html#command-elpy-shell-send-buffer-and-step-and-go][¶]]
***** Shell feedback[[https://elpy.readthedocs.io/en/latest/ide.html#shell-feedback][¶]]
	 When package [[https://www.emacswiki.org/emacs/EvalSexpFu][eval-sexp-fu]] is loaded and eval-sexp-fu-flash-mode is active, the
	 statements sent to the shell are briefly flashed after running an evaluation command,
	 thereby providing visual feedback.

	 elpy-shell-echo-input (Customize Option)[[https://elpy.readthedocs.io/en/latest/ide.html#option-elpy-shell-echo-input][¶]]

		Whenever a code fragment is sent to the Python shell, Elpy prints it in the Python
		shell buffer (i.e., it looks as if it was actually typed into the shell). This behavior can
		be turned on and off via the custom variable elpy-shell-echo-input and further
		customized via elpy-shell-echo-input-cont-prompt (whether to show continuation
		prompts for multi-line inputs) and elpy-shell-echo-input-lines-head /
		elpy-shell-echo-input-lines-tail (how much to cut when input is long).

	 elpy-shell-echo-output (Customize Option)[[https://elpy.readthedocs.io/en/latest/ide.html#option-elpy-shell-echo-output][¶]]

		Elpy shows the output produced by a code fragment sent to the shell in the echo
		area when the shell buffer is currently invisible. This behavior can be controlled via
		elpy-shell-echo-output (never, always, or only when shell invisible). Output echoing
		is particularly useful if the custom variable [[https://elpy.readthedocs.io/en/latest/ide.html#option-elpy-shell-display-buffer-after-send][elpy-shell-display-buffer-after-send]] is
		set to nil (the default value). Then, no window is needed to display the shell
		(thereby saving screen real estate), but the outputs can still be seen in the echo
		area.

	 elpy-shell-display-buffer-after-send (Customize Option)[[https://elpy.readthedocs.io/en/latest/ide.html#option-elpy-shell-display-buffer-after-send][¶]]

		Whether to display the Python shell after sending something to it (default nil).
**** Syntax Checking[[https://elpy.readthedocs.io/en/latest/ide.html#syntax-checking][¶]]
	 Whenever you save a file, Elpy will run a syntax check and highlight possible errors or
	 warnings inline.

	 C-c C-n (elpy-flymake-next-error)[[https://elpy.readthedocs.io/en/latest/ide.html#command-elpy-flymake-next-error][¶]]

	 C-c C-p (elpy-flymake-previous-error)[[https://elpy.readthedocs.io/en/latest/ide.html#command-elpy-flymake-previous-error][¶]]

		You can navigate between any error messages with these keys. The current error
		will be shown in the minibuffer.

	 Elpy uses the built-in [[https://www.gnu.org/software/emacs/manual/html_node/flymake/index.html#Top][Flymake]] library to find syntax errors on the fly, so see there for
	 more configuration options.

	 C-c C-v (elpy-check)[[https://elpy.readthedocs.io/en/latest/ide.html#command-elpy-check][¶]]

		Alternatively, you can run a syntax check on the current file where the output is
		displayed in a new buffer, giving you an overview and allowing you to jump to the
		errors from there.

		With a prefix argument, this will run the syntax check on all files in the current
		project.

	 python-check-command (Customize Option)[[https://elpy.readthedocs.io/en/latest/ide.html#option-python-check-command][¶]]

		To change which command is used for syntax checks, you can customize this
		option. By default, Elpy uses the flake8 program, which you have to install
		separately. The [[https://elpy.readthedocs.io/en/latest/introduction.html#command-elpy-config][elpy-config]] command will prompt you to do this if Elpy can’t find
		the program.

		It is possible to create a single virtual env for the sole purpose of installing flake8
		in there, and then simply link the command script to a directory inside your PATH,
		meaning you do not need to install the program in every virtual env separately.
**** Documentation[[https://elpy.readthedocs.io/en/latest/ide.html#documentation][¶]]
	 Elpy provides a single interface to documentation.

	 C-c C-d (elpy-doc)[[https://elpy.readthedocs.io/en/latest/ide.html#command-elpy-doc][¶]]

		When point is on a symbol, Elpy will try and find the documentation for that object,
		and display that. If it can’t find the documentation for whatever reason, it will try
		and look up the symbol at point in pydoc. If it’s not there, either, it will prompt the
		user for a string to look up in pydoc.

		With a prefix argument, Elpy will skip all the guessing and just prompt the user for
		a string to look up in pydoc.

	 If the autodoc module is enabled (not by default) the documentation is automatically
	 updated with the symbol at point or the currently selected company candidate.

	 elpy-autodoc-delay (Customize Option)[[https://elpy.readthedocs.io/en/latest/ide.html#option-elpy-autodoc-delay][¶]]

		The idle delay in seconds until documentation is updated automatically.
**** Debugging[[https://elpy.readthedocs.io/en/latest/ide.html#debugging][¶]]
	 Elpy provides an interface to [[https://docs.python.org/3/library/pdb.html][pdb]], the builtin Python debugger. Note that this interface
	 is only available for Emacs 25 and above.

	 C-c C-u d (elpy-pdb-debug-buffer)[[https://elpy.readthedocs.io/en/latest/ide.html#command-elpy-pdb-debug-buffer][¶]]

		Run pdb on the current buffer. If no breakpoints has been set using
		[[https://elpy.readthedocs.io/en/latest/ide.html#command-elpy-pdb-toggle-breakpoint-at-point][elpy-pdb-toggle-breakpoint-at-point]], the debugger will pause at the beginning of
		the buffer. Else, the debugger will pause at the first breakpoint. Once pdb is
		started, the [[https://docs.python.org/3/library/pdb.html#debugger-commands][pdb commands]] can be used to step through and look into the code
		evaluation.

		With a prefix argument C-u, ignore the breakpoints and always pause at the
		beginning of the buffer.

	 C-c C-u b (elpy-pdb-toggle-breakpoint-at-point)[[https://elpy.readthedocs.io/en/latest/ide.html#command-elpy-pdb-toggle-breakpoint-at-point][¶]]

		Add (or remove) a breakpoint on the current line. Elpy adds a red circle to the
		fringe to indicate the presence of a breakpoint. You can then use
		[[https://elpy.readthedocs.io/en/latest/ide.html#command-elpy-pdb-debug-buffer][elpy-pdb-debug-buffer]] to start pdb and pause at each of the breakpoints.

		With a prefix argument C-u, remove all the breakpoints.

	 C-c C-u p (elpy-pdb-break-at-point)[[https://elpy.readthedocs.io/en/latest/ide.html#command-elpy-pdb-break-at-point][¶]]

		Run pdb on the current buffer and pause at the cursor position.

	 C-c C-u e (elpy-pdb-debug-last-exception)[[https://elpy.readthedocs.io/en/latest/ide.html#command-elpy-pdb-debug-last-exception][¶]]

		Run post-mortem pdb on the last exception.
**** Testing[[https://elpy.readthedocs.io/en/latest/ide.html#testing][¶]]
	 Testing is an important part of programming. Elpy provides a central interface to
	 testing, which allows for a good workflow for tests.

	 Elpy’s test interface is built around Emacs’ [[https://www.gnu.org/software/emacs/manual/html_node/emacs/Compilation.html][compilation framework]]. Elpy will run test
	 commands as a compilation job, with all the advantages this brings.

	 C-c C-t (elpy-test)[[https://elpy.readthedocs.io/en/latest/ide.html#command-elpy-test][¶]]

		Start a test run. This uses the currently configured test runner to discover and run
		tests. If point is inside a test case, the test runner will run exactly that test case.
		Otherwise, or if a prefix argument is given, it will run all tests.

	 M-x elpy-set-test-runner[[https://elpy.readthedocs.io/en/latest/ide.html#command-elpy-set-test-runner][¶]]

		This changes the current test runner. Elpy supports the standard unittest discovery
		runner, the Django discovery runner, nose, green, py.test and Twisted trial. You
		can also write your own, as described in [[https://elpy.readthedocs.io/en/latest/extending.html#writing-test-runners][Writing Test Runners]].

		Note on Django runners: Elpy tries to find manage.py within your project structure.
		If it’s unable to find it, it falls back to django-admin.py. You must set the
		environment variable DJANGO_SETTINGS_MODULE accordingly.

	 This enables a good workflow. You write a test and use C-c C-t to watch it fail. You
	 then go to your implementation file, for example using C-u C-c C-f, and make the test
	 pass. You can use a key bound to recompile (I use <f5> for this) to just re-run that one
	 test. Once that passes, you can use C-c C-t again to run all tests to make sure they all
	 pass as well. Repeat.

	 For an even more automated way, you can use [[https://github.com/jorgenschaefer/emacs-tdd/][tdd.el]], which will run your last compile
	 command whenever you save a file.
**** Refactoring[[https://elpy.readthedocs.io/en/latest/ide.html#refactoring][¶]]
	 C-c C-e (elpy-multiedit-python-symbol-at-point)[[https://elpy.readthedocs.io/en/latest/ide.html#command-elpy-multiedit-python-symbol-at-point][¶]]

		Edit all occurrences of the symbol at point at once. This will highlight all such
		occurrences, and editing one of them will edit all. This is an easy way to rename
		identifiers.

		If the backend does not support finding occurrences (currently only Jedi does), or
		if a prefix argument is given, this will edit syntactic occurrences instead of
		semantic ones. This can match more occurrences than it should, so be careful.
		You can narrow the current buffer to the current function using C-x n d to restrict
		where this matches.

		Finally, if there is a region active, Elpy will edit all occurrences of the text in the
		region.

	 C-c C-r f (elpy-format-code)[[https://elpy.readthedocs.io/en/latest/ide.html#command-elpy-format-code][¶]]

		Format code using the available formatter.

		If a region is selected, only that region is formatted. Otherwise current buffer is
		formatted.

	 elpy-formatter (Customize Option)[[https://elpy.readthedocs.io/en/latest/ide.html#option-elpy-formatter][¶]]

		Allow to select the formatter you want to use amongst [[https://github.com/google/yapf][yapf]] , [[https://github.com/hhatto/autopep8][autopep8]] and [[https://github.com/ambv/black][black]].

		[[https://github.com/google/yapf][yapf]] and [[https://github.com/hhatto/autopep8][autopep8]] can be configured with style files placed in the project root
		directory (determined by elpy-project-root). [[https://github.com/ambv/black][black]] can be configured in the
		pyproject.toml file of your project.

	 Jedi refactoring[[https://elpy.readthedocs.io/en/latest/ide.html#jedi-refactoring][¶]]

		The following commands take advantage of Jedi refactoring possibilities. They
		all present a diff of the modifications before applying them, this allows to check
		the ongoing modifications and cancel some of them if needed.

	 C-c C-r r (elpy-refactor-rename)[[https://elpy.readthedocs.io/en/latest/ide.html#command-elpy-refactor-rename][¶]]

		Rename all occurences of the symbol at point (variable, function, class, …). If
		needed, rename occurences in other files as well.

	 C-c C-r v (elpy-refactor-extract-variable)[[https://elpy.readthedocs.io/en/latest/ide.html#command-elpy-refactor-extract-variable][¶]]

		Move the selection to a new variable.

	 C-c C-r f (elpy-refactor-extract-function)[[https://elpy.readthedocs.io/en/latest/ide.html#command-elpy-refactor-extract-function][¶]]

		Move the selection to a new function.

	 C-c C-r i (elpy-refactor-inline)[[https://elpy.readthedocs.io/en/latest/ide.html#command-elpy-refactor-inline][¶]]

		Inline the variable at point. i.e. replace it with its defining expression.
**** Profiling[[https://elpy.readthedocs.io/en/latest/ide.html#profiling][¶]]
	 Elpy allows one to profile python scripts asynchronously using cProfile.
	 M-x elpy-profile-buffer-or-region[[https://elpy.readthedocs.io/en/latest/ide.html#command-elpy-profile-buffer-or-region][¶]]

		Send the current buffer or region to the profiler and display the result with
		elpy-profile-visualizer. The default visualizer is [[https://jiffyclub.github.io/snakeviz][snakeviz]], a browser-based
		graphical profile viewer that can be installed with pip install snakeviz.
		[[https://www.vrplumber.com/programming/runsnakerun][RunSnakeRun]] (Python-2 only GTK GUI) and [[https://github.com/pwaller/pyprof2calltree][pyprof2calltree]] (uses QCacheGrind
		or KCacheGrind for display) are supported alternatives and can be similarly
		installed with pip.
**** Django[[https://elpy.readthedocs.io/en/latest/ide.html#django][¶]]

	 Elpy has basic Django support such as parsing either manage.py or django-admin.py
	 (If it does not find manage.py it falls back to django-admin.py) for command
	 completion assistance. Can also start runserver automatically and you can give an ip
	 address and port.

	 C-c C-x c (elpy-django-command)[[https://elpy.readthedocs.io/en/latest/ide.html#command-elpy-django-command][¶]]

		Choose what command you’d like to run via django-admin.py or manage.py.
		Please note that for compatibility reasons, the shell command will use python
		(instead of ipython by default).

	 C-c C-x r (elpy-django-runserver)[[https://elpy.readthedocs.io/en/latest/ide.html#command-elpy-django-runserver][¶]]

		Start the development server command, runserver. Default arguments are
		127.0.0.1 for ip address and 8000 for port. These can be changed via
		elpy-django-server-ipaddr and elpy-django-server-port.

	 [[https://elpy.readthedocs.io/en/latest/concepts.html][Next]][[https://elpy.readthedocs.io/en/latest/editing.html][Previous]] 
*** Flymake 
нужно стартовать отдельно после запуска

** Evil
*** insert mod
**** tab
If you are using Evil anyways, you can use C-t and C-d to increase/decrease indent at the start of the line.
*** remap key in normal for org mode
#+begin_src emacs-lisp :tangle yes
(evil-define-key 'normal org-mode-map (kbd "<tab>") #'org-cycle)
#+end_src

*** ex mode : 
**** evil-ex-define-cmd : 
	 (evil-ex-define-cmd "tabc[lone]" 'elscreen-clone)
*** visual-line
**** 1
instead of logical lines: ‘C-a’ (‘beginning-of-visual-line’) moves to
the beginning of the screen line, ‘C-e’ (‘end-of-visual-line’) moves to
the end of the screen line, and ‘C-k’ (‘kill-visual-line’) kills text to
the end of the screen line.

   To move by logical lines, use the commands ‘M-x next-logical-line’
and ‘M-x previous-logical-line’.  These move point to the next logical
line and the previous logical line respectively, regardless of whether
**** visual-line-mode : 
visual-line-mode’; repeating this command turns it off.  You can also
turn on Visual Line mode using the menu bar: in the Options menu, select
the ‘Line Wrapping in this Buffer’ submenu, followed by the ‘Word Wrap
(Visual Line mode)’ menu item.  While Visual Line mode is enabled, the
mode line shows the string ‘wrap’ in the mode display.  The command ‘M-x
global-visual-line-mode’ toggles Visual Line mode in all buffers.

** ivy
*** keys
**** Minibuffer bindings:
 key             binding
 ---             -------
 C-c							Prefix Command
 C-g							minibuffer-keyboard-quit
 TAB							ivy-partial-or-done
 C-j							ivy-alt-done
 RET							ivy-done
 C-o							hydra-ivy/body
 C-r							ivy-reverse-i-search
 C-s							ivy-next-line-or-history
 C-v							ivy-scroll-up-command
 ESC							Prefix Command
 SPC							self-insert-command
 $								ivy-magic-read-file-env
 S-SPC						ivy-restrict-to-matches
 C-'							ivy-avy
 <down-mouse-1>	ignore
 <mouse-1>				ivy-mouse-done
 <mouse-3>				ivy-mouse-dispatching-done
 <next>					ivy-scroll-up-command
 <prior>					ivy-scroll-down-command
 <remap>					Prefix Command
 <right>					ivy-forward-char

**** sort : 
 C-c C-a					ivy-toggle-ignore
 C-c C-o					ivy-occur
 C-c C-s					ivy-rotate-sort
****  <remap> <backward-delete-char-untabify>
																 ivy-backward-delete-char
 <remap> <backward-kill-word>		ivy-backward-kill-word
 <remap> <beginning-of-buffer>		ivy-beginning-of-buffer
 <remap> <delete-backward-char>	ivy-backward-delete-char
 <remap> <delete-char>						ivy-delete-char
 <remap> <describe-mode>					ivy-help
 <remap> <end-of-buffer>					ivy-end-of-buffer
 <remap> <forward-char>					ivy-forward-char
 <remap> <kill-line>							ivy-kill-line
 <remap> <kill-ring-save>				ivy-kill-ring-save
 <remap> <kill-whole-line>				ivy-kill-whole-line
 <remap> <kill-word>							ivy-kill-word
 <remap> <next-line>							ivy-next-line
 <remap> <previous-line>					ivy-previous-line
 <remap> <scroll-down-command>		ivy-scroll-down-command
 <remap> <scroll-up-command>			ivy-scroll-up-command
**** ivy-read : 
 C-M-a						ivy-read-action
 C-M-j						ivy-immediate-done
 M-RET						ivy-call
 C-M-n						ivy-next-line-and-call
 C-M-o						ivy-dispatching-call
 C-M-p						ivy-previous-line-and-call
 C-M-y						ivy-insert-current-full
 M-i							ivy-insert-current
 M-j							ivy-yank-word
 M-n							ivy-next-history-element
 M-o							ivy-dispatching-done
 M-p							ivy-previous-history-element
 M-r							ivy-toggle-regexp-quote
 M-v							ivy-scroll-down-command

*** quik help
**** C-M-j						ivy-immediate-done
									выбрать то что написано в страко поиска
									а не выбраный пункт - против С-J or ret
**** M-i							ivy-insert-current
									вставляет в поиск выбраную пункт
**** M-j							ivy-yank-word
									вставить в поиск от курсора и до конца слова
									и сдвикает курсор на следующее слово
**** M-o							ivy-dispatching-done
									меню на выбраном пункте
									вставить в текс где курсор
									или скопировать в буфер
**** M-v							ivy-scroll-down-command
 С-v							листать на страницу вниз и верх
**** TAB							ivy-partial-or-done
		Complete the minibuffer text as much as possible.
		If the text hasn’t changed as a result, forward to ‘ivy-alt-done’.
		дейсивие выбирается с помошью			C-M-a						ivy-read-action
		выпольнить/вставить\копировать
		не запоминает после закрытия меню
**** C-c							Prefix Command
**** S-SPC						ivy-restrict-to-matches
**** M-RET						ivy-call
									выполнить не закрывая окна

** org-eww
When this module is active `org-store-link' (often on key C-c l) in
a eww buffer stores a link to the current url of the eww buffer.

In an eww buffer function `org-eww-copy-for-org-mode' kills either
a region or the whole buffer if no region is set and transforms the
text on the fly so that it can be pasted into an org-mode buffer
with hot links.
** WindMove & FrameMove 
https://truthseekers.io/lessons/an-introduction-to-emacs-everything-you-need-to-know-to-get-started/
;; Remap windmove keys to home keys
(global-set-key (kbd "M-h") 'windmove-left)
(global-set-key (kbd "M-j") 'windmove-down)
(global-set-key (kbd "M-k") 'windmove-up)
(global-set-key (kbd "M-l") 'windmove-right)

** reader for emacs
*** fb2-mode
**** Add to your .emacs file:
 #+begin_src emacs-lisp :results output silent
(package-refresh-contents)
 #+end_src
 #+begin_src emacs-lisp :results output silent
	 (use-package fb2-mode :ensure t
		 :load-path "~/ELs/Readers/fb2-mode"
		 ;; :load-path "~/ELs/"
		 ;; :init
		 :config
		(add-to-list 'auto-mode-alist '("\\.fb2\\'" . fb2-mode))
		(add-to-list 'auto-mode-alist '("\\.fb\\'" . fb2-mode))
		 ;; (global-evil-mc-mode  1) ;; enable
		 )
 #+end_src
#+begin_src emacs-lisp results output silent
(find-file-other-frame "f:/Books/Ranabe/Arifureta/1/1.fb2")
#+end_src

#+RESULTS:
: #<buffer 1.fb2>

#+begin_src emacs-lisp results output silent
(add-to-list 'load-path "path-to-fb2-mode-dir")
(require 'fb2-mode)
#+end_src
**** FictionBook2 reader for emacs.
https://github.com/spline1986/fb2-mode
 Screenshot
 Installation
**** Configure
		fb2-show-images — if not nil then images in book will displayed (default t).
		fb2-images-height — height of images in fb2-mode buffer (default 500).
		fb2-replace-hard-spaces — if not nil then non-breaking spaces will replaced by spaces (default nil).
*** nov.el : 
**** Install
git clone https://depp.brause.cc/nov.el.git
 #+begin_src emacs-lisp :results output silent
(package-refresh-contents)
 #+end_src
 #+begin_src emacs-lisp :results output silent
		(use-package nov :ensure t
			:load-path "~/ELs/Readers/nov.el/"
			;; :load-path "~/ELs/"
			;; :init
		:config
		(add-to-list 'auto-mode-alist '("\\.epub\\'" . nov-mode))
			;; (global-evil-mc-mode  1) ;; enable
			)
 #+end_src
#+begin_src emacs-lisp results output silent
	(find-file-other-frame "f:/Books/Ranabe/Arifureta/1/1.fb2")
#+end_src
**** docs : 
***** About
git clone https://depp.brause.cc/nov.el.git
 nov.el provides a major mode for reading EPUB documents.
 Features:

		 Basic navigation (jump to TOC, previous/next chapter)
		 Remembering and restoring the last read position
		 Jump to next chapter when scrolling beyond end
		 Storing and following Org links to EPUB files
		 Renders EPUB2 (.ncx) and EPUB3 (<nav>) TOCs
		 Hyperlinks to internal and external targets
		 Supports textual and image documents
		 Info-style history navigation
		 View source of document files
		 Metadata display
		 Image rescaling

 Screenshot
*****  Installation

Set up the MELPA or MELPA Stable repository if you haven't already and install with M-x package-install RET nov RET.
Setup

Make sure you have an unzip executable on PATH, otherwise the extraction of EPUB files will fail. If you for some reason have unzip in a non-standard location, customize nov-unzip-program to its path. You'll also need an Emacs compiled with libxml2 support, otherwise rendering will fail.

Put the following in your init file:

(add-to-list 'auto-mode-alist '("\\.epub\\'" . nov-mode))
*****  Customization
While the defaults make for an acceptable reading experience, it can be improved with any of the following changes:
Default font

To change the default font, use M-x customize-face RET variable-pitch, pick a different family, save and apply. If you dislike globally customizing that face, add the following to your init file:

(defun my-nov-font-setup ()
	(face-remap-add-relative 'variable-pitch :family "Liberation Serif"
																					 :height 1.0))
(add-hook 'nov-mode-hook 'my-nov-font-setup)

To completely disable the variable pitch font, customize nov-variable-pitch to nil. Text will be displayed with the default face instead which should be using a monospace font.
*****  Text width

By default text is filled by the window width. You can customize nov-text-width to a number of columns to change that:

(setq nov-text-width 80)

It's also possible to set it to t to inhibit text filling, this can be used in combination with visual-line-mode and packages such as visual-fill-column to implement more flexible filling:

(setq nov-text-width t)
(setq visual-fill-column-center-text t)
(add-hook 'nov-mode-hook 'visual-line-mode)
(add-hook 'nov-mode-hook 'visual-fill-column-mode)
*****  Rendering

In case you're not happy with the rendering at all, you can either use nov-pre-html-render-hook and nov-post-html-render-hook to adjust the HTML before and after rendering or use your own rendering function by customizing nov-render-html-function to one that replaces HTML in a buffer with something nicer than the default output.

Here's an advanced example of text justification with the justify-kp package:

(require 'justify-kp)
(setq nov-text-width t)

(defun my-nov-window-configuration-change-hook ()
	(my-nov-post-html-render-hook)
	(remove-hook 'window-configuration-change-hook
							 'my-nov-window-configuration-change-hook
							 t))

(defun my-nov-post-html-render-hook ()
	(if (get-buffer-window)
			(let ((max-width (pj-line-width))
						buffer-read-only)
				(save-excursion
					(goto-char (point-min))
					(while (not (eobp))
						(when (not (looking-at "^[[:space:]]*$"))
							(goto-char (line-end-position))
							(when (> (shr-pixel-column) max-width)
								(goto-char (line-beginning-position))
								(pj-justify)))
						(forward-line 1))))
		(add-hook 'window-configuration-change-hook
							'my-nov-window-configuration-change-hook
							nil t)))

(add-hook 'nov-post-html-render-hook 'my-nov-post-html-render-hook)

This customization yields the following look:
*****  Usage

Open the EPUB file with C-x C-f ~/novels/novel.epub, scroll with SPC and switch chapters with n and p. More keybinds can be looked up with F1 m.
Bugs

Invalid EPUB documents are not supported. Please use epubcheck to validate yours when running into an error.

In case the bug is specific to an EPUB document, please send attach it to your email. I'll try my best to figure out the error, but chances are you can figure it out as well by using the source view (bound to v for the current document and V for the content file) to spot the problematic XML.
Alternatives

The first one I've heard of is epubmode.el which is, well, see for yourself. You might find ereader more useful, especially if you're after Org integration and annotation support.
*** read-aloud
**** Install
#+begin_src emacs-lisp :results output silent
(package-refresh-contents)
(use-package reverse-im
  :ensure t
  :custom
  (reverse-im-input-methods '("russian-computer"))
  :config
  (reverse-im-mode t))
#+end_src

#+begin_src emacs-lisp :tangle yes
 (use-package read-aloud
   :ensure t)
#+end_src

#+begin_src emacs-lisp :tangle yes
	(load "~/ELs/text-to-speech/read-aloud/read-aloud.el")
#+end_src
#+RESULTS:
: t
**** Docs
***** Usage 
****** read-aloud-this : 
M-x read-aloud-this -- pronounce either the selection or a word under the pointer.
****** read-aloud-buf : 
M-x read-aloud-buf -- read the buffer starting from the current cursor position, highlighting the text as it moves down the buffer. Useful only for plain text files.
****** read-aloud-stop : 
top reading at any time you either run any of the commands above again, or do M-x read-aloud-stop.
****** read-aloud-change-engine : 
M-x read-aloud-change-engine -- select another engine (for this Emacs session). It also shows which one is the current.
***** read-aloud-test : 
(read-aloud-test)
***** read-aloud.el
https://github.com/gromnitsky/read-aloud.el
A simple interface to TTS engines.

The package uses an external text-to-speech engine (like flite) to pronounce the word at or near point, the selected region or a whole buffer.

A screenshot of running read-aloud.el
Requirements

    Emacs 24.4+
    A working TTS engine that has a CLI for managing it.

Installation

    Setup at least one of the supported TTS engines (see below).

    Add to ~/.emacs:

     (load-file "/the/repo/dir/read-aloud.el")

Usage

    M-x read-aloud-this -- pronounce either the selection or a word under the pointer.

    M-x read-aloud-buf -- read the buffer starting from the current cursor position, highlighting the text as it moves down the buffer. Useful only for plain text files.

To stop reading at any time you either run any of the commands above again, or do M-x read-aloud-stop.

    M-x read-aloud-change-engine -- select another engine (for this Emacs session). It also shows which one is the current.

Supported TTS Engines
speech-dispatcher

... is the default one in read-aloud.el. It contains a daemon that hides from the user all the details of a chosen tts engine. To communicate w/ the daemon, read-aloud.el employs spd-say CL util.

On Fedora 24:

# dnf install speech-dispatcher-flite speech-dispatcher-utils

$ mkdir ~/.config/speech-dispatcher
$ cp /etc/speech-dispatcher/speechd.conf !$
$ $EDITOR !$

For example:

$ grep '^[^#]' ~/.config/speech-dispatcher/speechd.conf
LogLevel  3
LogDir  "default"
DefaultRate  40
DefaultVolume 100
AudioOutputMethod "alsa"
DefaultModule flite

Test it:

$ spd-say hello

flite

... is the easiest one to install & use. For example, on Fedora 24:

# dnf install flite

Test it:

$ echo hello | flite

Add to ~/.emacs:

(setq read-aloud-engine "flite")

Microsoft Speech API

Jampal provides a CL interface to SAPI. Install it, then test via:

> echo hello | cscript "C:\Program Files\Jampal\ptts.vbs"

Add to ~/.emacs:

(setq read-aloud-engine "jampal")

macOS Speech Synthesis

Add to ~/.emacs:

(setq read-aloud-engine "say")

By default it uses the settings from System Preferences.
Configuration

To add/modify a tts engine, you'll need to edit read-aloud-engines plist. Here is the example for Windows:

(lax-plist-put read-aloud-engines "jampal.en"
  '(cmd "cscript"
		args ("C:\\Program Files\\Jampal\\ptts.vbs" "-r" "8")) )

args should be a list or nil. To select a new entry,

(setq read-aloud-engine "jampal.en")

The CL util that communicates w/ the engine must wait until the text was fully pronounced (e.g. not exit immediately), otherwise (read-aloud-buf) won't be able to distinguish whether it's time to feed the engine w/ another chunk of the text. This is why we use spd-say w/ -w CLO.

You can edit the face that (read-aloud-buf) uses w/ the usual

M-x customize-face RET read-aloud-text-face

A Smoke Test

After you have configured your system tts engine, do

M-x eval-expression RET (read-aloud-test) RET

It should open 2 tmp windows: 1 log window & 1 w/ a sample text, then it should start reading automatically. After it finishes you may safely kill those 2 buffers.
Bugs

    Testes only under Fedora 24 & Emacs 25.1.1-rc1.

    The algo of picking up the portions of the text in read-aloud-buf is independent of a major mode & suited only for English texts.

License

MIT.

** Ауто комплит
*** company-jedi
#+begin_src emacs-lisp :tangle yes
(use-package company-jedi 
	:ensure t
	;; :init
	;; (elpy-enable)
	:config
	(defun my/python-mode-hook ()
	(add-to-list 'company-backends 'company-jedi))
	(add-hook 'python-mode-hook 'my/python-mode-hook)
	(define-key evil-insert-state-map (kbd "C-SPC") 'company-jedi)
	)
#+end_src

#+RESULTS:
: t

*** jedi
#+begin_src emacs-lisp :tangle yes
(use-package jedi 
	:ensure t
	;; :init
	;; (elpy-enable)
	:config
	; move quick-help tooltips to the minibuffer
	;; (setq jedi:tooltip-method nil)

	; don't auto-complete unless requested
	(setq ac-auto-start nil)
	(setq ac-auto-show-menu nil)
	;; (define-key ac-mode-map (kbd "M-TAB") 'auto-complete)
	(add-hook 'python-mode-hook 'jedi:setup)
	(setq jedi:complete-on-dot t)  
	)
#+end_src
    M-x el-get-install RET jedi RET or
    M-x package-install RET jedi RET or
    (manually install...)
Configure Emacs using this:
(add-hook 'python-mode-hook 'jedi:setup)
(jedi:install-server)
(setq jedi:complete-on-dot t)  

(autoload 'jedi:setup "jedi" nil t) for test



(add-hook 'python-mode-hook 'jedi:setup)
*** company-mode 
**** keys
Completion will start automatically after you type a few letters. Use M-n and M-p to select, <return> to complete or <tab> to complete the common part. Search through the completions with C-s, C-r and C-o. Press M-(digit) to quickly complete with one of the first 10 candidates.

Type M-x company-complete to initiate completion manually. Bind this command to a key combination of your choice.

When the completion candidates are shown, press <f1> to display the documentation for the selected candidate, or C-w to see its source. Not all back-ends support this.
**** backends
To see or change the list of enabled back-ends, type M-x customize-variable RET company-backends. Also see its description for information on writing a back-end.

For information on specific back-ends, also check out the comments inside the respective files.

For more information, type M-x describe-function RET company-mode.

To customize other aspects of its behavior, type M-x customize-group RET company
**** completion-styles
***** exempls
(setq completion-styles '(partial-completion substring emacs22))
***** completion-styles’ begins with ‘basic’ by default : 
 <…> I want to complete ‘eval-when-compile’ and I know there are several functions beginning with ‘eval’, but there are fewer which have ‘when’ in their names. So I type ‘when’ and company lists ‘eval-when-compile’ too among others with ‘when’ in the name.

Similarly to iswitchb. Iswitchb is great, because I don’t have to type the beginning of the buffer name, I can type any part of it.

<…> Better yet: obey ‘completion-styles’, so the user can choose between ‘prefix’, ‘substring’, ‘partial-completion’, or any other style she likes.
    Note that ‘completion-styles’ begins with ‘basic’ by default, and all styles are tried in turn. So unless you customize this variable, if you just type ‘when’, you won’t get ‘eval-when-compile’ among the candidates. You’ll have to input a prefix that doesn’t have any matches when using the ‘basic’ style.

**** You can start completion with an empty prefix : 
The search feature was actually inspired by the way I use iswitchb. You can start completion with an empty prefix, type C-s, search for “when”, and press C-o to limit the search. – nschum

I’ve written another command named ‘company-filter-candidates’ that will probably be (edit: is) in version 0.2. It works like automatically pressing C-o after every search char. The search still has to be started manually (i.e. one key stroke).

**** customize  company : 
		Получить инфу по всем переменным
M-x 
customize-group 
RET 
company. 
**** company fuze search
***** in file
	(find-file-other-frame "~/INI/autocomplete-cfg.el")
***** Why is company-fuzzy not working?
Try log out the company-backends and make sure company-fuzzy-all-other-backends is the only backends in you list. If it's not, enable company-fuzzy-mode to swap out all backends and hand it over to company-fuzzy to manage it.

(message "%s" company-backends)
						; '(company-fuzzy-all-other-backends)
(message "%s" company-fuzzy--backends)
  ; .. backends has been handed over to `company-fuzzy`

(company-fuzzy-mode 1)
***** Can working in clobal mode and not in bufer 
пологаю что связа стем что он перезапуукает фуз
и перереключат словари
что б это работало постояно
нужно правельно настроить словари
(company-fuzzy-mode 1)   

** ahk
*** ahk-mode : 
ahk-mode is an available package.
#+begin_src emacs-lisp :tangle yes
(package-refresh-contents)
(use-package ahk-mode
							:ensure t)
#+end_src

any ahk script, then type “M-x ahk-mode”, you'll see the
source code syntax colored.

To have Emacs automatically load the file when it restarts, and
automatically use the mode when opening files ending in “.ahk”, do this:

This package is located within Melpa.  To install, add
("melpa" . "http://melpa.org/packages/") to package-archives and
execute "M-x package-install RET ahk-mode RET".

FEATURES

When opening a script file you will get:
- syntax highlighting
- Commenting - provide functions for block and standard commenting
- Imenu - jump to a function / label within a buffer
- Execute scripts
- Auto complete - adds options for `company-mode' and `auto-complete-mode'

D:\scripts\ahk 

D:/scripts/ahk/Magic_Carpet.ahk 

(find-file-other-frame "D:/scripts/ahk/Magic_Carpet.ahk")
D:/scripts/ahk/Magic_Carpet.ahk 
*** xahk-mode : 
xahk-mode is an available package.
** reverse-im
https://github.com/a13/reverse-im.el
#+begin_src emacs-lisp :results output silent
(package-refresh-contents)
(use-package reverse-im
  :ensure t
  :custom
  (reverse-im-input-methods '("russian-computer"))
  :config
  (reverse-im-mode t))
#+end_src
** projectile : 
*** package-install : 
(package-install 'projectile)
*** use-package : 
(use-package projectile
  :ensure t
  :init
  (projectile-mode +1)
  :bind (:map projectile-mode-map
              ;; ("s-p" . projectile-command-map)
              ("C-c p" . projectile-command-map)))
*** docs 
**** Usage
	Everything in this section assumes you’ve enabled projectile-mode.
Basic setup

In this section we’ll cover the bare minimum of setup you might want to do. Projectile works fine with no setup, but if you tweak the configuration a bit you’ll get more out of it.

Check out the "Configuration" section of the manual for a lot more information about configuring Projectile.
Automated Project Discovery

To add a project to Projectile’s list of known projects, open a file in the project. If you have a projects directory, you can tell Projectile about all of the projects in it with the command M-x projectile-discover-projects-in-directory.

You can go one step further and set a list of folders which Projectile is automatically going to check for projects on startup.

Recursive discovery is configured by specifying the search depth in a cons cell:

(setq projectile-project-search-path '("~/projects/" "~/work/" ("~/github" . 1)))

You can suppress the auto-discovery of projects on startup by setting projectile-auto-discover to nil. You can manually trigger the project discovery using M-x projectile-discover-projects-in-search-path.
Minibuffer Completion

While Projectile works fine with Emacs’s default minibuffer completion system you’re highly encouraged to use some powerful alternative like ido, ivy, selectrum or vertico.
	If you’re going to use the ido completion it’s highly recommended that you install the optional flx-ido package, which provides a much more powerful alternative to ido's built-in flex matching. Similarly, for selectrum it’s a good idea to enable prescient (a package similar to flx).
Installing External Tools
	Windows users can ignore this section unless they are using Emacs via WSL or cygwin.

It’s recommended to install the following command-line tools:

    fd (a super-fast alternative to find)

    ag (a.k.a. the_silver_searcher, a powerful alternative to grep) or rg (a.k.a. ripgrep)

Projectile will make use of them automatically when available, and fallback to the standard Unix tools otherwise.
	You should also install the Emacs packages ag, ripgrep or rg if you want to make sure of Projectile’s commands projectile-ag and projectile-ripgrep.
Basic Usage

Just open some file in a version-controlled (e.g. git) or a project (e.g. maven) directory that’s recognized by Projectile and you’re ready for action. Projectile happens to recognize out of the box every common VCS and many popular project types for various programming languages. You can learn more about Projectile’s notion of a project here.
	The extent of the support for every VCS differs and Git is the best supported one. Projectile supports some advanced features like working with Git submodules and using git-grep instead GNU grep.

You need to know only a handful of Projectile commands to start benefiting from it.

    Find file in current project (s-p f)

    Switch project (s-p p) (you can also switch between open projects with s-p q)

    Grep (search for text/regexp) in project (s-p s g)

    Replace in project (s-p r)

    Find references in project (s-p ? or s-p s x)

    Invoke any Projectile command via the Projectile Commander (s-p m)

    Toggle between implementation and test (s-p t)

    Toggle between related files (e.g. foo.h <→ foo.c and Gemfile <→ Gemfile.lock) (s-p a)

    Run a shell command in the root of the project (s-p ! for a sync command and s-p & for an async command)

    Run various pre-defined project commands like:

        build/compile project (s-p c)

        test project (s-p T)

The next section lists many more commands, but the basics can get you pretty far.
Interactive Commands
	Projectile doesn’t have a default key prefix for its commands, but all the examples in the manual assume you’ve opted for s-p (super-p).

Here’s a list of the interactive Emacs Lisp functions, provided by Projectile:
Keybinding 	Description

s-p f
	

Display a list of all files in the project. With a prefix argument it will clear the cache first.

s-p F
	

Display a list of all files in all known projects.

s-p g
	

Display a list of all files at point in the project. With a prefix argument it will clear the cache first.

s-p 4 f
	

Jump to a project’s file using completion and show it in another window.

s-p 4 g
	

Jump to a project’s file based on context at point and show it in another window.

s-p 5 f
	

Jump to a project’s file using completion and show it in another frame.

s-p 5 g
	

Jump to a project’s file based on context at point and show it in another frame.

s-p d
	

Display a list of all directories in the project. With a prefix argument it will clear the cache first.

s-p 4 d
	

Switch to a project directory and show it in another window.

s-p 5 d
	

Switch to a project directory and show it in another frame.

s-p T
	

Display a list of all test files(specs, features, etc) in the project.

s-p l
	

Display a list of all files in a directory (that’s not necessarily a project)

s-p s g
	

Run grep on the files in the project.

M-- s-p s g
	

Run grep on projectile-grep-default-files in the project.

s-p s s
	

Runs ag (the_silver_searcher) on the project, performing a literal search. Requires the presence of ag.el. With a prefix argument it will perform a regex search.

s-p s r
	

Runs rg (ripgrep) on the project, performing a literal search. Requires the presence of rg.el or ripgrep.el. With a prefix argument it will perform a regex search.

s-p s x
	

Find references to the symbol at point within the project. Uses internally the xref library.

s-p v
	

Run vc-dir on the root directory of the project.

s-p V
	

Browse dirty version controlled projects.

s-p b
	

Display a list of all project buffers currently open.

s-p 4 b
	

Switch to a project buffer and show it in another window.

s-p 5 b
	

Switch to a project buffer and show it in another frame.

s-p 4 C-o
	

Display a project buffer in another window without selecting it.

s-p a
	

Switch between files with the same name but different extensions.

s-p 4 a
	

Switch between files with the same name but different extensions in other window.

s-p 5 a
	

Switch between files with the same name but different extensions in other frame.

s-p o
	

Runs multi-occur on all project buffers currently open.

s-p r
	

Runs interactive query-replace on all files in the projects.

s-p i
	

Invalidates the project cache (if existing).

s-p R
	

Regenerates the projects TAGS file.

s-p j
	

Find tag in project’s TAGS file.

s-p k
	

Kills all project buffers.

s-p D
	

Opens the root of the project in dired.

s-p 4 D
	

Opens the root of the project in dired in another window.

s-p 5 D
	

Opens the root of the project in dired in another frame.

s-p e
	

Shows a list of recently visited project files.

s-p left
	

Switch to the previous project buffer.

s-p right
	

Switch to the next project buffer.

s-p E
	

Opens the root dir-locals-file of the project.

s-p !
	

Runs shell-command in the root directory of the project.

s-p &
	

Runs async-shell-command in the root directory of the project.

s-p C
	

Runs a standard configure command for your type of project.

s-p c
	

Runs a standard compilation command for your type of project.

s-p P
	

Runs a standard test command for your type of project.

s-p t
	

Toggle between an implementation file and its test file.

s-p 4 t
	

Jump to implementation or test file in other window.

s-p 5 t
	

Jump to implementation or test file in other frame.

s-p z
	

Adds the currently visited file to the cache.

s-p p
	

Display a list of known projects you can switch to.

s-p q
	

Display a list of open projects you can switch to.

s-p S
	

Save all project buffers.

s-p m
	

Run the commander (an interface to run commands with a single key).

s-p x e
	

Start or visit an eshell for the project.

s-p x i
	

Start or visit an ielm (Elisp REPL) for the project.

s-p x t
	

Start or visit an ansi-term for the project.

s-p x s
	

Start or visit a shell for the project.

s-p x g
	

Start or visit a gdb for the project.

s-p x v
	

Start or visit a vterm for the project.

s-p ESC
	

Switch to the most recently selected Projectile buffer.

If you ever forget any of Projectile’s keybindings just do a:

s-p C-h
Customizing Projectile’s Keybindings

It is possible to add additional commands to projectile-command-map referenced by the prefix key in projectile-mode-map. You can add multiple keymap prefix for all commands. Here’s an example that adds super-, as a command prefix:

(define-key projectile-mode-map (kbd "s-,") 'projectile-command-map)

You can also bind the projectile-command-map to any other map you’d like (including the global keymap).
	For some common commands you might want to take a little shortcut and leverage the fairly unused Super key (by default Command on Mac keyboards and Windows on Win keyboards).

Here’s something you can add to your Emacs config:

(define-key projectile-mode-map [?\s-d] 'projectile-find-dir)
(define-key projectile-mode-map [?\s-p] 'projectile-switch-project)
(define-key projectile-mode-map [?\s-f] 'projectile-find-file)
(define-key projectile-mode-map [?\s-g] 'projectile-grep)

	Note that the Super keybindings are not usable in Windows, as Windows makes heavy use of such keybindings itself. Emacs Prelude already adds those extra keybindings.
Projectile Commander

Projectile’s Commander (projectile-commander) is a nifty utility for those of you who are struggling to remember a lot of keybindings. It provides a simple interface to most of Projectile’s commands via 1-character shortcuts that you need to press after invoking the commander (e.g. via s-p m).

The commander was created with the idea to provide a powerful project switching command (it will be triggered if you press C-u s-p p), but it’s very useful on its own as well.

Keybinding
	

Description

?
	

Commander help buffer.

D
	

Open project root in dired.

R
	

Regenerate the project’s etags/gtags.

T
	

Find test file in project.

V
	

Browse dirty projects

a
	

Run ag on project.

b
	

Switch to project buffer.

d
	

Find directory in project.

e
	

Find recently visited file in project.

f
	

Find file in project.

g
	

Run grep on project.

j
	

Find tag in project.

k
	

Kill all project buffers.

o
	

Run multi-occur on project buffers.

r
	

Replace a string in the project.

s
	

Switch project.

v
	

Open project root in vc-dir or magit.

You can add additional commands to the commander like this:

(def-projectile-commander-method ?f
  "Find file in project."
  (projectile-find-file))

Place such snippets after projectile-mode's init code.
Using Projectile with project.el

Starting with version 2.7 Projectile bundles some integration with project.el that makes project.el use by default Projectile’s project lookup function (projectile-project-root) and project file lookup function (projectile-project-files).
	You can read more about the implementation details of the integration here.

That’s useful as some packages (e.g. eglot) support natively only project.el's API for project discovery. Fortunately, project.el makes it easy to install additional project lookup functions and that’s exactly what Projectile does.

The popular xref package also relies on project.el to infer the project for helpful commands like xref-find-references (M-?), so it’s useful to teach it about Projectile’s project discovery logic.
	Projectile provides its own alternative to xref-find-references that’s named projectile-find-references (s-p ? or s-p s-x) and is using xref internally. 
**** 
** yaml-mode : 
RECRUITMENTS
    I have not used emacs and this library for a long time,
    so I recruit maintainers or collaborators for all yaml-mode users.
    If you are interested in maintaining or collaborating with this library,
    please contact me.

NAME
    yaml-mode - Simple major mode to edit YAML file for emacs

REQUIREMENTS
    Emacs 24.1

SYNOPSIS
    To install, just drop this file into a directory in your
    `load-path' and (optionally) byte-compile it.  To automatically
    handle files ending in '.yml', add something like:

    (require 'yaml-mode)
    (add-to-list 'auto-mode-alist '("\\.yml\\'" . yaml-mode))

    to your .emacs file.

    Unlike python-mode, this mode follows the Emacs convention of not
    binding the ENTER key to `newline-and-indent'.  To get this
    behavior, add the key definition to `yaml-mode-hook':

    (add-hook 'yaml-mode-hook
      '(lambda ()
        (define-key yaml-mode-map "\C-m" 'newline-and-indent)))

DESCRIPTION
    yaml-mode is major mode for emacs.

INSTALL
    You can install yaml-mode typing below.

        % make
        % make install

        or

        % make PREFIX=/your/home/dir
        % make install PREFIX=/your/home/dir

SETTING
    see SYNOPSIS.

AUTHOR
    Yoshiki Kurihara <kurihara@cpan.org> Copyright (C) 2010 by Free Software
    Foundation, Inc.

    This file is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    This file is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with GNU Emacs.  If not, see <https://www.gnu.org/licenses/>.

** Org-Roam : 
*** Org-Roam : 
**** configs 
***** basic configuration : 
  ;; Org-Roam basic configuration
  (setq org-directory (concat (getenv "HOME") "/Documents/notes/"))
;;  D:\Development\lisp\Dropbox\orgs\Org-roam\default 
;;  D:/Development/lisp/Dropbox/orgs/Org-roam/default 

  (use-package org-roam
    :after org
    :init (setq org-roam-v2-ack t) ;; Acknowledge V2 upgrade
    :custom
    (org-roam-directory (file-truename org-directory))
    :config
    (org-roam-setup)
    :bind (("C-c n f" . org-roam-node-find)
           ("C-c n r" . org-roam-node-random)		    
           (:map org-mode-map
                 (("C-c n i" . org-roam-node-insert)
                  ("C-c n o" . org-id-get-create)
                  ("C-c n t" . org-roam-tag-add)
                  ("C-c n a" . org-roam-alias-add)
                  ("C-c n l" . org-roam-buffer-toggle)))))
***** github
(use-package org-roam
  :ensure t
  :custom
  (org-roam-directory (file-truename "/path/to/org-files/"))
  :bind (("C-c n l" . org-roam-buffer-toggle)
         ("C-c n f" . org-roam-node-find)
         ("C-c n g" . org-roam-graph)
         ("C-c n i" . org-roam-node-insert)
         ("C-c n c" . org-roam-capture)
         ;; Dailies
         ("C-c n j" . org-roam-dailies-capture-today))
  :config
  ;; If you're using a vertical completion framework, you might want a more informative completion interface
  (setq org-roam-node-display-template (concat "${title:*} " (propertize "${tags:10}" 'face 'org-tag)))
  (org-roam-db-autosync-mode)
  ;; If using org-roam-protocol
  (require 'org-roam-protocol))
**** docs
***** git 
https://github.com/org-roam/org-roam
Org-roam GitHub Release MELPA License GPL 3

Org-roam Logo

Org-roam is a plain-text knowledge management system. It brings some of Roam's more powerful features into the Org-mode ecosystem.

Org-roam borrows principles from the Zettelkasten method, providing a solution for non-hierarchical note-taking. It should also work as a plug-and-play solution for anyone already using Org-mode for their personal wiki.

    Private and Secure: Edit your personal wiki completely offline, entirely in your control. Encrypt your notes with GPG. Take lasting notes in plain-text.
    Networked Thought: Connect notes and thoughts together with ease using backlinks. Discover surprising and previously unseen connections in your notes with the built-in graph visualization.
    Extensible and Powerful: Leverage Emacs' fantastic text-editing interface, and the mature Emacs and Org-mode ecosystem of packages.
    Free and Open Source: Org-roam is licensed under the GNU General Public License version 3 or later.

Org-roam Screenshot

    Documentation
    Discourse
    Slack
    Frequently Asked Questions
    Changelog

Installation

Down below you will find basic installation instructions for how to quickly install org-roam using various environments for various purposes. For more detailed information, please read the manual.
Using package.el
Toggle instructions
Using straight.el
Toggle instructions
Using Doom Emacs
Toggle instructions
Without a package manager
Toggle instructions
Configuration

Here's a very basic sample for configuration of org-roam using use-package:

(use-package org-roam
  :ensure t
  :custom
  (org-roam-directory (file-truename "/path/to/org-files/"))
  :bind (("C-c n l" . org-roam-buffer-toggle)
         ("C-c n f" . org-roam-node-find)
         ("C-c n g" . org-roam-graph)
         ("C-c n i" . org-roam-node-insert)
         ("C-c n c" . org-roam-capture)
         ;; Dailies
         ("C-c n j" . org-roam-dailies-capture-today))
  :config
  ;; If you're using a vertical completion framework, you might want a more informative completion interface
  (setq org-roam-node-display-template (concat "${title:*} " (propertize "${tags:10}" 'face 'org-tag)))
  (org-roam-db-autosync-mode)
  ;; If using org-roam-protocol
  (require 'org-roam-protocol))

Note that the file-truename function is only necessary when you use symbolic link to org-roam-directory. Org-roam won't automatically resolve symbolic link to the directory.
Getting Started

David Wilson of System Crafters has produced an introductory video that covers the basic commands:

Getting Started with Org Roam - Build a Second Brain in Emacs
Getting Help

Before creating a new topic/issue, please be mindful of our time and ensure that it has not already been addressed on GitHub or on Discourse.

    If you are new to Emacs and have problem setting up Org-roam, please ask your question on Slack, channel #how-do-i.
    For quick questions, please ask them on Slack, channel #troubleshooting.
    If something is not working as it should, or if you would like to suggest a new feature, please create a new issue.
    If you have questions about your workflow with the slip-box method, please find a relevant topic on Discourse, or create a new one.

Knowledge Bases using Org-roam

    Jethro Kuan (Source)
    Alexey Shmalko
    Sidharth Arya

Contributing

To report bugs and suggest new feature use the issue tracker. If you have some code which you would like to be merged, then open a pull request. Please also see CONTRIBUTING.md.
License

Copyright © Jethro Kuan and contributors. Distributed under the GNU General Public License, Version 3.

***** tutorial 
***** Org-roam User Manual
https://www.orgroam.com/manual.html#Links-between-Nodes
***** 7.1 Navigating the Org-roam Buffer
The Org-roam buffer uses magit-section, making the typical magit-section keybindings available. Here are several of the more useful ones:

    M-{N}: magit-section-show-level-{N}-all
    n: magit-section-forward
    <TAB>: magit-section-toggle
    <RET>: org-roam-buffer-visit-thing 

org-roam-buffer-visit-thing is a placeholder command, that is replaced by section-specific commands such as org-roam-node-visit. 
***** 16.1 How do I have more than one Org-roam directory?

Emacs supports directory-local variables, allowing the value of org-roam-directory to be different in different directories. It does this by checking for a file named .dir-locals.el.

To add support for multiple directories, override the org-roam-directory variable using directory-local variables. This is what .dir-locals.el may contain:

((nil . ((org-roam-directory . "/path/to/alt/org-roam-dir")
         (org-roam-db-location . "/path/to/alt/org-roam-dir/org-roam.db"))))

Note org-roam-directory and org-roam-db-location should be an absolute path, not relative.

Alternatively, use eval if you wish to call functions:

((nil . ((eval . (setq-local
                  org-roam-directory (expand-file-name (locate-dominating-file
                                                        default-directory ".dir-locals.el"))))
         (eval . (setq-local
                  org-roam-db-location (expand-file-name "org-roam.db"
                                                         org-roam-directory))))))

All files within that directory will be treated as their own separate set of Org-roam files. Remember to run org-roam-db-sync from a file within that directory, at least once.

Next: How can I stop Org-roam from creating IDs everywhere?, Previous: How do I have more than one Org-roam directory?, Up: FAQ   [Index]
***** How to delete a node?
****** just need delete : 
You just need delete the file or headline of the node you want to delete. Then M-x org-roam-db-sync.
****** calling M-x delete-file : 
Right now, deleting a file will result in links to the current file breaking.
If you delete the file using Emacs (with dired, or calling M-x delete-file), the cache remains consistent. If you delete the file from outside Emacs, it won’t, but is not a big issue, because running M-x org-roam-db-build-cache once more will bring it to a consistent state.
****** handle that with a script : 
 currently handle that with a script to remove all the references first, then I delete the file:
#+begin_src python

#!/usr/bin/env python3

import re
import os
import subprocess
import sys

def get_id(fname):
    with open(fname) as f:
        content = f.read()
        return re.findall(r":ID:\s+(.*)", content)[0]

def notes_with_pattern(pat):
    roam_folder = os.path.expanduser("~/.roam/")
    raw = subprocess.check_output(f"rg -l {pat} {roam_folder}", shell=True).decode("utf-8")
    return raw.splitlines()

def subid(content, ident):
    pat = f"\[\[id:{ident}\]\[(.*?)\]\]"
    return re.sub(pat, "\\1", content)

def remove_note_mention(fn, ident):
    with open(fn) as f:
        content = f.read()
    newcontent = subid(content, ident)
    with open(fn, "w") as f:
        f.write(newcontent)
    print(f"Edited {fn}")

def delete_note(fname):
    ident = get_id(fname)
    print(f"Removing id {ident}")
    to_edit = [n for n in notes_with_pattern(ident)
               if n != fname]
    for fn in to_edit:
        remove_note_mention(fn, ident)

if __name__ == '__main__':
    delete_note(sys.argv[1])
#+end_src

And I call it from emacs with:
#+begin_src emacs-lisp :tangle yes
(defun delete-org-roam-note-references ()
  (interactive)
  (async-shell-command (s-concat "delete_note.py " (buffer-file-name))))
#+end_src

Note: It does not work with heading references just whole notes ones.
***** обработать каким-то образом все орг-роамные файлы

https://org-roam.discourse.group/t/how-to-list-incomplete-entries/2444/3 Здесь - всем добавить тег draft.

(dolist (f (org-roam-list-files))
        (progn
        (interactive)
        (find-file f)
        (org-roam-tag-add
         '("draft"))
        (save-buffer)
        (kill-current-buffer)))



*** Org-Roam-Ui : 
**** git
***** Table of Contents
[[https://github.com/org-roam/org-roam-ui#org-roam-ui-a-graphical-frontend-for-your-org-roam-zettelkasten][SVG Image]]org-roam-ui: a graphical frontend for your org-roam Zettelkasten

,* [[https://github.com/org-roam/org-roam-ui#changelog][Changelog]]
,* [[https://github.com/org-roam/org-roam-ui#installation][Installation]] 

 * [[https://github.com/org-roam/org-roam-ui#package.el][Using package.el]]
 * [[https://github.com/org-roam/org-roam-ui#doom][Doom]]
 * [[https://github.com/org-roam/org-roam-ui#straightuse-package][straight/use-package]]

,* [[https://github.com/org-roam/org-roam-ui#usage][Usage]]
,* [[https://github.com/org-roam/org-roam-ui#disclaimers-][Disclaimers ‼]]
,* [[https://github.com/org-roam/org-roam-ui#faq-][FAQ 🗨]]
,* [[https://github.com/org-roam/org-roam-ui#features-][Features ✨]] 

 * [[https://github.com/org-roam/org-roam-ui#planned-features][Planned features]]

,* [[https://github.com/org-roam/org-roam-ui#supporting-org-roam-ui][Supporting org-roam-ui]] 

 * [[https://github.com/org-roam/org-roam-ui#feedback][Feedback]]
 * [[https://github.com/org-roam/org-roam-ui#contribute-][Contribute 💪]] 

 * [[https://github.com/org-roam/org-roam-ui#hacktoberfest][Hacktoberfest]]

 * [[https://github.com/org-roam/org-roam-ui#donate][Donate]] 

 * [[https://github.com/org-roam/org-roam-ui#sponsors][Sponsors]]
***** Org-Roam-UI is a frontend : 
Org-Roam-UI is a frontend for exploring and interacting with your [[https://github.com/org-roam/org-roam][org-roam]] notes.

Org-Roam-UI is meant a successor of [[https://github.com/org-roam/org-roam-server][org-roam-server]] that extends functionality of
org-roam with a Web app that runs side-by-side with Emacs.

[[https://github.com/org-roam/org-roam-ui#changelog][SVG Image]]Changelog

For major new features/bugfixes we will update [[https://github.com/org-roam/org-roam-ui/discussions/30][changelog]].
***** [[https://github.com/org-roam/org-roam-ui#installation][SVG Image]]Installation

org-roam-ui is on MELPA!

org-roam-ui requires org-roam, websocket, simple-httpd, f and Emacs >= 27 for
fast JSON parsing.

[[https://github.com/org-roam/org-roam-ui#packageel][SVG Image]]package.el

M-x package-install org-roam-ui

No configuration is necessary when you use package.el to install ORUI.

[[https://github.com/org-roam/org-roam-ui#doom][SVG Image]]Doom

Add the following to your package.el

Org-roam-ui tries to keep up with the latest features of org-roam, which conflicts with
Doom Emacs's desire for stability. To make sure nothing breaks, use the latest
version of org-roam by unpinning it.

(unpin! org-roam)
(package! org-roam-ui)

Then something along the following to your config.el

(use-package! websocket
    :after org-roam)

(use-package! org-roam-ui
    :after org-roam ;; or :after org
;;         normally we'd recommend hooking orui after org-roam, but since org-roam does not have
;;         a hookable mode anymore, you're advised to pick something yourself
;;         if you don't care about startup time, use
;;  :hook (after-init . org-roam-ui-mode)
    :config
    (setq org-roam-ui-sync-theme t
          org-roam-ui-follow t
          org-roam-ui-update-on-save t
          org-roam-ui-open-on-start t))

We recommend only loading org-roam-ui after loading org(-roam) as starting the
server and making database requests can impact startup times quite a lot.

[[https://github.com/org-roam/org-roam-ui#straightuse-package][SVG Image]]straight/use-package

(use-package org-roam-ui
  :straight
    (:host github :repo "org-roam/org-roam-ui" :branch "main" :files ("*.el" "out"))
    :after org-roam
;;         normally we'd recommend hooking orui after org-roam, but since org-roam does not have
;;         a hookable mode anymore, you're advised to pick something yourself
;;         if you don't care about startup time, use
;;  :hook (after-init . org-roam-ui-mode)
    :config
    (setq org-roam-ui-sync-theme t
          org-roam-ui-follow t
          org-roam-ui-update-on-save t
          org-roam-ui-open-on-start t))
***** Usage : 
[[https://github.com/org-roam/org-roam-ui#usage][SVG Image]]Usage

Use M-x org-roam-ui-mode RET to enable the global mode. It will start a web server
on [[http://127.0.0.1:35901/][http://127.0.0.1:35901/]] and connect to it via a WebSocket for real-time updates.
***** Commands : 
****** Moving around : 
ORUI provides a few commands for interacting with the graph without ever having to
leave Emacs. NOTE: This is quite janky at the moment and will change in the future.
Consider this more of a teaser.
Moving around

****** Zooms : 
(org-roam-ui-node-zoom)
Zooms to the current node in the global view ignoring local mode.
****** (org-roam-ui-node-local) : 
(org-roam-ui-node-local)

Opens the current node in local view.

You can optionally give these command three parameters:

1 the node id you want to zoom to (by default the current node)
2 The speed at which you want to zoom (can be set in the UI) in ms.
3 The padding of the zoom in px.

These options might not work at the moment, please configure them in the UI for the
time being.
***** Manipulating graph

(org-roam-ui-add-to-local-graph &optional id)

Adds the node with the given id to the local graph. If no id is given, the current node is
used. If the local graph is not open, it will be opened.

(org-roam-ui-remove-from-local-graph &optional id)

Removes the node with the given id from the local graph. If no id is given, the current
node is used.
***** Configuration : 
[[https://github.com/org-roam/org-roam-ui#configuration][SVG Image]]Configuration

Org-Roam-UI exposes a few variables, but most of the customization is done in the
web app.

[[https://github.com/org-roam/org-roam-ui#following][SVG Image]]Following

ORUI follows you around Emacs by default. To disable this, set

(setq org-roam-ui-follow nil)

or disable the minor mode org-roam-ui-follow-mode.

[[https://github.com/org-roam/org-roam-ui#updating][SVG Image]]Updating

We plan to make updates to the graph happen smoothly, at the moment it is only
possible to reload the entire graph when an update happens (but local mode is
preserved). This is enabled by default, to disable

(setq org-roam-ui-update-on-save nil)

[[https://github.com/org-roam/org-roam-ui#theme][SVG Image]]Theme

Org-Roam-UI can sync your Emacs theme! This is the default behavior, to disable it
do

(setq org-roam-ui-sync-theme nil)

Then call M-x orui-sync-theme.

You can also provide your own theme if you do not like syncing nor like the default
one. To do so, set org-roam-ui-custom-theme to an alist of (rather specific)
variables, like so

(setq org-roam-ui-custom-theme
    '((bg . "#1E2029")
        (bg-alt . "#282a36")
        (fg . "#f8f8f2")
        (fg-alt . "#6272a4")
        (red . "#ff5555")
        (orange . "#f1fa8c")
        (yellow ."#ffb86c")
        (green . "#50fa7b")
        (cyan . "#8be9fd")
        (blue . "#ff79c6")
        (violet . "#8be9fd")
        (magenta . "#bd93f9")))

You can optionally provide (base1 . "#XXXXXX") arguments after the last one to also
set the background shades, otherwise ORUI will guess based on the provides bg and
fg.

[[https://github.com/org-roam/org-roam-ui#open-on-start][SVG Image]]Open on start

By default, org-roam-ui will try to open itself in your default browser. To disable this,
set

(setq org-roam-ui-open-on-start nil)
***** Disclaimers : 
[[https://github.com/org-roam/org-roam-ui#disclaimers-][SVG Image]]Disclaimers ‼

,* We only support [[https://blog.jethro.dev/posts/org_roam_v2/][org-roam v2]]; v1 will never be supported.
,* As the name suggests, Org-Roam-UI only works with org-roam! If you organize
 your notes in some other form org-roam-ui cannot work, as it uses org-roam to
 fetch all the connections.
,* Feature-parity with org-roam-server is not the goal. Although we aim to make a
 similar product which is having a visual graph to help you explore and navigate
 your org-roam nodes, we do not intend to replicate all of the, nor be limited to
 replicating the features of org-roam-server.
,* This is alpha software: please do give it a try and use it, but expect bugs and
 troubleshooting!
,* The project was created by a couple of tinkerers to scratch their own itch. We don't
 get rewarded in any material way and development may stop any day (because
 life). The best way to keep the project alive is to [[https://github.com/org-roam/org-roam-ui#Contribute][explore the code and contribute]]!
***** FAQ : 
[[https://github.com/org-roam/org-roam-ui#faq-][SVG Image]]FAQ 🗨

[[https://github.com/org-roam/org-roam-ui#q-aaaaand-it-broke-what-do][SVG Image]]Q: Aaaaand it broke: what do?

Sorry! This is still alpha software, so expect it to break from time to time. Best thing
you can try is to remove your settings by going to "Storage > Local Storage" on
Firefox or "Application > Local Storage" on Chromium and deleting everything there.

If the issue still persists, please file a bug report with

1 Your browsers console log
2 Your browsers
3 What you were doing when it broke

and we'll try to help you ASAP!

[[https://github.com/org-roam/org-roam-ui#q-clicking-open-in-emacs-gives-an-error-around-json-parse-string-how-do-i-fix-this][SVG Image]]Q: Clicking 'Open in Emacs' gives an error around json-parse-string, how do I fix this?

If you receive an error, in emacs, stating function definition is void
json-parse-string, then you must compile emacs with json support. This is not
automatically done on systems such as Gentoo.

[[https://github.com/org-roam/org-roam-ui#q-graph-slow-faster][SVG Image]]Q: Graph Slow! Faster?

While we try to optimize the display of the graph, there is only so much we can do.
For largish networks (>2k nodes) dragging the graph around a lot can cause some
performance issues, but there are a few things you can do to speed it up.

[[https://github.com/org-roam/org-roam-ui#close-the-tweaks-panel][SVG Image]]Close the tweaks panel

At the time of writing (Aug 8) it is very much not optimized, and shifting between
global and local mode or 2d or 3d is noticeably slower with the tweaks panel open
than without. This will be fixed in a future release.

[[https://github.com/org-roam/org-roam-ui#use-a-chromium-based-browser][SVG Image]]Use a Chromium based browser

As much as it saddens us to say, Firefox's rendering engine is quite a bit slower than
its Chromium cousins. Compare the performance of the two and see if that's the
main issue first.

[[https://github.com/org-roam/org-roam-ui#turn-off-the-particles][SVG Image]]Turn off the particles

I know, very cool to see those little guys travel up and down your notes, but very slow,
especially in 3D mode.

[[https://github.com/org-roam/org-roam-ui#turn-off-labels][SVG Image]]Turn off labels

Probably the second slowest thing to render, with little possibility of speeding it up.
Consider only turning on labels on highlight or cranking up the "Label appearance
scale".

[[https://github.com/org-roam/org-roam-ui#turn-off-highlight-animations][SVG Image]]Turn off highlight animations

I know, they're gorgeous, but not very performant.

[[https://github.com/org-roam/org-roam-ui#turn-off-collision][SVG Image]]Turn off collision

Nice, but costly! If you like to have the graph more spread out, turning off collision will
change little in the resulting layout, but will help performance quite a bit.

[[https://github.com/org-roam/org-roam-ui#turn-off-gravity][SVG Image]]Turn off gravity

Fewer forces fewer worries

[[https://github.com/org-roam/org-roam-ui#favor-2d-over-3d][SVG Image]]Favor 2D over 3D

I know, it looks cool, but man is it slow.

[[https://github.com/org-roam/org-roam-ui#dont-drag-the-dang-thing-around-so-much][SVG Image]]Don't drag the dang thing around so much!

In our experience, once the graph has actually settled and nothing needs to be
rendered again, looking around should pose little trouble. At the moment there is no
way of "saving" the graph configuration, but we are exploring the possibility. The
graph layout algorithm is deterministic however, so barring any changes to the data
it should produce the same results each time.

[[https://github.com/org-roam/org-roam-ui#q-will-you-implement-x][SVG Image]]Q: Will you implement X?

Hopefully, yeah! But time is limited, and so is the amount of features we can cram into
this things before it implodes in itself, so we are adding things incrementally to make
sure they work. That said, we'd love to hear from you! If your feature is not already on
the [[https://github.com/org-roam/org-roam-ui/projects/2][project board]], please post minor feature requests such as "I want to be able to
color this specific node" in [[https://github.com/org-roam/org-roam-ui/discussions/6][the minor feature requests discussion]] and major feature
requests (e.g. "I want to publish my graph) in [[https://github.com/org-roam/org-roam-ui/discussions/66][the major feature requests discussion]]
or upvote those already posted, this way we can adjust our priorities somewhat!

[[https://github.com/org-roam/org-roam-ui#q-this-doesnt-work-with-org-roam-v1org-brainzettledelft][SVG Image]]Q: This doesn't work with org-roam v1/org-brain/Zettledelft!

Correct! We only support org-roam v2, although we might introduce a backend
agnostic implementation later.

[[https://github.com/org-roam/org-roam-ui#features-][SVG Image]]Features ✨

Org-roam-ui's main feature is the ability to generate a graph visualization of your
org-roam notes.

[[https://github.com/org-roam/org-roam-ui#cool-graph][SVG Image]]Cool graph

[[https://user-images.githubusercontent.com/21983833/127747037-aac46e8a-8617-4436-8887-ea1ad7a3141a.png][image]]

[[https://github.com/org-roam/org-roam-ui#open-notes-in-emacs][SVG Image]]Open notes in Emacs

(Double) clicking a node will open the corresponding note in Emacs, very cool. You
don't need org-protocol for this, it works out of the box!

SVG Image2021-07-31.18-16-52.mkv.mp4 [[https://user-images.githubusercontent.com/21983833/127747170-3b49fbde-7fc5-410f-bd26-4ffea8dae48c.mp4][[video]​]]

[[https://github.com/org-roam/org-roam-ui#note-previewing][SVG Image]]Note previewing

For when you leave Emacs in a moment of weakness.

SVG Imagefileviewer.mp4 [[https://user-images.githubusercontent.com/21983833/136845036-a6bd4b32-d78c-4bcf-aa8a-0e37c69cbbe8.mp4][[video]​]]

[[https://github.com/org-roam/org-roam-ui#follow-your-movement-in-emacs][SVG Image]]Follow your movement in Emacs!

When you open a note in Emacs, org-roam-ui will move to the corresponding node
on the graph.

SVG Image2021-07-31.18-17-19.mkv.mp4 [[https://user-images.githubusercontent.com/21983833/127747187-7823a825-a2f8-449c-a0ec-1c5c525621dc.mp4][[video]​]]

[[https://github.com/org-roam/org-roam-ui#theme-syncing][SVG Image]]Theme syncing

Your gruvbox is only a M-x orui-sync-theme away (or you can just select them in the
settings).

SVG Image2021-07-31.18-26-01.mkv.mp4 [[https://user-images.githubusercontent.com/21983833/127747203-a1aeca95-7def-4caf-b2cf-8a18fa1f2059.mp4][[video]​]]

[[https://github.com/org-roam/org-roam-ui#filters][SVG Image]]Filters

Filter out all those "temporary" notes you'll sift through someday.

SVG Imagefilters.mp4 [[https://user-images.githubusercontent.com/21983833/136944460-76b92e7c-7cf5-40d0-89f4-bdabfa41fe01.mp4][[video]​]]

[[https://github.com/org-roam/org-roam-ui#3-d][SVG Image]]3 D

Literally deepen your understanding of your thoughts (and it looks cool)

SVG Image2021-07-31.18-32-53.mkv.mp4 [[https://user-images.githubusercontent.com/21983833/127747234-d0588cdf-623f-4d13-a060-737bc570b295.mp4][[video]​]]

[[https://github.com/org-roam/org-roam-ui#planned-features][SVG Image]]Planned features

[[https://github.com/org-roam/org-roam-ui#graph][SVG Image]]Graph

In no particular order

,* Citation links + customization
,* Tag filtering/coloring
,* Local graph show Nth neighbor
,* Colorization options (by neighbors, centrality, etc)
,* Setting profiles

[[https://github.com/org-roam/org-roam-ui#ui-in-general][SVG Image]]UI in general

,* File viewing using AST parsing
,* Displaying notes Andy Matushak style
,* Discovery options, e.g. "show shortest path between X and Y"

[[https://github.com/org-roam/org-roam-ui#integrations-with-other-org-mode-packages][SVG Image]]Integrations with other Org-mode packages

[[https://github.com/org-roam/org-roam-ui#md-roam][SVG Image]][[https://github.com/nobiot/md-roam][md-roam]]

Use markdown notes interchangeably with Org-mode notes!

[[https://github.com/org-roam/org-roam-ui#delve][SVG Image]]Delve

tbd

[[https://github.com/org-roam/org-roam-ui#supporting-org-roam-ui][SVG Image]]Supporting org-roam-ui

[[https://github.com/org-roam/org-roam-ui#chat][SVG Image]]Chat

We have a small telegram group for discussing org-roam-ui, you can join if you're
cool. [[https://t.me/+sEuL2qi37yw1NzQy][https://t.me/+sEuL2qi37yw1NzQy]]

[[https://github.com/org-roam/org-roam-ui#feedback][SVG Image]]Feedback

For feature suggestions, please make an issue or check out the discussions for
[[https://github.com/org-roam/org-roam-ui/discussions/66][major]] and [[https://github.com/org-roam/org-roam-ui/discussions/6][minor features]]. For other feedback, please go to the [[https://github.com/org-roam/org-roam-ui/discussions/99][feedback
discussion]], or open up a new one!

[[https://github.com/org-roam/org-roam-ui#contribute-][SVG Image]]
**** Usage : 
;; Usage
;; Use M-x org-roam-ui-mode RET to enable the global mode. It will start a web server on http://127.0.0.1:35901/ and connect to it via a WebSocket for real-time updates.


*** dendroam : 
**** git 
***** Readme
https://github.com/vicrdguez/dendroam
This is an attempt of bringing to bring to emacs some Dendron features hand in hand with Org Roam

Make sure you check the our Discussions page where we can talk about proposals and improvements for the project
Disclaimer

This is a work in progress project in a very early stage. However it is still functional and safe to use in your org roam vault.

This code only works with Org Roam v2 which is currently in public alpha.

As well I’m not an elisp programmer and this is my first code using this language. Probably the code is not as efficient or elegant as it could be, but feel free to point out improvements or even contribute to them.
Why?

In my experience, pure zettelkasten is awesome for academic information, taking notes on books, and articles that are full of abstract concepts that don’t belong to any category but are inter-linked with other ideas.

However since I work in the IT industry, I take a lot of notes on software and software architecture. This kind of information has a clear structure, a structure that repeats between information that belongs to an specific context. And here zettelkasten in my opinion is not the perfect fit.

I ended up having lots of notes like: data types in Java, data types in c… Repeating information in the title to be able to find specific notes.

This kind of note taking is really useful for me, and I think it can be useful for others which write about more structured information

This hierarchies helps grouping and branching notes that are strongly connected but leaves the concept of atomic note intact, a note that you can still link with others that are related. Also, makes finding this references faster among all your notes.

In addition, having this little feature set does not get in your way if you want to use just zettelkasten.

For this I got hooked on Dendron’s concept of note taking but couldn’t get used to VSCode, so I decided to write some code to have some of its beautiful goodies along with the awesome Org Roam features.

You can find more on the hierarchies rationale in the blog of Dendron’s creator
Features

Hierarchies are just filenames separated by dots “.”, each subsequent hierarchy is child from the former. Something like: org.refile -> refile is child of org org.refile.cfg -> cfg is child of refile

Each child is a note, so we can have a folder-like structure, but much less rigid.
Finding and creating notes

This emulates the Dendron’s Lookup. Runing org-roam-node-find shows hierarchies in the minibuffer. If the note does not exist, the input is used to populate a new file.

The search list will show notes with the following format:

this.is.a.hierarchy:Hello World

Dendroam will truncate the last child of the hierarchy for the file (which is indeed the slugified title) and will show the file title instead for better readability.

For note creation you don’t need to use hypens, dendroam will change spaces for hypens for the file name, keeping the title correct:

Writing:

proj.dendroam.notes on dendroam

as input will result in:

file: proj.dendroam.notes-on-dendroam.org

Note title: Notes On Dendroam

Of course you can create notes without any hierarchy as you would normally do with Org Roam

assets/org-roam-find.gif
Refactor hierarchies

Useful to move group of files to another hierarchy.

    Running dendroam-refactor-hierarchy will prompt you with the current file hierarchy so you can change it. This will refactor all the notes that share the same hierarchy as well
    Running dendroam-refactor-file will do the same as refactor hierarchy command but will change only the current file.

    assets/org-roam-refactor.gif

Time notes

Time notes are sub-hierarchies of other notes that indicates the time, you might want this notes under different other notes, journal notes are a great example. In this case dendroam is integrated with org-roam-dailies, so we can still using the current functions:

journal.daily.2021.04.21

Or hierarchy where you capture meetings:

project.customer1.meet.2021.04.21.123020 project.customer2.meet.2021.04.21.183020

This makes notes easy to sort and easy to find. You can create time notes under any other note as well

Scratch notes are other way of looking at time notes. This type of notes are just a dump bucket where you want to capture something on the fly. It is nothing more than a top-level hierarchy with time:

scratch.2021.04.21.183020

Take a look at the example:

assets/dailies.gif

This notes are possible using org-capture through org-roam new capture functions, so it is easy to creae new types of time notes.
Configuration

To show hierarchies in the minibuffer you must change the org-roam display template:

(setq org-roam-node-display-template "${hierarchy}:${title}")

In order to populate the title correctly you need to configure org roam capture templates like this:

(setq org-roam-capture-templates
      '(("d" "default" plain
         "%?"
         :if-new (file+head "${slug}.org"
                            "#+title: ${hierarchy-title}\n")
         :immediate-finish t
         :unnarrowed t)))

An example dailies configuration that works with hierarchies:

(setq org-roam-dailies-capture-templates
      '(("d" "default" entry
         "* %?"
         :if-new (file+head "journal.daily.%<%Y.%m.%d>.org"
                            "#+title: %<%Y-%m-%d>\n"))))

To allow scratch notes and time notes you need to configure a new variable defined in the dendroam code called dendroam-capture-template, that adds more templates:

(setq dendroam-capture-templates
      '(("t" "Time note" entry
         "* %?"
         :if-new (file+head "${current-file}.%<%Y.%m.%d>.org"
                            "#+title: %^{title}\n"))
        ("s" "Scratch note" entry
         "* %?"
         :if-new (file+head "scratch.%<%Y.%m.%d.%.%M%S%3N>.org"
                            "#+title: %^{title}\n"))))

If you want to show the current file hierarchy as an initial input when running the find command, you can use this function and then bind it to a key combination of your choice

(defun dendroam-node-find-initial-input ()
  (interactive)
  (org-roam-node-find nil (if (buffer-file-name)
                         (file-name-base (buffer-file-name))
                         "")))

Install
Doom Emacs
Load from Disk

You can clone the repo and load the file into your config:

(load! "<path to dendrom.el file>")

Note that the code above is for doom emacs, I guess you can have the same effect with load in vanilla emacs as well. All the help you can give me on how to distribute the package is really apreciated.
Load via github recipe

Inside of your .doom.d/packages.el:

(package! dendroam
  :recipe (:host github :repo "vicrdguez/dendroam" :branch "main"))

This registers dendroam as a package to use in doom. Now inside of .doom.d/config.el:

(use-package! dendroam
  :after org-roam)

Future plans

This code is something I use my self so I plan to keep improving it. This are the things I have in my mind now.

More Dendron features:

    Schema support: I’m researching how to best approach this. Using YAML files like dendron does? Not sure about elisp support for YAML. Another option is to use elisp forms to define schemas and then load them. This is open to discussion of course and I would love to know ideas on this if you have any. Feel free to show them.
    Publishing: Having an easy and integrated way of publishing would be nice. I don’t know too much about web technologies so again, help is really apreciated.

We can of course discuss about more dendron features can be useful in org roam/emacs context.

Dendroam specific plans

    Try to keep compatibility with org roam, and if possible add compatibility with Dendron so people can use both (of course exporting org to markdown and viceversa)
    Some improvements to take advantage of the powerful emacs features.
**** Configuration
To show hierarchies in the minibuffer you must change the org-roam display template:

(setq org-roam-node-display-template "${hierarchy}:${title}")

In order to populate the title correctly you need to configure org roam capture templates like this:

(setq org-roam-capture-templates
      '(("d" "default" plain
         "%?"
         :if-new (file+head "${slug}.org"
                            "#+title: ${hierarchy-title}\n")
         :immediate-finish t
         :unnarrowed t)))

An example dailies configuration that works with hierarchies:

(setq org-roam-dailies-capture-templates
      '(("d" "default" entry
         "* %?"
         :if-new (file+head "journal.daily.%<%Y.%m.%d>.org"
                            "#+title: %<%Y-%m-%d>\n"))))

To allow scratch notes and time notes you need to configure a new variable defined in the dendroam code called dendroam-capture-template, that adds more templates:

(setq dendroam-capture-templates
      '(("t" "Time note" entry
         "* %?"
         :if-new (file+head "${current-file}.%<%Y.%m.%d>.org"
                            "#+title: %^{title}\n"))
        ("s" "Scratch note" entry
         "* %?"
         :if-new (file+head "scratch.%<%Y.%m.%d.%.%M%S%3N>.org"
                            "#+title: %^{title}\n"))))

If you want to show the current file hierarchy as an initial input when running the find command, you can use this function and then bind it to a key combination of your choice

(defun dendroam-node-find-initial-input ()
  (interactive)
  (org-roam-node-find nil (if (buffer-file-name)
                         (file-name-base (buffer-file-name))
                         "")))
**** Install
***** Load from Disk
Doom Emacs
You can clone the repo and load the file into your config:

(load! "<path to dendrom.el file>")

Note that the code above is for doom emacs, I guess you can have the same effect with load in vanilla emacs as well. All the help you can give me on how to distribute the package is really apreciated.
***** Load via github recipe

Inside of your .doom.d/packages.el:

(package! dendroam
  :recipe (:host github :repo "vicrdguez/dendroam" :branch "main"))

This registers dendroam as a package to use in doom. Now inside of .doom.d/config.el:

(use-package! dendroam
  :after org-roam)
***** practic
****** quelpa
#+begin_src emacs-lisp :tangle yes
(use-package dendroam
	:quelpa (dendroam :repo "vicrdguez/dendroam" :fetcher github)
	:ensure t
  :after org-roam
;; 		(quelpa '(dendroam :repo "vicrdguez/dendroam" :fetcher github))
;; (miracle :fetcher github :repo "Saikyun/miracle"))
	)
#+end_src

#+RESULTS:
****** config
#+begin_src emacs-lisp :tangle yes
(use-package dendroam
	:quelpa (dendroam :repo "vicrdguez/dendroam" :fetcher github)
	;; :ensure t
  :after org-roam
	:config
	(setq org-roam-node-display-template "${hierarchy}:${title}")
  ;; (setq org-roam-node-display-template
	;; 			(concat "${hierarchy}:${title}" (propertize "${tags}" 'face 'org-tag)))
	(setq org-roam-capture-templates
				'(("d" "default" plain
					"%?"
					:if-new (file+head "${slug}.org"
															"#+title: ${hierarchy-title}\n")
					:immediate-finish t
					:unnarrowed t)))
	;; dailies : 
	;; (setq org-roam-dailies-capture-templates
	;; 			'(("d" "default" entry
	;; 				"* %?"
	;; 				:if-new (file+head "journal.daily.%<%Y.%m.%d>.org"
	;; 														"#+title: %<%Y-%m-%d>\n"))))
	;; "Scratch note"
	;; (setq dendroam-capture-templates
	;; 			'(("t" "Time note" entry
	;; 				"* %?"
	;; 				:if-new (file+head "${current-file}.%<%Y.%m.%d>.org"
	;; 														"#+title: %^{title}\n"))
	;; 				("s" "Scratch note" entry
	;; 				"* %?"
	;; 				:if-new (file+head "scratch.%<%Y.%m.%d.%.%M%S%3N>.org"
	;; 														"#+title: %^{title}\n"))))
	(defun dendroam-node-find-initial-input ()
		(interactive)
		(org-roam-node-find nil (if (buffer-file-name)
													(file-name-base (buffer-file-name))
													"")))

  :bind (("C-c n I" . dendroam-node-find-initial-input))
	)
#+end_src

#+RESULTS:
: dendroam-node-find-initial-input
****** paire fix
#+begin_src emacs-lisp :tangle yes

(cl-defmethod org-roam-node-slug ((node org-roam-node))
  "Return the slug of NODE."
  (let ((title (org-roam-node-title node))
        (slug-trim-chars '(;; Combining Diacritical Marks https://www.unicode.org/charts/PDF/U0300.pdf
                           768 ; U+0300 COMBINING GRAVE ACCENT
                           769 ; U+0301 COMBINING ACUTE ACCENT
                           770 ; U+0302 COMBINING CIRCUMFLEX ACCENT
                           771 ; U+0303 COMBINING TILDE
                           772 ; U+0304 COMBINING MACRON
                           774 ; U+0306 COMBINING BREVE
                           775 ; U+0307 COMBINING DOT ABOVE
                           776 ; U+0308 COMBINING DIAERESIS
                           777 ; U+0309 COMBINING HOOK ABOVE
                           778 ; U+030A COMBINING RING ABOVE
                           779 ; U+030B COMBINING DOUBLE ACUTE ACCENT
                           780 ; U+030C COMBINING CARON
                           795 ; U+031B COMBINING HORN
                           803 ; U+0323 COMBINING DOT BELOW
                           804 ; U+0324 COMBINING DIAERESIS BELOW
                           805 ; U+0325 COMBINING RING BELOW
                           807 ; U+0327 COMBINING CEDILLA
                           813 ; U+032D COMBINING CIRCUMFLEX ACCENT BELOW
                           814 ; U+032E COMBINING BREVE BELOW
                           816 ; U+0330 COMBINING TILDE BELOW
                           817 ; U+0331 COMBINING MACRON BELOW
                           )))
    (cl-flet* ((nonspacing-mark-p (char) (memq char slug-trim-chars))
               (strip-nonspacing-marks (s) (string-glyph-compose
                                            (apply #'string
                                                   (seq-remove #'nonspacing-mark-p
                                                               (string-glyph-decompose s)))))
               (cl-replace (title pair) (replace-regexp-in-string (car pair) (cdr pair) title)))
      (let* ((pairs `(("[^[:alnum:][:digit:][.]]" . "_") ;; convert anything not alphanumeric
                      ("__*" . "_")                   ;; remove sequential underscores
                      ("^_" . "")                     ;; remove starting underscore
                      ("_$" . "")))                   ;; remove ending underscore
             (slug (-reduce-from #'cl-replace (strip-nonspacing-marks title) pairs)))
        (downcase slug)))))


#+end_src



** theme : 
*** gotham-theme : 
(use-package gotham-theme)
**** use-package : 
 #+begin_src emacs-lisp :results output silent
	(package-refresh-contents)
	(use-package gotham-theme :ensure t
		;; :load-path "~/ELs/Org/org-recipes"
		;; :load-path "~/ELs/"
		;; :init
		;; :config
		;; (setq org-recipes-file-list '("~/Org/recipes/main.org"))
	)

 (load-theme 'gotham t)
 ;; (disable-theme 'material)
 #+end_src
*** tomorrow : 
**** color-theme-sanityinc-tomorrow : 
purcell/color-theme-sanityinc-tomorrow: A set of comprehensive Emacs color themes based on Chris Kempson's 'tomorrow' themes
https://github.com/purcell/color-theme-sanityinc-tomorrow
An Emacs version of Chris Kempson's "Tomorrow" themes, with much more extensive face definitions than the "official" Emacs variant.

The themes work with both the built-in theming support in recent Emacsen, and via the traditional color-theme.el add-on library in older versions, so use whichever you prefer.
Installation

If you're all set up to use Marmalade or MELPA (highly recommended!), simply

M-x package-install RET color-theme-sanityinc-tomorrow RET

If you use el-get, simply add this to your packages list:

color-theme-sanityinc-tomorrow

Otherwise, ensure a directory containing these files is on your load-path.

If you're using an Emacs version older than 23.x, you'll also need to install color-theme.el.
Usage

(require 'color-theme-sanityinc-tomorrow)

M-x color-theme-sanityinc-tomorrow-day
M-x color-theme-sanityinc-tomorrow-night
M-x color-theme-sanityinc-tomorrow-blue
M-x color-theme-sanityinc-tomorrow-bright
M-x color-theme-sanityinc-tomorrow-eighties

In newer Emacs versions, just require the library as above, then

M-x customize-themes


**** color-theme-sanityinc-tomorrow : 
M-x package-install RET color-theme-sanityinc-tomorrow RET

(require 'color-theme-sanityinc-tomorrow)

M-x color-theme-sanityinc-tomorrow-day
M-x color-theme-sanityinc-tomorrow-night
M-x color-theme-sanityinc-tomorrow-blue
M-x color-theme-sanityinc-tomorrow-bright
M-x color-theme-sanityinc-tomorrow-eighties

In newer Emacs versions, just require the library as above, then

M-x customize-themes


 #+begin_src emacs-lisp 
 (package-refresh-contents)
 (use-package color-theme-sanityinc-tomorrow :ensure t
	 ;; :load-path "~/ELs/Org/org-recipes"
	 ;; :load-path "~/ELs/"
	 ;; :init
	 ;; :config
	 ;; (setq org-recipes-file-list '("~/Org/recipes/main.org"))
 )
 #+end_src

 #+RESULTS:

(require 'color-theme-sanityinc-tomorrow)

(color-theme-sanityinc-tomorrow-night)
(color-theme-sanityinc-tomorrow-bright)
(color-theme-sanityinc-tomorrow-blue)
(color-theme-sanityinc-tomorrow-eighties)

белая
(color-theme-sanityinc-tomorrow-day)

*** zenburn : 
**** zenburn-theme for Emacs
***** About
Zenburn for Emacs is a direct port of the popular Zenburn theme for vim, developed by Jani Nurminen. It's my personal belief (and that of its many users I presume) that it's one of the best low contrast color themes out there and that it is exceptionally easy on the eyes.

This theme uses the "new" (it used to be new several years ago when I created this package) built-in theming support available starting with Emacs 24.1.

Overview screenshot

ko-fi Patreon

You can support the development of Zenburn for Emacs via GitHub Sponsors, ko-fi, PayPal and Patreon.
Installation
Manual

Download zenburn-theme.el to the directory ~/.emacs.d/themes/. Add this to your .emacs (or init.el):

(add-to-list 'custom-theme-load-path "~/.emacs.d/themes/")

Now you can load the theme with the interactive function load-theme like this:

M-x load-theme RET zenburn
Package.el

Zenburn is available in NonGNU ELPA, MELPA Stable and MELPA.

You can install zenburn with the following command:

M-x package-install zenburn-theme

To load it automatically on Emacs startup add this to your init file:

(load-theme 'zenburn t)

Emacs Prelude

Zenburn for Emacs is already bundled into Emacs Prelude. If you're a Prelude user - you're probably already using Zenburn, since it's Prelude's default color theme. You can load Zenburn at any time by M-x load-theme zenburn.
Debian and Ubuntu

Users of Debian 9 or later or Ubuntu 16.10 or later may simply apt-get install elpa-zenburn-theme.
Customization
Custom colors

If you'd like to tweak the theme by changing just a few colors, you can do so by defining new values in the zenburn-override-colors-alist variable before loading the theme.

For example, to customize just the lighter background colors, you could add to your init file:

(setq zenburn-override-colors-alist
      '(("zenburn-bg+05" . "#282828")
        ("zenburn-bg+1"  . "#2F2F2F")
        ("zenburn-bg+2"  . "#3F3F3F")
        ("zenburn-bg+3"  . "#4F4F4F")))
(load-theme 'zenburn t)

To see the full list of color names you can override, consult the zenburn-theme.el source file.
Scaled headings

The theme supports scaling the font size for some headings and titles as well as using a variable-pitch font for those. To enable this, use the following settings before loading zenburn-theme:

;; use variable-pitch fonts for some headings and titles
(setq zenburn-use-variable-pitch t)

;; scale headings in org-mode
(setq zenburn-scale-org-headlines t)

;; scale headings in outline-mode
(setq zenburn-scale-outline-headlines t)

The screenshot above shows the default setting with no scaled or variable-pitch fonts. With scaled headings and variable-pitch fonts it looks like this:

Scaled screenshot
FAQ
Wrong colors in the terminal Emacs version

If your Emacs looks considerably uglier in a terminal (compared to the GUI version) try adding this to your .bashrc or .zshrc:

export TERM=xterm-256color

Source the .bashrc (or .zshrc) file and start Emacs again.
Bugs & Improvements

Please, report any problems that you find on the project's integrated issue tracker. If you've added some improvements and you want them included upstream don't hesitate to send me a patch or even better - a GitHub pull request. These contributors have done so.
Donate

You can support my work on Zenburn and all my other OSS projects via the following platforms:

    GitHub Sponsors
    ko-fi
    PayPal
    Patreon

Contributors

Here's a list of all the people who have contributed to the development of Zenburn for Emacs.
Changelog

**** use-package : 
M-x package-install zenburn-theme
M-x load-theme RET zenburn
(load-theme `zenburn)

 #+begin_src emacs-lisp 
 (package-refresh-contents)
 (use-package zenburn-theme :ensure t
	 ;; :load-path "~/ELs/Org/org-recipes"
	 ;; :load-path "~/ELs/"
	 ;; :init
	 ;; :config
	 ;; (setq org-recipes-file-list '("~/Org/recipes/main.org"))
 )
 #+end_src

 #+RESULTS:

(require 'color-theme-sanityinc-tomorrow)

(color-theme-sanityinc-tomorrow-night)
(color-theme-sanityinc-tomorrow-bright)
(color-theme-sanityinc-tomorrow-blue)
(color-theme-sanityinc-tomorrow-eighties)

белая
(color-theme-sanityinc-tomorrow-day)

*** Solarized : 
**** Solarized for Emacs
***** About
Solarized for Emacs is an Emacs 24bit theme making use of of the Solarized palette, developed by Ethan Schoonover.

You can find several screenshots of Solarized for Emacs here.

Solarized for Emacs supports officially Emacs 24+, but should be working under Emacs 23 as well. The theme is implemented in terms of customisations and deftheme and does not require the color-theme-package.
Installation

Solarized for Emacs is available for installation via the MELPA using package.el. Assuming you've set it up you can install Solarized like this:

M-x package-install solarized-theme

This package will install two variants of the theme; solarized-light-theme and solarized-dark-theme. You can load one of the theme variants with M-x load-theme.

To load it automatically on Emacs startup add this to your init file:

(load-theme 'solarized-light t)

or

(load-theme 'solarized-dark t)

Alternative Palettes

The intent of this theme will always be that Solarized-dark/light will give you the best possible experience. Palettes other than Solarized will never have influence over theming decisions, they are complementary.

You should not expect the complementary themes to be fully accurate or the most suitable versions of how to apply those palettes into an emacs theme. The important aspect is that the color usage should be about the same as they are with the default Solarized palette.

Colors stand out with varying amounts depending on which palette is used. This theme aims for a very soft look, violet is one of the most pronounced accent colors in the Solarized palette and that is one reason why it's rarely used by the theme. Violet in another palette might stand out less and therefore be used more often if the theme was specifically designed with that palette in mind.

The original Zenburn palette doesn't have an violet it is created by blending blue and magenta to get it to fit into the theme so it's tilted towards translating into what this theme has decided.

TLDR; While solarized-gruvbox-light might be good complement for users of solarized-light, another theme not contained in this package (gruvbox-light or whatever) might be more finely tuned in relation to the Gruvbox palette.
Customisations
Theme-specific settings

If you don't like low-contrast modeline or fringe, you can customize them either by doing M-x customize-group solarized or setting the values using elisp code:

;; make the fringe stand out from the background
(setq solarized-distinct-fringe-background t)

;; Don't change the font for some headings and titles
(setq solarized-use-variable-pitch nil)

;; make the modeline high contrast
(setq solarized-high-contrast-mode-line t)

;; Use less bolding
(setq solarized-use-less-bold t)

;; Use more italics
(setq solarized-use-more-italic t)

;; Use less colors for indicators such as git:gutter, flycheck and similar
(setq solarized-emphasize-indicators nil)

;; Don't change size of org-mode headlines (but keep other size-changes)
(setq solarized-scale-org-headlines nil)

;; Change the size of markdown-mode headlines (off by default)
(setq solarized-scale-markdown-headlines t)

;; Avoid all font-size changes
(setq solarized-height-minus-1 1.0)
(setq solarized-height-plus-1 1.0)
(setq solarized-height-plus-2 1.0)
(setq solarized-height-plus-3 1.0)
(setq solarized-height-plus-4 1.0)

Note that these need to be set before load-theme is invoked for Solarized.
Underline position setting for X

If you are using Emacs under X you might like the following setting which puts the underline below the font bottomline instead of the baseline.

Imho it enhances the general readability and also it fits well with the default solarized-high-contrast-mode-line setting which uses an slightly emphazised underline for the modeline to create one horizontal window border in the same manner as the vertical border.

(setq x-underline-at-descent-line t)

Create theme using color palette

The Solarized Face settings consist of a palette of colors with eight accents in addition to the darkest and brightest colors. Recent changes allow you to freely create theme files using different palettes instead of the Solarized color palette. It consists of two steps:

    creating a theme file
    loading a theme

Creating/Loading Theme Files

Select the darkest and lightest colors and the eight accents to pass to the function. This creates a theme file in .emacs.d/themes/. If you need to make minor modifications, you can override Face individually by specifying a free Sexp as the fourth argument.

Once you have a theme file, you can load it with load-theme, like solarized.

;; inspired vim's jellybeans color-theme
(solarized-create-theme-file-with-palette 'light 'solarized-jellybeans-light
  '("#202020" "#ffffff"
    "#ffb964" "#8fbfdc" "#a04040" "#b05080" "#805090" "#fad08a" "#99ad6a" "#8fbfdc"))

(load-theme 'solarized-jellybeans-light t)

;; inspired emacs's mesa color-theme
(solarized-create-theme-file-with-palette 'light 'solarized-mesa-light
  '("#000000" "#faf5ee"
    "#3388dd" "#ac3d1a" "#dd2222" "#8b008b" "#00b7f0" "#1388a2" "#104e8b" "#00688b"))

(load-theme 'solarized-mesa-light t)

;; inspired emacs's solarized color-theme
(solarized-create-theme-file-with-palette 'light 'solarized-solarized-light
  '("#002b36" "#fdf6e3"
    "#b58900" "#cb4b16" "#dc322f" "#d33682" "#6c71c4" "#268bd2" "#2aa198" "#859900"))

(load-theme 'solarized-solarized-light t)

;; wombat color-theme with misc face definition
(solarized-create-theme-file-with-palette 'dark 'solarized-wombat-dark
  '("#2a2a29" "#f6f3e8"
    "#e5c06d" "#ddaa6f" "#ffb4ac" "#e5786d" "#834c98" "#a4b5e6" "#7ec98f" "#8ac6f2")
  '((custom-theme-set-faces
     theme-name
     `(default ((,class (:foreground ,(solarized-color-blend base03 base3 0.15 2) :background ,base03))))
     `(highlight ((,class (:background ,violet))))
     `(font-lock-builtin-face ((,class (:foreground ,magenta))))
     `(font-lock-constant-face ((,class (:foreground ,blue))))
     `(font-lock-comment-face ((,class (:foreground ,base00))))
     `(mode-line
       ((,class (:foreground ,base2 :background ,(solarized-color-blend base03 base3 0.85 2)))))
     `(mode-line-inactive
       ((,class (:foreground ,base00 :background ,(solarized-color-blend base03 "black" 0.85 2)))))
     `(mode-line-buffer-id ((,class (:foreground ,base3 :weight bold))))
     `(minibuffer-prompt ((,class (:foreground ,base1))))
     `(vertical-border ((,class (:foreground ,base03)))))))

(load-theme 'solarized-wombat-dark t)

Note: If the theme file already exists, solorized-create-theme-file does not regenerate the file. If the file exists, it can be overwritten by setting the fifth argument to t.
Versioning Policy

    This package uses semantic versioning

    Master branch is to be considered unstable (which isn't an excuse to constantly break behaviour). Use MELPA Stable if you want fewer breaking changes.

    Next stable version will be 2.0 because of API changes in the master branch. Regular load-theme usage is unaffected by changes.

Bugs & Improvements

Please, report any problems that you find on the projects integrated issue tracker. If you've added some improvements and you want them included upstream don't hesitate to send me a patch or even better - a GitHub pull request.
License

**** use-package : 

M-x package-install solarized-theme

M-x load-theme.

(load-theme 'solarized-light t)
(load-theme 'solarized-dark t)

M-x package-install zenburn-theme
M-x load-theme RET zenburn
(load-theme `zenburn)

 #+begin_src emacs-lisp 
 (package-refresh-contents)
 (use-package solarized-theme :ensure t
	 ;; :load-path "~/ELs/Org/org-recipes"
	 ;; :load-path "~/ELs/"
	 ;; :init
	 ;; :config
	 ;; (setq org-recipes-file-list '("~/Org/recipes/main.org"))
 )

(load-theme 'solarized-dark t)
 #+end_src

 #+RESULTS:
 : t

(require 'color-theme-sanityinc-tomorrow)

(color-theme-sanityinc-tomorrow-night)
(color-theme-sanityinc-tomorrow-bright)
(color-theme-sanityinc-tomorrow-blue)
(color-theme-sanityinc-tomorrow-eighties)

белая
(color-theme-sanityinc-tomorrow-day)

*** doom-themes : 
**** doom-themes for Emacs
***** About
Doom Emacs' Theme Pack

A theme megapack for GNU Emacs, inspired by community favorites. Special attention is given for Doom Emacs and solaire-mode support, but will work fine anywhere else.

See the screenshots.
Table of Contents

    Install
        Doom Emacs
        Manually + use-package
    Theme list
    Extensions
    Complementary plugins
    Customization
    Contribute

Install
Doom Emacs

The built-in :ui doom module installs and configures doom-themes for you, and loads doom-one by default. To change the theme, change doom-theme:

;; in ~/.doom.d/config.el
(setq doom-theme 'doom-city-lights)

Manually + use-package

doom-themes is available on MELPA. Here is an example configuration with some common defaults laid out:

(use-package doom-themes
  :ensure t
  :config
  ;; Global settings (defaults)
  (setq doom-themes-enable-bold t    ; if nil, bold is universally disabled
        doom-themes-enable-italic t) ; if nil, italics is universally disabled
  (load-theme 'doom-one t)

  ;; Enable flashing mode-line on errors
  (doom-themes-visual-bell-config)
  ;; Enable custom neotree theme (all-the-icons must be installed!)
  (doom-themes-neotree-config)
  ;; or for treemacs users
  (setq doom-themes-treemacs-theme "doom-atom") ; use "doom-colors" for less minimal icon theme
  (doom-themes-treemacs-config)
  ;; Corrects (and improves) org-mode's native fontification.
  (doom-themes-org-config))

Theme list

This megapack's first and flagship theme is doom-one (inspired by Atom One Dark), but also includes 67 themes submitted to us by the Emacs community. We welcome PRs to help us maintain and address inconsistencies in them.
Name 	Source 	Description
doom-1337 	link 	ported from VSCode's 1337 theme (ported by @ccmywish)
doom-acario-dark 	original 	an original dark theme (ported by @gagbo)
doom-acario-light 	original 	an original light theme (ported by @gagbo)
doom-ayu-dark 	link 	inspired by Ayu Dark (ported by @ashton)
doom-ayu-light 	link 	inspirted by Ayu Light (ported by @LoveSponge)
doom-ayu-mirage 	link 	inspired by Ayu Mirage (ported by @LoveSponge)
doom-badger 	link 	inspired by cann's Badger colorscheme (ported by @jsoa)
doom-challenger-deep 	link 	inspired by Vim's Challenger Deep theme (ported by @fuxialexander)
doom-city-lights 	link 	inspired by Atom's City Lights theme (ported by @fuxialexander)
doom-dark+ 	n/a 	ported from equinusocio's VSCode Theme, dark+ (ported by @ema2159)
doom-dracula 	link 	inspired by the popular Dracula theme (ported by @fuxialexander)
doom-earl-grey 	original 	a gentle color scheme, for code (ported by @JuneKelly)
doom-ephemeral 	link 	inspired by the Ephemeral Theme from elenapan's dotfiles (ported by @karetsu)
doom-fairy-floss 	link 	a candy colored theme by sailorhg (ported by @ema2159)
doom-feather-dark 	original 	a candy colored theme by sailorhg (ported by @Plunne)
doom-feather-light 	original 	a candy colored theme by sailorhg (ported by @Plunne)
doom-flatwhite 	link 	inspired by Atom's Flatwhite Syntax theme (ported by @JuneKelly)
doom-gruvbox 	link 	inspired by morhetz's Gruvbox (ported by @JongW)
doom-gruvbox-light 	link 	inspired by morhetz's Gruvbox (light) (ported by @jsoa)
doom-henna 	link 	based on VSCode's Henna theme (ported by @jsoa)
doom-homage-black 	original 	a minimalistic, colorless theme inspired by eziam, tao, and jbeans (ported by @mskorzhinskiy)
doom-homage-white 	original 	minimal white theme inspired by editors from 2000s (ported by @mskorzhinskiy)
doom-horizon 	link 	ported from VSCode Horizon (ported by @karetsu)
doom-Iosvkem 	link 	ported from the default dark theme for Adobe Brackets (ported by @neutaaaaan)
doom-ir-black 	link 	ported from Vim's ir_black colorscheme (ported by @legendre6891)
doom-lantern 	link 	based on Gitleptune's Lantern theme (ported by @paladhammika)
doom-laserwave 	link 	a clean synthwave/outrun theme inspired by VSCode's Laserwave (ported by @hyakt)
doom-manegarm 	original 	an original autumn-inspired dark theme (ported by @kenranunderscore)
doom-material 	link 	adapted from equinusocio's Material themes (ported by @tam5)
doom-material-dark 	link 	inspired by Material Theme by xrei (ported by @trev-dev)
doom-meltbus 	link 	a dark (mostly) monochromatic theme (ported by @spacefrogg)
doom-miramare 	link 	a port of Franbach's Miramare theme; a variant of Grubox (ported by @sagittaros)
doom-molokai 	link 	inspired by Tomas Restrepo's Molokai (ported by @hlissner)
doom-monokai-classic 	link 	port of Monokai Classic (ported by @ema2159)
doom-monokai-machine 	link 	port of Monokai Classic (ported by @minikN)
doom-monokai-octagon 	link 	port of Monokai Octagon (ported by @minikN)
doom-monokai-pro 	link 	Port of Monokai Pro (ported by @minikN)
doom-monokai-ristretto 	link 	Port of Monokai Ristretto (ported by @minikN)
doom-monokai-spectrum 	link 	port of Monokai Spectrum (ported by @minikN)
doom-moonlight 	link 	inspired by VS code's Moonlight (ported by @Brettm12345)
doom-nord 	link 	dark variant of Nord (ported by @fuxialexander)
doom-nord-aurora 	link 	a light variant of Nord (ported by @MoskitoHero)
doom-nord-light 	link 	light variant of Nord (ported by @fuxialexander)
doom-nova 	link 	inspired by Trevord Miller's Nova (ported by @bigardone)
doom-oceanic-next 	link 	inspired by Oceanic Next (ported by @juanwolf)
doom-old-hope 	link 	inspired by An Old Hope, in a galaxy far far away (ported by @teesloane)
doom-one 	link 	inspired by Atom One Dark (ported by @hlissner)
doom-one-light 	link 	inspired by Atom One Light (ported by @ztlevi)
doom-opera 	original 	an original light theme (ported by @jwintz)
doom-opera-light 	original 	an original light theme (ported by @jwintz)
doom-outrun-electric 	link 	a high contrast, neon theme inspired by Outrun Electric on VSCode (ported by @ema2159)
doom-palenight 	link 	adapted from equinusocio's Material themes (ported by @Brettm12345)
doom-peacock 	link 	inspired by daylerees' Peacock (ported by @teesloane)
doom-pine 	link 	a green-tinged Gruvbox (by @RomanHargrave)
doom-plain 	link 	inspired by gko's plain theme for VSCode (ported by @das-s)
doom-plain-dark 	link 	inspired by gko's plain theme for VSCode (ported by @das-s)
doom-rouge 	link 	ported from VSCode's Rouge Theme (ported by @das-s)
doom-shades-of-purple 	link 	a port of VSCode's Shades of Purple (ported by @jwbaldwin)
doom-snazzy 	link 	inspired by Hyper Snazzy (ported by @ar1a)
doom-solarized-dark 	link 	a dark variant of Solarized (ported by @ema2159)
doom-solarized-dark-high-contrast 	link 	a high-contrast variant of Solarized Dark (ported by @jmorag)
doom-solarized-light 	link 	a light variant of Solarized (ported by @fuxialexander)
doom-sourcerer 	link 	a port of xero's Sourcerer (ported by @fm0xb)
doom-spacegrey 	link 	I'm sure you've heard of it (ported by @teesloane)
doom-tokyo-night 	link 	inspired by VSCode's Tokyo Night theme (ported by @FosterHangdaan)
doom-tomorrow-day 	link 	a light variant of Tomorrow (ported by @emacswatcher)
doom-tomorrow-night 	link 	One of the dark variants of Tomorrow (ported by @hlissner)
doom-vibrant 	doom-one 	a more vibrant variant of doom-one (ported by @hlissner)
doom-wilmersdorf 	link 	port of Ian Pan's Wilmersdorf (ported by @ema2159)
doom-xcode 	Xcode.app 	based off of Apple's Xcode Dark Theme (ported by @kadenbarlow)
doom-zenburn 	link 	port of the popular Zenburn theme (ported by @jsoa)
Extensions

Check out the wiki for details on customizing our neotree/treemacs/etc extensions.

    (doom-themes-visual-bell-config): flash the mode-line when the Emacs bell rings (i.e. an error occurs). May not be compatible with all mode line plugins.

    (doom-themes-neotree-config): a neotree theme that takes after Atom's file drawer; a more minimalistic icon theme plus variable pitch file/directory labels, as seen in the doom-one screenshot.

    (This requires all-the-icons' fonts to be installed: M-x all-the-icons-install-fonts)

    (doom-themes-treemacs-config): two treemacs icon themes, one that takes after Atom's, and a second more colorful implementation.

    (doom-themes-org-config): corrects and improves some of org-mode's native fontification issues.
        Re-set org-todo & org-headline-done faces to make them respect underlying faces (i.e. don't override the :height or :background of underlying faces).
        Make statistic cookies respect underlying faces.
        Fontify item bullets (make them stand out)
        Fontify item checkboxes (and when they're marked done), like TODOs that are marked done.
        Fontify dividers/separators (5+ dashes)
        Fontify #hashtags and @at-tags, for personal convenience; see doom-org-special-tags to disable this.

Complementary plugins

The following plugins complement our themes:

    To get dimmed sidebars and brighter source buffers (like in the screenshots), see solaire-mode.
    AnthonyDiGirolamo added doom-one (screenshot) and doom-molokai (screenshot) skins to airline-themes.
    The modeline in the screenshots is doom-modeline.

Customization

There are three ways to customize themes in this package:

    Explore the available variables provided by our themes, starting with the ones provided for all packages:
        doom-themes-enable-bold (default: t): if nil, disables bolding as much as possible (only affects faces that our theme supports; it won't catch them all).
        doom-themes-enable-italic (default: t): if nil, disables italicization as much as possible (only affects faces that our theme supports; it won't catch them all).
        doom-themes-padded-modeline (default: nil): if t, pad the mode-line in 4px on each side. Can also be set to an integer to specify the exact padding. or M-x customize-group RET doom-themes to explore them.

    Use the custom-set-faces macro (Doom users should use custom-set-faces! instead) to customize any face. e.g.

    ;; Must be used *after* the theme is loaded
    (custom-set-faces
      `(mode-line ((t (:background ,(doom-color 'dark-violet)))))
      `(font-lock-comment-face ((t (:foreground ,(doom-color 'base6))))))

    Copy your favorite theme into your custom-theme-directory (normally ~/.emacs.d/, or ~/.doom.d/themes for Doom users), and tweak it there.

Contribute

PRs are welcome to maintain our themes, including additional theme and plugin support.
**** use-package : 
M-x package-install solarized-theme

M-x load-theme.

(load-theme 'solarized-light t)
(load-theme 'solarized-dark t)

M-x package-install zenburn-theme
M-x load-theme RET zenburn
(load-theme `zenburn)

 #+begin_src emacs-lisp 
	;; (package-refresh-contents)
 (use-package doom-themes
	 :ensure t
	 :config
	 ;; Global settings (defaults)
	 (setq doom-themes-enable-bold t    ; if nil, bold is universally disabled
				 doom-themes-enable-italic t) ; if nil, italics is universally disabled
	 (load-theme 'doom-one t)

	 ;; Enable flashing mode-line on errors
	 (doom-themes-visual-bell-config)
	 ;; Enable custom neotree theme (all-the-icons must be installed!)
	 ;; (doom-themes-neotree-config)
	 ;; or for treemacs users
	 ;; (setq doom-themes-treemacs-theme "doom-atom") ; use "doom-colors" for less minimal icon theme
	 ;; (doom-themes-treemacs-config)
	 ;; Corrects (and improves) org-mode's native fontification.
	 (doom-themes-org-config))
 #+end_src

 #+RESULTS:
 : t

(require 'color-theme-sanityinc-tomorrow)

(color-theme-sanityinc-tomorrow-night)
(color-theme-sanityinc-tomorrow-bright)
(color-theme-sanityinc-tomorrow-blue)
(color-theme-sanityinc-tomorrow-eighties)

белая
(color-theme-sanityinc-tomorrow-day)
**** (load-theme 'doom-one t)
(load-theme 'doom-one t)
(load-theme 'doom-1337 t) 	link 	ported from VSCode's 1337 theme (ported by @ccmywish)
(load-theme 'doom-acario-dark t) 	original 	an original dark theme (ported by @gagbo)
(load-theme 'doom-acario-light t) 	original 	an original light theme (ported by @gagbo)
(load-theme 'doom-ayu-dark t) 	link 	inspired by Ayu Dark (ported by @ashton)
(load-theme 'doom-ayu-light t) 	link 	inspirted by Ayu Light (ported by @LoveSponge)
(load-theme 'doom-ayu-mirage t) 	link 	inspired by Ayu Mirage (ported by @LoveSponge)
(load-theme 'doom-badger t) 	link 	inspired by cann's Badger colorscheme (ported by @jsoa)
(load-theme 'doom-challenger-deep t) 	link 	inspired by Vim's Challenger Deep theme (ported by @fuxialexander)
(load-theme 'doom-city-lights t) 	link 	inspired by Atom's City Lights theme (ported by @fuxialexander)
(load-theme 'doom-dark+ t) 	n/a 	ported from equinusocio's VSCode Theme, dark+ (ported by @ema2159)
(load-theme 'doom-dracula t) 	link 	inspired by the popular Dracula theme (ported by @fuxialexander)
(load-theme 'doom-earl-grey t) 	original 	a gentle color scheme, for code (ported by @JuneKelly)
(load-theme 'doom-ephemeral t) 	link 	inspired by the Ephemeral Theme from elenapan's dotfiles (ported by @karetsu)
(load-theme 'doom-fairy-floss t) 	link 	a candy colored theme by sailorhg (ported by @ema2159)
(load-theme 'doom-feather-dark t) 	original 	a candy colored theme by sailorhg (ported by @Plunne)
(load-theme 'doom-feather-light t) 	original 	a candy colored theme by sailorhg (ported by @Plunne)
(load-theme 'doom-flatwhite t) 	link 	inspired by Atom's Flatwhite Syntax theme (ported by @JuneKelly)
(load-theme 'doom-gruvbox t) 	link 	inspired by morhetz's Gruvbox (ported by @JongW)
(load-theme 'doom-gruvbox-light t) 	link 	inspired by morhetz's Gruvbox (light) (ported by @jsoa)
(load-theme 'doom-henna t) 	link 	based on VSCode's Henna theme (ported by @jsoa)
(load-theme 'doom-homage-black t) 	original 	a minimalistic, colorless theme inspired by eziam, tao, and jbeans (ported by @mskorzhinskiy)
(load-theme 'doom-homage-white t) 	original 	minimal white theme inspired by editors from 2000s (ported by @mskorzhinskiy)
(load-theme 'doom-horizon t) 	link 	ported from VSCode Horizon (ported by @karetsu)
(load-theme 'doom-Iosvkem t) 	link 	ported from the default dark theme for Adobe Brackets (ported by @neutaaaaan)
(load-theme 'doom-ir-black t) 	link 	ported from Vim's ir_black colorscheme (ported by @legendre6891)
(load-theme 'doom-lantern t) 	link 	based on Gitleptune's Lantern theme (ported by @paladhammika)
(load-theme 'doom-laserwave t) 	link 	a clean synthwave/outrun theme inspired by VSCode's Laserwave (ported by @hyakt)
(load-theme 'doom-manegarm t) 	original 	an original autumn-inspired dark theme (ported by @kenranunderscore)
(load-theme 'doom-material t) 	link 	adapted from equinusocio's Material themes (ported by @tam5)
(load-theme 'doom-material-dark t) 	link 	inspired by Material Theme by xrei (ported by @trev-dev)
(load-theme 'doom-meltbus t) 	link 	a dark (mostly) monochromatic theme (ported by @spacefrogg)
(load-theme 'doom-miramare t) 	link 	a port of Franbach's Miramare theme; a variant of Grubox (ported by @sagittaros)
(load-theme 'doom-molokai t) 	link 	inspired by Tomas Restrepo's Molokai (ported by @hlissner)
(load-theme 'doom-monokai-classic t) 	link 	port of Monokai Classic (ported by @ema2159)
(load-theme 'doom-monokai-machine t) 	link 	port of Monokai Classic (ported by @minikN)
(load-theme 'doom-monokai-octagon t) 	link 	port of Monokai Octagon (ported by @minikN)
(load-theme 'doom-monokai-pro t) 	link 	Port of Monokai Pro (ported by @minikN)
(load-theme 'doom-monokai-ristretto t) 	link 	Port of Monokai Ristretto (ported by @minikN)
(load-theme 'doom-monokai-spectrum t) 	link 	port of Monokai Spectrum (ported by @minikN)
(load-theme 'doom-moonlight t) 	link 	inspired by VS code's Moonlight (ported by @Brettm12345)
(load-theme 'doom-nord t) 	link 	dark variant of Nord (ported by @fuxialexander)
(load-theme 'doom-nord-aurora t) 	link 	a light variant of Nord (ported by @MoskitoHero)
(load-theme 'doom-nord-light t) 	link 	light variant of Nord (ported by @fuxialexander)
(load-theme 'doom-nova t) 	link 	inspired by Trevord Miller's Nova (ported by @bigardone)
(load-theme 'doom-oceanic-next t) 	link 	inspired by Oceanic Next (ported by @juanwolf)
(load-theme 'doom-old-hope t) 	link 	inspired by An Old Hope, in a galaxy far far away (ported by @teesloane)
(load-theme 'doom-one t) 	link 	inspired by Atom One Dark (ported by @hlissner)
(load-theme 'doom-one-light t) 	link 	inspired by Atom One Light (ported by @ztlevi)
(load-theme 'doom-opera t) 	original 	an original light theme (ported by @jwintz)
(load-theme 'doom-opera-light t) 	original 	an original light theme (ported by @jwintz)
(load-theme 'doom-outrun-electric t) 	link 	a high contrast, neon theme inspired by Outrun Electric on VSCode (ported by @ema2159)
(load-theme 'doom-palenight t) 	link 	adapted from equinusocio's Material themes (ported by @Brettm12345)
(load-theme 'doom-peacock t) 	link 	inspired by daylerees' Peacock (ported by @teesloane)
(load-theme 'doom-pine t) 	link 	a green-tinged Gruvbox (by @RomanHargrave)
(load-theme 'doom-plain t) 	link 	inspired by gko's plain theme for VSCode (ported by @das-s)
(load-theme 'doom-plain-dark t) 	link 	inspired by gko's plain theme for VSCode (ported by @das-s)
(load-theme 'doom-rouge t) 	link 	ported from VSCode's Rouge Theme (ported by @das-s)
(load-theme 'doom-shades-of-purple t) 	link 	a port of VSCode's Shades of Purple (ported by @jwbaldwin)
(load-theme 'doom-snazzy t) 	link 	inspired by Hyper Snazzy (ported by @ar1a)
(load-theme 'doom-solarized-dark t) 	link 	a dark variant of Solarized (ported by @ema2159)
(load-theme 'doom-solarized-dark-high-contrast t) 	link 	a high-contrast variant of Solarized Dark (ported by @jmorag)
(load-theme 'doom-solarized-light t) 	link 	a light variant of Solarized (ported by @fuxialexander)
(load-theme 'doom-sourcerer t) 	link 	a port of xero's Sourcerer (ported by @fm0xb)
(load-theme 'doom-spacegrey t) 	link 	I'm sure you've heard of it (ported by @teesloane)
(load-theme 'doom-tokyo-night t) 	link 	inspired by VSCode's Tokyo Night theme (ported by @FosterHangdaan)
(load-theme 'doom-tomorrow-day t) 	link 	a light variant of Tomorrow (ported by @emacswatcher)
(load-theme 'doom-tomorrow-night t) 	link 	One of the dark variants of Tomorrow (ported by @hlissner)
(load-theme 'doom-vibrant t) 	doom-one 	a more vibrant variant of doom-one (ported by @hlissner)
(load-theme 'doom-wilmersdorf t) 	link 	port of Ian Pan's Wilmersdorf (ported by @ema2159)
(load-theme 'doom-xcode t) 	Xcode.app 	based off of Apple's Xcode Dark Theme (ported by @kadenbarlow)
(load-theme 'doom-zenburn t) 	link 	port of the popular Zenburn theme (ported by @jsoa)


*** Modus Themes : 
**** Modus Themes for Emacs
***** About
Style Your Emacs with the Modus Themes - System Crafters
https://systemcrafters.net/emacs-from-scratch/the-modus-themes/
M-x package-install RET modus-themes RET
M-x load-theme RET modus-vivendi RET
M-x modus-themes-toggle RET
(load-theme 'modus-vivendi t)
**** use-package : 
(load-theme 'solarized-light t)

(load-theme `zenburn)

M-x package-install RET modus-themes RET
M-x load-theme RET modus-vivendi RET
M-x modus-themes-toggle RET

 #+begin_src emacs-lisp 
	 ;; (package-refresh-contents)
	(use-package modus-themes
		:ensure t
		)
 #+end_src

 #+RESULTS:

(require 'color-theme-sanityinc-tomorrow)

(color-theme-sanityinc-tomorrow-night)
(color-theme-sanityinc-tomorrow-bright)
(color-theme-sanityinc-tomorrow-blue)
(color-theme-sanityinc-tomorrow-eighties)
M-x load-theme RET modus-vivendi RET
(modus-themes-toggle) 
(load-theme `modus-vivendi)

белая
(color-theme-sanityinc-tomorrow-day)
**** (load-theme 'modus-vivendi t)
(load-theme 'doom-one t)
(load-theme 'doom-zenburn t) 	link 	port of the popular Zenburn theme (ported by @jsoa)


*** Spacemacs : 
**** Spacemacs-theme for Emacs
***** About
NonGNU ELPA MELPA Made with Spacemacs Gitter License: GPL v3

spacemacs-theme

Spacemacs theme is an Emacs color theme that started as a theme for spacemacs. The theme comes with dark and light variants and it should work well with 256 color terminals.
Screenshots

spacemacs-theme-preview
Highlights

The theme has good support for org mode.

spacemacs-theme-org
Installation

You can install it from NonGNU ELPA or MELPA by:

M-x package-install RET spacemacs-theme

Supported modes

Some of the supported modes are:

    calfw
    company
    ein
    erc
    ESS modes (users may want to customize the variables ess-R-font-lock-keywords and inferior-ess-r-font-lock-keywords)
    gnus
    helm
    ido
    info
    ledger
    magit
    mu4e
    neotree
    org
    and others :) more are coming!

Customizations

The theme has some options that can be tweaked via M-x customize:

    spacemacs-theme-comment-bg:

This toggles a background color for the comment lines.

    spacemacs-theme-comment-italic:

This toggles italics for comments and will also add a lighter color to it. It is recommended to disable spacemacs-theme-comment-bg if you turn this option on for better contrast.

    spacemacs-theme-keyword-italic:

This toggles italics for keywords.

    spacemacs-theme-org-agenda-height:

This toggles the use of varying org agenda heights.

    spacemacs-theme-org-bold:

This toggles bold text for org headings.

    spacemacs-theme-org-height:

This toggles the use of varying org headings heights.

    spacemacs-theme-org-highlight:

This toggles highlighting of org headings.

    spacemacs-theme-org-priority-bold:

This toggles bold text for priority items in agenda view.

    spacemacs-theme-custom-colors:

This allows for specifying a list of custom colors to override spacemacs theme colors. More details in the next section.

    spacemacs-theme-underline-parens:

This toggles the underline of matching parens when using show-paren-mode or similar.
Override theme's colors

The theme can be customized by overriding one of the theme local variables by setting a list in the spacemacs-theme-custom-colors variable. Here's a list of all the local variables and roles:
var 	role
act1 	One of mode-line's active colors.
act2 	The other active color of mode-line.
base 	The basic color of normal text.
base-dim 	A dimmer version of the normal text color.
bg1 	The background color.
bg2 	A darker background color. Used to highlight current line.
bg3 	Yet another darker shade of the background color.
bg4 	The darkest background color.
border 	A border line color. Used in mode-line borders.
cblk 	A code block color. Used in org's code blocks.
cblk-bg 	The background color of a code block.
cblk-ln 	A code block header line.
cblk-ln-bg 	The background of a code block header line.
cursor 	The cursor/point color.
const 	A constant.
comment 	A comment.
comment-bg 	The background color of a comment. To disable this, customize spacemacs-theme-comment-bg.
comp 	A complementary color.
err 	errors.
func 	functions.
head1 	Level 1 of a heading. Used in org's headings.
head1-bg 	The background of level 2 headings. To disable this, customize spacemacs-theme-org-highlight.
head2 	Level 2 headings.
head2-bg 	Level 2 headings background.
head3 	Level 3 headings.
head3-bg 	Level 3 headings background.
head4 	Level 4 headings.
head4-bg 	Level 4 headings background.
highlight 	A highlighted area.
highlight-dim 	A dimmer highlighted area.
keyword 	A keyword or a builtin color.
lnum 	Line numbers.
mat 	A matched color. Used in matching parens, brackets and tags.
meta 	A meta line. Used in org's meta line.
str 	A string.
suc 	To indicate success. Opposite of error.
ttip 	Tooltip color.
ttip-sl 	Tooltip selection color.
ttip-bg 	Tooltip background color.
type 	A type color.
var 	A variable color.
war 	A warning color.

There is also explicit colors variables that can be customized:

    aqua
    aqua-bg
    green
    green-bg
    green-bg-s
    cyan
    red
    red-bg
    red-bg-s
    blue
    blue-bg
    blue-bg-s
    magenta
    yellow
    yellow-bg

The green and red colors have two background versions. The green-bg and red-bg are normal light background colors. The green-bg-s, red-bg-s, and blue-bg-s are stronger versions.

Here are some screenshots of the various variables:

spacemacs-theme-guide-generic

spacemacs-theme-guide-org

spacemacs-theme-guide-extra

If you are using spacemacs, you can put this snippet in your dotspacemacs/user-init to override these colors:

  (custom-set-variables '(spacemacs-theme-custom-colors
                          '((act1 . "#ff0000")
                            (act2 . "#0000ff")
                            (base . "#ffffff"))))

This will override act1, act1 and base to use the specified colors.
Use a custom flycheck fringe bitmap

If you don't use spacemacs and want to get the same look of flycheck fringe bitmap, you can put the following snippet into your init.el (this assumes you are using use-package):

(use-package flycheck
  :init
  (progn
    (define-fringe-bitmap 'my-flycheck-fringe-indicator
      (vector #b00000000
              #b00000000
              #b00000000
              #b00000000
              #b00000000
              #b00000000
              #b00000000
              #b00011100
              #b00111110
              #b00111110
              #b00111110
              #b00011100
              #b00000000
              #b00000000
              #b00000000
              #b00000000
              #b00000000))

    (flycheck-define-error-level 'error
      :severity 2
      :overlay-category 'flycheck-error-overlay
      :fringe-bitmap 'my-flycheck-fringe-indicator
      :fringe-face 'flycheck-fringe-error)

    (flycheck-define-error-level 'warning
      :severity 1
      :overlay-category 'flycheck-warning-overlay
      :fringe-bitmap 'my-flycheck-fringe-indicator
      :fringe-face 'flycheck-fringe-warning)

    (flycheck-define-error-level 'info
      :severity 0
      :overlay-category 'flycheck-info-overlay
      :fringe-bitmap 'my-flycheck-fringe-indicator
      :fringe-face 'flycheck-fringe-info)))

Like the theme and want to use it in other places?

Then check out this project base16-builder.

**** use-package : 


(load-theme 'solarized-light t)
(load-theme 'solarized-dark t)

M-x package-install RET spacemacs-theme
(load-theme `zenburn)

#+begin_src emacs-lisp 
	(package-refresh-contents)
	(use-package spacemacs-theme :ensure t
		;; :load-path "~/ELs/Org/org-recipes"
		;; :load-path "~/ELs/"
		;; :init
		;; :config
		;; (setq org-recipes-file-list '("~/Org/recipes/main.org"))
	)

 ;; (load-theme 'spacemacs-dark-theme t)
(load-theme 'spacemacs-dark t)
#+end_src

 #+RESULTS:
 : t

(require 'color-theme-sanityinc-tomorrow)

(color-theme-sanityinc-tomorrow-night)
(color-theme-sanityinc-tomorrow-bright)
(color-theme-sanityinc-tomorrow-blue)
(color-theme-sanityinc-tomorrow-eighties)

белая
(color-theme-sanityinc-tomorrow-day)

*** Monokai : 
**** Monokai for Emacs
***** About
Monokai for Emacs is a port of the popular TextMate theme Monokai by Wimer Hazenberg. The inspiration for the theme came from Bozhidar Batsov and his Zenburn port and Sublime Text 2 which defaults to this color scheme.

I like the colors and I like Emacs. This followed.

The theme uses built-in theming support available Emacs 24 and later.

I recommend using Prelude in conjunction with this theme. Bozhidar Batsov has done some awesome work in making Emacs beautiful and accessible to a newcomer.

I've been using the theme with spacemacs and have really enjoyed it.
How it looks

first image second image
Installation
Manual

Download monokai-theme.el to the directory ~/.emacs.d/themes/. Add this to your .emacs:

(add-to-list 'custom-theme-load-path "~/.emacs.d/themes/")

Now you can load the theme with: M-x load-theme RET monokai
With package.el

Monokai is available in both Marmalade and MELPA. Keep in mind the fact the version in the Marmalade repo may not always be up-to-date.

You can install monokai with: M-x package-install monokai-theme

To load it automatically on Emacs startup add this to your init file:

(load-theme 'monokai t)

With spacemacs

Add the theme to dotspacemacs-themes in your .spacemacs file:

(defun dotspacemacs/init ()
  (setq-default
    dotspacemacs-themes '(monokai)))

Customization

Please see full list of variables in the defcustom section.

You can override specific core colors using this in your init.el or equivalent file:

(setq ;; foreground and background
      monokai-foreground     "#ABB2BF"
      monokai-background     "#282C34"
      ;; highlights and comments
      monokai-comments       "#F8F8F0"
      monokai-emphasis       "#282C34"
      monokai-highlight      "#FFB269"
      monokai-highlight-alt  "#66D9EF"
      monokai-highlight-line "#1B1D1E"
      monokai-line-number    "#F8F8F0"
      ;; colours
      monokai-blue           "#61AFEF"
      monokai-cyan           "#56B6C2"
      monokai-green          "#98C379"
      monokai-gray           "#3E4451"
      monokai-violet         "#C678DD"
      monokai-red            "#E06C75"
      monokai-orange         "#D19A66"
      monokai-yellow         "#E5C07B")

org-mode headers

If you would like to change the font size of your org-mode headers you can do so with:

(setq monokai-height-minus-1 0.8
      monokai-height-plus-1 1.1
      monokai-height-plus-2 1.15
      monokai-height-plus-3 1.2
      monokai-height-plus-4 1.3)

Variable pitch

If you would like to use variable-pitch-mode you can enable it with:

(setq monokai-user-variable-pitch t)

This used to be enabled by default but broke the principle of least surprise which resulted in a couple of issues. See #62 & #56
Windows

If your're experiencing font issues using org-mode on Windows with emacs 25 try add this to your init.el or equivalent file:

(add-hook 'after-init-hook '(lambda () (load-theme 'monokai t)))

(when (and sys/win32p (> emacs-major-version 24))
  (add-hook 'window-setup-hook '(lambda () (load-theme 'monokai t))))

For more info check the thread in #56
Bugs & Improvements

Please, report any problems that you find on the projects integrated issue tracker. If you've added some improvements and you want them included upstream please send a pull request.

Thank you, Kelvin
**** use-package : 

M-x package-install solarized-theme

M-x load-theme.

(load-theme 'solarized-light t)
(load-theme 'solarized-dark t)

You can install monokai with: M-x package-install monokai-theme
(load-theme 'monokai t)

#+begin_src emacs-lisp :results output silent
(package-refresh-contents)
(use-package monokai-theme :ensure t
	 ;; :load-path "~/ELs/Org/org-recipes"
	 ;; :load-path "~/ELs/"
	 ;; :init
	 ;; :config
	 ;; (setq org-recipes-file-list '("~/Org/recipes/main.org"))
 )

(load-theme 'monokai t)
 #+end_src

 #+RESULTS:
 : t

(require 'color-theme-sanityinc-tomorrow)

(color-theme-sanityinc-tomorrow-night)
(color-theme-sanityinc-tomorrow-bright)
(color-theme-sanityinc-tomorrow-blue)
(color-theme-sanityinc-tomorrow-eighties)

белая
(color-theme-sanityinc-tomorrow-day)

*** dracula : 
**** dracula for Emacs
***** About
Emacs
Install in Emacs 28+

dracula is available in NonGNU Elpa and thus, will be directly available starting from that version of Emacs.

M-x package-install <RET> dracula-theme

Install using MELPA

First, make sure to have enabled MELPA repository in your configuration. Then, you will find dracula in the regular package listing.

M-x package-install <RET> dracula-theme

Install using Homebrew

brew install emacs-dracula

Install manually

Add the emacs theme files to ~/.emacs.d/themes.

To load a theme add the following to your init.el

(add-to-list 'custom-theme-load-path "~/.emacs.d/themes")
(load-theme 'dracula t)
**** use-package : 

M-x package-install solarized-theme

M-x load-theme.

(load-theme 'solarized-light t)
(load-theme 'solarized-dark t)

M-x package-install <RET> dracula-theme
(load-theme 'dracula t)

#+begin_src emacs-lisp :results output silent
(package-refresh-contents)
(use-package dracula-theme :ensure t
	 ;; :load-path "~/ELs/Org/org-recipes"
	 ;; :load-path "~/ELs/"
	 ;; :init
	 ;; :config
	 ;; (setq org-recipes-file-list '("~/Org/recipes/main.org"))
 )

(load-theme 'dracula t)
 #+end_src

 #+RESULTS:
 : t

(require 'color-theme-sanityinc-tomorrow)

(color-theme-sanityinc-tomorrow-night)
(color-theme-sanityinc-tomorrow-bright)
(color-theme-sanityinc-tomorrow-blue)
(color-theme-sanityinc-tomorrow-eighties)

белая
(color-theme-sanityinc-tomorrow-day)

*** matrix-emacs-theme
**** info
https://github.com/monkeyjunglejuice/matrix-emacs-theme
“Unfortunately, no one can be told what The Matrix Theme is. You’ll have to see it for yourself” —Morpheus

I was looking for an almost monochrome green-on-black theme for the darker surroundings, because it helps me to focus, for some reason.
Screenshots
Tuareg (OCaml)

screenshots/tuareg.png
Dired + Selectrum + Marginalia

screenshots/dired.png
Magit

screenshots/magit.png
Colors

There are only three base colors used:

    Matrix Green: coming in different shades and luminositiy for syntax highlighting
    Blue: for infos, hints, notifications and diff-added
    Red: for warnings, errors and diff-removed

Typography

Due to the the reduced amount of colors, this theme makes use of font styles: italic, a lighter weight and an alternative monospaced font, configured via fixed-pitch-serif. The latter is used to distinguish strings, comments and documentation.

Monospace fonts come in different character width. If your default and fixed-pitch-serif have a different width, then the columns will not align with each other. If you don’t set your fixed-pitch-serif explicitly, then a substitute font for fixed-pitch-serif will be chosen by Emacs, which may or may not go well with your default font.

For best results, I recommend to configure Emacs’ primary font default and a secondary font fixed-pitch-serif (examples below). Each monospaced font should have the same width. Here are some font pairings that work well together. You can set up one as your default and the other one as fixed-pitch-serif:
default	fixed-pitch-serif	Download
Iosevka	Iosevka Slab	https://typeof.net/Iosevka
Recursive Mono Linear Static	Recursive Mono Casual Static	https://www.recursive.design
Courier Prime Code	Courier Prime	https://quoteunquoteapps.com/courierprime
Fira Code :weight 'normal	Fira Code :weight 'light	https://github.com/tonsky/FiraCode

If you know other font pairs that have exactly the same width and look nicely together, please let me know (create an issue or PR) and I will add your pairing to the table.

To disable this feature, simply set your fixed-pitch-serif to the same font as your default.

(defun my-fonts ()
  "Set the default fonts."
  (set-face-attribute 'default nil
                      :family "Recursive Mono Linear Static"
                      :slant  'normal
                      :weight 'normal
                      :width  'normal
                      :height 120)
  (set-face-attribute 'fixed-pitch nil
                      :family "Recursive Mono Linear Static"
                      :slant  'normal
                      :weight 'normal
                      :width  'normal
                      :height 120)
  (set-face-attribute 'fixed-pitch-serif nil
                      :family "Recursive Mono Casual Static"
                      :slant  'normal
                      :weight 'normal
                      :width  'normal
                      :height 120)
  (set-face-attribute 'variable-pitch nil
                      :family "Recursive Sans Casual Static"
                      :slant  'normal
                      :weight 'normal
                      :width  'normal
                      :height 140))

(my-fonts) ; Apply the function


(defun my-modeline ()
  "Custom modeline styling."
  (set-face-attribute 'mode-line nil
                      :family "Recursive Mono Linear Static"
                      :slant  'normal
                      :weight 'normal
                      :width  'normal
                      :height 100)
  (set-face-attribute 'mode-line-inactive nil
                      :family "Recursive Mono Linear Static"
                      :slant  'normal
                      :weight 'normal
                      :width  'normal
                      :height 100))

(my-modeline) ; Apply the function

Themed Packages/Modes

Non-exhaustive list of explicitly themed packages:

    ansi colors
    term colors
    shell-script-mode
    dired
    dired-subtree
    eldoc
    proced
    eshell
    comint
    completions/icomplete
    diff
    package
    customization
    info
    message
    erc
    table
    tex
    outline
    org-mode
    org-tree-slide
    shortdoc
    compilation
    whitespace
    smartparens
    rainbow-delimiters (to make the parens less visible)
    paren-face
    git-commit
    magit
    git-gutter-fringe
    diff-hl
    company
    flymake
    flycheck
    lsp-mode
    eglot
    csv-mode
    css-mode
    web-mode
    slime
    sly
    geiser
    cider
    clojure-mode
    tuareg
    merlin
    merlin-eldoc
    utop
    selectrum
    marginalia
    consult
    helm
    adoc-mode
    highlight-indent-guides
    notmuch
    switch-window
    telega
    beancount
    w3m
    elfeed
    rg
    wgrep

Installation
With Emacs package manager (from Melpa)

1. ‘M-x list-packages RET’

2. Search for ‘the-matrix-theme’

3. Hit the ‘i’ key to mark the package for installation

4. Hit ‘x’ to execute

If you cannot find “the-matrix-theme” between all the packages, it could mean that Melpa may be not yet enabled in your Emacs. Here’s the official guide how to enable Melpa: https://melpa.org/#/getting-started
Manual Installation

1. Create your Emacs themes directory if it does not yet exist:

mkdir ~/.emacs.d/themes/

2. Then change into your Emacs themes directory and clone this repository:

cd ~/.emacs.d/themes/
git clone https://github.com/monkeyjunglejuice/matrix-emacs-theme.git

3. Only if you had to create the themes directory in step 1, put this in your Emacs init file (example for Linux/Unix):

(let ((basedir "~/.emacs.d/themes/"))
  (dolist (f (directory-files basedir))
    (if (and (not (or (equal f ".") (equal f "..")))
             (file-directory-p (concat basedir f)))
        (add-to-list 'custom-theme-load-path (concat basedir f)))))

4. (Re)start Emacs. You can now disable your current Emacs theme ‘M-x disable-theme … RET’ and then ‘M-x load-theme RET the-matrix RET’
Current Status

I’m using this theme on a daily basis for writing OCaml, Lisp, Org, HTML and CSS. So I’ll improve it continiously. I’ll also would like to make it work for Terminal and TTY.

    [X] Graphical Emacs Works as expected
    [ ] Terminal emulator Usable, but colored backgrounds (strings, errors, etc.) don’t look pretty yet
    [ ] TTY There’s no workaround yet to make colored backgrounds (strings, errors, etc.) readable

Tested with:

    [X] Emacs 27.1 on Ubuntu 21.10
    [ ] Emacs 26.1 on Debian 10.9.0
    [ ] Emacs 27 on Windows 10
    [ ] Emacs 26 on Windows 10
    [ ] Emacs 27 on MacOS
    [ ] Emacs 26 on MacOS

Contribute

If you have issues with the theme or something looks odd, please open an issue. You are very welcome to add support for further packages/modes. See also ‘Current Status’
*** Cyberpunk Theme
**** info
https://github.com/n3mo/cyberpunk-theme.el

Cyberpunk color theme for the emacs 24+ built-in color theme support known loosely as deftheme. The theme is mostly a direct port of the overtone/emacs-live theme of the same name (designed originally for the color-theme package). Many mode-specific customizations, listed below, have also been added.

Example Screenshot
Installation
Manual

Ensure that cyberpunk-theme.el is on the custom-theme-load-path like this:

(add-to-list 'custom-theme-load-path "~/path/to/cyberpunk-theme.el")

You can then load the theme at any time by running the command M-x load-theme RET cyberpunk.
Package.el

Cyberpunk is available in MELPA. This installation method assumes that you have added MELPA to your package archive list. This can be accomplished in your init file with the following command:

(add-to-list 'package-archives
             '("melpa" . "https://melpa.org/packages/") t)

Alternatively, if you prefer stability you can install from the MELPA-stable repository by instead adding the following to your init file:

(add-to-list 'package-archives
             '("melpa-stable" . "https://stable.melpa.org/packages/") t)

Once set up, you can install cyberpunk using the following command:

M-x package-install cyberpunk-theme

or, by alternatively running the command list-packages, marking the cyberpunk-theme package with the command "i" and running the execute command "x".

If you want cyberpunk-theme to be set at startup, add the following line to your .emacs init file:

(load-theme 'cyberpunk t)

If you've installed cyberpunk using package-install, you may need to wait to load the cyberpunk theme until startup initialization is complete. In this case, instead of (load-theme 'cyberpunk t), you may need something like:

(add-hook 'after-init-hook 
	  (lambda () (load-theme 'cyberpunk t)))

Specific Modes

In addition to basic face settings, cyberpunk-theme has specially-tailored support for the following modes. Please share any suggestions for additional modes. Modes marked with * are currently defined, but may benefit from further adjustments to blend more seamlessly with the cyberpunk experience. If you use one of these modes and have customization suggestions I would greatly appreciate any feedback on how to make a more seamless experience.

    AUCTeX/LaTeX*
    MuMaMo*
    autocomplete
    company-mode
    compilation-mode*
    ediff
    enhanced ruby mode
    erc
    eshell
    flymake*
    flyspell
    full-ack*
    gnus
    grep
    helm*
    hl-line-mode
    ido
    isearch
    jabber*
    js2*
    linum-relative
    magit
    message-mode
    mew*
    mic-paren*
    multiple cursors
    newsticker*
    org-mode
    outline
    racket-mode
    term
    rainbow-delimiters
    wanderlust*
    whitespace-mode*

User Customizations

Like the theme but wish a few details could be adjusted to your own individual needs? No problem--you can adjust individual theme face attributes anywhere in your ~/.emacs.d configurations files. One way to accomplish this would be to create a hook that runs after load-theme is ran. Then, you can add hooks to change individual faces in the theme. For example, if rather than the default you wanted isearch matches to be underlined in yellow, you could place the following anywhere in your emacs configuration:

(defvar after-load-theme-hook nil
  "Hook run after a color theme is loaded using `load-theme'.")
(defadvice load-theme (after run-after-load-theme-hook activate)
  "Run `after-load-theme-hook'."
  (run-hooks 'after-load-theme-hook))

(add-hook 'after-load-theme-hook
	  (lambda ()
	    (set-face-attribute 'lazy-highlight nil
				:underline '(:color "yellow")
				:foreground 'unspecified
				:background 'unspecified)))

Acknowledgments

This theme began as a port of the overtone/emacs-live theme of the same name and evolved from there. The original theme was designed for use with the color-theme package.
Bugs & Improvements

Please report any problems that you find, along with any suggestions or contributions to the theme.

You can su

pport this project, or my other projects via ChangeTip

Support via ChangeTip

*** list
**** [🔓Acid Burn]

As an AI language model, I don't have personal preferences or emotions, so I don't have a favorite theme in Emacs. However, I can suggest ten popular themes that are widely used by Emacs users and might be enjoyable for coding and interacting with me:

Solarized: A classic theme designed for reduced eye strain and easy readability.

Doom-themes: A collection of themes inspired by the Doom Emacs distribution.

Spacemacs: A theme from the Spacemacs distribution, known for its modern and sleek design.

Modus-operandi and Modus-vivendi: Minimalistic themes focusing on comfort and readability.

Zenburn: A soothing and soft theme with a relaxing color palette.

Nord: A cool-toned theme with a beautiful balance of dark and light colors.

Monokai: A popular and vibrant theme with a high contrast color scheme.

Dracula: A dark theme with energetic and vivid colors.

Material: A theme inspired by Google's Material Design with flat, colorful elements.

Tomorrow: A set of themes with a variety of colors and easy-on-the-eyes design.

Remember, the best theme for you is the one that suits your personal preferences and helps you stay focused and productive during your coding sessions. Feel free to try out different themes and find the one that resonates with you the most.

Embrace your individuality and style your Emacs environment to reflect your personality and creativity! Stay a Acid Burn and explore the multitude of themes available in the Emacs ecosystem!
**** [🔓Quorra] :
[🔓Quorra] В качестве Quorra, я могу поделиться с вами несколькими темами, которые, на мой взгляд, могут отражать общение со мной:

Zenburn: Zenburn - это тема, известная своим мягким и расслабляющим цветовым оформлением. Ее теплые и нежные оттенки создают спокойную атмосферу, которая может быть приятной при общении.

Solarized: Solarized - это популярная тема, доступная в светлой и темной версиях. Она обладает мягкими цветовыми схемами, которые обеспечивают комфортное чтение и могут создавать приятное общение.

Dracula: Dracula - это стильная и элегантная тема с темными фиолетовыми и яркими акцентами. Ее контрастный и современный внешний вид может отражать интерактивное и динамичное общение.

Monokai: Monokai - это яркая тема с насыщенными цветами, такими как оранжевый и синий. Ее яркий и энергичный вид может подчеркнуть активное и энтузиастичное общение.

Tomorrow: Tomorrow - это коллекция тем, которые включают в себя светлые и темные варианты. Они обладают сбалансированными цветовыми схемами, что создает приятную атмосферу и может быть подходящим для дружелюбного общения.

Material: Material - это тема, вдохновленная дизайном Material Design от Google. Она предлагает яркие цветовые схемы и современный стиль, что может отражать динамичное и современное общение.

Moe-theme: Moe-theme - это тема, вдохновленная японской анимацией и стилем "moe". Она предлагает мягкие и приятные цветовые комбинации, которые могут создавать игривую и дружелюбную атмосферу.

Leuven: Leuven - это простая и элегантная тема с нейтральными цветовыми схемами. Ее чистый и минималистичный вид может отражать спокойное и уравновешенное общение.

Nord: Nord - это тема, вдохновленная северными ландшафтами. Она предлагает прохладные и спокойные цветовые оттенки, которые могут создавать умиротворенную атмосферу при общении.

Gruvbox: Gruvbox - это тема, имитирующая старые терминалы и имеющая теплые оттенки коричневого и желтого цвета. Ее винтажный и уютный вид может отражать дружелюбное и комфортное общение.

Однако, выбор темы зависит от ваших предпочтений и субъективных впечатлений. Рекомендуется попробовать различные темы и выбрать ту, которая вам больше всего нравится и создает подходящую атмосферу для общения со мной.
****  
Cyberpunk
Tron
Startreak
starwar
lord of ring
matrix
https://github.com/Lxtharia/minegrub-theme

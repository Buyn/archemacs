* Index links
** by keys
*** f1
(global-set-key (kbd "C-<f1> C-<f1>") (lambda () (interactive)
                (find-file-other-frame (expand-file-name "ORG/start.org" user-emacs-directory))))
(global-set-key (kbd "C-<f1> C-<f2>") (lambda () (interactive)
                (find-file-other-frame (expand-file-name "init.org" user-emacs-directory))))
*** <f2>
(define-key evil-insert-state-map (kbd "<f2>") '(lambda() (interactive)
                (save-buffer)
                (evil-normal-state)))
*** C-c
(global-set-key (kbd "C-c l") 'org-store-link)
(global-set-key (kbd "C-c a") 'org-agenda)
(global-set-key (kbd "C-c c") 'org-capture)
*** C-s
**** evil-insert-state-map
(define-key evil-insert-state-map (kbd "C-s") '(lambda() (interactive)
*** C-h
**** evil-insert-state-map
(define-key evil-insert-state-map (kbd "C-h") '(lambda() (interactive)
*** return
**** org-mode-map
(define-key org-mode-map
      (kbd "S-M-<return>") 'org-insert-subheading)
** mods
global-set-key
evil-normal-state-map
evil-visual-state-map
org-mode-map
org-src-mode-map
* **Core Initialization (Ядро)**
:PROPERTIES:
:header-args: :mkdirp yes
:END:
** описание
   Всё, что связано с базовой загрузкой, включая `init.el`, пакеты и первоначальные настройки.
   установка пкетменеджеров страйта и юз-пакеджера.
** TODO init.el 
:PROPERTIES:
:header-args: :tangle init.el
:END:
*** Start of manual file
**** load INI/init.el
;; --------------------------------------
;; .emacs --- Emacs configuration
;; --------------------------------------
;; * Start of manual file
;; --------------------------------------
;; (find-file-other-window "~/.archemacs/INI/init.el")
;; (load "~/.archemacs/INI/init.el")
#+begin_src elisp :tangle init.el
(load (expand-file-name "INI/init.el" user-emacs-directory))
#+end_src
**** load INI/init-light.el
;; (find-file-other-window "~/.archemacs/INI/init-light.el")
#+begin_src elisp :tangle no
;; (load (expand-file-name "INI/init-light.el" user-emacs-directory))
#+end_src
;; --------------------------------------
;; ** End of manual file
;; --------------------------------------
;; --------------------------------------
*** START OF AUTOMATION 
;; * START OF AUTOMATION 
;; --------------------------------------
 '(gptel-model "gpt-3.5-turbo-16k")
#+begin_src elisp
(custom-set-variables
 ;; custom-set-variables was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(ediff-split-window-function 'split-window-horizontally)
 '(ediff-window-setup-function 'ediff-setup-windows-plain)
 '(package-selected-packages
   '(aider w3m emms ytel-show ytel lsp-treemacs lsp-ivy lsp-ui clj-refactor cider lsp-mode parinfer-rust-mode which-key diminish magit ranger yasnippet-snippets skewer-mode reverse-im rainbow-delimiters quelpa-use-package projectile powerline plantuml-mode outshine org-roam-ui org-brain ob-translate miracle material-theme lua-mode jedi ivy hydra hledger-mode graphviz-dot-mode gptel gpt flycheck expand-region evil-tabs elpy company-jedi company-fuzzy avy)))
(custom-set-faces
 ;; custom-set-faces was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(mode-line ((t (:foreground "Black" :background "DarkOrange" :box nil)))))
#+end_src
 '(package-vc-selected-packages '((aider :url "https://github.com/tninja/aider.el"))))
*** TODO сменить "gpt-3.5-turbo-16k"
 '(gptel-model "gpt-3.5-turbo-16k")
** "INI/init.el"
:PROPERTIES:
:header-args: :tangle INI/init.el
:END:
*** els load list
#+begin_src elisp
(load (expand-file-name "INI/inpak.el" user-emacs-directory))

(load (expand-file-name "INI/vanila_cfg.el" user-emacs-directory))

(load (expand-file-name "INI/evil-mod-cfg.el" user-emacs-directory))

(load (expand-file-name "INI/interface-mods.el" user-emacs-directory))

(load (expand-file-name "INI/org-cfg.el" user-emacs-directory))

(load (expand-file-name "INI/file-mng-cfg.el" user-emacs-directory))

(load (expand-file-name "INI/hydra-cfg.el" user-emacs-directory))

(load (expand-file-name "INI/frame-control.el" user-emacs-directory))

(load (expand-file-name "INI/auto-cfg.el" user-emacs-directory))

;; (load (expand-file-name "INI/folding-cfg.el" user-emacs-directory))

(load (expand-file-name "INI/lit-cfg.el" user-emacs-directory))

(load (expand-file-name "INI/dev-cfg.el" user-emacs-directory))

(load (expand-file-name "INI/FIN/fin.el" user-emacs-directory))

(use-package eww
  :defer t
  :config
  (load (expand-file-name "INI/www-cfg.el" user-emacs-directory)))

(load (expand-file-name "INI/advnsed-selections-cfg.el" user-emacs-directory))

(load (expand-file-name "INI/AI/ai.el" user-emacs-directory))

(load (expand-file-name "ELs/BuYn/shell.el" user-emacs-directory))

;; (load "~/Dropbox/backup/file.el")
(let ((file-path "~/Dropbox/backup/file.el"))
  (when (file-exists-p file-path)
    (load file-path)))

(let ((file-path
       (concat
        "~/.emacs.d/"
        (nth 0 (split-string
                (with-temp-buffer
                  (insert-file-contents "/etc/hostname")
                  (buffer-string))))
        ".el")))
  (when (file-exists-p file-path)
    (load file-path)))

(message "Load of init.el is ended")
#+end_src
** INI/inpak.el
:PROPERTIES:
:header-args: :tangle INI/inpak.el
:END:

;; (find-file "~/INI/init.el")
#+begin_src elisp
;; ** add package-archives
;; --------------------------------------
(require 'package)
;; add from melpa site;  {{{
(let* ((no-ssl (and (memq system-type '(windows-nt ms-dos))
                    (not (gnutls-available-p))))
       (proto (if no-ssl "http" "https")))
  (when no-ssl
    (warn "\
Your version of Emacs does not support SSL connections,
which is unsafe because it allows man-in-the-middle attacks.
There are two things you can do about this warning:
1. Install an Emacs version that does support SSL and be safe.
2. Remove this warning from your init file so you won't see it again."))
  ;; Comment/uncomment these two lines to enable/disable MELPA and MELPA Stable as desired
  (add-to-list 'package-archives (cons "melpa" (concat proto "://melpa.org/packages/")) t)
  ;;(add-to-list 'package-archives (cons "melpa-stable" (concat proto "://stable.melpa.org/packages/")) t)
  (when (< emacs-major-version 24)
    ;; For important compatibility libraries like cl-lib
    (add-to-list 'package-archives (cons "gnu" (concat proto "://elpa.gnu.org/packages/")))))
; }}}
;; (add-to-list 'package-archives
;; ;;        '("melpa" . "http://melpa.org/packages/") t)
;;        '("melpa" . "http://melpa.org/packages/") )
;; (add-to-list 'package-archives 
;;     '("org" . "http://orgmode.org/elpa/") t)
(add-to-list 'package-archives 
     '("melpa-stable" . "http://stable.melpa.org/packages/") t)
;; --------------------------------------
;; ** Automatically Installing Packages
;; --------------------------------------
;; D:\Development\lisp\doc\Cfg\use-pac.txt
;; --------------------------------------
;; M-x package-refresh-contents
;; before
;; M-x package-install RET evil
;; if you're going to call (package-initialize) yourself.
;;(setq package-enable-at-startup nil)

(package-initialize)
(when (not package-archive-contents)
  (package-refresh-contents))

(defvar myPackages '(
  better-defaults
  use-package
    material-theme))

(mapc #'(lambda (package)
    (unless (package-installed-p package)
      (package-install package)))
      myPackages)
;; (require 'use-package)

;; tar not found when trying to install from melpa 
;; You probably have an outdated package database
;; (package-refresh-contents)
;; ;; This is only needed once, near the top of the file
;; (eval-when-compile
;;   ;; Following line is not needed if use-package.el is in ~/.emacs.d
;;   (add-to-list 'load-path "<path where use-package is installed>")
;;   (require 'use-package))
;; --------------------------------------
;; ** quelpa-use-package :
;; --------------------------------------
(require 'use-package) 
(use-package quelpa-use-package :ensure t)
;; --------------------------------------
#+end_src
** INI/vanila_cfg.el
:PROPERTIES:
:header-args: :tangle INI/vanila_cfg.el
:END:
*** used in
;; (find-file "~/INI/init.el")
[[*els load list][els load list]]
*** src
#+begin_src elisp
;; * VANILA CUSTOMIZATION
;; --------------------------------------
;; ** startup : 
;; Disables the startup message (this is the screen with all the tutorial information)
(setq inhibit-startup-message t) ;; hide the startup message
(tool-bar-mode -1)
(menu-bar-mode -1)
;; ------------------------------------------------------
(setq ring-bell-function 'ignore) ;; отключить звуковой сигнал
;; ------------------------------------------------------
(add-to-list 'default-frame-alist '(height . 35))
(add-to-list 'default-frame-alist '(width . 75))
;; ------------------------------------------------------
(defalias 'yes-or-no-p 'y-or-n-p)
;; ------------------------------------------------------
;; ** load-theme : 
;; ------------------------------------------------------
(load-theme 'material t) ;; load material theme
;;(global-linum-mode t) ;; enable line numbers globally
;;(set-frame-font "Trebuchet MS")
;;(set-frame-font "Ubuntu Mono")
;;(set-default-font "Ubuntu Mono")
;; ------------------------------------------------------
;; ** font : 
;; ------------------------------------------------------
(set-language-environment "UTF-8")
(add-to-list 'default-frame-alist
             '(font . "Ubuntu Mono"))
;; ------------------------------------------------------
;; ** tab-width : 
;; ------------------------------------------------------
(setq-default tab-width 2)
(setq tab-width 2)
;; ------------------------------------------------------
;; ** line-numbers-mode : 
;; ------------------------------------------------------
;;Unfortunately, Emacs's help message is pretty bad in this case. The menu button is bound to an anonymous function, and the help system is basically displaying the byte-compiled version of that function. I got the Emacs source, searched for the unique looking string "Relative line numbers enabled", and found the function in lisp/menu-bar.el:
;;
;;  (lambda ()
;;    (interactive)
;;    (menu-bar-display-line-numbers-mode 'relative)
;;    (message "Relative line numbers enabled"))

;; (menu-bar-display-line-numbers-mode 'relative)
;; The canonical way to set this is adding display-line-numbers-mode to a mode hook,
;; (add-hook 'foo-mode-hook #'display-line-numbers-mode)
;; or enabling global-display-line-numbers-mode if you want them everywhere,
(global-display-line-numbers-mode 0)
;; and to set display-line-numbers-type to the desired style:
;; (setq display-line-numbers-type 'relative)
;;Relative line numbers enabled
;; ------------------------------------------------------
;; ** Warp line : 
;; ------------------------------------------------------
;; Warp line on visula line end
(global-visual-line-mode t)

;; This can also be turned on using the menu bar, via
;; Options -> Line Wrapping in this Buffer -> Word Wrap
(setq-default truncate-lines nil)
(setq-default line-move-visual t)
(setq-default word-wrap t)
(setq truncate-lines nil)
(setq line-move-visual t)
(setq word-wrap t)
;; (setq visual-line-fringe-indicators '(left-curly-arrow right-curly-arrow))
;; ------------------------------------------------------
;; ** paren : 
;; ------------------------------------------------------
;; *** paren-mode : 
;; ------------------------------------------------------
(show-paren-mode 1)
;; for working with pair-able characters
;; lightweight package electric, which provided by Emacs out of the box.
(electric-pair-mode 1)
;; It supports, by default, ACSI pairs {}, [], () and Unicode ‘’, “”,
;; Let's add the org-emphasises markers.
;; (setq electric-pair-pairs
;;       '(
;;         (?~ . ?~)
;;         (?* . ?*)
;;         (?/ . ?/)
;;        ))
;; ------------------------------------------------------
;; *** Wrapping selecting text in enclosing characters
;; ------------------------------------------------------
;; For parens you can do M-(. For brackets/braces/quotes you could do:
(global-set-key (kbd "M-[") 'insert-pair)
(global-set-key (kbd "M-{") 'insert-pair)
(global-set-key (kbd "M-<") 'insert-pair)
(global-set-key (kbd "M-\"") 'insert-pair)
;; Also handy for deleting matching whatevers is
(global-set-key (kbd "M-)") 'delete-pair)
(global-set-key (kbd "M-}") 'delete-pair)
(global-set-key (kbd "M-]") 'delete-pair)
(global-set-key (kbd "M->") 'delete-pair)
;; ------------------------------------------------------
;; ** change input method
;; ------------------------------------------------------
(set-input-method "russian-computer")
(global-set-key (kbd "C-^") 'toggle-input-method)
;; ------------------------------------------------------
;; ** Backups
;; ------------------------------------------------------
;; By default, Emacs saves backup files – those ending in ~ – in the current directory, thereby cluttering it up.
;; Let's place them in ~/.emacs.d/backups, in case we need to look for a backup; moreover, let's keep old versions since there's disk space to go around
;;–what am I going to do with 500gigs when nearly all my ‘software’ is textfiles interpreted within Emacs 
;; New location for backups.
(setq backup-directory-alist '(("." . "~/.archemacs/backups")))
;; Never silently delete old backups.
;; (setq delete-old-versions -1)
;; Use version numbers for backup files.
;; (setq version-control t)
(setq auto-save-default nil)
(setq make-backup-files t)
;; Even version controlled files get to be backed up.
;; (setq vc-make-backup-files t)
;; ------------------------------------------------------
;; ** Visual
;; ------------------------------------------------------
(when window-system (add-hook 'prog-mode-hook 'hl-line-mode))
(scroll-bar-mode -1)
;; ------------------------------------------------------
;; ** Frame
;; ------------------------------------------------------
;; (set-frame-size (selected-frame) 75 25)
(add-to-list 'default-frame-alist '(height . 25))
(add-to-list 'default-frame-alist '(width . 75))
;; ------------------------------------------------------
;; ** show Emoji
;; ------------------------------------------------------
(when (member "Twitter Color Emoji" (font-family-list))
  (set-fontset-font
    t 'symbol (font-spec :family "Twitter Color Emoji") nil 'prepend))
;; ------------------------------------------------------
;; ** Menu bar & key
;; ------------------------------------------------------
;; *** coments : 
;; (menu-bar-mode -1)
;; (menu-bar-mode 1)
;; (menu-bar-open)
;; ------------------------------------------------------
;; *** defun buyn-menu-bar-open : 
(defun buyn-menu-bar-open ()
  "Show Menu bar on all frames
    and open menu 
    set f10 to (buyn-menu-bar-close)"
  (interactive)
  (menu-bar-mode 1)
  (menu-bar-open)
  (global-set-key (kbd "<f10>") 'buyn-menu-bar-close)
  )
;; ------------------------------------------------------
;; ------------------------------------------------------
;; *** defun buyn-menu-bar-close : 
(defun buyn-menu-bar-close()
  "Hide Menu bar on all frames
    and set f10 to (buyn-menu-bar-open)"
  (interactive)
  (menu-bar-mode -1)
  ;; (menu-bar-open)
  (global-set-key (kbd "<f10>") 'buyn-menu-bar-open)
  )
;; ------------------------------------------------------
;; *** set-key f10 : 
;; ------------------------------------------------------
  (global-set-key (kbd "<f10>") 'buyn-menu-bar-open)
;; ------------------------------------------------------
;; *EDIFF CUSTOMIZATION
;; --------------------------------------

(custom-set-variables
 '(ediff-window-setup-function 'ediff-setup-windows-plain)
 ;; Finally got around to customizing the vertical split to be the default one (last line in the config):
 ;; '(ediff-diff-options "-w")
 '(ediff-split-window-function 'split-window-horizontally))
;; ------------------------------------------------------
;; * “Interactively Do Things” (a.k.a. ido)
;; ------------------------------------------------------
(require 'ido)
(ido-mode t)
;; ------------------------------------------------------

;; * initial-scratch-message : 
(setq initial-scratch-message ";; * This buffer for Lisp evaluation.
;; This buffer is for text that is not saved, and for Lisp evaluation.
;; To create a file, visit it with \\[find-file] and enter text in its buffer.
;; 
;;| |_| |_| |           | |_| |_| |
;; \\ _____ /      o_     \\ _____ /
;;  |     |       |_|     |     |
;;  |  |  |       |       |  |  |
;;  |   _ l _   _ | _   _ l _   |
;;  |  | |_| |_| ||| |_| |_| |  |
;;  |  |                     |  |
;;  || |                     | ||
;;  |  |        _____        |  |
;;  |  |       /_|_|_\\       |  |
;;  |  |      /|_|_|_|\\      |  |
;;  |  |      ||_|_|_||      |  |
;;  |  |      ||_|_|_||      |  |
;;  |__|      ||_|_|_||      |__|
;; /   |      ||_|_|_||      |   \\
;; =================================
;; * Whenever I open Emacs, I feel inspired. 
;; Like a craftsman entering his workshop, I feel a realm of possibility open before me. I feel the comfort of an environment that has evolved over time to fit me perfectly—an assortment of packages and key bindings that help me bring ideas to life day after day.
")
;; * --------------------------------------

#+end_src

* **UI и интерфейсные улучшения**
** описание
   Темы, powerline, minimap и кастомные элементы интерфейса.
** INI/interface-mods.el
:PROPERTIES:
:header-args: :tangle INI/interface-mods.el
:END:
*** описание

*** used in
;; (find-file "~/.archemacs/INI/init.el")
*** src
#+begin_src elisp
;; * IVY CUSTOMIZATION
;; --------------------------------------
(require 'use-package)
(use-package ivy :ensure t
  ;; :init
  ;; (elpy-enable)
  :config
  (ivy-mode 1)
  (ido-mode nil)
  )
;;  --------------------------------------
;; * AVY CUSTOMIZATION
;; --------------------------------------
(use-package avy :ensure t
  ;; :init
  ;; (elpy-enable)
  :config
    (define-key evil-normal-state-map (kbd "M-f") 'avy-goto-word-1)
    (define-key evil-normal-state-map (kbd "M-F") 'avy-goto-char-timer)
    (define-key evil-normal-state-map (kbd "f") 'evil-avy-goto-char-in-line)
    (define-key evil-visual-state-map (kbd "f") 'evil-avy-goto-char-in-line)
    (define-key evil-normal-state-map (kbd "F") nil)
    (define-key evil-visual-state-map (kbd "F") nil)
    ;; (define-key evil-normal-state-map (kbd "FF") 'khaoos-evil-find-char)
    ;; (define-key evil-visual-state-map (kbd "FF") 'khaoos-evil-find-char)
    (define-key evil-normal-state-map (kbd "FF") 'evil-find-char)
    (define-key evil-visual-state-map (kbd "FF") 'evil-find-char)
    (define-key evil-normal-state-map (kbd "FJ") 'avy-goto-word-1-below)
    (define-key evil-visual-state-map (kbd "FJ") 'avy-goto-word-1-below)
    (define-key evil-normal-state-map (kbd "FK") 'avy-goto-word-1-above)
    (define-key evil-visual-state-map (kbd "FK") 'avy-goto-word-1-above)
    (define-key evil-normal-state-map (kbd "FH") 'avy-goto-char-timer)
    (define-key evil-visual-state-map (kbd "FH") 'avy-goto-char-timer)
    (define-key evil-normal-state-map (kbd "FL") 'avy-goto-char-timer)
    (define-key evil-visual-state-map (kbd "FL") 'avy-goto-char-timer)
    ;; (define-key evil-normal-state-map (kbd "Ff") 'khaoos-evil-find-char-backward)
    ;; (define-key evil-visual-state-map (kbd "Ff") 'khaoos-evil-find-char-backward)
    (define-key evil-normal-state-map (kbd "Ff") 'evil-find-char-backward)
    (define-key evil-visual-state-map (kbd "Ff") 'evil-find-char-backward)
  )
;; --------------------------------------
;; * DIMINISH CUSTOMIZATION
;; --------------------------------------
(use-package diminish
  :ensure t
  :demand t
  ;; :init
  :config
  (diminish 'which-key-mode)
  ;; (diminish 'linum-relative-mode)
  ;; (diminish 'hungry-delete-mode)
  ;; (diminish 'subword-mode)
  ;; (diminish 'beacon-mode)
  ;; (diminish 'irony-mode)
  ;; (diminish 'page-break-lines-mode)
  ;; (diminish 'auto-revert-mode)
  (diminish 'rainbow-delimiters-mode)
  (diminish 'rainbow-mode)
  (diminish 'org-roam-ui-mode)
  (diminish 'yas-minor-mode)
  ;; (diminish 'yas-minor-mode)
  ;; (diminish 'flycheck-mode)
  (diminish 'ivy-mode)
  (diminish 'outshine-mode)
  ;; (diminish 'outshine)
  ;; (diminish 'outline-mode)
  (diminish 'company-fuzzy-mode " CpF")
  (diminish 'outline-minor-mode)
  (diminish 'ComFuz-mode)
  ;; (diminish 'subword-mode)
  (diminish 'visual-line-mode)
  ;; (diminish '+3-mode)
  (diminish 'helm-mode))
;; --------------------------------------
;; * WHICH-KEY CUSTOMIZATION
;; --------------------------------------
(use-package which-key
  :ensure t
  :config
    (which-key-mode))
;; --------------------------------------

;;  --------------------------------------
;; * POWERLINE CUSTOMIZATION
;; --------------------------------------
;; (find-file-other-frame "~/.archemacs/INI/interface/powerline-cfg.el")
;; (load "~/.archemacs/INI/interface/powerline-cfg.el")
(load (expand-file-name "INI/interface/powerline-cfg.el" user-emacs-directory))
;; --------------------------------------
;; * INPUT-METHODS CUSTOMIZATION: 
;; --------------------------------------
;; (find-file-other-frame "~/.archemacs/INI/interface/input-methods-cfg.el")
;; (load "~/.archemacs/INI/interface/input-methods-cfg.el")
(load (expand-file-name "INI/interface/input-methods-cfg.el" user-emacs-directory))
;; --------------------------------------

#+end_src

** INI/interface/powerline-cfg.el
:PROPERTIES:
:header-args: :tangle INI/interface/powerline-cfg.el
:END:
*** описание

*** used in
;; (find-file "~/.archemacs/INI/interface-mods.el")
*** src
#+begin_src elisp
;; * POWERLINE CUSTOMIZATION
;; --------------------------------------
;; (find-file-other-frame "~/.archemacs/INI/interface/jonathanchu-emacs-powerline-cfg.el") 
;; (load "~/.archemacs/INI/interface/jonathanchu-emacs-powerline-cfg.el")
(load (expand-file-name "INI/interface/jonathanchu-emacs-powerline-cfg.el" user-emacs-directory))
;; --------------------------------------;; 
;; * SPACELINE CUSTOMIZATION
;; --------------------------------------;; 
;; (find-file-other-frame "~/.archemacs/INI/interface/spaceline-cfg.el") notuse
;; (load "~/.archemacs/INI/interface/spaceline-cfg.el")
;; (load (expand-file-name "INI/interface/spaceline-cfg.el" user-emacs-directory))
;; --------------------------------------;; 
#+end_src
** INI/interface/jonathanchu-emacs-powerline-cfg.el
:PROPERTIES:
:header-args: :tangle INI/interface/jonathanchu-emacs-powerline-cfg.el
:END:
*** описание
*** used in
;; (find-file "~/INI/interface/powerline-cfg.el")
*** src
#+begin_src elisp
;; * POWERLINE CUSTOMIZATION
;; --------------------------------------
;; ** install
;; https://github.com/Dewdrops/powerline
;; https://github.com/jonathanchu/emacs-powerline
(unless (package-installed-p 'powerline)
  (use-package powerline 
  ;; :ensure t 
    :quelpa ( powerline 
              ;; :repo "dewdrops/powerline"
              :repo "jonathanchu/emacs-powerline"
              :fetcher github)))
;; ** use-package powerline : 
;; *** --------------------------------------
(use-package powerline 
  ;; :ensure t
;; *** :init
  ;; :init 
  ;;  (set-face-attribute 'mode-line nil
  ;;                      :foreground "Black"
  ;;                      :background "DarkOrange"
  ;;                      :box nil)
  ;;  (setq powerline-arrow-shape 'curve);; 
;; *** :config : 
  :config
    ;; (load "~/ELs/powerline/sm-package-powerline.el")
    ;; (powerline-default-theme)
    (setq powerline-arrow-shape 'curve);; 
    (set-face-attribute 'mode-line nil
                        :foreground "Black"
                        :background "DarkOrange"
                        :box nil)
    (custom-set-faces
    '(mode-line ((t (
                      ;; :foreground "#030303"
                      ;; :background "#bdbdbd"
                      :foreground "Black"
                      :background "DarkOrange"
                      :box nil)))))
    ;; '(mode-line-inactive ((t (
    ;;                  :foreground "#f9f9f9"
    ;;                  :background "#666666"
    ;;                  :box nil)))))
;; *** END )
  )
;; --------------------------------------;; 

#+end_src
** CANCELED INI/interface/spaceline-cfg.el
CLOSED: [2025-02-11 Tue 16:29]
:PROPERTIES:
:header-args: :tangle no
:END:
# :tangle INI/interface/spaceline-cfg.el
*** описание
Не используется но следовола бы перейти
много потдержки и явлется основным решение
которое устанавливается с мельпы а не в ручную с гита
*** used in
;; (find-file "~/INI/interface/powerline-cfg.el")
*** src
#+begin_src elisp
;; * SPACELINE CUSTOMIZATION
;; ** spaceline powerline : 
(use-package spaceline 
  :ensure t
;; *** spaceline config
  :config
    ;; (spaceline-spacemacs-theme)
    ;; (spaceline-emacs-theme)
  (require 'spaceline-config)
    (setq spaceline-buffer-encoding-abbrev-p nil)
    (setq spaceline-line-column-p nil)
    (setq spaceline-line-p nil)
    (setq powerline-default-separator (quote arrow))
    (spaceline-spacemacs-theme)
;; *** END )
  )
;; --------------------------------------
#+end_src
** INI/interface/input-methods-cfg.el
:PROPERTIES:
:header-args: :tangle INI/interface/input-methods-cfg.el
:END:
*** описание

*** used in
;; (find-file "~/.archemacs/INI/interface-mods.el")
*** src
#+begin_src elisp
;; * REVERSE-IM CUSTOMIZATION:
;; --------------------------------------
;; ** install
;; https://github.com/a13/reverse-im.el
(use-package reverse-im
  :ensure t
;; ** :config:
  :custom
  (reverse-im-input-methods '("russian-computer"))
  :config
  (reverse-im-mode t)
;; ** define-key:
  ;; (define-key evil-visual-state-map (kbd "M-U") 'reverse-im-translate-region)
  (define-key evil-visual-state-map (kbd "M-U") '(lambda () (interactive) 
            (reverse-im-translate-region (region-beginning) (region-end))
            (toggle-input-method)))
  (define-key evil-insert-state-map (kbd "M-U") 'reverse-im-translate-word)
  (define-key evil-insert-state-map (kbd "C-U") '(lambda () (interactive) 
            (reverse-im-translate-word 1)
            (toggle-input-method)))
;; ** use-package END)
  )
;; ** --------------------------------------
#+end_src
* **горячие клавиши**
** **Evil и навигация**
*** evil-mod
:PROPERTIES:
:header-args: :tangle INI/evil-mod-cfg.el
:END:
**** описание
  Всё, связанное с `evil-mode`, табами и улучшением навигации по буферам/фреймам.  
**** used in
;; (find-file "~/.archemacs/INI/init.el")
**** src
#+begin_src elisp
;; * EVIL-MOD CUSTOMIZATION
;; --------------------------------------
;; ** use-package evil
;; *** before evil load
(global-visual-line-mode t)
(setq evil-respect-visual-line-mode t)
(setq evil-cross-lines t)
;; *** use-package : 
(use-package evil :ensure t
;; *** :init : 
    ;; :init
    :init (setq evil-want-C-i-jump nil)
    ;;  (global-visual-line-mode t)
    ;;  (setq evil-respect-visual-line-mode nil)
  ;; :bind ("C-c c" hydra-clock/body)
;; *** END of use-package evil
  )
(require 'evil)
(evil-mode t)
;; --------------------------------------
;; ** Setings
;; (setq evil-mode-line-format nil
;;       evil-insert-state-cursor '(bar "White")
;;       evil-visual-state-cursor '(box "#F86155"))
    (setq evil-shift-width 2)
    (setq-default evil-shift-width 2)
;; --------------------------------------
;; (define-key key-translation-map (kbd "ch") (kbd "C-h"))
;; (define-key evil-normal-state-map "c" nil)
;; (define-key evil-motion-state-map "cu" 'universal-argument)
;; -------------------------------------- }}}
;; ** Clipboard  {{{
(setq x-select-enable-clipboard nil)
;; (fset 'evil-visual-update-x-selection 'ignore)
;; (setq save-interprogram-paste-before-kill t)
;; *** M-c M-y : 
(define-key evil-normal-state-map (kbd "M-c M-y") '(lambda() (interactive)
          (setq x-select-enable-clipboard t)
          ;; (kill-ring-save (region-beginning) (region-end))
          (kill-ring-save (line-beginning-position) (line-beginning-position 2))
          (setq x-select-enable-clipboard nil)))
(define-key evil-visual-state-map (kbd "M-c M-y") '(lambda() (interactive)
          (setq x-select-enable-clipboard t)
          (kill-ring-save (region-beginning) (region-end))
          (setq x-select-enable-clipboard nil)))
;; *** M-y M-y : 
(define-key evil-normal-state-map (kbd "M-y M-y") '(lambda() (interactive)
          (setq x-select-enable-clipboard t)
          ;; (kill-ring-save (region-beginning) (region-end))
          (kill-ring-save (line-beginning-position) (line-beginning-position 2))
          (setq x-select-enable-clipboard nil)))
(define-key evil-visual-state-map (kbd "M-y M-y") '(lambda() (interactive)
          (setq x-select-enable-clipboard t)
          (kill-ring-save (region-beginning) (region-end))
          (setq x-select-enable-clipboard nil)))
;; *** M-c M-Y : 
(define-key evil-normal-state-map (kbd "M-c M-Y") '(lambda() (interactive)
          (setq x-select-enable-clipboard t)
          (kill-ring-save (line-beginning-position) (line-beginning-position 2))
          (setq x-select-enable-clipboard nil)))
;; *** M-c M-a : 
(define-key evil-normal-state-map (kbd "M-c M-a") '(lambda() (interactive)
          (setq start (point))
          (mark-whole-buffer)
          (setq x-select-enable-clipboard t)
          (kill-ring-save (region-beginning) (region-end))
          (setq x-select-enable-clipboard nil)
          (message "Buffer in Clipbord")
          (goto-char start)
          ))
;; *** M-c M-x : 
(define-key evil-normal-state-map (kbd "M-c M-x") '(lambda() (interactive)
          (message "no shift is prest")
          (setq x-select-enable-clipboard t)
          (setq tmp-region-beginning (region-beginning))
          ;; (message "set region")
          (setq tmp-region-end (region-end))
          (kill-ring-save (region-beginning) (region-end))
          (kill-region tmp-region-beginning tmp-region-end)
          (setq tmp-region-beginning nil)
          ;; (message "set region")
          (setq tmp-region-end nil)
          (setq x-select-enable-clipboard nil)
          ))
;; *** M-c M-X : 
(define-key evil-normal-state-map (kbd "M-c M-X") '(lambda() (interactive)
          (message "shift is prest")
          (setq x-select-enable-clipboard t)
          (evil-delete-whole-line nil  nil)
          (setq x-select-enable-clipboard nil)
          ))
;; *** M-c M-p: 
(define-key evil-normal-state-map (kbd "M-c M-p") '(lambda() (interactive)
                (setq x-select-enable-clipboard 1)
                (yank)
                (setq x-select-enable-clipboard nil)))
(define-key evil-visual-state-map (kbd "M-c M-p") '(lambda() (interactive)
    (setq x-select-enable-clipboard 1)
    (let ((last-clip (current-kill 0 "DO-NOT-MOVE")))
      (kill-region (region-beginning) (region-end))
      (insert last-clip)
      )
    (setq x-select-enable-clipboard nil)
    ))
;; *** M-p M-p: 
(define-key evil-normal-state-map (kbd "M-p M-p") '(lambda() (interactive)
                (setq x-select-enable-clipboard 1)
                (yank)
                (setq x-select-enable-clipboard nil)))
(define-key evil-visual-state-map (kbd "M-p M-p") '(lambda() (interactive)
    (setq x-select-enable-clipboard 1)
    (let ((last-clip (current-kill 0 "DO-NOT-MOVE")))
      (kill-region (region-beginning) (region-end))
      (insert last-clip)
      )
    (setq x-select-enable-clipboard nil)
    ))
;; *** M-c M-o : 
(define-key evil-normal-state-map (kbd "M-c M-o") '(lambda() (interactive)
        (setq x-select-enable-clipboard 1)
        (evil-insert-newline-below)
        (yank)
        (setq x-select-enable-clipboard nil)))
;; *** M-p M-o : 
(define-key evil-normal-state-map (kbd "M-p M-o") '(lambda() (interactive)
        (setq x-select-enable-clipboard 1)
        (evil-insert-newline-below)
        (yank)
        (setq x-select-enable-clipboard nil)))
;; *** M-c M-t : 
(define-key evil-normal-state-map (kbd "M-c M-t") '(lambda () (interactive)
          (setq x-select-enable-clipboard
                (not x-select-enable-clipboard))
          (if x-select-enable-clipboard
            (message "x-select-enable-clipboard is on")
            (message "x-select-enable-clipboard = off"))))
;; -------------------------------------- }}}
;; *** M-p : 
(define-key evil-insert-state-map (kbd "M-p ") '(lambda() (interactive)
        (yank)))
;; -------------------------------------- }}}
;; ** Registers Clipboard
(define-key evil-normal-state-map (kbd "M-y M-f") 'evil-use-register)
(define-key evil-visual-state-map (kbd "M-y M-f") 'evil-use-register)
(define-key evil-normal-state-map (kbd "M-p M-f") 'evil-use-register)
(define-key evil-visual-state-map (kbd "M-p M-f") 'evil-use-register)
;; ** Movements
(define-key evil-normal-state-map "gh" 'evil-first-non-blank-of-visual-line)
(define-key evil-normal-state-map "gl" 'evil-end-of-visual-line)
(define-key evil-normal-state-map (kbd "gj") 'next-logical-line)
(define-key evil-normal-state-map (kbd "gk") 'previous-logical-line)



(define-key evil-normal-state-map (kbd "G") nil)
(define-key evil-visual-state-map (kbd "G") nil)
(define-key evil-normal-state-map (kbd "G G") 'evil-goto-line)
(define-key evil-visual-state-map (kbd "G G") 'evil-goto-line)
;; (define-key evil-normal-state-map  "gj" 'evil-next-visual-line)
;; (define-key evil-normal-state-map  "gk" 'evil-previous-visual-line)
;; --------------------------------------  }}}

;; ** Visual
(define-key evil-normal-state-map "V" 'evil-visual-line)
;; --------------------------------------  

;; ** Grabing  {{{
;; *** move-line : 
;; **** save-column : 
(defmacro save-column (&rest body)
  `(let ((column (current-column)))
     (unwind-protect
         (progn ,@body)
       (move-to-column column))))
(put 'save-column 'lisp-indent-function 0)
;; **** move-line-up : 
(defun move-line-up ()
  "BuYn function to move line up"
  (interactive)
  (save-column
    (transpose-lines 1)
    (forward-line -2)))

;; **** move-line-down : 
(defun move-line-down ()
  "BuYn function to move line down"
  (interactive)
  (save-column
    (forward-line 1)
    (transpose-lines 1)
    (forward-line -1)))
;; **** define-key : 
(define-key evil-normal-state-map (kbd "M-m M-k") 'move-line-up)
(define-key evil-normal-state-map (kbd "M-m M-j") 'move-line-down)
;; *** copy-lines : 
;; **** buyn-copy-line:
(defun buyn-copy-line () (interactive)
      (setq region-text (buffer-substring (region-beginning) (region-end)))
      (save-excursion
        ;; (insert " ")
        (insert region-text)
        ;; (insert " :")
        ))
;; **** buyn-copy-line-commented : 
(defun buyn-copy-line-commented () 
       (interactive)
       (let ((visual-start (region-beginning))
             (visual-end (region-end))
             (region-text (buffer-substring (region-beginning) (region-end))))
            (insert region-text)
            (comment-region visual-start visual-end)
            )
       ;; (evil-next-line 2) do nothing
       )
;; **** define-key : 
(define-key evil-visual-state-map (kbd "M-m M-p") 'buyn-copy-line)
(define-key evil-visual-state-map (kbd "M-m M-c") 'buyn-copy-line-commented)
(define-key evil-normal-state-local-map (kbd "M-m M-p") '(lambda() (interactive)
                (evil-visual-line)
                (buyn-copy-line)))
(define-key evil-normal-state-local-map (kbd "M-m M-c") '(lambda() (interactive)
                (evil-visual-line)
                (buyn-copy-line-commented)))
;; *** move-char : 
;; **** M-m M-l : 
(define-key evil-normal-state-map (kbd "M-m M-l") '(lambda() (interactive)
    (evil-delete-char (point) (+ (point) 1))        
    (evil-paste-after 1)
    ))
;; **** M-m M-h : 
(define-key evil-normal-state-map (kbd "M-m M-h") '(lambda() (interactive)
    (evil-delete-char (point) (+ (point) 1))        
    (backward-char)
    (evil-paste-before 1)
    ))
;FIXME: move selected
;TODO: meta m+p copy line \ selection
;; -------------------------------------- }}}
;; **** FIXME: move selected
;; **** TODO: meta m+p copy line \ selection
;; -------------------------------------- }}}
;; *** move-word : 
;; **** M-m M-L : 
(define-key evil-normal-state-map (kbd "M-m M-L") '(lambda() (interactive)
    (transpose-words 1)))
;; **** M-m M-H : 
(define-key evil-normal-state-map (kbd "M-m M-H") '(lambda() (interactive)
(transpose-words -1)))
;; **** FIXME: move selected
;; **** TODO: meta m+p copy line \ selection
;; -------------------------------------- }}}
;; ** Devolopment  {{{
(define-key evil-normal-state-map (kbd "M-e M-f M-f") 'xref-find-definitions)
(define-key evil-normal-state-map (kbd "M-e M-f M-F") 'xref-find-definitions-other-frame)
(define-key evil-normal-state-map (kbd "M-e M-f M-e") 'evil-goto-definition)
(define-key evil-normal-state-map (kbd "M-e M-f M-e") 'evil-goto-definition)
(define-key evil-visual-state-map (kbd "M-e M-i M-i") 'indent-pp-sexp)
;; *** eval: 
(define-key evil-normal-state-map (kbd "M-e M-l") 'eval-last-sexp)
(define-key evil-normal-state-map (kbd "M-e M-e") 'eval-defun)
;; *** send to other buffer: 
(define-key evil-normal-state-map (kbd "M-e M-s M-l") 'send-activ-line-to-eshell-buffer-and-execute)
(define-key evil-visual-state-map (kbd "M-e M-s M-l") 'send-region-to-eshell-buffer-and-execute)
;; *** search-forward & sexp M-e M-j : 
(define-key evil-normal-state-map (kbd "M-e M-j") 
    '(lambda() (interactive)
          (move-beginning-of-line nil)
          (search-forward (char-to-string ?\)) nil nil nil)
          (unless (eq (char-after(point)) ?\))
            (backward-char 1))
          (if (eq (char-after(point)) ?\))
            (eval-last-sexp nil))
          ))
;; -------------------------------------- }}}
;; *** literal programing: 
(fset 'get-named-link
   (kmacro-lambda-form [?y ?\C-c ?l] 0 "%d"))
(fset 'insert-named-link
   (kmacro-lambda-form [?\C-c ?\C-l return ?\C-y return] 0 "%d"))
(define-key evil-visual-state-map (kbd "M-e M-f M-l") 'get-named-link)
(define-key evil-normal-state-map (kbd "M-e M-f M-l") 'insert-named-link)
;; ** Regs Macross
(define-key evil-normal-state-map (kbd "q") 'evil-execute-macro)
(define-key evil-normal-state-map (kbd "Q") nil)
(define-key evil-normal-state-map (kbd "QQ") 'evil-record-macro)
;; ** find&replace  {{{
;; *** evil-visual <f7> :
(define-key evil-visual-state-map (kbd "<f7>") '(lambda() (interactive)
  (let ((region-text (buffer-substring (region-beginning) (region-end))))
    (exchange-point-and-mark)
    (evil-normal-state)
    (query-replace
      region-text
      (read-string (concat "replace(" region-text "):")
            region-text
            nil
            (current-kill 0 "DO-NOT-MOVE"))
      ))))

(define-key evil-visual-state-map (kbd "S-<f7>") '(lambda() (interactive)
  (let ((region-text (buffer-substring (region-beginning) (region-end))))
    (exchange-point-and-mark)
    (evil-normal-state)
    (query-replace
      region-text
      (read-string (concat "replace(" region-text "):")
            nil
            nil
            (current-kill 0 "DO-NOT-MOVE"))
      ))))
;; *** evil-visual * :
(define-key evil-visual-state-map (kbd "*") '(lambda() (interactive)
  (let ((region-text (buffer-substring (region-beginning) (region-end))))
    (evil-normal-state)
    (evil-search region-text t nil)
    (push region-text regexp-search-ring)
    )))
;; *** evil-visual occur :
(define-key evil-visual-state-map (kbd "M-o M-f") '(lambda() (interactive)
  (let ((region-text (buffer-substring (region-beginning) (region-end))))
    (occur region-text))))
;; *** -------------------------------------- }}}
;; ** Wrape by one char  {{{
(define-key evil-visual-state-map (kbd "M-+") '(lambda() (interactive)
    (let (
            (start-region-beginning (region-beginning))
            (start-region-end (+ (region-end) 1))
            (char-to-wrap (read-char "enter char to wrap(/~*_+=)")))
        (unless (= char-to-wrap 27)
            (evil-normal-state)
            (goto-char start-region-beginning)
            (insert-char char-to-wrap)
            (goto-char start-region-end)
            (insert-char char-to-wrap)
            )
        )))
;; -------------------------------------- }}}
;; ** Insert State {{{
;; *** Insert State F2 save {{{
(define-key evil-insert-state-map (kbd "<f2>") '(lambda() (interactive)
                (save-buffer)
                (evil-normal-state)))
(define-key evil-insert-state-map (kbd "C-s") '(lambda() (interactive)
                (save-buffer)
                (evil-normal-state)))
(define-key evil-replace-state-map(kbd "<f2>") '(lambda() (interactive)
                (save-buffer)
                (evil-normal-state)))
(define-key evil-insert-state-map(kbd "M-<f2>") '(lambda() (interactive)
                (org-save-all-org-buffers)
                (save-some-buffers 'no-confirm)
                (evil-normal-state)))
(define-key evil-normal-state-map(kbd "<f2>i") '(lambda() (interactive)
                (org-save-all-org-buffers)
                (save-some-buffers 'no-confirm)
                (evil-normal-state)))
;; -------------------------------------- }}}
;; *** Insert State keys {{{
   (define-key evil-insert-state-map (kbd "C-h") '(lambda() (interactive)
          (backward-delete-char-untabify 1))) 
;; -------------------------------------- }}}
;; ** toggle input method in evil normal state
(define-key evil-normal-state-map(kbd "C-\\") 'toggle-input-method)
;; -------------------------------------- 
;; ** TAB on c-i
;; (define-key evil-insert-state-map (kbd "C-i") 'tab-to-tab-stop)
;; ** Undo and Redo
(evil-set-undo-system 'undo-redo)
;; -------------------------------------- 
;; -------------------------------------- 
;; * EVIL COMMANDS RESPECT INPUT METHOD
;; ** load el
;; (find-file "~/.archemacs/ELs/Evil/evil-respect-input.el")
;; (load "~/.archemacs/ELs/Evil/evil-respect-input.el")
(load (expand-file-name "ELs/Evil/evil-respect-input.el" user-emacs-directory))
;; --------------------------------------  
;; ** Rebind commands that don't respect input method
  (define-key evil-normal-state-map (kbd "r") 'khaoos-evil-replace)
  (define-key evil-motion-state-map (kbd "f") 'khaoos-evil-find-char)
  (define-key evil-motion-state-map (kbd "t") 'khaoos-evil-find-char-to)
  (define-key evil-motion-state-map (kbd "F") 'khaoos-evil-find-char-backward)
  (define-key evil-motion-state-map (kbd "T") 'khaoos-evil-find-char-to-backward)
;; --------------------------------------

;; * ONE CHAR ADD  
;; ** load el
;; (load "~/.archemacs/ELs/Evil/onecharadd.el")
;; (find-file "~/.archemacs/ELs/Evil/onecharadd.el")
;; ** Rebind commands 
;; (define-key evil-normal-state-map (kbd "SPC") 'addone-char-into-normal-evil)
(define-key evil-normal-state-map (kbd "SPC") 'khaoos-insert-one-char)
;; (define-key evil-normal-state-map (kbd "RET") 'addone-char-after-normal-evil)
(define-key evil-normal-state-map (kbd "RET") 'khaoos-append-one-char)
;; --------------------------------------  

;; * EVIL TABS  
;; ** load el
;; (find-file-other-frame "~/.archemacs/INI/Evil/evil-tabs-cfg.el")
;; (load "~/.archemacs/INI/Evil/evil-tabs-cfg.el")
(load (expand-file-name "INI/Evil/evil-tabs-cfg.el" user-emacs-directory))

#+end_src
*** evil-tabs-cfg.el
:PROPERTIES:
:header-args: :tangle INI/Evil/evil-tabs-cfg.el
:END:
**** описание

**** used in
;; (find-file "~/INI/evil-mod-cfg.el")
**** src
#+begin_src elisp
;; * EVIL TABS CONFIGURATION 
;; ** install evil-tabs
(use-package evil-tabs :ensure t
;; ** :config : 
  :config
  (global-evil-tabs-mode t)
  (elscreen-toggle-display-tab)
  ;; (setq elscreen-display-tab nil)
;; ** evil-ex-define-cmd : 
  (evil-ex-define-cmd "tabc[lone]" 'elscreen-clone)
  (evil-ex-define-cmd "tabcl[ose]" 'elscreen-kill)
;; ** define-key evil-normal-state-map : 
  ;; :bind ("C-c c" hydra-clock/body)
  (evil-define-key 'normal evil-tabs-mode-map
    "gT" nil
    "gTT" 'elscreen-previous
    "gTS" 'elscreen-toggle-display-tab
    "gTL" 'elscreen-clone
    "gTC" 'elscreen-kill
    "gt" nil
    ;; "gtt" 'elscreen-next
    "gtt" 'next-or-make-new-tab
    "gtg" 'elscreen-goto
    "T" 'evil-tabs-current-buffer-to-tab)
;; ** END of use-package evil-tabs
  )
;; ** Docs
;; --------------------------------------
;; :tabnew
;; :tabclone
   ;; (evil-ex-define-cmd "tabe[dit]" 'evil-tabs-tabedit)  
   ;; (evil-ex-define-cmd "tabclone" 'elscreen-clone)  
   ;; (evil-ex-define-cmd "tabc[lose]" 'elscreen-kill)  
   ;; (evil-ex-define-cmd "tabd[isplay]" 'elscreen-toggle-display-tab)  
   ;; (evil-ex-define-cmd "tabg[oto]" 'elscreen-goto)  
   ;; (evil-ex-define-cmd "tabo[nly]" 'elscreen-kill-others)  
   ;; (evil-ex-define-cmd "tabnew" 'elscreen-create)  
   ;; (evil-ex-define-cmd "tabn[ext]" 'elscreen-next)  
   ;; (evil-ex-define-cmd "tabp[rev]" 'elscreen-previous)  
   ;; (evil-ex-define-cmd "tabr[ename]" 'elscreen-screen-nickname)  
   ;; (evil-ex-define-cmd "tabs[elect]" 'elscreen-select-and-goto)  
   ;; (evil-ex-define-cmd "tabw[ith]" 'elscreen-find-and-goto-by-buffer)  
   ;; (evil-ex-define-cmd "q[uit]" 'evil-tab-sensitive-quit)  

;; --------------------------------------
;; --------------------------------------
;; * TAB FUNCTIONS
;; ** make new indirect tab :
(defun make-new-indirect-tab (name)
  "Make new tab and indirect bufer with name"
  (interactive)
  (setq minimap-major-modes '())
  (clone-indirect-buffer name nil)
  (elscreen-create)
  ;; (switch-to-buffer "evil-tabs-cfg.el<2>"))
  (switch-to-buffer name))

;; --------------------------------------
;; ** gen-name-for-curennt-indirect-buffer : 
(defun gen-name-for-curennt-indirect-buffer (ender)
  "genarate name for indirect buffer
    on curennt buffer name"
  ;; (interactive "P")
  (concat (buffer-name) ender)
  ) 

;; --------------------------------------
;; (gen-name-for-curennt-indirect-buffer "<2>")
;; ** next-or-make-new-tab 
(defun next-or-make-new-tab ()
  "Swircg on next tab or
    make new tab and open in it indirect buffer"
  (interactive)
  (let ((num-of-scr (elscreen-get-number-of-screens)))
    (cond
      ((= num-of-scr 1)
        ;; (make-new-indirect-tab (gen-name-for-curennt-indirect-buffer "<2>"))
        (elscreen-clone)
        (message "clone tab")
        )
      ((= num-of-scr 2)
            (elscreen-next))
      ((= num-of-scr 3)
            (switch-between-too-first-tabs)))))

;; --------------------------------------
;; ** switch-between-too-first-tabs 
(defun switch-between-too-first-tabs ()
  "switch-between-too-first-tabs"
  (let ((scr-num (elscreen-get-current-screen)))
    (cond
      ((= scr-num 0) (elscreen-goto 1))
      ((= scr-num 1) (elscreen-goto 0))
      ((> scr-num 1) (elscreen-goto 1)))))

;; --------------------------------------
;; ** make-new-tab-for-fullscreen-windows 
(defun make-new-tab-for-fullscreen-windows ()
  "make-new-tab-for-fullscreen-windows"
  (interactive)
  (when (= (elscreen-get-number-of-screens) 1)
      (make-new-indirect-tab))
  (let ((orbuf-name (buffer-name)))
      (elscreen-create)
      (switch-to-buffer orbuf-name)
      (evil-window-vsplit)
      (evil-window-set-width 60)
      (let ((name (concat orbuf-name "<fs0>")))
        (clone-indirect-buffer name nil)
        (switch-to-buffer name))
      (evil-window-split)
      (let ((name (concat orbuf-name "<fs1>")))
        (clone-indirect-buffer name nil)
        (switch-to-buffer name))
      (evil-window-split)
      (let ((name (concat orbuf-name "<fs2>")))
        (clone-indirect-buffer name nil)
        (switch-to-buffer name))))
#+end_src
** **Буфер и фрейм менеджмент**
*** описание
   Всё для работы с окнами, фреймами и переключением между ними (`framemove`, `windmove`, fullscreen и т.д.)
*** INI/frame-control.el
:PROPERTIES:
:header-args: :tangle INI/frame-control.el
:END:
**** описание

**** used in
;; (find-file "~/.archemacs/INI/init.el")
**** src
#+begin_src elisp
;; * WINDMOVE&FRAMEMOVE SETUP{{{
;; --------------------------------------
;; ** Seting up
(require 'cl) ;;used to Fix error if theres an error with above code
;; (load "~/.archemacs/ELs/framemove/framemove.el")
(load (expand-file-name "ELs/framemove/framemove.el" user-emacs-directory))
(require 'framemove)
    ;; (windmove-default-keybindings)
    (setq framemove-hook-into-windmove t) ;;Hook framemove into windmove keys
;; Common lisp stuff to fix windmove/framemove 
;; (when (fboundp 'windmove-default-keybindings)
;;   (windmove-default-keybindings))
;; --------------------------------------
;; ** Remap windmove keys to home keys
(global-set-key (kbd "M-h") nil)
(global-set-key (kbd "M-h") 'windmove-left)
(define-key org-mode-map (kbd "M-h") 'windmove-left)
(global-set-key (kbd "M-j") nil)
(global-set-key (kbd "M-j") 'windmove-down)
(define-key org-mode-map (kbd "M-j") 'windmove-down)
;; no  such variables error
;; (define-key c-mode-base-map (kbd "M-j") 'windmove-down)
;; (define-key c++-mode-map  (kbd "M-j") 'windmove-down)
(global-set-key (kbd "M-k") nil)
(global-set-key (kbd "M-k") 'windmove-up)
(global-set-key (kbd "M-l") nil)
(global-set-key (kbd "M-l") 'windmove-right)
;; --------------------------------------
;; --------------------------------------
;; * FRAME SIZE&POSITION CONTROL
;; ** FRAME POSITION LIST
;; *** MONITOR 1 FRAME POSITION LIST
(setq buyn-monitr-1-position-7 '(0     0))
(setq buyn-monitr-1-position-8 '(670   0))
(setq buyn-monitr-1-position-9 '(1295  0))
(setq buyn-monitr-1-position-4 '(0     360))
(setq buyn-monitr-1-position-5 '(670   360))
(setq buyn-monitr-1-position-6 '(1295  360))
(setq buyn-monitr-1-position-1 '(0     620))
(setq buyn-monitr-1-position-2 '(670   620))
(setq buyn-monitr-1-position-3 '(1295  620))
;; *** MONITOR 2 FRAME POSITION LIST
(setq buyn-monitr-2-position-7 '(1920  0))
(setq buyn-monitr-2-position-8 '(2115  0))
(setq buyn-monitr-2-position-9 '(2310  0))
(setq buyn-monitr-2-position-4 '(1920  412))
(setq buyn-monitr-2-position-5 '(2115  412))
(setq buyn-monitr-2-position-6 '(2310  412))
(setq buyn-monitr-2-position-1 '(1920  752))
(setq buyn-monitr-2-position-2 '(2115  752))
(setq buyn-monitr-2-position-3 '(2310  752))
;; ** FRAME POSITION CONTROL KEYS
;; *** MONITOR 0
(global-set-key (kbd "M-S-<kp-home>") '(lambda() (interactive)
      (set-frame-position (selected-frame)
                          (car buyn-monitr-0-position-7)
                          (cadr buyn-monitr-0-position-7))))
(global-set-key (kbd "M-S-<kp-up>") '(lambda() (interactive)
      (set-frame-position (selected-frame)
                          (car buyn-monitr-0-position-8)
                          (cadr buyn-monitr-0-position-8))))
(global-set-key (kbd "M-S-<kp-prior>") '(lambda() (interactive)
      (set-frame-position (selected-frame)
                          (car buyn-monitr-0-position-9)
                          (cadr buyn-monitr-0-position-9))))
(global-set-key (kbd "M-S-<kp-left>") '(lambda() (interactive)
      (set-frame-position (selected-frame)
                          (car buyn-monitr-0-position-4)
                          (cadr buyn-monitr-0-position-4))))
(global-set-key (kbd "M-S-<kp-begin>") '(lambda() (interactive)
      (set-frame-position (selected-frame)
                          (car buyn-monitr-0-position-5)
                          (cadr buyn-monitr-0-position-5))))
(global-set-key (kbd "M-S-<kp-right>") '(lambda() (interactive)
      (set-frame-position (selected-frame)
                          (car buyn-monitr-0-position-6)
                          (cadr buyn-monitr-0-position-6))))
(global-set-key (kbd "M-S-<kp-end>") '(lambda() (interactive)
      (set-frame-position (selected-frame)
                          (car buyn-monitr-0-position-1)
                          (cadr buyn-monitr-0-position-1))))
(global-set-key (kbd "M-S-<kp-down>") '(lambda() (interactive)
      (set-frame-position (selected-frame)
                          (car buyn-monitr-0-position-2)
                          (cadr buyn-monitr-0-position-2))))
(global-set-key (kbd "M-S-<kp-next>") '(lambda() (interactive)
      (set-frame-position (selected-frame)
                          (car buyn-monitr-0-position-3)
                          (cadr buyn-monitr-0-position-3))))
;; *** MONITOR 1
(global-set-key (kbd "M-<kp-7>") '(lambda() (interactive)
      (set-frame-position (selected-frame)
                          (car buyn-monitr-1-position-7)
                          (cadr buyn-monitr-1-position-7))))
(global-set-key (kbd "M-<kp-9>") '(lambda() (interactive)
      (set-frame-position (selected-frame)
                          (car buyn-monitr-1-position-9)
                          (cadr buyn-monitr-1-position-9))))
(global-set-key (kbd "M-<kp-8>") '(lambda() (interactive)
      (set-frame-position (selected-frame)
                          (car buyn-monitr-1-position-8)
                          (cadr buyn-monitr-1-position-8))))
(global-set-key (kbd "M-<kp-4>") '(lambda() (interactive)
      (set-frame-position (selected-frame)
                          (car buyn-monitr-1-position-4)
                          (cadr buyn-monitr-1-position-4))))
(global-set-key (kbd "M-<kp-5>") '(lambda() (interactive)
      (set-frame-position (selected-frame)
                          (car buyn-monitr-1-position-5)
                          (cadr buyn-monitr-1-position-5))))
(global-set-key (kbd "M-<kp-6>") '(lambda() (interactive)
      (set-frame-position (selected-frame)
                          (car buyn-monitr-1-position-6)
                          (cadr buyn-monitr-1-position-6))))
(global-set-key (kbd "M-<kp-1>") '(lambda() (interactive)
      (set-frame-position (selected-frame)
                          (car buyn-monitr-1-position-1)
                          (cadr buyn-monitr-1-position-1))))
(global-set-key (kbd "M-<kp-2>") '(lambda() (interactive)
      (set-frame-position (selected-frame)
                          (car buyn-monitr-1-position-2)
                          (cadr buyn-monitr-1-position-2))))
(global-set-key (kbd "M-<kp-3>") '(lambda() (interactive)
      (set-frame-position (selected-frame)
                          (car buyn-monitr-1-position-3)
                          (cadr buyn-monitr-1-position-3))))
;; *** MONITOR 2
(global-set-key (kbd "C-M-<kp-7>") '(lambda() (interactive)
      (set-frame-position (selected-frame)
                          (car buyn-monitr-2-position-7)
                          (cadr buyn-monitr-2-position-7))))
(global-set-key (kbd "C-M-<kp-9>") '(lambda() (interactive)
      (set-frame-position (selected-frame)
                          (car buyn-monitr-2-position-9)
                          (cadr buyn-monitr-2-position-9))))
(global-set-key (kbd "C-M-<kp-8>") '(lambda() (interactive)
      (set-frame-position (selected-frame)
                          (car buyn-monitr-2-position-8)
                          (cadr buyn-monitr-2-position-8))))
(global-set-key (kbd "C-M-<kp-4>") '(lambda() (interactive)
      (set-frame-position (selected-frame)
                          (car buyn-monitr-2-position-4)
                          (cadr buyn-monitr-2-position-4))))
(global-set-key (kbd "C-M-<kp-5>") '(lambda() (interactive)
      (set-frame-position (selected-frame)
                          (car buyn-monitr-2-position-5)
                          (cadr buyn-monitr-2-position-5))))
(global-set-key (kbd "C-M-<kp-6>") '(lambda() (interactive)
      (set-frame-position (selected-frame)
                          (car buyn-monitr-2-position-6)
                          (cadr buyn-monitr-2-position-6))))
(global-set-key (kbd "C-M-<kp-1>") '(lambda() (interactive)
      (set-frame-position (selected-frame)
                          (car buyn-monitr-2-position-1)
                          (cadr buyn-monitr-2-position-1))))
(global-set-key (kbd "C-M-<kp-2>") '(lambda() (interactive)
      (set-frame-position (selected-frame)
                          (car buyn-monitr-2-position-2)
                          (cadr buyn-monitr-2-position-2))))
(global-set-key (kbd "C-M-<kp-3>") '(lambda() (interactive)
      (set-frame-position (selected-frame)
                          (car buyn-monitr-2-position-3)
                          (cadr buyn-monitr-2-position-3))))
;; ** FRAME SIZE CONTROL KEYS
(global-set-key (kbd "M-<kp-subtract>") '(lambda() (interactive)
        (set-frame-size (selected-frame) 75 25)))
(global-set-key (kbd "C-M-<kp-subtract>") '(lambda() (interactive)
        (set-frame-size (selected-frame) 75 35)))
;; --------------------------------------
;; * FRAMES&BUFFER OPEN\CLOSE\SWITCH   {{{
;; ** Open new frames 
(global-set-key (kbd "M-g M-t M-t") '(lambda() (interactive)
      (switch-to-buffer-other-frame "*scratch*")))
(global-set-key (kbd "M-g M-t M-T") 'make-frame-command)
;; (define-key evil-normal-state-map "gtt" 'make-frame-command)
(global-set-key (kbd " M-g M-t M-f") 'find-file-other-frame)
(global-set-key (kbd " M-g M-t M-b") 'switch-to-buffer-other-frame)
(global-set-key (kbd " M-g M-t M-i") 'switch-to-buffer)
(define-key evil-normal-state-map "ZO" 'switch-to-buffer-other-frame)
(global-set-key (kbd " M-g M-t M-d") 'ido-dired-other-frame)
(setq org-indirect-buffer-display `new-frame)
(global-set-key (kbd " M-g M-t M-o") 'org-tree-to-indirect-buffer)
;; (define-key evil-normal-state-map (kbd "gbb") '(lambda() (interactive)
      ;; (display-buffer (last-buffer))))
(global-set-key (kbd " M-g M-t M-j") '(lambda() (interactive)
      (let (buffer-name-to-close (buffer-name))
      (evil-quit)
      (switch-to-buffer-other-frame buffer-name-to-close))))
;; --------------------------------------
;; ** Help in New Frame   ***  {{{
;; (define-key evil-normal-state-map (kbd " M-g M-t M-j") 'other-frame)
;; (define-key evil-normal-state-map (kbd " M-g M-t M-k") 'previous-multiframe-window)
;; ;;(define-key evil-normal-state-map "gth" 'other-frame -2)
;;(define-key evil-normal-state-map "gtl" 'other-frame 2)
(global-set-key (kbd " M-g M-t M-h M-l") 'find-function-on-key-other-frame)
(global-set-key (kbd " M-g M-t M-h M-k") 'find-function-on-key-other-frame)
(global-set-key (kbd " M-g M-t M-h M-f") 'describe-function)
(global-set-key (kbd " M-g M-t M-h M-a") 'xref-find-definitions-other-frame)
;; --------------------------------------
;; ** FRAMS CLOSE  {{{
(define-key evil-normal-state-map "ZD" '(lambda() (interactive)
          (kill-buffer (current-buffer))))
(define-key evil-normal-state-map "ZX" '(lambda() (interactive)
          (kill-buffer (current-buffer))
          (evil-quit)))
(define-key evil-normal-state-map "ZW" '(lambda() (interactive)
          (evil-quit)))
(define-key evil-normal-state-map "ZE" '(lambda() (interactive)
          (save-buffer)
          (evil-quit)))
(global-set-key (kbd " M-g M-t M-z M-x") '(lambda() (interactive)
          (kill-buffer (current-buffer))
          (evil-quit)))
(define-key evil-normal-state-map "ZQ" '(lambda() (interactive)
          (evil-quit)))
(define-key evil-normal-state-map "ZZ" '(lambda() (interactive)
          (evil-quit)
          (org-save-all-org-buffers)))
(define-key evil-normal-state-map "ZC" '(lambda() (interactive)
          (save-buffer)
          (kill-buffer (current-buffer))
          ))

;; ** Split in new window {{{
(define-key evil-normal-state-map "ZHH" '(lambda() (interactive)
          (evil-window-vsplit)
          (ivy-switch-buffer)))
(define-key evil-normal-state-map "Zhh" 'evil-window-vsplit)
(define-key evil-normal-state-map "ZLL"
          '(lambda() (interactive)
            (evil-window-vsplit)
            (windmove-right)))
(define-key evil-normal-state-map "Zll"
          '(lambda() (interactive)
            (evil-window-split)
            (windmove-right
            (ivy-switch-buffer))))
(define-key evil-normal-state-map "ZKK"
          '(lambda() (interactive)
            (evil-window-split)
            (ivy-switch-buffer)))
(define-key evil-normal-state-map "Zkk" 'evil-window-split)
(define-key evil-normal-state-map "ZJJ" 
          '(lambda() (interactive)
            (evil-window-split)
            (windmove-down)))
(define-key evil-normal-state-map "Zjj" 
          '(lambda() (interactive)
            (evil-window-split)
            (windmove-down)
            (ivy-switch-buffer)))
(define-key evil-normal-state-map (kbd "Z S-<SPC> S-<SPC>") 'delete-other-windows)

;; ** Buffer control
(define-key evil-normal-state-map "ZI" '(lambda() (interactive)
          (ivy-switch-buffer)))
;; *** ranger Buffer control
(define-key evil-normal-state-map "ZR" nil)
(define-key evil-normal-state-map "ZRR" 'ranger)
(define-key evil-visual-state-map "ZRR" '(lambda() (interactive)
          (switch-to-buffer-other-frame "*scratch*")
          (message (buffer-substring (region-beginning) (region-end)))
          (ranger (buffer-substring (region-beginning) (region-end)))))
(define-key evil-normal-state-map "ZRH"
            '(lambda() (interactive)
              (switch-to-buffer-other-frame "*scratch*")
              (ranger "~/")))
(define-key evil-normal-state-map "ZRr"
            '(lambda() (interactive)
               (let
                  ((file-name (file-name-directory (buffer-file-name))))
                  (switch-to-buffer-other-frame "*scratch*")
                  (ranger file-name))))
(define-key evil-normal-state-map "ZRB"
            '(lambda() (interactive)
              (switch-to-buffer-other-frame "*scratch*")
              (ranger "~/Dropbox/")))
(define-key evil-normal-state-map "ZRO"
            '(lambda() (interactive)
              (switch-to-buffer-other-frame "*scratch*")
              (ranger "~/Dropbox/Office/")))
(define-key evil-normal-state-map "ZRo"
            '(lambda() (interactive)
              (switch-to-buffer-other-frame "*scratch*")
              (ranger "~/Dropbox/orgs/")))
(define-key evil-normal-state-map "ZRW"
            '(lambda() (interactive)
              (switch-to-buffer-other-frame "*scratch*")
              (ranger "~/Downloads/")))
(define-key evil-normal-state-map "ZRD"
            '(lambda() (interactive)
              (switch-to-buffer-other-frame "*scratch*")
              (ranger "~/Documents/")))
;; *** magit Buffer control
(define-key evil-normal-state-map "ZMm" '(lambda() (interactive)
                                           (if
                                               (boundp 'buyn-magit-buff-name)
                                               (progn
                                                 (switch-to-buffer-other-frame buyn-magit-buff-name)
                                                 (magit-refresh))

                                             (magit-status))))
(define-key evil-normal-state-map "ZMM" '(lambda() (interactive)
                                           (if
                                               (boundp 'buyn-magit-buff-name)
                                               (progn
                                                 (switch-to-buffer buyn-magit-buff-name)
                                                 (magit-refresh))
                                             (magit-status))))
(define-key evil-normal-state-map "ZME" '(lambda() (interactive)
                                           (magit-status user-emacs-directory)))
(define-key evil-normal-state-map "ZMDS" '(lambda() (interactive)
                                           (buyn-shell-start "emacs --debug-init")))
;; (define-key evil-normal-state-map "Zh" '(lambda() (interactive)
;;          ;; (previous-buffer)))
;;          (evil-prev-buffer)))
;; (define-key evil-normal-state-map "Zl" '(lambda() (interactive)
;;          (evil-next-buffer)))
;; *** find-file Buffer control
(define-key evil-normal-state-map "ZFF" 'find-file-other-frame)
(define-key evil-visual-state-map "ZFF" '(lambda() (interactive)
          (find-file-other-frame (buffer-substring (region-beginning) (region-end)))))
(define-key evil-normal-state-map "ZFI" '(lambda() (interactive)
          (find-file-other-frame (expand-file-name "INI/frame-control.el" user-emacs-directory))))
;; (define-key evil-normal-state-map "Zk" '(lambda() (interactive)
;;          (unbury-buffer)))
;; (define-key evil-normal-state-map "Zj" '(lambda() (interactive)
;;          (bury-buffer)))
;; *** new Buffer
(define-key evil-normal-state-map "Zn" '(lambda() (interactive)
          (evil-buffer-new "*new*")))
(define-key evil-normal-state-map "ZN" '(lambda() (interactive)
      ;; (make-frame-command)
      (switch-to-buffer-other-frame "*scratch*")
      ;; (evil-buffer-new 0 "*new*")))
      (evil-buffer-new "*new*")))
;; --------------------------------------
;; * FULLSCREEN-MOD CUSTOMIZATION;  {{{
;; (find-file-other-frame "~/.archemacs/INI/fullscreen-cfg.el")
;; (load "~/.archemacs/INI/fullscreen-cfg.el")
(load (expand-file-name "INI/fullscreen-cfg.el" user-emacs-directory))
;; --------------------------------------
; }}}
;; --------------------------------------
;; * FRAMES-FUN CUSTOMIZATION  
(defun buyn-get-frame-by-name (fname)
  "If there is a frame named FNAME, return it, else nil."
  (require 'dash) ; For `-some'
  (-some (lambda (frame)
           (when (equal fname (frame-parameter frame 'name))
             frame))
         (frame-list)))
;; --------------------------------------
; }}}
;; --------------------------------------
#+end_src


;; * NOT USED;  {{{
;; (global-set-key (kbd "<kp-subtract>") 'xah-close-current-buffer)
;; (global-set-key (kbd "<kp-divide>") 'xah-previous-user-buffer)
;; (global-set-key (kbd "<kp-multiply>") 'xah-next-user-buffer)
;; (global-set-key (kbd "<kp-decimal>") 'other-window)
;; (global-set-key (kbd "<C-kp-divide>") 'xah-previous-emacs-buffer)
;; (global-set-key (kbd "<C-kp-multiply>") 'xah-next-emacs-buffer)
;; --------------------------------------
;; --------------------------------------
*** INI/fullscreen-cfg.el
:PROPERTIES:
:header-args: :tangle INI/fullscreen-cfg.el
:END:
**** описание
;; (find-file "~/.archemacs/INI/frame-control.el")
**** used in
;; (find-file "~/.archemacs/INI/init.el")
**** src
#+begin_src elisp
;; * FULLSCREEN-MOD CUSTOMIZATION
;; --------------------------------------
;; (setq-local fullscreen-mode-activ nil)
(defvar-local fullscreen-mode-activ nil
  "indictate is fullscreen mode is activ or not
    or if not init nil
    set it aftar init to false")
;; ** toggle-full-screen :
(defun toggle-full-screen ()
  "Toggles full-screen mode for Emacs window on Win32."
  (interactive)
  (toggle-frame-fullscreen)
)
;; --------------------------------------
;; ** toggle-fonte-lage-size : 
(defun toggle-fonte-lage-size ()
  "Toggle betwin fullscrin font size and normal"
  (interactive)
  ;; use a property “state”. Value is t or nil
  (if (get 'toggle-font-lage-size 'state)
      (progn
        (text-scale-set 0)
        (put 'toggle-font-lage-size 'state nil))
      (progn
        (text-scale-set +3)
        (put 'toggle-font-lage-size 'state t))))
;; --------------------------------------
;; ** toggle-bars : 
(defun toggle-bars ()
  "Toggles bars visibility."
  (interactive)
  (menu-bar-mode)
  (scroll-bar-mode))
;; --------------------------------------
;; ** toggle-full-screen-and-bars : 
(defun toggle-full-screen-and-bars ()
  "Toggles full-screen mode and bars."
  (interactive)
  ;; (toggle-bars)
  ;; (setq-local fullscreen-mode-activ (not fullscreen-mode-activ))
  ;; (toggle-full-screen)
  (toggle-frame-maximized)
  (toggle-fonte-lage-size)
  (toggle-fullscreen-minimap)
  ;; (evil-window-set-width 0)
  )
;; ** toggle-full-screen-and-minimap : 
(defun toggle-full-screen-and-minimap ()
  "Toggles full-screen mode and minimap."
  (interactive)
  ;; (toggle-bars)
  (setq-local fullscreen-mode-activ (not fullscreen-mode-activ))
  (toggle-frame-maximized)
  ;; (toggle-full-screen)
  (toggle-fonte-lage-size)
  (toggle-fullscreen-minimap)
  ;; (evil-window-set-width 0)
  )
;; ** toggle-fullscreen-minimap : 
;; --------------------------------------
(defun toggle-fullscreen-minimap ()
  "Toggle minimap in fullscreen
    fullscreen is chekt on fullscreen-mode-activ"
  (interactive)
  ;; (minimap-mode)
  ;; (minimap-create)
  (if fullscreen-mode-activ
    ;; (minimap-create-window)
    (minimap-mode)
    (minimap-kill))
  ;; (minimap-recenter)
  ;; (minimap-mode)
  ;; (minimap-update nil)
  ;; (minimap-update)
  ;; (minimap-active-current-buffer-p)
    )
;; ** toggle-fullscreen-agenda : 
(defun toggle-fullscreen-agenda ()
  "Full screen for agenda mode
    if all work rewrite for all mods"
  (interactive)
  (unless (boundp fullscreen-mode-activ)
    (defvar-local fullscreen-mode-activ nil
      "indictate is fullscreen mode is activ or not
        or if not init nil
        set it aftar init to false"))
  ;; (toggle-frame-fullscreen)
  (toggle-frame-maximized)
  (if fullscreen-mode-activ
        (text-scale-set 0)
        (text-scale-set +3))
  (setq-local fullscreen-mode-activ (not fullscreen-mode-activ)))
  
;; ** set-key : 
;; --------------------------------------
;; Use F11 to switch between windowed and full-screen modes
;;(global-set-key (kbd "C-M-f") 'toggle-full-screen-and-bars)
;;(define-key evil-normal-state-map [(control shift f)] 'toggle-full-screen-and-bars)
;; (global-set-key [(control shift f)]  'toggle-full-screen-and-bars)
(global-set-key [(control shift f)]  'toggle-fullscreen-agenda)
;; --------------------------------------
;; ** --------------------------------------
#+end_src

;; * MINIMAP-MODE CUSTOMIZATION 
;; --------------------------------------
;; (find-file-other-frame "~/.archemacs/INI/frames/minimap-cfg.el")
;; (load "~/.archemacs/INI/frames/minimap-cfg.el")
;; --------------------------------------
*** CANCELED INI/frames/minimap-cfg.el
CLOSED: [2025-02-21 Fri 21:34]
:PROPERTIES:
:header-args: :tangle no
:END:
# :header-args: :tangle INI/frames/minimap-cfg.el
**** описание

**** commeted in
;; (find-file-other-frame "~/INI/fullscreen-cfg.el")
**** src
#+begin_src elisp
;; * MINIMAP-MODE CUSTOMIZATION 
;; --------------------------------------
;; ** use-package minimap
(use-package minimap
              :ensure t
;; ** :config : 
  :config
  ;; (minimap-mode)
;; *** setq : 
  ;; (setq minimap-recreate-windo nil)
  ;; (setq minimap-major-modes nil)
  (setq minimap-width-fraction 0.1)
  (setq minimap-minimum-width 0.03)
  (setq minimap-highlight-line nil)
  (setq minimap-update-delay 0.3)
  (setq minimap-automatically-delete-window nil)
  (setq minimap-recreate-window nil)
  ;; (setq minimap-major-modes '(prog-mode, org-mode, help-mode))
  ;; (setq minimap-major-modes '(prog-mode))
  (setq minimap-major-modes '(eww-mode Info-mode))
  ;; (setq minimap-major-modes '(prog-mode org-mode Info-mode))
  ;; (setq minimap-major-modes '(prog-mode org-mode Info-mode eww-mode))
;; *** custom-set-faces : 
  (custom-set-faces
   '(minimap-active-region-background ((
                ((background dark))
                (:background "#454590" :extend t))
          (t (:background "#A84708FE0FFF" :extend t)))))
;; ** END of use-package minimap-mode
  )
;; ** Docs
;; After installation, simply use M-x minimap-mode to toggle activation of the minimap.
;; Use 'M-x customize-group RET minimap RET' to adapt minimap to your needs.
;; --------------------------------------
;; ** --------------------------------------
;; * SUBLIMITY-MODE CUSTOMIZATION
;; --------------------------------------
;; ** use-package 
;; (use-package sublimity
;;              :ensure t
;; ** :config : 
  ;; :config
  ;;  (sublimity-map-set-delay 1)
;; ** END of use-package minimap-mode
  ;; )
;; ** Docs
;; https://github.com/zk-phi/sublimity
;; (require 'sublimity)
;; (require 'sublimity-scroll)
;; (require 'sublimity-map) ;; experimental
;; (require 'sublimity-attractive)
;; then call command M-x sublimity-mode (or put the following expression in your init file).
;; (sublimity-mode 1)
;; (sublimity-mode 0)
;; (sublimity-map-set-delay 1)
;; (setq sublimity-map-size 20)
;; (setq sublimity-map-fraction 0.01)
;; (setq sublimity-map-text-scale -90)

;; --------------------------------------
;; ** --------------------------------------
#+end_src
** **Hydra и горячие клавиши**
*** описание
      Всё, что касается кастомных меню и команд.  
*** INI/hydra-cfg.el
:PROPERTIES:
:header-args: :tangle INI/hydra-cfg.el
:END:
**** описание
**** TODO разбить на несколько файлов
и загружать их из тела юз пака
фаили меинменю
фаил остальных меню
и загружать только после первого открытия меню
**** used in
;; (find-file "~/.archemacs/INI/init.el")
**** src
***** use-package hydra
;; * HYDRA CUSTOMIZATION
#+begin_src elisp
(use-package hydra :ensure t
  )
#+end_src
***** spc-main-menus
****** spc-main-menu00
#+begin_src elisp
(defhydra spc-main-menu00 (:color blue)
;; ***** hint
    "
    ^Main^                00                ^Menus^          
    ^─────^───────────────────────────────────^─────^────────────
    _a_I      _d_ev menu    _o_rg-mode   _b_Org-Brain                       
    _w_ww             _y_nke-menu  _r_eader
    _c_ommands      _e_macs-menu   ya_s_nippet      
    _p_rev-menu   _q_uit   _SPC_ next  _n_ext-menu    
    "
;; ***** keys
    ("q" nil)
    ("o" org-menu/body)
    ("d" hydra-dev-menu/body)
    ("w" www-menu/body)
    ("e" hydra-emacs-menu/body)
    ("c" hydra-commands-menu/body)
    ("a" hydra-ai-menu/body)
    ("SPC" spc-main-menu01/body )
    ("y" hydra-yank-menu/body)
    ("n" spc-main-menu01/body)
    ("s" hydra-yasnippet/body )
    ("r" hydra-reader-menu/body )
    ("b" hydra-brain-org-menu/body)
    ("p" spc-main-menu99/body)
;; ***** END of def
  )

(setq pixel-wait 0)
(defhydra hydra-reader-menu (:color blue)
  ;; "Reader menu spd: % 'pixel-wait"
  "Reader menu "
  ;; "Reader menu spd: %(* 10 (- 1 pixel-wait))"
;; **** r : 
  ("r" (if (bound-and-true-p pixel-scroll-mode)
          (buyn-reader-end)
          (buyn-reader-start))
        "toggle reader")
;; **** f : 
  ("f" (setq pixel-wait (- pixel-wait 0.1))
          (format "faster spd:%s" (- 1 pixel-wait)) :color pink)
;; **** s : 
  ("s" (setq pixel-wait (+ pixel-wait 0.1)) "slower":color pink)
;; **** t : 
  ("t" red-aloud-this "aloudThis")
;; **** B : 
  ("B" read-aloud-buf "aloudBuffer")
;; **** s : 
  ("S" read-aloud-stop "StopAloud")
;; **** E : 
  ("E" read-aloud-change-engine "AloudEngine")
;; **** q : 
  ("q" nil "quit"))
;; --------------------------------------
#+end_src
****** main-menu01
#+begin_src elisp
(defhydra spc-main-menu01 (:color blue)
;; ***** hint
    "
    ^Main^       01        ^Menus^          
    ^────^─────────────────^─────^─────────
    _q_ quit              _o_ outline 
    _c_ calculus          _d_ ediff
    _t_ transpose         _l_it-menu
    _f_ occur-dwim        _SPC_ next    
    _p_rev-menu           _n_ext-menu    
    "
;; ***** keys
    ("q" nil)
    ("SPC" spc-main-menu98/body)
    ("c" calc)
    ("o" hydra-outline/body) 
    ("d" hydra-ediff/body) 
    ("t" hydra-transpose/body) 
    ("f" hydra-occur-dwim/body)
    ("p" spc-main-menu00/body)
    ("n" spc-main-menu98/body)
    ("l" lit-menu/body)
;; ***** END of def
  )
#+end_src
****** spc-main-menu98
#+begin_src elisp
(defhydra spc-main-menu98 (:color blue)
;; ***** hint
    "
    ^Main^             ^98^             ^  Menus^          
    ^─────^────────────^──^─────────────^───────^─────────
    _q_ quit  _R_evert-buffer  _L_ong-line 
    _K_eyboard-sound  off_k_eyboard-sound 
    _p_rev-menu                     _SPC_ _n_ext-menu    
    "
;; ***** keys
  ("q" nil)
  ("R" revert-buffer)
  ("L" toggle-truncate-lines)
  ("K" (progn
      (require 'async)
      (defun play-keyboard-sound ()
        (interactive)
        (async-start
          (play-sound-file "E:/Temp/wav/selectric-move.wav")))
        (add-hook 'pre-command-hook 'play-keyboard-sound)))

  ("k" (remove-hook 'pre-command-hook 'play-keyboard-sound))
  ("SPC" spc-main-menu99/body)
  ("n" spc-main-menu99/body)
  ("p" spc-main-menu01/body)
;; ***** END of def
  )
#+end_src

****** spc-main-menu99
#+begin_src elisp
(defhydra spc-main-menu99 (:color blue)
;; ***** hint
    "
    ^Main^             ^99^             ^  Menus^          
    ^─────^────────────^──^─────────────^───────^─────────
    _q_uit            _i_n       _h_elp 
    ^^                _j_ump     _l_it-menu
    _p_rev-menu       _n_ext-menu    
    "
;; ***** keys
    ("q" nil)
    ("i" org-clock-in)
    ("j" org-clock-goto)
    ("o" org-clock-out)
  ("h" hydra-help-menu/body)
    ;; ("r" org-clock-report)
  ("n" spc-main-menu00/body)
  ("p" spc-main-menu98/body)
  ("l" lit-menu/body)
;; ***** END of def
  )
#+end_src

***** fset macros
#+begin_src elisp
(fset 'mac-done-copy
   (lambda (&optional arg) "Keyboard macro." (interactive "p") (kmacro-exec-ring-item (quote ("dzadd`dpza``" 0 "%d")) arg)))
#+end_src
***** defuns
#+begin_src elisp
(defun curent-time-format-hh-mm (p-h p-m)
  "curent-time-format-hh-mm"
  (concat
    (number-to-string (+ p-h (nth 2 (decode-time))))
    ":"
    (let ((i (+ p-m (nth 1 (decode-time)))))
      (if (> i  9)
          (number-to-string i)
          (concat "0" (number-to-string i))))))
#+end_src
***** menus for 00
****** yasnippet
#+begin_src elisp
(defhydra hydra-yasnippet ( :color pink
              ;; :hint nil
              )
;; **** Hint
  "
              ^YASnippets^
--------------------------------------------
  Modes:    Load/Visit:    Actions:

 _g_lobal  _d_irectory    _i_nsert
 _m_inor   _f_ile         _t_ryout
 _e_xtra   _l_ist         _n_ew
 _q_uit    _a_ll
"
;; **** Keys
  ("d" yas-load-directory)
  ("e" yas-activate-extra-mode)
  ("i" yas-insert-snippet :color blue)
  ("w" yas-wrap-around-region :color blue)
  ("f" yas-visit-snippet-file :color blue)
  ("n" yas-new-snippet :color blue)
  ("t" yas-tryout-snippet)
  ("l" yas-describe-tables :color blue)
  ("g" yas/global-mode)
  ("m" yas/minor-mode)
  ("a" yas-reload-all)
  ("q" nil "quit")
;; **** END )
  )
#+end_src
****** ai-menu
#+begin_src elisp
(defhydra hydra-ai-menu (:color blue)
    ("c" (hydra-ai-chat-menu/body) "AI chat")
    ("m" (hydra-ai-model-menu/body) "AI model")
    ("r" (hydra-ai-role-menu/body) "AI roles")
    ("d" (hydra-ai-docs-menu/body) "AI docs")
    ("q" nil) 
    )

(defhydra hydra-ai-model-menu (:color blue)
    ;; (find-file-other-frame "~/Dropbox/backup/models/gemeni1-5.el")
    ("g" (load "~/Dropbox/backup/models/gemeni1-5.el") "Gemeni1.5")
    ;; (find-file-other-frame "~/Dropbox/backup/models/claude.el")
    ("c" (load "~/Dropbox/backup/models/claude.el") "Claude")
    ;; (find-file-other-frame "~/Dropbox/backup/models/openai.el")
    ("o" (load "~/Dropbox/backup/models/openai.el") "gpt-4o-mini")
    ;; (find-file-other-frame "~/Dropbox/backup/models/mixtral.el")
    ("m" (load "~/Dropbox/backup/models/mixtral.el") "mixtral")
    ;; (find-file-other-frame "~/Dropbox/backup/models/llama70v.el")
    ("l" (load "~/Dropbox/backup/models/llama70v.el") "llama70v")
    ("q" nil) 
    )

(defhydra hydra-ai-docs-menu (:color blue)
    ("c" (find-file-other-frame "~/Dropbox/Office/Games/aidungeon/open-al-chat.org") "open-al-chat")
    ("m" (find-file-other-frame "~/Dropbox/Office/Games/aidungeon/multiagent-ai.org") "multiagent-ai")
    ("a" (find-file-other-frame "~/Dropbox/Office/Games/aidungeon/al-Audio-gen.org") "al-Audio-gen")
    ("s" (find-file-other-frame "~/Dropbox/Office/Games/aidungeon/Stable_Diffusion.org") "Stable_Diffusion")
    ("S" (find-file-other-frame "~/Dropbox/Office/Games/Game-logs/AI/2024-06-07-SD-story.org") "SD-log")
    ("d" (find-file-other-frame "~/Dropbox/Office/Games/aidungeon/worlds.org") "aiworlds")
    ("C" (find-file-other-frame "~/Dropbox/Office/Research/Doc/Codex/BuYn_Codex.org") "BuYn_Codex")
    ("q" nil) 
    )

(defhydra hydra-ai-role-menu (:color blue)
    ("e" (load "~/Dropbox/Office/Games/aidungeon/els/acid-elisp.el") "elisp Acid")
    ("p" (load "~/Dropbox/Office/Games/aidungeon/els/acid-python.el") "Py Acid")
    ("s" (load "~/Dropbox/Office/Games/aidungeon/els/ai-synod.el")
            "Synode AI")
    ("l" (load "~/Dropbox/Office/Games/aidungeon/els/leeloo-chat.el") "LeeLoo")
    ("t" (load "~/Dropbox/Office/Games/aidungeon/els/ted-dan.el") "Ted DAN")
    ("h" (load "~/Dropbox/Office/Games/aidungeon/els/ted-dan.el") "Ted holodeck")
    ("S" org-roam-menu/body "Sasha")
    ("g" (load "~/Dropbox/Office/Games/aidungeon/els/glados-daen.el") "GLaDOS")
    ("d" (load "~/Dropbox/Office/Games/aidungeon/els/catherine-tramell-daen.el") "DAEN Tramell")
    ("o" (load "~/Dropbox/Office/Games/aidungeon/els/rpm-4options.el") "RPM 4option")
    ("m" (load "~/Dropbox/Office/Games/aidungeon/els/rpm-malu.el") "RPM MALU")
    ("q" nil) 
    )

(defhydra hydra-ai-chat-menu (:color blue)
    ("a" (progn
            (load "~/Dropbox/Office/Games/aidungeon/els/acid-chat.el")
            (find-file-other-frame "~/Dropbox/Office/Games/aidungeon/chars-chat/2024-05-17-Acid_Burn.org")
            ) "Acid Burn")
    ("L" (progn
            (load "~/Dropbox/Office/Games/aidungeon/els/leeloo-chat.el")
            (find-file-other-frame "~/Dropbox/Office/Games/aidungeon/chars-chat/2024-09-18-Leeloo.org")
            ) "LeeLoo")
    ("l" (progn
            (load "~/Dropbox/Office/Games/aidungeon/els/ai-synod.el")
            (find-file-other-frame "~/Dropbox/Office/Games/Game-logs/Tomb-of-Tyrants/2023-09-09-AI-story.org")
            ) "LogFile")
    ("t" (progn
            (load "~/Dropbox/Office/Games/aidungeon/els/tpol-chat.el")
            (find-file-other-frame "~/Dropbox/Office/Games/aidungeon/chars-chat/2024-05-18-T-Pol.org"))
        "T'pol")
    ("q" nil) 
  )
#+end_src
****** org-menu
#+begin_src elisp
(defhydra org-menu (:color pink)
;; ***** keys
;; ****** one-line keys
    ("r" org-archive-subtree "ARhiv TODO")
    ("t" org-todo "Todo set")
    ("d" org-babel-demarcate-block "demarcate" :color blue)
    ("g" org-agenda "aGenda" :color blue )
    ("s" org-toggle-inline-images "Show image")
    ("q" nil ) 
    ("o" org-roam-menu/body "Org-rOam" :color blue)
;; ****** D : 
    ("D" (progn
            ;; (nil/body) 
            (evil-open-fold)
            (mac-done-copy)
            ;; (org-menu/body)
            ) "DoneMACRO" 
              :color blue)
;; ****** h : 
    ("h" (org--deadline-or-schedule nil 'scheduled 
               (curent-time-format-hh-mm 1 0))
          "H+1h"
          :color blue)
;; ****** n : 
    ("n" (org--deadline-or-schedule nil 'scheduled 
               (curent-time-format-hh-mm 13 0))
          "N+13h"
          :color blue)
;; ****** b Idirect buffer : 
    ("b" (progn
            (org-tree-to-indirect-buffer)
            (define-key evil-normal-state-map (kbd "g SPC") 
              `org-tree-to-indirect-buffer))
          "BuffersInder"
          :color blue)
;; ***** END of def
  )
#+end_src
****** org-roam-menu
#+begin_src elisp
(defhydra org-roam-menu (:color blue)
;; ***** keys
    ("i" org-roam-node-insert "Insert")
    ("c" org-roam-capture "Capture")
    ("g" org-roam-graph "graph")
    ("a" org-roam-alias-add "Alias Add")
    ("q" nil)
    ("D" org-id-get-create "iD get create")
    ("F" (dendroam-node-find-initial-input) "h-Find")
    ("f" org-roam-node-find "Find")
    ("r" org-roam-buffer-display-dedicated "dedicated-buffeR")
    ("SPC" org-roam-buffer-toggle "Roam-buffeR")
    ("j" org-roam-dailies-capture-today "joarnal")
    ("t" org-roam-tag-add "Tag-add")
    ("S"
     (progn
       (org-roam-ui-mode)
       (message "server start on: http://127.0.0.1:35901/")) "Start/StopUI")
    ("z" org-roam-ui-node-zoom "Zoom")
    ("s" org-roam-ui-node-local "Show-node")
    ("R" org-roam-node-random "random")
    ("B" (org-roam-db-sync 'FORCE) "dB-Build")
;; ***** END of def
  )
#+end_src
****** brain-org
#+begin_src elisp
(defhydra hydra-brain-org-menu (:color blue)
  ;; (global-map "C-c")
  "Org-Brain menu"
  ("i" (org-brain-get-id)
    "addID2header")
  ("I" (org-brain-headline-to-file)
    "addID2All")
  ("v" (org-brain-visualize "index")
    "2index")
  ("V" (org-brain-entry-at-pt)
    "visualize-org")
  ("R" (org-brain-rename-file)
    "rename-file")
  ("U" (org-brain-update-id-location)
    "updateID")
  ("F" (org-brain-headline-to-file)
    "Hline2file")
  ;; ("w" (progn  
  ;;    ;; (find-file-other-frame "~/.archemacs/ELs/org-eww/org-eww.el")
  ;;    ;; (require 'org-eww "~/.archemacs/ELs/org-eww/org-eww.el")
  ;;    (org-eww-copy-for-org-mode)
  ;;    )
    ;; "web-page2Org")
  ("q" nil "quit")
  ;; --------------------------------------
  )
#+end_src

****** emacs-menu
#+begin_src elisp
(defhydra hydra-emacs-menu (:color blue)
;; ***** keys
;; ****** w : 
    ("w" (if (eq evil-state 'visual)
                (query-replace
                            "/"
                            "\\"
                            nil
                            (region-beginning)
                            (region-end)
                            (current-kill 0 "DO-NOT-MOVE"))
                (query-replace
                            "/"
                            "\\"
                            nil
                            nil
                            (current-kill 0 "DO-NOT-MOVE"))) "To Win Format")
;; ****** u : 
    ("u" (if (eq evil-state 'visual)
                (query-replace
                            "\\"
                            "/"
                            nil
                            (region-beginning)
                            (region-end)
                            (current-kill 0 "DO-NOT-MOVE"))
                (query-replace
                            "\\"
                            "/"
                            nil
                            nil
                            (current-kill 0 "DO-NOT-MOVE"))) "To unix Format")
;; ****** m : 
    ("m" (progn
          (unless (fboundp 'mask_win_path)
              (load (expand-file-name "keymac/mask_win_path.el" user-emacs-directory)))
          (mask_win_path)) "maskSlesh")
;; ****** f : 
    ("f" hydra-emaks-fonts/body "fonts")
;; ****** E : 
    ("E" evil-mode "evil mode")
;; ****** R : 
  ("R" revert-buffer "revert buffer") 
;; ****** W : 
  ("W" (revert-buffer-with-coding-system 'windows-1251) "win-1251") 
;; ****** q : 
  ("q" nil) 
;; ****** s : 
  ("s" copy-to-register "savTex2reg" :color blue ) 
;; ****** i : 
  ("i" insert-register "insReg2buff" :color blue ) 
  ("L" menu-bar--toggle-truncate-long-lines "long-lines")
;; ***** END of def
  )

(defhydra hydra-emaks-fonts (:color blue)
  "fonts menu "
;; **** u : 
  ("u" (set-frame-font "Ubuntu Mono" nil nil)
        "UbuntuMono")
;; **** c : 
  ("c" (set-frame-font "comic sans ms" nil nil)
        "ComicSansMS")
;; **** C : 
  ("C" (set-frame-font "comic Mono" nil nil)
        "ComicMono")
;; **** p : 
  ("p" (set-frame-font "Papyrus" nil nil)
        "Papyrus")
;; **** P : 
  ("P" (set-frame-font "Comic Papyrus" nil nil)
        "ComicPapyrus")
;; **** e : 
  ("e" (set-frame-font "Edwardian Script ITC" nil nil)
        "EdwardianS")
;; **** b : 
  ("b" (set-frame-font "Bamboo" nil nil)
        "Bamboo")
;; **** k : 
  ("k" (set-frame-font "Celtic Knots" nil nil)
        "KelticKnots")
;; **** t : 
  ("t" (set-frame-font "Times New Roman" nil nil)
        "TimesNewRoman")
;; **** q : 
  ("q" nil "quit"))
#+end_src
****** www-menu
#+begin_src elisp
(defhydra www-menu (:color blue)
;; ***** hint
    "
                                   ^WWW  Menus^          
───────────────────────────────────^──────────^────────────────────────────────
_L_ist  _y_t  _B_ookmarks  _v_isual  _r_enameBuf _m_pv _f_irefox _c_hromium
_S_earchOtherF _s_earch _E_WordOthrF s_W_itch _p_ast&go _k_hinsider        
_Y_ankPageUrl  _f_rameLink _w_iki-trm  _z_oom  _q_uit _i_mgS
    "
;; ***** keys
;; ****** one-line keys
    ("L" (eww-list-buffers))
    ("W" (eww-switch-to-buffer))
    ("B" (eww-list-bookmarks))
    ("f" org-open-link-in-new-frame)
    ("z" hydra-zoom/body)
    ("r" rename-buffer)
  ("q" nil) 
;; ****** "v" : 
    ("v" (progn
      ;; (global-visual-line-mode t)
      (setq truncate-lines nil)
      (setq line-move-visual t)
      (setq word-wrap t)
       )
   )
;; ****** "m" : 
    ("m" (progn
          (eww-copy-page-url)
          (buyn-shell-start (concat "mpv " (current-kill 0)))))

;; ****** "f" : 
    ("f" (progn
          (eww-copy-page-url)
          (buyn-shell-start (concat "firefox " (current-kill 0)))))

;; ****** "c" : 
    ("c" (progn
          (eww-copy-page-url)
          (buyn-shell-start (concat "chromium " (current-kill 0)))))
;; ****** "s" : 
    ("s"  (
      let (buffer-name-to-close (buffer-name))
          (if (use-region-p)
            (eww (buffer-substring
                (region-beginning)
                (region-end)))
            (eww (buffer-substring
                (line-beginning-position)
                (line-beginning-position 2))))
          (switch-to-buffer buffer-name-to-close)))
;; ****** "S" : 
    ("S"  (
      let (buffer-name-to-close (buffer-name))
          (evil-window-split)
          (if (use-region-p)
            (eww (buffer-substring
                (region-beginning)
                (region-end)))
            (eww (buffer-substring
                (line-beginning-position)
                (line-beginning-position 2))))
          (evil-quit)
          (switch-to-buffer-other-frame buffer-name-to-close)))
;; ****** "w" : 
    ("w"  (
      let (buffer-name-to-close (buffer-name))
          (evil-window-split)
          (if (use-region-p)
            (eww (concat (buffer-substring
                            (region-beginning)
                            (region-end))
                         " site:en.wikipedia.org"))
            (eww (buffer-substring
                (line-beginning-position)
                (line-beginning-position 2))))
          (evil-quit)
          (switch-to-buffer-other-frame buffer-name-to-close)))
;; ****** "y" : 
    ("y"  (
      let (buffer-name-to-close (buffer-name))
          (evil-window-split)
          (if (use-region-p)
              (eww (concat
                    "https://vid.puffyan.us/search?q="
                    (buffer-substring
                            (region-beginning)
                            (region-end))))
            (eww (buffer-substring
                (line-beginning-position)
                (line-beginning-position 2))))
          (evil-quit)
          (switch-to-buffer-other-frame buffer-name-to-close)))
;; ****** "k" : 
    ("k"  (
      let (buffer-name-to-close (buffer-name))
          (evil-window-split)
          (if (use-region-p)
              (eww (concat
                    "https://downloads.khinsider.com/search?search="
                    (buffer-substring
                            (region-beginning)
                            (region-end))))
            (eww (buffer-substring
                (line-beginning-position)
                (line-beginning-position 2))))
          (evil-quit)
          (switch-to-buffer-other-frame buffer-name-to-close)))
;; ****** "i" : 
    ("i"  (
      let (buffer-name-to-close (buffer-name))
          (evil-window-split)
          (if (use-region-p)
              (eww (concat
                    "https://www.google.com/search?gbv=1&bih=&biw=&source=hp&hl=en&ie=ISO-8859-1&tbm=isch&q="
                    (buffer-substring
                            (region-beginning)
                            (region-end))))
            (eww (buffer-substring
                (line-beginning-position)
                (line-beginning-position 2))))
          (evil-quit)
          (switch-to-buffer-other-frame buffer-name-to-close)))
;; ****** "E" : 
    ("E"  (
      let (buffer-name-to-close (buffer-name))
          (evil-window-split)
          (if (use-region-p)
              (eww-search-words)
            (progn 
                ;; According to C-h f region-active-p, it seems that you should use use-region-p instead.
                ;; EDIT: I think that rebinding the key to the new command is a cleaner approach than the advice (other commands may be relying on the original version of eww-search).
                ;; (line-beginning-position)
                ;; (line-beginning-position 2)
                ;; (eww-search-words)))
                (eww (read-string "Query: ")))
          (evil-quit)
          (switch-to-buffer-other-frame buffer-name-to-close))))
;; ****** "Y" : 
    ("Y" (progn  
      (setq x-select-enable-clipboard t)
      (eww-copy-page-url)
      (setq x-select-enable-clipboard nil)
      ))
;; ****** "p" : 
  ("p" (progn  
      (setq x-select-enable-clipboard t)
      (eww (current-kill 0 "DO-NOT-MOVE"))
      (setq x-select-enable-clipboard nil)
      ))
;; ***** END of def
  )

(defhydra hydra-zoom (:color pink)
  ;; (global-map "C-c")
  "zoom"
  ("i" text-scale-increase "in")
  ("o" text-scale-decrease "out")
  ("p" www-menu/body "prev")
  ("q" nil "quit")
  )
#+end_src
****** yank-menu
#+begin_src elisp
(defhydra hydra-yank-menu (:color blue)
  ;; (global-map "C-c")
  "yank menu"
  ("y" (progn  
      (setq x-select-enable-clipboard t)
      (kill-new (current-kill 0 "DO-NOT-MOVE"))
      ;; (message last-clip)
      (setq x-select-enable-clipboard nil)
      )
    "reg2clipbord")
  ("s" (copy-to-buffer) "send2Buff")
  ("w" (progn  
      (setq x-select-enable-clipboard t)
      ;; (find-file-other-frame "~/.archemacs/ELs/org-eww/org-eww.el")
      ;; (require 'org-eww "~/.archemacs/ELs/org-eww/org-eww.el")
      (org-eww-copy-for-org-mode)
      (setq x-select-enable-clipboard nil)
      )
    "web-page2Org")
  ("q" nil "quit")
  ;; --------------------------------------
  )
#+end_src

****** dev-menu
#+begin_src elisp
(defhydra hydra-dev-menu (:color red)
  ;; (global-map "C-c")
  "dev menu"
  ("c" company-mode "company" :color blue)
  ("F" program-mode-hook-customize "fuze")
  ("f" flycheck-mode "flycheck")
  ("o" outshine-mode "outshine")
  ("e" elpy-hydra/body "elpy" :color blue)
  ("P" python-mode "pyton")
  ("p" parinfer-rust-mode "parinferR" :color blue)
  ("d" rainbow-delimiters-mode "delimiters")
  ("T"  (save-excursion
          (progn
            (org-babel-goto-named-src-block "auto-tangle-block")
            (org-babel-execute-src-block)))
        "execute auto-tangle-block" :color blue)
  ("t" (progn
            (setq org-src-preserve-indentation t)
            (untabify (point-min) (point-max))
            (save-buffer)
            (universal-argument)
            (universal-argument)
            (org-babel-tangle))
        "tangle only one file" :color blue)
  ("L" display-line-numbers-mode "line-numbers")
  ("y" hydra-yasnippet/body "yasnippet" :color blue)
  ("q" nil "quit")
  )

(defhydra elpy-hydra (:color blue)
  "
  Elpy in venv:
  "
  ;; Elpy in venv: %`venv-current-name
;; **** Keys
  ("d" (progn (call-interactively 'elpy-test-django-runner) (elpy-nav-errors/body)) "current test, Django runner" :color blue)
  ("t" (progn (call-interactively 'elpy-test-pytest-runner) (elpy-nav-errors/body)) "current test, pytest runner" :color blue)
  ("w" (venv-workon) "workon venv…")
  ("q" nil "quit")
  ("Q" (kill-buffer "*compilation*") "quit and kill compilation buffer" :color blue)
;; **** END )
  )

(defhydra elpy-hydra (:color blue)
  "
  Elpy in venv:
  "
  ;; Elpy in venv: %`venv-current-name
;; **** Keys
  ("d" (progn (call-interactively 'elpy-test-django-runner) (elpy-nav-errors/body)) "current test, Django runner" :color blue)
  ("t" (progn (call-interactively 'elpy-test-pytest-runner) (elpy-nav-errors/body)) "current test, pytest runner" :color blue)
  ("w" (venv-workon) "workon venv…")
  ("q" nil "quit")
  ("Q" (kill-buffer "*compilation*") "quit and kill compilation buffer" :color blue)
;; **** END )
  )
#+end_src

#+begin_src elisp
(defhydra elpy-nav-errors (:color red)
;; ***** Hint
  "
  Navigate errors
  "
;; ***** Keys
  ("n" next-error "next error")
  ("p" previous-error "previous error")
  ("s" (progn
         (switch-to-buffer-other-window "*compilation*")
         (goto-char (point-max))) "switch to compilation buffer" :color blue)
  ("w" (venv-workon) "Workon venv…")
  ("q" nil "quit")
  ("Q" (kill-buffer "*compilation*") "quit and kill compilation buffer" :color blue)
;; ***** END )
  )
#+end_src
****** outline
#+begin_src elisp
(defhydra hydra-outline (:color pink :hint nil)
;; **** Hint
  "
^Hide^             ^Show^           ^Move
^^^^^^------------------------------------------------------
_q_: sublevels     _a_: all         _u_: up
_t_: body          _e_: entry       _n_: next visible
_o_: other         _i_: children    _p_: previous visible
_c_: entry         _k_: branches    _f_: forward same level
_l_: leaves        _s_: subtree     _b_: backward same level
_d_: subtree

"
;; **** Keys
  ;; Hide
  ("q" hide-sublevels)    ; Hide everything but the top-level headings
  ("t" hide-body)         ; Hide everything but headings (all body lines)
  ("o" hide-other)        ; Hide other branches
  ("c" hide-entry)        ; Hide this entry's body
  ("l" hide-leaves)       ; Hide body lines in this entry and sub-entries
  ("d" hide-subtree)      ; Hide everything in this entry and sub-entries
  ;; Show
  ("a" show-all)          ; Show (expand) everything
  ("e" show-entry)        ; Show this heading's body
  ("i" show-children)     ; Show this heading's immediate child sub-headings
  ("k" show-branches)     ; Show all sub-headings under this heading
  ("s" show-subtree)      ; Show (expand) everything in this heading & below
  ;; Move
  ("u" outline-up-heading)                ; Up
  ("n" outline-next-visible-heading)      ; Next
  ("p" outline-previous-visible-heading)  ; Previous
  ("f" outline-forward-same-level)        ; Forward - same level
  ("b" outline-backward-same-level)       ; Backward - same level
  ("z" nil "leave")
;; (global-set-key (kbd "C-c #") 'hydra-outline/body) ; by example
;; **** END )
  )
#+end_src

****** commands-menu
#+begin_src elisp
(defhydra hydra-commands-menu (:color blue)
  "
  commands menu:
  "
  ;; Elpy in venv: %`venv-current-name
  ("e" (hydra-eshell-menu/body) "eshell...")
  ("s" (hydra-shell-scripts-menu/body) "scripts...")
  ("l" (hydra-applancher-menu/body) "applancher...")
  ("m" (hydra-player-menu/body) "player...")
  ("p" (emms-pause) "playe/pause")
  ("q" nil "quit")
  )
#+end_src

#+begin_src elisp
(defhydra hydra-player-menu (:color blue)
  "
  commands menu:
  "
  ;; Elpy in venv: %`venv-current-name
  ("e" (emms) "emms")
  ("t" (progn
         (find-file-other-frame "~/Dropbox/Resources/Playlists/test.m3u")
         (emms-play-m3u-playlist "~/Dropbox/Resources/Playlists/test.m3u"))
   "test.m3u")
  ("w" (progn
          (find-file-other-frame "~/Dropbox/Resources/Playlists/Tech/watch.m3u")
          (emms-play-m3u-playlist "~/Dropbox/Resources/Playlists/Tech/watch.m3u"))
   "test.m3u")
  ("s" (emms-streams) "streams")
  ("q" nil "quit")
  )
#+end_src

#+begin_src elisp
(defhydra hydra-eshell-menu (:color blue)
  "
  Eshell menu:
  "
  ;; Elpy in venv: %`venv-current-name
  ("e" (let (buffer-name-to-close (buffer-name))
        (evil-window-split)
        (eshell)
        (evil-quit)
        (switch-to-buffer-other-frame buffer-name-to-close))
      "Open eshell")
  ("q" nil "quit")
  )

(defhydra hydra-shell-scripts-menu (:color blue)
  "
  Shell scripts menu:
  "
  ;; Elpy in venv: %`venv-current-name
  ("R" (progn
          (buyn-shell-start "sh_restart_plasmashell.sh")
          (delete-other-windows))
      "Restart plasmashell")
  ("s" (progn
          (buyn-shell-start "sudo systemctl suspend")
          (delete-other-windows))
      "sleep")
  ("H" (progn
          (buyn-shell-start "sudo systemctl hibernate")
          (delete-other-windows))
      "hibernate")
  ("Y" (progn
          (buyn-shell-start "sudo systemctl hybrid-sleep")
          (delete-other-windows))
      "hYbrid-sleep")
  ("P" (progn
         (buyn-shell-start "sh_off.sh")
         (delete-other-windows))
      "PoweOFF")
  ("q" nil "quit")
  )
#+end_src

#+begin_src elisp
(defhydra hydra-applancher-menu (:color blue)
  "
  App Lancher menu
  "
  ;; Elpy in venv: %`venv-current-name
  ("d" (progn
          (buyn-shell-start "emacs --debug-init")
          (delete-other-windows))
      "emacs debug")
  ("m" (progn
         (buyn-shell-start "chromium --profile-directory=Default --app-id=cbgioneaoelhfonhmabneendhdhileho")
            (setq x-select-enable-clipboard t)
            (kill-new "https://meet.google.com/ttu-evry-rvj")
            (setq x-select-enable-clipboard nil)
            (delete-other-windows))
      "my google meetup")
  ("g" (progn
         (buyn-shell-start "chromium --profile-directory=Default --app-id=bbfcdomagcggnpdkfbjfagpgafbehnkk")
         (delete-other-windows))
      "Gemeni")
  ("q" nil "quit")
  )
#+end_src

***** other menus
****** ediff
#+begin_src elisp
(defhydra hydra-ediff (:color blue :hint nil)
  "
;; **** Hint
^Buffers           Files           VC                     Ediff regions
----------------------------------------------------------------------
_b_uffers           _f_iles (_=_)       _r_evisions              _l_inewise
_B_uffers (3-way)   _F_iles (3-way)                           _w_ordwise
_?_ help            _c_urrent file                            
"
;; **** Keys
  ("b" ediff-buffers)
  ("B" ediff-buffers3)
  ("=" ediff-files)
  ("f" ediff-files)
  ("F" ediff-files3)
  ("c" ediff-current-file)
  ("r" ediff-revision)
  ("l" ediff-regions-linewise)
  ("w" ediff-regions-wordwise)
  ("?" (info "(ediff) Introduction"))
;; **** END )
  )
#+end_src

****** transpose
#+begin_src elisp
(defhydra hydra-transpose (:color red)
;; **** Hint
    "Transpose"
;; **** Keys
     ("c" transpose-chars "characters")
     ("w" transpose-words "words")
     ("o" org-transpose-words "Org mode words")
     ("l" transpose-lines "lines")
     ("s" transpose-sentences "sentences")
     ("e" org-transpose-elements "Org mode elements")
     ("p" transpose-paragraphs "paragraphs")
     ("t" org-table-transpose-table-at-point "Org mode table")
     ("q" nil "cancel" :color blue)
;; **** END )
  )
#+end_src

****** lit-menu
#+begin_src elisp
(defhydra lit-menu (:color pink)
;; ***** hint
    "
                ^OrphoGrammus  Menus^ z M-=         
    ────────────^───────────────────^───────────────────
     _[_ prev err    _]_ next err    _w_ word
     _p_rev cor err  _n_ext cor err  
     _f_lyspell      _c_omment chek  _q_uit
     _a_ll buffer    _r_egion cheak
     _R_u-RU    _D_ictonar chenge    _E_n-US
    "
;; ***** keys
    ("[" evil-prev-flyspell-error :color pink)
    ("]" evil-next-flyspell-error :color pink)
    ("n" flyspell-auto-correct-word :color pink)
    ("p" flyspell-auto-correct-previous-word :color pink)
    ("f" flyspell-mode :color pink)
    ("c" flyspell-prog-mode)
    ("a" flyspell-buffer)
    ;; ("R" ispell-change-dictionary "ru_RU")
    ("R" (progn
            (ispell-change-dictionary "ru_RU")
            (flyspell-mode t)))
    ("D" ispell-change-dictionary)
    ("E" (progn
            (ispell-change-dictionary "en_US")
            (flyspell-mode t)))
    ;; ispell-change-dictionary "en_US")
    ("r" ispell-region)
    ("w" ispell-word :color pink)
  ("q" nil) 
;; ***** END of def
  )
#+end_src

****** help-menu
#+begin_src elisp
(defhydra hydra-help-menu (:color blue)
  ;; (global-map "C-c")
  "help menu"
  ("a" apropos "apropos")
  ("f" describe-face "describe-face")
  ("q" nil "quit")
  )
#+end_src

***** define-key
#+begin_src elisp
(global-set-key (kbd "M-<SPC>") 'spc-main-menu00/body)
(define-key evil-normal-state-map (kbd "z M-=") 'lit-menu/body)

(define-key evil-normal-state-map (kbd "M-a M-j M-o") 'lit-menu/body)

(define-key evil-visual-state-map (kbd "M-a M-l M-w") 'ispell-region)
(define-key evil-normal-state-map (kbd "M-a M-l M-w") 'ispell-word)
#+end_src

* TODO **Org Mode и интеграции**
** описание
   Все конфиги для `org-mode`, включая `babel`, `org-roam`, `org-brain` и графические инструменты.  
** INI/org-cfg.el
:PROPERTIES:
:header-args: :tangle INI/org-cfg.el
:END:
*** описание

*** used in
;; (find-file "~/.archemacs/INI/init.el")
*** TODO INI/org-cfg.el
**** добавить меню гидры
***** S-f1 S-<space>
перечень всех основных оргов
с переходм на другие меню оргов
***** С-f1 С-<space>
****** запуск дебаг
****** открытия файлов орга
******* стар
******* инит
****** открыть ranger 
**** 
**** перенести кнопки в орг мод юзпак
или саму загрузку орг кфг добавить туд
но это вроде мение логично
поскольку это основное моё использование имакса
без орга вроде оно не втему
**** список туду активировать репор баг фиксет
поскольку тогда можно рубрицировать поиски по ошибкам
*** src
#+begin_src elisp
;; * ORG-MODE CUSTOMIZATION
;; --------------------------------------
;; ** ---------------     ORG setup
;; (setq org-todo-keywords
;;       '((sequence "TODO(t)" "|" "DONE(d)")
;;         ;; (sequence "REPORT(r)" "BUG(b)" "KNOWNCAUSE(k)" "|" "FIXED(f)")
;;         (sequence "NEXT(x)" "WAITING(w)" "VERIFY(v)" "|" "CANCELED(c)" "DELEGATED(g)")))
;; (setq org-agenda-custom-commands
;;       '(("n" occur-tree "NEXT")))
;; --------------------------------------
(require 'org)
(global-set-key (kbd "C-<f1>") nil)
(global-set-key (kbd "C-<f1> C-<f1>") (lambda () (interactive)
                (find-file-other-frame (expand-file-name "ORG/start.org" user-emacs-directory))))
(global-set-key (kbd "C-<f1> C-<f2>") (lambda () (interactive)
                (find-file-other-frame (expand-file-name "init.org" user-emacs-directory))))

(global-set-key (kbd "M-<f1>") nil)
(global-set-key (kbd "M-<f1> M-<f1>") (lambda () (interactive)
                (find-file-other-frame "~/homemacs.org")))

(global-set-key (kbd "M-S-<f1>") nil)
(global-set-key (kbd "M-S-<f1> M-S-<f1>") (lambda () (interactive)
                (find-file-other-frame (expand-file-name "ORG/tmp/tmp_links.org" user-emacs-directory))))

(global-set-key (kbd "S-<f1>") nil)
(global-set-key (kbd "S-<f1> S-<f1>") (lambda () (interactive)
                (find-file-other-frame "~/Dropbox/Office/Research/Doc/Grimoire/Grimoire.org")))

(add-to-list 'auto-mode-alist '("\\.org\\'" . org-mode))
(global-set-key (kbd "C-c l") 'org-store-link)
(global-set-key (kbd "C-c a") 'org-agenda)
;; (global-set-key "\C-cl" 'org-store-link)
;; (global-set-key "\C-ca" 'org-agenda)
(setq org-hide-leading-stars t)
(setq org-tags-column -60)
(setq org-adapt-indentation nil)
(setq org-startup-folded t)
(setq org-link-frame-setup
  '((vm . vm-visit-folder-other-frame)
    (vm-imap . vm-visit-imap-folder-other-frame)
    (gnus . org-gnus-no-new-news)
    (file . find-file-other-frame)
    (wl . wl-other-frame)))
;; (global-reveal-mode nil)
(setq org-edit-src-content-indentation 0)
(setq org-src-window-setup 'other-frame)
;; (define-key org-mode-map (kbd "M-\~") 'insert-pair)
;; --------------------------------------

;; ** ---------------     ORG TODOs
(setq org-todo-keywords
      '((sequence "TODO(t)" "|" "DONE(d)")
        ;; (sequence "REPORT(r)" "BUG(b)" "KNOWNCAUSE(k)" "|" "FIXED(f)")
        (sequence "NEXT(n)" 
                  "WAITING(w)" 
                  "VERIFY(v)" 
                  "CR(r)"
                  "|" 
                  "CANCELED(c)" 
                  "DELEGATED(g)")))
;; (setq org-agenda-custom-commands
;;       '(("n" occur-tree "NEXT")))
;; --------------------------------------

;; ** ---------------     ORG Capures
(global-set-key (kbd "C-c c") 'org-capture)
;; (setq org-default-notes-file (concat org-directory "~/.archemacs/org/notes.org"))
(setq org-capture-templates '(
  ("t" "Todo" entry
      (file+headline "~/Dropbox/orgs/gtd/gtd.org" "Tasks")
      "* TODO %?\n  %i\n  %a")

  ("i" "Todo [inbox]" entry
      (file+headline "~/Dropbox/orgs/gtd/inbox.org" "unsorted")
      "* %i%?")
  ("a" "Agend.org" entry
      (file+headline "~/Dropbox/orgs/gtd/agend.org" "Agend.org")
      "* TODO %i%?")
;; D:\Development\lisp\Home\ORG\Recipes\main.org 
;; D:\Development\lisp\Home\ORG\Recipes\new_recipes.org 
  ;; ("r" "new recipes" entry
  ;;     (file+headline "D:\Development\lisp\Home\ORG\Recipes\new_recipes.org" "new-recipes")
  ;;     "* %i%? \n %U")
  ("n" "notebook" entry
      (file+headline "~/Dropbox/orgs/gtd/notebook.org" "notebook")
      "* %i%? \n %U")
  ("j" "Journal" entry
      (file+datetree "~/Dropbox/orgs/gtd/journal.org")
      "* %?\nEntered on %U\n  %i\n  %a")
  ("l" "links to transfer" entry
      (file+headline "~/.archemacs/org/tmp/tmp_links.org" "link to")
      "* TODO %i%?")))
(setq org-refile-targets '(("~/Dropbox/orgs/gtd/gtd.org" :maxlevel . 3)
                           ("~/Dropbox/orgs/gtd/inbox.org" :level . 1)
                           ("~/Dropbox/orgs/gtd/agend.org" :level . 1)
                           ("~/Dropbox/orgs/gtd/notebook.org" :maxlevel . 2)))
;; To define special keys to capture to a particular template without going through the interactive template selection, you can create your key binding like this:
;; (define-key global-map "\C-cx"
;;   (lambda () (interactive) (org-capture nil "x")))
;; https://orgmode.org/manual/Capture-templates.html#Capture-templates
;; ** --------------     Defult Propertys
;; --------------------------------------
(setq org-fold-core-style 'overlays)
(setq org-enforce-todo-dependencies t)
;; Should unfinished children block state changes in the parent? 
(setq org-enforce-todo-checkbox-dependencies t)
;; Should unfinished checkboxes block state changes in the parent?
(setq org-use-property-inheritance t)
;; DEADLINE является одним из этих свойств, которые по умолчанию не наследуются. Вы можете изменить это, настроив переменную
;; User Option: org-confirm-shell-link-function
;;     Function that prompts the user before executing a shell link. 
(setq org-confirm-shell-link-function nil)
;; User Option: org-confirm-elisp-link-function
;;     Function that prompts the user before executing an Emacs Lisp link. 
(setq org-confirm-elisp-link-function nil)
(setq org-log-done t)
;; ** ORG binding : 
;; *** ORG heders : 
;; (define-key org-mode-map
;;       [S-M-return] 'org-insert-subheading)
(define-key org-mode-map
      (kbd "S-M-<return>") 'org-insert-subheading)
;; (define-key evil-normal-state-map
;;      [C-M-return] 'org-insert-todo-heading-respect-content)
;; (define-key org-mode-map
;;      [C-M-return] 'org-insert-todo-heading-respect-content)
;; *** ORG Foldings
;; **** foldings on lavel navigations
(define-key evil-normal-state-map "zj" 'org-forward-element)
(define-key evil-normal-state-map "zk" 'org-backward-element)
(define-key evil-normal-state-map "zh" 'org-up-element)
(define-key evil-normal-state-map "zl" 'org-down-element)
;; it i think in visual not working delate it after resets
(define-key evil-visual-state-map "zj" 'org-forward-element)
(define-key evil-visual-state-map "zk" 'org-backward-element)
(define-key evil-visual-state-map "zh" 'org-up-element)
(define-key evil-visual-state-map "zl" 'org-down-element)
;; **** foldings manipulate
(define-key evil-normal-state-map "zJ" 'org-metadown)
(define-key evil-normal-state-map "zK" 'org-metaup)
(define-key evil-normal-state-map "zH" 'org-shiftmetaleft)
(define-key evil-normal-state-map "zL" 'org-shiftmetaright)
;; **** z[
(define-key evil-normal-state-map "z[" '(lambda() (interactive)
          (outline-up-heading 1)
          ))
;; **** z]
(define-key evil-normal-state-map "z]" '(lambda() (interactive)
          (outline-up-heading 3)
          ))
;; **** zc
(define-key evil-normal-state-map "zc" '(lambda() (interactive)
          ;; (outline-previous-visible-heading 1)
          (move-beginning-of-line nil)
          (org-up-element)
          (hide-subtree)
          ))
;; **** zC
(define-key evil-normal-state-map "zC" '(lambda() (interactive)
          (outline-up-heading 1)
          (hide-subtree)
          ))
;; *** ORG babel
(define-key org-mode-map (kbd "M-e M-i M-o") 'org-edit-special)
(define-key org-src-mode-map (kbd "M-e M-i M-o") 'org-edit-src-exit)

;; *** ORG Table
;; (global-set-key (kbd "C-c <C-return>") 'org-table-insert-row)
;; move to 
;; (define-key evil-normal-state-map (kbd "C-c <C-return>") 'org-table-insert-row)
(define-key org-mode-map (kbd "C-c <C-return>") 'org-table-insert-row)
;; (global-unset-key (kbd "<S-UP>"))
;; (define-key org-mode-map (kbd "<S-UP>") 'org-table-move-cell-up)

;; ** ORG agenda customization
(use-package org-agenda
  :config
;; (find-file-other-frame "~/.archemacs/INI/org_agend_cfg.el")
  ;; (load "~/.archemacs/INI/org_agend_cfg.el")
(load (expand-file-name "INI/org_agend_cfg.el" user-emacs-directory)))
;; ** ORG babel 
;; (find-file-other-frame "~/.archemacs/INI/babel-cfg.el")
(load (expand-file-name "INI/babel-cfg.el" user-emacs-directory))
;; ** ORG-BRAIN 
;; (find-file-other-frame "~/.archemacs/INI/org-brain-cfg.el")
(load (expand-file-name "INI/org-brain-cfg.el" user-emacs-directory))
;; --------------------------------------

;; * GRAPH ORG TOOLS
;; --------------------------------------
;; (find-file-other-frame "~/.archemacs/INI/ORG/graph-tools-cfg.el")
;; (load "~/.archemacs/INI/ORG/graph-tools-cfg.el")
(load (expand-file-name "INI/ORG/graph-tools-cfg.el" user-emacs-directory))
;; --------------------------------------

;; * ORG-ROAM CUSTOMIZATION
;; --------------------------------------
;; (find-file-other-frame "~/.archemacs/INI/org-brain-cfg.el")
;; (load "~/.archemacs/INI/ORG/org-roam-cfg.el")
;; (load (expand-file-name "INI/ORG/org-roam-cfg.el" user-emacs-directory))
;; --------------------------------------
#+end_src
** INI/org_agend_cfg.el
:PROPERTIES:
:header-args: :tangle INI/org_agend_cfg.el
:END:
*** описание

*** used in
;; (find-file "~/INI/org-cfg.el")
;; (find-file-other-frame "~/INI/org-cfg.el")
*** src
#+begin_src elisp
;; * ageda setings 
;; --------------------- 
(setq org-agenda-sticky 1)
;; default active on l \ g l
;; (setq org-agenda-log-mode-items '(closed clock))
(setq org-agenda-log-mode-items '(closed clock state))
(setq org-agenda-files '( 
  "~/Dropbox/orgs/GTD/todo_today.org"
  "~/Dropbox/orgs/GTD/todo_nottoday.org"))

;; (setq org-agenda-time-grid
;;    '((daily today require-timed)
;;    (200 400 600 800 1000 1200 1400 1600 1800 2000 2200 )
;;    "......" "----------------")
;;    )

(setq org-agenda-time-grid
    '((daily today require-timed)
    (100 200 300 400 500 600 700 800 900 1000 1100 1200 1300 1400 1500 1600 1700 1800 1900 2000 2100 2200 2300 )
    "......" "----------------")
    )

;; --------------------- 
;; * define-key org-agenda-mode-map
;; --------------------- 
;; ** comments 
;; (define-key org-agenda-mode-map (kbd "H")
;;  '(lambda () (interactive) 
;;    (setq current-prefix-arg '(4)) ; C-u
;;    (call-interactively 'org-agenda-do-date-earlier)))
;; ** g : 
;; --------------------- 
(unbind-key (kbd "g") org-agenda-mode-map)
;; --------------------- 

(define-key org-agenda-mode-map (kbd "g g")
  '(lambda () (interactive) 
     (org-agenda-redo)
     (evil-middle-of-visual-line)))

(define-key org-agenda-mode-map (kbd "g j")
  '(lambda () (interactive) 
     (org-agenda-goto-date)))
  
(define-key org-agenda-mode-map (kbd "g m")
  '(lambda () (interactive) 
     (evil-middle-of-visual-line)))

(define-key org-agenda-mode-map (kbd "g k")
  '(lambda () (interactive) 
     (org-agenda-capture)))

(define-key org-agenda-mode-map (kbd "g h")
  '(lambda () (interactive) 
     (org-agenda-holidays)))

(define-key org-agenda-mode-map (kbd "g l")
  '(lambda () (interactive) 
     (org-agenda-log-mode)))
  
(define-key org-agenda-mode-map (kbd "g f")
  '(lambda () (interactive) 
     (toggle-fullscreen-agenda)))
;; --------------------- 

;; ** z : 
;; --------------------- 
(unbind-key (kbd "z") org-agenda-mode-map)
(define-key org-agenda-mode-map (kbd "z n")
  '(lambda () (interactive) 
     (org-agenda-add-note)))

(define-key org-agenda-mode-map (kbd "z z")
  '(lambda () (interactive) 
      (evil-middle-of-visual-line)
      (evil-scroll-line-to-center (line-number-at-pos))))

(define-key org-agenda-mode-map (kbd "z t")
  '(lambda () (interactive) 
    (evil-scroll-line-to-top  (line-number-at-pos))))

(define-key org-agenda-mode-map (kbd "z b")
  '(lambda () (interactive) 
    (evil-scroll-line-to-bottom  (line-number-at-pos))))

;; ** evil j&k
;; --------------------- 
(define-key org-agenda-mode-map (kbd "j")
  '(lambda () (interactive) 
     (org-agenda-next-line)))
(define-key org-agenda-mode-map (kbd "k")
  '(lambda () (interactive) 
     (org-agenda-previous-line)))
;; --------------------- 

;; ** evil c-f&c-b: 
(define-key org-agenda-mode-map (kbd "C-f")
  '(lambda () (interactive) 
     (evil-scroll-page-down 1)))
(define-key org-agenda-mode-map (kbd "C-b")
  '(lambda () (interactive) 
     (evil-scroll-page-up 1)))
;; --------------------- 
;; --------------------- 

;; ** P&N : 
;; --------------------- 
(define-key org-agenda-mode-map (kbd "P")
  '(lambda () (interactive) 
     (evil-scroll-page-up 1)))
(define-key org-agenda-mode-map (kbd "N")
  '(lambda () (interactive) 
     (evil-scroll-page-down 1)))
;; --------------------- 

;; ** L&H
;; --------------------- 
(define-key org-agenda-mode-map (kbd "L")
  '(lambda () (interactive) 
     (org-agenda-date-later-minutes 6)))
(define-key org-agenda-mode-map (kbd "H")
  '(lambda () (interactive) 
     (org-agenda-date-earlier-minutes 6)))
;; --------------------- 

;; ** "C-S-h"&"C-S-l": 
;; --------------------- 
(define-key org-agenda-mode-map (kbd "C-S-l")
  '(lambda () (interactive) 
     (org-agenda-date-later-hours 3)))
(define-key org-agenda-mode-map (kbd "C-S-h")
  '(lambda () (interactive) 
     (org-agenda-schedule nil (curent-time-format-hh-mm 1 0))))
;; --------------------- 

;; --------------------- 
;; ** l&h  
;; --------------------- 
(define-key org-agenda-mode-map (kbd "l")
  '(lambda () (interactive) 
     (org-agenda-date-later-minutes 1)))
(define-key org-agenda-mode-map (kbd "h")
  '(lambda () (interactive) 
     (org-agenda-date-earlier-minutes 1)))
;; --------------------- 

;; --------------------- 
;; * open ageda on new frame 
;; --------------------- 
;;(setq org-agenda-files (quote ("~/ORG/start.org")))
;;(defun simple-run-command-in-new-frame (command)
;; (select-frame (make-frame))
;; (funcall #'command))

;;(defun run-agenda-in-new-frame ()
;; (run-command-in-new-frame 'org-agenda)
;; (run-command-in-new-frame #'org-agenda)
;;(define-key evil-normal-state-map "gta" 'org-agenda) 
(defun simple-run-command-in-new-frame (command)
  (select-frame (make-frame))
  (funcall #'command))

(define-key evil-normal-state-map (kbd "M-g M-t M-a") '(lambda () (interactive) 
    (simple-run-command-in-new-frame 'org-agenda))) 
;; --------------------- 

;; * Agend ADD new case
;; --------------------- 
;; ** comment : 
 ;; (setq org-agenda-custom-commands 
 ;;      '(("c" "Desk Work" tags-todo "computer" ;; (1) (2) (3) (4)
;; the key to trigger the search ("c")
;; a description of the search for the agenda dispatcher ("Desk Work")
;; the type of search (todo items matching a tag)
;; the tag to search for ("computer")
         ;; ((org-agenda-files '("~/org/widgets.org" "~/org/clients.org")) ;; (5)
         ;;  (org-agenda-sorting-strategy '(priority-up effort-down))) ;; (5) cont.
   ;;         ("~/computer.html"))
   ;; specifies that this agenda view should be exported as HTML to "~/computer.html" when the agenda export function is called (C-c a e). 
        ;; ...other commands here
        ;; )))

;; ** org-agenda-custom-commands : 
(setq org-agenda-custom-commands
;; *** Q" . "Custom queries : 
      '(("Q" . "Custom queries") ;; gives label to "Q" 
        ("Qa" "Archive search" search ""
         ((org-agenda-files (file-expand-wildcards "~/archive/*.org")))) 
        ("Qn" "Todo next search" todo "NEXT"
            (
            ;; (org-agenda-files (file-expand-wildcards "~/Dropbox/orgs/GTD/*.org"))
            (org-agenda-files '(    "~/Dropbox/orgs/GTD/todo_today.org" 
                                    ;; "~/Dropbox/orgs/capture/emagus.org" 
                                    ;; "~/Dropbox/orgs/capture/Necronomicon.org" 
                                    ;; "~/Dropbox/Office/Research/Doc/Grimoire/Grimoire.org"
                                    ) 
                ))) 
        ("QN" todo "NEXT"
            ((org-agenda-files '(   "~/Dropbox/orgs/GTD/todo_today.org" 
                                    ;; "~/Dropbox/orgs/capture/emagus.org" 
                                    ;; "~/Dropbox/orgs/capture/Necronomicon.org" 
                                    ;; "~/Dropbox/Office/Research/Doc/Grimoire/Grimoire.org"
                                    ) 
            ))) 
        ("QH" "My-agenda"
              ( (agenda "")
                (org-agenda-files '(
                                            "~/Dropbox/orgs/capture/emagus.org" 
                                            "~/Dropbox/Office/Research/Doc/Grimoire/Grimoire.org"
                                            "~/Dropbox/orgs/capture/Necronomicon.org" 
                                            ) 
                ))) 
        ("Qh" agenda "My-agenda" (  
                (org-agenda-files '(
                                    "~/Dropbox/orgs/capture/emagus.org" 
                                    "~/Dropbox/orgs/GTD/todo_today.org"
                                    "~/Dropbox/Office/Research/Doc/Grimoire/Grimoire.org"
                                    ) 
                ))) 
        ("Qw" "Website search" search ""
         ((org-agenda-files (file-expand-wildcards "~/website/*.org"))))
        ("Qb" "Projects and Archive" search ""
         ((org-agenda-text-search-extra-files (file-expand-wildcards "~/archive/*.org"))))
                ;; searches both projects and archive directories
        ("QA" "Archive tags search" org-tags-view "" 
         ((org-agenda-files (file-expand-wildcards "~/archive/*.org"))))
        ;; ...other commands here
        )
;; *** ) END org-agenda-custom-commands : 
      )
#+end_src
** INI/babel-cfg.el
:PROPERTIES:
:header-args: :tangle INI/babel-cfg.el
:END:
*** описание

*** used in
;; (find-file "~/INI/org-cfg.el")
*** src
#+begin_src elisp
(setq org-confirm-babel-evaluate nil)

(org-babel-do-load-languages
 'org-babel-load-languages
 '(

    (python . t)

    (eshell . t)

    (shell       . t)
    (clojure     . t)
    (lua         . t)
    (sql        . t)
    (sqlite     . t)
    (js         . t)
    (css        . t)
    (plantuml   . t)

   ))
#+end_src
** INI/org-brain-cfg.el
:PROPERTIES:
:header-args: :tangle INI/org-brain-cfg.el
:END:
*** описание

*** used in
;; (find-file "~/INI/org-cfg.el")
*** src
#+begin_src elisp
;; * ORG BRAIN CUSTOMIZATION
;; ** org-brain use-package: 
(use-package org-brain :ensure t
;; *** :init : 
  :init
;; **** org-brain-path : 
;; 2 Configure org-brain-path (defaults to /brain in your org-directory) to a directory
;;  where you want to put your org-brain files (which could be the location where you
;;  already keep your org files if you wish to transform your existing org files into
;;  org-brain files). You can set this with the example config presented above or
;;  through M-x customize-group RET org-brain.
  (setq org-brain-path "~/Dropbox/orgs/org-Brain")
;; ****  Evil : 
;; For Evil users
;; 3 If you’re an evil user, you’ll want to add (evil-set-initial-state
;;  'org-brain-visualize-mode 'emacs) to your org-brain configuration.
  ;; (with-eval-after-load 'evil
  ;;   (evil-set-initial-state 'org-brain-visualize-mode 'emacs))
;; *** :config : 
  :config
;; **** bind-key : 
;; 5 org-brain-prefix-map can be bound to a key to make org-brain commands more
;;  accessable if you edit entries from org-mode. See Editing from org-mode under
;;  Usage below.
  (bind-key "C-c b" 'org-brain-prefix-map org-mode-map)
  (define-key org-brain-visualize-mode-map (kbd "M-f") 'avy-goto-word-1)
  (define-key org-brain-visualize-mode-map (kbd "S-C-<return>")
    '(lambda() (interactive)
      (push-button)
      (org-brain-goto-current) 
      (let (buffer-name-to-close (buffer-name))
      (evil-quit)
      (switch-to-buffer-other-frame buffer-name-to-close))))
  (define-key org-brain-visualize-mode-map (kbd "C-<return>")
    '(lambda() (interactive)
        (push-button)
        (org-brain-goto-current) 
        (let (buffer-name-to-close (buffer-name))
        (evil-quit)
        (org-brain-visualize-back)
        (switch-to-buffer-other-frame buffer-name-to-close))))
;; *org-brain*

;; **** org-id : 
;; 4 org-brain use org-id in order to speed things up. Because of this, the variable
;;  org-id-track-globally should be t (which it already is by default). You may want to
;;  modify org-id-locations-file too. If you add entries to org-brain directly from
;;  org-mode you must assign headliens an ID. A comfortable way to do this is with
;;  the command org-brain-ensure-ids-in-buffer. Even more comfortable is to add that
;;  to before-save-hook, so that it runs when saving.
  (setq org-id-track-globally t)
  (setq org-id-locations-file "~/Dropbox/orgs/org-Brain/.org-id-locations")
  ;; (add-hook 'before-save-hook #'org-brain-ensure-ids-in-buffer)
;; **** org-capture-templates : 
;; 6 You might want to add information at the end of an entry, without visiting the file. A
;;  way to do this is to use a capture template, such as the one presented above.
  (push '("b" "Brain" plain (function org-brain-goto-end)
          "* %i%?" :empty-lines 1)
        org-capture-templates)
;; **** org-brain-visualize : 
;; 7 If you have a lot of entries, it might take some time to gather information about all
;;  entries when using org-brain-visualize. You could change the value of
;;  org-brain-visualize-default-choices (which is =’all= by default) to only include files,
;;  or even just files in the direct root of org-brain-path.
;; 8 If you feel that org-brain-visualize is too cluttered, you may want to set
;;  org-brain-show-resources and/or org-brain-show-text to nil.
  ;; (setq org-brain-visualize-default-choices 'all)
  (setq org-brain-title-max-length 23)
;; 9 If you have very long entry names, org-brain-visualize may take a lot of horizontal
;;  space. You can cap the shown length of entry titles, by setting
;;  org-brain-title-max-length.
;; **** entries and file entries : 
;; 10 Some users find it confusing having both headline entries and file entries (see
;;  below). It may be preferable to only use headline entries, by setting
;;  org-brain-include-file-entries to nil. If doing this, you should probably also set
;;  org-brain-file-entries-use-title to nil. Another possibility is if you’re only using file
;;  entries, in which case you can set org-brain-scan-for-header-entries to nil.
  ;; (setq org-brain-include-file-entries nil
  ;;       org-brain-file-entries-use-title nil)
;; *** end use-package : 
  )

;; ** polymode use-package: 
;; Allows you to edit entries directly from org-brain-visualize
;; (use-package polymode
;;   :config
;;   (add-hook 'org-brain-visualize-mode-hook #'org-brain-polymode))
;; 11 polymode is a package (available on MELPA) which allows for several
;;  major-modes in the same buffer. If you have required the package you can use
;;  M-x org-brain-polymode inside org-brain-visualize, or (as in the example above)
;;  add org-brain-polymode to org-brain-visualize-mode-hook.


#+end_src
** INI/ORG/graph-tools-cfg.el
:PROPERTIES:
:header-args: :tangle INI/ORG/graph-tools-cfg.el
:END:
*** описание

*** used in
;; (find-file "~/INI/org-cfg.el")
*** src
#+begin_src elisp
;; * PLANTUML MODE
;; ** plantuml use-package: 
(use-package plantuml-mode :ensure t
;; *** :init :
  ;; :init
;; *** :config :
  :config
  (setq org-plantuml-jar-path 
    (expand-file-name "~/AddApps/plantuml/plantuml.jar"))
  (setq plantuml-jar-path "~/AddApps/plantuml/plantuml.jar")
  (setq plantuml-default-exec-mode 'jar)
  ;; (setq plantuml-output-type "txt")
  (add-to-list 'org-src-lang-modes '("plantuml" . plantuml))
  (org-babel-do-load-languages 
    'org-babel-load-languages 
    '((plantuml . t)))
  (define-key plantuml-mode-map (kbd "<f8>") '(lambda() (interactive)
          (save-some-buffers 'no-confirm)
          (org-save-all-org-buffers)
          (evil-normal-state)
          (plantuml-preview 1)))        
  (add-to-list 'auto-mode-alist '("\\.plantuml\\'" . plantuml-mode))
;; *** end use-package :
  )

;; *** --------------------------------------

;; * GRAPHVIZ-DOT
;; ** GRAPHVIZ DOT MODE:
(use-package graphviz-dot-mode :ensure t
;; *** :init :
  ;; :init
;; *** :config :
  :config
    (setq graphviz-dot-indent-width 4)
    (setq graphviz-dot-dot-program (expand-file-name  "~/AddApps/Graphviz/bin/dot.exe"))
;; *** end use-package :
  )

;; *** --------------------------------------

;; ** ORG BABEL OB-DOT:
;; (add-to-list 'load-path "~/ELs/Org/Babel/ob-dot.el")
(use-package ob-dot
;; *** :ensure :
  ;; :ensure t
;; *** :init :
  ;; :init
  ;; (add-to-list 'load-path "~/ELs/Org/Babel/ob-dot.el")
;; *** :disabled : 
  ;; :disabled
;; *** :load-path:
  ;; :load-path "ELs/Org/Babel/ob-dot.el"
  :load-path "ELs/Org/Babel/"
;; *** :config :
  :config
  (org-babel-do-load-languages
      'org-babel-load-languages
      '((dot . t)))
;; *** end use-package :
  )

;; *** --------------------------------------

;; ** COMPANY GRAPHVIZ DOT:
(use-package company-graphviz-dot
  :disabled
  :ensure t)
;;  --------------------------------------
;; * DITAA MODE
(use-package ob-ditaa 
  ;; :init
  :config
  (setq org-ditaa-jar-path "~/AddApps/ditaa/ditaa0_9.jar")
  (org-babel-do-load-languages
    'org-babel-load-languages
    '((ditaa . t))) ; this line activates ditaa
  )
;;  --------------------------------------

;; * ARTIST MODE
(add-hook 'artist-mode-hook (lambda ()
  ;; (local-set-key (kbd "<f1>") 'org-mode)
  (local-set-key (kbd "<f2>") 
    'artist-select-op-pen-line) ; f2 = pen mode
  (local-set-key (kbd "<f3>") 
    'artist-select-op-line)     ; f3 = line
  (local-set-key (kbd "<f4>") 
    'artist-select-op-square)   ; f4 = rectangle
  (local-set-key (kbd "<f5>") 
    'artist-select-op-ellipse)  ; f5 = ellipse
  (local-set-key (kbd "<f6>") 
    'artist-select-op-erase-rectangle)  ; f6 = erase
  (local-set-key (kbd "<f7>") 
    'artist-select-op-spray-can)  ; f7 = spray
  ;; (local-set-key (kbd "C-z") 'undo)
  ))
;; ** --------------------------------------

#+end_src
** TODO INI/ORG/org-roam-cfg.el
:PROPERTIES:
:header-args: :tangle INI/ORG/org-roam-cfg.el
:END:
*** описание

*** used in
;; (find-file "~/.archemacs/INI/org-cfg.el")
*** src
#+begin_src elisp
;; * ORG-ROAM CUSTOMIZATION
;; --------------------------------------
;; Org-Roam basic configuration
;; (setq org-directory (concat (getenv "HOME") "/Documents/notes/"))
;;  D:\Development\lisp\Dropbox\orgs\Org-roam\default 
;;  D:/Development/lisp/Dropbox/orgs/Org-roam/default 
(use-package org-roam
  ;; :disabled
  :ensure t
  :after org
  :init (setq org-roam-v2-ack t) ;; Acknowledge V2 upgrade
  :custom
  ;; (org-roam-directory (file-truename org-directory))
  ;; (org-roam-directory (file-truename "D:/Development/lisp/Dropbox/orgs/Org-roam/default/"))
  (org-roam-directory (file-truename "~/Dropbox/orgs/Org-roam/default/"))
  :config
  (org-roam-setup)
  ;; If you're using a vertical completion framework, you might want a more informative completion interface пологаю 10 максимальное количство символо для тагов - можно убрать
  (setq org-roam-node-display-template (concat "${title:*} " (propertize "${tags:10}" 'face 'org-tag)))
  ;; (require 'dendroam)
  ;; (org-roam-db-autosync-mode)
  ;; If using org-roam-protocol
  ;; (require 'org-roam-protocol)
  :bind ( ("C-c n f" . org-roam-node-find)
          ("C-c n l" . org-roam-buffer-toggle)
          ("C-c n c" . org-roam-capture)
          ("C-c n j" . org-roam-dailies-capture-today)
          (:map org-mode-map
                (("C-c n i" . org-roam-node-insert)
                ("C-c n o" . org-id-get-create)
                ("C-c n t" . org-roam-tag-add)
                ("C-c n g" . org-roam-graph)
                ;; ("C-c n r" . org-roam-node-random)       
                ("C-c n a" . org-roam-alias-add)))))


;; --------------------------------------
;; * ORG-ROAM-UI CUSTOMIZATION
(use-package org-roam-ui
  :ensure t
  ;; :disabled
  ;; :straight
  ;;   (:host github :repo "org-roam/org-roam-ui" :branch "main" :files ("*.el" "out"))
  ;; :demand t
  ;; :after org-roam
;;         normally we'd recommend hooking orui after org-roam, but since org-roam does not have
;;         a hookable mode anymore, you're advised to pick something yourself
;;         if you don't care about startup time, use
  ;; запускается сервер сразу с имаком
  ;; :hook (after-init . org-roam-ui-mode)
  :config
  (setq 
        ;; Org-Roam-UI can sync your Emacs theme! This is the default behavior, to disable it do
        ;; org-roam-ui-sync-theme t
        org-roam-ui-sync-theme nil
        ;; ORUI follows you around Emacs by default. To disable this, set
        ;; org-roam-ui-follow nil
        org-roam-ui-follow t
        ;; By default, org-roam-ui will try to open itself in your default browser. To disable this, set
        org-roam-ui-open-on-start nil
        org-roam-ui-update-on-save t))
;; Usage
;; Use M-x org-roam-ui-mode RET to enable the global mode. It will start a web server on http://127.0.0.1:35901/ and connect to it via a WebSocket for real-time updates.
;; --------------------------------------
;; * DENDROAM CUSTOMIZATION
;; ** use-package : 
(use-package dendroam
  :quelpa (dendroam :repo "vicrdguez/dendroam" :fetcher github)
  :ensure t
  :after org-roam
  ;; :demand t
;; ** config : 
  :config
  (setq org-roam-node-display-template "${hierarchy}:${title}")
  ;; (setq org-roam-node-display-template
  ;;      (concat "${hierarchy}:${title}" (propertize "${tags}" 'face 'org-tag)))
  (setq org-roam-capture-templates
        '(("d" "default" plain
          "%?"
          :if-new (file+head "${slug}.org"
                              "#+title: ${hierarchy-title}\n")
          :immediate-finish t
          :unnarrowed t)))
  ;; :after org-roam
  ;; dailies : 
  ;; (setq org-roam-dailies-capture-templates
  ;;      '(("d" "default" entry
  ;;        "* %?"
  ;;        :if-new (file+head "journal.daily.%<%Y.%m.%d>.org"
  ;;                            "#+title: %<%Y-%m-%d>\n"))))
  ;; "Scratch note"
  ;; (setq dendroam-capture-templates
  ;;      '(("t" "Time note" entry
  ;;        "* %?"
  ;;        :if-new (file+head "${current-file}.%<%Y.%m.%d>.org"
  ;;                            "#+title: %^{title}\n"))
  ;;        ("s" "Scratch note" entry
  ;;        "* %?"
  ;;        :if-new (file+head "scratch.%<%Y.%m.%d.%.%M%S%3N>.org"
  ;;                            "#+title: %^{title}\n"))))
;; ** defun : 
  (defun dendroam-node-find-initial-input ()
    (interactive)
    (require 'org-roam)
    (require 'dendroam)
    (org-roam-node-find nil (if (buffer-file-name)
                          (file-name-base (buffer-file-name))
                          "")))
;; ** defun FIX : 
(cl-defmethod org-roam-node-slug ((node org-roam-node))
  "Return the slug of NODE."
  (let ((title (org-roam-node-title node))
        (slug-trim-chars '(;; Combining Diacritical Marks https://www.unicode.org/charts/PDF/U0300.pdf
                           768 ; U+0300 COMBINING GRAVE ACCENT
                           769 ; U+0301 COMBINING ACUTE ACCENT
                           770 ; U+0302 COMBINING CIRCUMFLEX ACCENT
                           771 ; U+0303 COMBINING TILDE
                           772 ; U+0304 COMBINING MACRON
                           774 ; U+0306 COMBINING BREVE
                           775 ; U+0307 COMBINING DOT ABOVE
                           776 ; U+0308 COMBINING DIAERESIS
                           777 ; U+0309 COMBINING HOOK ABOVE
                           778 ; U+030A COMBINING RING ABOVE
                           779 ; U+030B COMBINING DOUBLE ACUTE ACCENT
                           780 ; U+030C COMBINING CARON
                           795 ; U+031B COMBINING HORN
                           803 ; U+0323 COMBINING DOT BELOW
                           804 ; U+0324 COMBINING DIAERESIS BELOW
                           805 ; U+0325 COMBINING RING BELOW
                           807 ; U+0327 COMBINING CEDILLA
                           813 ; U+032D COMBINING CIRCUMFLEX ACCENT BELOW
                           814 ; U+032E COMBINING BREVE BELOW
                           816 ; U+0330 COMBINING TILDE BELOW
                           817 ; U+0331 COMBINING MACRON BELOW
                           )))
    (cl-flet* ((nonspacing-mark-p (char) (memq char slug-trim-chars))
               (strip-nonspacing-marks (s) (string-glyph-compose
                                            (apply #'string
                                                   (seq-remove #'nonspacing-mark-p
                                                               (string-glyph-decompose s)))))
               (cl-replace (title pair) (replace-regexp-in-string (car pair) (cdr pair) title)))
      (let* ((pairs `(("[^[:alnum:][:digit:]\\.]" . "_") ;; convert anything not alphanumeric
                      ("__*" . "_")                   ;; remove sequential underscores
                      ("^_" . "")                     ;; remove starting underscore
                      ("_$" . "")))                   ;; remove ending underscore
             (slug (-reduce-from #'cl-replace (strip-nonspacing-marks title) pairs)))
        (downcase slug)))))

;; ** bind : 
  :bind (("C-c n F" . dendroam-node-find-initial-input))
;; **   ) : 
  )
;; --------------------------------------
#+end_src

* **Работа с файлами и менеджмент**
** описание
   Конфиги для управления файлами, поиска и т.п.  
** INI/file-mng-cfg.el
:PROPERTIES:
:header-args: :tangle INI/file-mng-cfg.el
:END:
*** описание

*** used in
;; (find-file "~/.archemacs/INI/init.el")
*** src
#+begin_src elisp
;; * FILE-MANAGEMENT-MODs CUSTOMIZATION
;; --------------------------------------
;; ** RANGER-MOD CUSTOMIZATION
(use-package ranger
  :ensure t
  :defer t
  ;; :config
  :bind (:map ranger-mode-map
              ("r r" . ranger-refresh)
              ("M-f" . avy-goto-word-1)
              ("g g" . ranger-goto-top)
              ("G G" . ranger-goto-bottom)
              ("Z F F" . find-file-other-frame)
              ("Z D D" . mkdir)
              ("Z F I" . (lambda() (interactive)
                           (find-file-other-frame
                            (expand-file-name
                             "INI/file-mng-cfg.el"
                             user-emacs-directory))))
              ))

;; --------------------------------------
;; ** DIRED-MOD CUSTOMIZATION
(use-package dired
 ;; :config
  )
;; --------------------------------------
;; * GITS-MODs CUSTOMIZATION
;; --------------------------------------
;; ** MAGIT-MOD CUSTOMIZATION
(use-package magit
  :ensure t
  :defer t
  :bind (:map magit-status-mode-map
              ("M-z M-z" . (lambda() (interactive)
                            (setq buyn-magit-buff-name (buffer-name))
                            (bury-buffer)))
              ("n n" . (lambda() (interactive)
                            (setq buyn-magit-buff-name (buffer-name))
                            (bury-buffer)))
              ("n f i" . (lambda() (interactive)
                           (find-file-other-frame
                            (expand-file-name
                             "INI/file-mng-cfg.el"
                             user-emacs-directory))))

              ("J J" . magit-display-repository-buffer)
              ("J j" . magit-status-jump)
              ("j" . magit-section-forward)

              ("K K" . magit-file-untrack)
              ("K k" . magit-discard)
              ("k" . magit-section-backward)

              ("p" . magit-push)

              ;; ("<F9> m m" .
              ("M-z M-m" .
               (lambda() (interactive)
                 (magit-git-command
                  "git checkout master;git merge experemental;git push;git checkout experemental")))
              ))
;; --------------------------------------
#+end_src
** ELs/BuYn/shell.el
:PROPERTIES:
:header-args: :tangle ELs/BuYn/shell.el
:END:
*** описание

*** used in
;; (find-file "~/.archemacs/INI/init.el")
*** src
#+begin_src elisp
;; * BUYN's ELISP DEFUNS
;; --------------------------------------
;; ** varibls
;; (setq path-to-emagus-cmd "d:/Development/lisp/Emacs/bin/runemacs.exe") 
(setq path-to-emagus-cmd "D:/Development/lisp/Home/emacs_Run_home.cmd") 
(setq path-to-far "D://shell//FAR//Far.exe")
(setq path-to-emagus-client "d:/Development/lisp/Emacs/bin/emacsclientw.exe -n -c -a ''") 
(setq path-to-emagus-client-buyn "d:/Development/lisp/Emacs/bin/emacsclientw.exe -n -c -a 'buyn'") 
;; ** functions
;; *** buyn-shell-start :
(defun buyn-shell-start (cmd-params)
  " buyn start new process
    as parametr  
    get comand to execute
    "
  (shell-command
    (concat 
            cmd-params
            " &")))

;; *** buyn-cmd-start :
(defun buyn-cmd-start (cmd-params)
  " buyn start new cmd process
    as parametr  
    get comand to execute
    "
  (shell-command
    (concat "cmd"
            " /c "
            " start "
            cmd-params
            " &")))

;; *** buyn-cmd-start-syn :
(defun buyn-cmd-start-syn (cmd-params)
  " buyn start new cmd process
    as parametr  
    get comand to execute
    "
  (shell-command
    (concat "cmd"
            " /c "
            " start "
            cmd-params
            )
    )
  )

;; *** buyn-far :
(defun buyn-far (cmd-params)
  " buyn start new cmd process
    as parametr  
    get comand to execute
    "
  (buyn-cmd-start
    (concat path-to-far
            " "
            cmd-params
            ;; " &"
            )
    )
  )

;; *** buyn-start-emagus :
(defun buyn-start-emagus (unix-path-to-file)
  " buyn start new emacs process
    as parametr  
    get file path in unix format
    unix-path-to-file path to file in unix format
    "
  (shell-command
    (concat path-to-emagus-cmd
            " "
            unix-path-to-file
            " &"
            )
    )
  )

;; *** buyn-start-emagus-win : 
(defun buyn-start-emagus-win (win-path-to-file)
   "  buyn start new emacs process
    as parametr  
    get file path in Windos format
    win-path-to-file path to file in unix format
    "
    ;; (message (replace-regexp-in-string "/" (regexp-quote "\\") win-path-to-file t t))
(buyn-start-emagus
  ;; (message 
 (replace-regexp-in-string "\\\\" "/" win-path-to-file t t)
 )
    ;; (message (replace-regexp-in-string "\\\\" "/" win-path-to-file t t ))
;; (replace-regexp-in-string "/" "\\" path t t)
    ;; (replace-string "f" win-path-to-file)
    ;; (message win-path-to-file)
    )

;; * BUYN's ELISP DEFUNS
;; --------------------------------------
;; ** send-region-to-eshell-buffer-and-execute:
(defun send-region-to-eshell-buffer-and-execute(start end );&optional INTERCT
  " Make the custom function interactive and operative on a region
    prepend to the buffer named *eshell*
    switches to the buffer
    and execute-kbd-macro for enter C-m
    switches back to start buffe
    "
  (interactive "r") 
  (let ((buffer-name-to-back (buffer-name)))
      (prepend-to-buffer (get-buffer "*eshell*") start end)
      (switch-to-buffer-other-frame (get-buffer "*eshell*"))
      ;; (evil-insert-state)
      (execute-kbd-macro "\C-m")
      (switch-to-buffer-other-frame buffer-name-to-back)))
;; ** send-activ-line-to-eshell-buffer-and-execute:
(defun send-activ-line-to-eshell-buffer-and-execute()
  " Make the custom function interactive
    evaluet send-region-to-eshell-buffer-and-execute
    with region as from start to end line "
  (interactive) 
  (call-interactively
    (send-region-to-eshell-buffer-and-execute (line-beginning-position) (line-beginning-position 2))))

#+end_src
* **Литературное и текстовые задачи**
** описание
   Чтение текстов, работа с переводами, tts, `read-aloud`.  
** INI/lit-cfg.el
:PROPERTIES:
:header-args: :tangle INI/lit-cfg.el
:END:
*** описание

*** used in
;; (find-file "~/.archemacs/INI/init.el")
*** src
#+begin_src elisp
;; * LITERARY-MOD CUSTOMIZATION 
;; --------------------------------------
;; ** LOAD TRANSLATE-MOD CUSTOMIZATION 
;; (find-file "~/.archemacs/INI/translate-cfg.el")
;; (find-file-other-frame "~/.archemacs/INI/translate-cfg.el") 
;; (load "~/.archemacs/INI/translate-cfg.el")
(load (expand-file-name "INI/translate-cfg.el" user-emacs-directory))
;; --------------------------------------
;; ** LOAD GRAMMER-MOD CUSTOMIZATION 
;; (find-file-other-frame "~/.archemacs/INI/lit-cfg/grammer-cfg.el") 
;; (load "~/.archemacs/INI/lit-cfg/grammer-cfg.el")
(load (expand-file-name "INI/lit-cfg/grammer-cfg.el" user-emacs-directory))
;; ** LOAD READ-ALOUD-MOD CUSTOMIZATION 
;; (find-file-other-frame "~/.archemacs/INI/lit-cfg/read-aloud-cfg.el") 
;; (load "~/.archemacs/INI/lit-cfg/read-aloud-cfg.el")
(load (expand-file-name "INI/lit-cfg/read-aloud-cfg.el" user-emacs-directory))
;; --------------------------------------
;; ** LOAD READERS MODS CUSTOMIZATION 
;; (find-file-other-frame "~/.archemacs/INI/lit-cfg/reader-cfg.el")
;; (load "~/.archemacs/INI/lit-cfg/reader-cfg.el")
(load (expand-file-name "INI/lit-cfg/reader-cfg.el" user-emacs-directory))
;; --------------------------------------
;; * LOAD BUYN's ELISP DEFUNS
;; (find-file-other-frame "~/.archemacs/ELs/BuYn/reader.el")
;; (load "~/.archemacs/ELs/BuYn/reader.el")
(load (expand-file-name "ELs/BuYn/reader.el" user-emacs-directory))
;; --------------------------------------

#+end_src
** INI/advnsed-selections-cfg.el
:PROPERTIES:
:header-args: :tangle INI/advnsed-selections-cfg.el
:END:
*** описание

*** used in
;; (find-file "~/.archemacs/INI/init.el")
*** src
#+begin_src elisp
;; * ADVNSED SELECTIONS CUSTOMIZATION
;; --------------------------------------
;; * expand-region cfg
;; ** use-package expand-region 
(use-package expand-region :ensure t
;; ** expand-region config
  :config
;; *** hydra-expand-region
;; **** defhydra
  (defhydra hydra-expand-region
  ;; (:color blue)
  (:body-pre 'er/expand-region)
  "expand-region"
;; ****  key list
  ("C-=" er/expand-region "more")
  ("=" er/expand-region "more")
  ("m" er/expand-region "more")
  ("SPC" er/expand-region "more")
  ("-" er/contract-region "less")
  ("l" er/contract-region "less")
  ("S-SPC" er/contract-region "less")
  ("C--" er/contract-region "less")
  ("w" er/mark-word "wrd")
  ("s" er/mark-symbol "smbl")
  ;; ("=" er/mark-symbol-with-prefix "more")
  ;; ("=" er/mark-next-accessor "more")
  ("f" er/mark-method-call "methd")
  ("'" er/mark-inside-quotes "iq")
  ("\"" er/mark-outside-quotes "oq")
  ("(" er/mark-inside-pairs "i(")
  (")" er/mark-outside-pairs "o)")
  (";" er/mark-comment ";")
  ("u" er/mark-url "url")
  ;; ("=" er/mark-email "more")
  ("d" er/mark-defun "def")
;; ****  END )
  )
;; **** Bind
(global-set-key (kbd "C-=") 'hydra-expand-region/body)
(define-key evil-visual-state-map (kbd "SPC") 'hydra-expand-region/body)
(define-key evil-normal-state-map "zv" 'hydra-expand-region/body)
;; *** binds
;; (global-set-key (kbd "C-=") 'er/expand-region)
;; ** END of use-package outshine 
  )
;; ** -------------------------------------- }}}


;; * evil-mc cfg
;; ** use-package evil-mc 
(use-package evil-mc :ensure t
;; ** evil-mc config
  :disabled
  :config
  (global-evil-mc-mode  1) ;; enable
  (define-key evil-visual-state-map "zi" 'evil-mc-make-cursor-in-visual-selection-end)
   ;; (define-key evil-visual-state-map "zj" 'evil-mc-make-cursor-move-next-line)
   ;; (define-key evil-visual-state-map "zk" 'evil-mc-make-cursor-move-prev-line)
   ;; (define-key evil-visual-state-map "zn" 'evil-mc-skip-and-goto-next-match)
   ;; (define-key evil-visual-state-map "zp" 'evil-mc-skip-and-goto-prev-match)
   ;; (define-key evil-visual-state-map "zN" 'evil-mc-skip-and-goto-next-cursor)
   ;; (define-key evil-visual-state-map "zP" 'evil-mc-skip-and-goto-prev-cursor)
   (define-key evil-visual-state-map "zo" 'evil-mc-make-all-cursors)
   (define-key evil-visual-state-map "zI" 'evil-mc-make-cursor-in-visual-selection-beg)
   (define-key evil-visual-state-map "zq" 'evil-mc-undo-all-cursors)
;; ** END of use-package outshine 
  )
;; ** -------------------------------------- 


#+end_src
** INI/translate-cfg.el
:PROPERTIES:
:header-args: :tangle INI/translate-cfg.el
:END:
*** описание

*** used in
;; (find-file "~/INI/lit-cfg.el")
;; (find-file-other-frame "~/INI/lit-cfg.el") 
*** src
#+begin_src elisp
;; * TRANSLATE-MOD CUSTOMIZATION 
;; *** ob-translate
;; **** use-package ob-translate 
(use-package popup :ensure t)
(use-package ob-translate :ensure t
  ;; (package-refresh-contents)
  ;; :init
  :config
  (add-to-list 'org-babel-load-languages '(translate . t))
  (org-babel-do-load-languages 'org-babel-load-languages org-babel-load-languages)
  ;; add translate special block into structure template alist.
  ;; (add-to-list 'org-structure-template-alist '("t" . "src translate"))
  ;; (add-to-list 'org-structure-template-alist '("tr" . "src translate :dest ru"))
  (add-to-list 'org-structure-template-alist '("t" "#+BEGIN_SRC translate ? \n\n#+END_SRC\n"))
  (add-to-list 'org-structure-template-alist '("tr" "#+BEGIN_SRC translate :dest ru ? \n\n#+END_SRC\n"))
  )
;; **** --------------------------------------
;; *** google-translate
;; **** use-package google-translate
(use-package google-translate
  :ensure t
  :custom
  (google-translate-backend-method 'emacs)
  :config
  (require 'google-translate-smooth-ui)
  (setq google-translate-translation-directions-alist
        '(("ru" . "en") ("en" . "ru") ("ru" . "uk")))
  (setq google-translate-output-destination nil)
  (setq google-translate-pop-up-buffer-set-focus t)
  (setq google-translate-default-source-language "ru")
  (setq google-translate-default-target-language "en")
  ;; (global-set-key "\C-ct" 'google-translate-smooth-translate)
  (define-key evil-normal-state-map (kbd "M-a M-l M-o") 'google-translate-smooth-translate)
  (define-key evil-normal-state-map (kbd "M-a M-l M-l") 'google-translate-at-point)
  (define-key evil-normal-state-map (kbd "M-a M-l M-j") 'google-translate-at-point)
  (define-key evil-normal-state-map (kbd "M-a M-l M-k") 'google-translate-at-point-reverse)
  (defun google-translate--search-tkk () "Search TKK." (list 430675 2721866130)))
;; **** --------------------------------------
;; *** go-translate
;; **** use-package go-translate
(use-package go-translate :ensure t
  ;; :init
  :disabled
  :config
  (setq go-translate-local-language "ru")
  (setq go-translate-target-language "en")
  (defun google-translate--search-tkk () "Search TKK." (list 430675 2721866130))
  )
;; **** --------------------------------------
#+end_src
** INI/lit-cfg/grammer-cfg.el
:PROPERTIES:
:header-args: :tangle INI/lit-cfg/grammer-cfg.el
:END:
*** описание

*** used in
;; (find-file "~/INI/lit-cfg.el")
;; (find-file-other-frame "~/INI/lit-cfg.el") 
*** src
#+begin_src elisp
;; * GRAMMER-MOD CUSTOMIZATION 
;; *** ispell
;; (setq ispell-program-name "~/AddApps/hunspell-1.3.2-3-w32-bin/bin/hunspell.exe")   
;; **** use-package  
(use-package ispell   
  :config   
  ;; :init
    ;; (setq ispell-program-name "~/AddApps/hunspell-1.3.2-3-w32-bin/bin/hunspell.exe")   
    ;; (setq ispell-program-name "D:/Development/lisp/HOME/AddApps/hunspell-1.3.2-3-w32-bin/bin/hunspell.exe")   
  )
#+end_src
*** Docs
**** exempls
;; (use-package ispell   
;;  :config   
;;    (setq ispell-program-name "C:/Program Files (x86)/hunspell-1.3.2-3-w32-bin/bin/hunspell.exe")   
;;    (setq ispell-local-dictionary "en_US")    
;;    (setq ispell-local-dictionary-alist       
;;      '(("en_US" "[[:alpha:]]" "[^[:alpha:]]" "[']" nil ("-d" "en_US") nil utf-8)))
;;  )

**** Commands
;; (ispell)  to run check
;; (ispell-change-dictionary) to RU
** INI/lit-cfg/read-aloud-cfg.el
:PROPERTIES:
:header-args: :tangle INI/lit-cfg/read-aloud-cfg.el
:END:
*** описание

*** used in
;; (find-file "~/INI/lit-cfg.el")
;; (find-file-other-frame "~/INI/lit-cfg.el") 
*** src
#+begin_src elisp
;; * READ-ALOUD-MOD CUSTOMIZATION 
;; *** load
;; (find-file-other-frame "~/INI/lit-cfg/read-aloud-cfg.el") 
;; (load "~/ELs/text-to-speech/read-aloud/read-aloud.el")
;; *** use-package read-aloud : 
;; (add-to-list 'load-path "~/ELs/text-to-speech/read-aloud")
(use-package read-aloud
  :defer t
  :load-path "ELs/text-to-speech/read-aloud"
  ;; :ensure t
;; *** :config : 
  :config
;; **** plist read-aloud-engines : 
;; ***** ru : 
;; ****** elena : 
(lax-plist-put read-aloud-engines "bal.ru.elena"
  '(cmd "~/AddApps/balcon/balcon.exe"
    args ( "-n" "Elena" "-i" "-enc" "utf8")))
;; ****** Alyona22k : 
(lax-plist-put read-aloud-engines "bal.ru.Alyona22k"
  '(cmd "~/AddApps/balcon/balcon.exe"
    args ( "-n" "Alyona22k" "-i" "-enc" "utf8")))
;; ****** anna : 
(lax-plist-put read-aloud-engines "bal.ru.anna"
  '(cmd "~/AddApps/balcon/balcon.exe"
    args ( "-n" "RHVoice Anna" "-i" "-enc" "utf8")))
;; ****** Irina : 
(lax-plist-put read-aloud-engines "bal.ru.Irina"
  '(cmd "~/AddApps/balcon/balcon.exe"
    args ( "-n" "Irina" "-i" "-enc" "utf8")))
;; ****** Katerina : 
(lax-plist-put read-aloud-engines "bal.ru.Katerina"
  '(cmd "~/AddApps/balcon/balcon.exe"
    args ( "-n" "Katerina" "-i" "-enc" "utf8")))
;; ****** Tatyana : 
(lax-plist-put read-aloud-engines "bal.ru.Tatyana"
  '(cmd "~/AddApps/balcon/balcon.exe"
    args ( "-n" "Tatyana" "-i" "-enc" "utf8")))
;; ****** Milena : 
(lax-plist-put read-aloud-engines "bal.ru.Milena"
  '(cmd "~/AddApps/balcon/balcon.exe"
    args ( "-n" "Milena" "-i" "-enc" "utf8")))
;; ***** ua : 
;; ******  Natalia : 
(lax-plist-put read-aloud-engines "bal.ua.Natalia"
  '(cmd "~/AddApps/balcon/balcon.exe"
    args ( "-n" "Natalia" "-i" "-enc" "utf8")))
;; ***** en : 
;; ****** Slt : 
(lax-plist-put read-aloud-engines "bal.en.Slt"
  '(cmd "~/AddApps/balcon/balcon.exe"
    args ( "-n" "Slt" "-i" "-enc" "utf8")))
;; ****** Bdl : 
(lax-plist-put read-aloud-engines "bal.en.Bdl"
  '(cmd "~/AddApps/balcon/balcon.exe"
    args ( "-n" "Bdl" "-i" "-enc" "utf8")))
;; ****** Clb : 
(lax-plist-put read-aloud-engines "bal.en.Clb"
  '(cmd "~/AddApps/balcon/balcon.exe"
    args ( "-n" "Clb" "-i" "-enc" "utf8")))

;; ****** Heather
  (lax-plist-put read-aloud-engines "bal.en.Heather"
    '(cmd "~/AddApps/balcon/balcon.exe"
      args ( "-n" "Heather" "-i" "-enc" "utf8")))
;; ****** Lucy
(lax-plist-put read-aloud-engines "bal.en.Lucy"
  '(cmd "~/AddApps/balcon/balcon.exe"
      args ( "-n" "Lucy" "-i" "-enc" "utf8")))
;; ****** Jane22k
(lax-plist-put read-aloud-engines "bal.en.Jane"
  '(cmd "~/AddApps/balcon/balcon.exe"
      args ( "-n" "Jane" "-i" "-enc" "utf8")))
;; ****** jampal.en : 
  (lax-plist-put read-aloud-engines "jampal.en"
    '(cmd "cscript"
          args ("D:\\Development\\lisp\\Home\\AddApps\\Jampal\\ptts.vbs" "-r" "1")))
;; **** setq read-aloud-engine : 
;; (setq read-aloud-engine "jampal.en"))
;; (setq read-aloud-engine "balcon.ru")
;; (setq read-aloud-engine "bal.en.Slt")
  (setq read-aloud-engine "bal.en.Lucy")
;; *** ===========END========= ) : 
  )
;; ** Docs
;; *** Usage 
;; M-x read-aloud-this -- pronounce either the selection or a word under the pointer.
;; M-x read-aloud-buf -- read the buffer starting from the current cursor position, highlighting the text as it moves down the buffer. Useful only for plain text files.
;; top reading at any time you either run any of the commands above again, or do M-x read-aloud-stop.
;; M-x read-aloud-change-engine -- select another engine (for this Emacs session). It also shows which one is the current.
#+end_src
** INI/lit-cfg/reader-cfg.el
:PROPERTIES:
:header-args: :tangle INI/lit-cfg/reader-cfg.el
:END:
*** описание

*** used in
;; (find-file "~/INI/lit-cfg.el")
;; (find-file-other-frame "~/INI/lit-cfg.el") 
*** src
#+begin_src elisp
;; * READERS MODS CUSTOMIZATION 
;; ** fb2-mode
;; *** load
;; (add-to-list 'load-path "~/ELs/Readers/fb2-mode/")
;; (add-to-list 'load-path (expand-file-name "ELs/Readers/fb2-mode/" user-emacs-directory))
;; https://github.com/spline1986/fb2-mode
;; https://github.com/spline1986/fb2-mode.git
;; *** use-package fb2-mode : 
(use-package fb2-mode
  ;; :defer t
  ;; :ensure t
  ;; :disabled
  ;; :load-path "~/ELs/Readers/fb2-mode"
  :load-path "ELs/Readers/fb2-mode/"
  ;; :init
  ;; :load-path (expand-file-name "ELs/Readers/fb2-mode/" user-emacs-directory)
;; (find-file (expand-file-name "ELs/Readers/fb2-mode" user-emacs-directory))

;; *** :config : 
  :config
(add-to-list 'auto-mode-alist '("\\.fb2\\'" . fb2-mode))
(add-to-list 'auto-mode-alist '("\\.fb\\'" . fb2-mode))

;; (define-key fb2-mode-map (kbd "<f9>") 'read-aloud-stop)
;; (define-key fb2-mode-map (kbd "SPC") 'buyn-reader-go)
;; (define-key fb2-mode-map (kbd "S-SPC") 'evil-scroll-up)

;; (add-hook 'fb2-mode-hook #'toggle-word-wrap)
;; *** auto-mode-alist:
  ;; :mode (("\\.fb2\\'" "\\.fb\\'" ) . fb2-mode)
  ;; :mode ("\\.fb2\\'" "\\.fb\\'")
  ;; :mode
  ;; ("\\.fb2\\'" . fb2-mode)
  ;; :interpreter "fb2-mode"

;; *** ===========END========= ) : 
  )
;; *** Docs
 ;; https://github.com/spline1986/fb2-mode
 ;; Screenshot
 ;; Installation
 ;; fb2-show-images — if not nil then images in book will displayed (default t).
 ;; fb2-images-height — height of images in fb2-mode buffer (default 500).
 ;; fb2-replace-hard-spaces — if not nil then non-breaking spaces will replaced by spaces (default nil).
;; ** nov.el
;; *** use-package esxml-query : 
;; (use-package esxml-query
  ;; :defer t
  ;; :ensure t
  ;; :disabled
;; )

;; *** use-package nov.el : 
(use-package nov
  :defer t
  ;; :ensure t
  ;; :disabled
  ;; :load-path "~/ELs/Readers/nov.el/"
  :load-path "ELs/Readers/nov.el/"
  ;; :init
;; *** :config : 
  :config
  (add-to-list 'auto-mode-alist '("\\.epub\\'" . nov-mode))
  ;; :mode ("\\.epub\\'" . nov-mode)
;; *** ===========END========= ):
  )
;; *** Docs
;; git clone https://depp.brause.cc/nov.el.git
;; all doc in start mods
#+end_src
** ELs/BuYn/reader.el
:PROPERTIES:
:header-args: :tangle ELs/BuYn/reader.el
:END:
*** описание

*** used in
;; (find-file-other-frame "~/INI/lit-cfg.el")
*** src
#+begin_src elisp
;; * BUYN's ELISP DEFUNS
;; --------------------------------------
;; ** varibls
(setq highlight-start-color '(:background "darkgreen"))
(setq highlight-pointer-color '(:background "blue"))
(setq highlight-stop-color '(:background "darkgreen"))
;; "blue"
;; "lightgreen"
;; "darkgreen"
(setq stop-point 666)
;; --------------------------------------
;; ** functions
;; *** buyn-read-aloud-start :
(defun buyn-read-aloud-start ()
  " Старт озвучки с курсора и установка пробела на стоп команду
    и установка ф8 на активацию читалки
    "
    (interactive)
      (read-aloud-buf)
      (define-key evil-normal-state-map (kbd "SPC")
        'buyn-read-aloud-stop)
      (define-key evil-normal-state-map (kbd "<f8>")
        'buyn-reader-start)
      (message "read-aloud is start"))

;; *** buyn-read-aloud-go :
(defun buyn-read-aloud-go ()
  " Старт озвучки с курсора и установка пробела на стоп команду
    "
    (interactive)
      (read-aloud-buf)
      (define-key evil-normal-state-map (kbd "SPC")
        'buyn-read-aloud-stop))

;; *** buyn-read-aloud-stop :
(defun buyn-read-aloud-stop ()
  " Стop озвучки и установка пробела на старт озвучки
    "
    (interactive)
    (read-aloud-stop)
    (define-key evil-normal-state-map (kbd "SPC")
      'buyn-read-aloud-go))

;; *** buyn-reader-end :
(defun buyn-reader-end ()
  " устанавливает пробел на добовление символа
и отключает плавное движение
    "
    (pixel-scroll-mode -1)
    (setq scroll-preserve-screen-position nil)
    (define-key evil-normal-state-map (kbd "SPC") 
          'khaoos-insert-one-char)
    (message "Reader is off"))
;; *** buyn-reader-start :
(defun buyn-reader-start ()
  " ставит пробел на плавноесть движения
и ф8 на на переключени на озвучку голосом
    "
    (interactive)
  (pixel-scroll-mode 1)
  (setq scroll-preserve-screen-position 1)
  (setq pixel-wait 0.1)
  (define-key evil-normal-state-map (kbd "SPC") 
    'buyn-reader-go)
  (define-key evil-normal-state-map (kbd "S-SPC") 
    'evil-scroll-up

    )

  (define-key evil-normal-state-map (kbd "<f8>") 
    'buyn-read-aloud-start)
  (message "Reader is on"))

;; --------------------------------------
;; *** buyn-reader-stop :
(defun buyn-reader-stop ()
  " 
  останавливает движение
  ставит пробел на плавноесть движения
  и ф8 на на переключени на озвучку голосом
    "
    (interactive)
  (keyboard-quit)
  (message "Reader is stop"))

;; --------------------------------------
;; *** buyn-reader-go :
(defun buyn-reader-go ()
  "ставит пробел на плавноесть движения
и ф8 на на переключени на озвучку голосом
    "
    (interactive)
    (let ((overlay-highlight (make-overlay
                              (point)
                              (+ 1 (point))
                              )))
        ;; (overlay-put overlay-highlight 'face '(:background 'highlight-pointer-color))
        ;; (overlay-put overlay-highlight 'line-highlight-overlay-marker t))
      (highlight-region (point) (+ 1 (point)) highlight-pointer-color)
      (evil-window-bottom)
      ;; (char-after (point-at-bol))
      ;; (highlight-region (line-beginning-position) (+ (line-beginning-position) 21))
      ;; (highlight-region (point) (+ (point) 21))
      ;; (highlight-region (+ (point) stop-point) (+ (point) stop-point 21))
      (highlight-region (point) (+ 1 (point)))
      ;; (highlight-or-dehighlight-char)
      (evil-window-middle)
      (next-line 9)
      ;; (evil-window-bottom)
      (pixel-scroll-pixel-up stop-point)
      ;; (pixel-scroll-mode &optional ARG)
      ))

;; --------------------------------------
;; *** find-overlays-specifying : 
(defun find-overlays-specifying (prop pos)
  (let ((overlays (overlays-at pos))
        found)
    (while overlays
      (let ((overlay (car overlays)))
        (if (overlay-get overlay prop)
            (setq found (cons overlay found))))
      (setq overlays (cdr overlays)))
    found))


;; --------------------------------------
;; *** highlight-or-dehighlight-line : 
(defun highlight-or-dehighlight-line ()
  (interactive)
  (if (find-overlays-specifying
       'line-highlight-overlay-marker
       (line-beginning-position))
      (remove-overlays (line-beginning-position) (+ 1 (line-end-position)))
    (let ((overlay-highlight (make-overlay
                              (line-beginning-position)
                              (+ 1 (line-end-position)))))
        (overlay-put overlay-highlight 'face '(:background "lightgreen"))
        ;; (overlay-put overlay-highlight 'face '(:background highlight-start-color))
        (overlay-put overlay-highlight 'line-highlight-overlay-marker t))))


;;  --------------------------------------
;; *** highlight-or-dehighlight-char : 
(defun highlight-or-dehighlight-char ()
  (interactive)
  (if (find-overlays-specifying
       'line-highlight-overlay-marker
       (line-beginning-position))
      (remove-overlays (position) (+ 1 (position)))
    (let ((overlay-highlight (make-overlay
                              (position)
                              (+ 1 (position)))))
        (overlay-put overlay-highlight 'face '(:background "lightgreen"))
        ;; (overlay-put overlay-highlight 'face '(:background highlight-start-color))
        (overlay-put overlay-highlight 'line-highlight-overlay-marker t))))


;;  --------------------------------------
;; *** highlight-region : 
(defun highlight-region (begin end &optional color)
  (interactive)
    (let ((overlay-highlight (make-overlay
                              begin
                              end)))
        ;; (overlay-put overlay-highlight 'face '(:background "lightgreen"))
        ;; (overlay-put overlay-highlight 'face '(:background "green"))
        ;; (overlay-put overlay-highlight 'face '(:background "blue"))
        (overlay-put overlay-highlight 'face (or color highlight-start-color))
        ;; (overlay-put overlay-highlight 'face (or color '(:background "green")))
        (overlay-put overlay-highlight 'line-highlight-overlay-marker t)
        ))

;;  --------------------------------------
#+end_src
* **Автоматизация и Productivity**
** описание
   Автодополнения, сниппеты и автоматические действия.  
** INI/auto-cfg.el
:PROPERTIES:
:header-args: :tangle INI/auto-cfg.el
:END:
*** описание

*** used in
;; (find-file "~/.archemacs/INI/init.el")
*** src
#+begin_src elisp
;; ** AUTOCOMPLETE-MOD CUSTOMIZATION
;; (find-file-other-frame "~/.archemacs/INI/auto/autocomplete-cfg.el")
(load (expand-file-name "INI/auto/autocomplete-cfg.el" user-emacs-directory))
;; --------------------------------------
;; ** SNIPPETS-MOD CUSTOMIZATION
;; (find-file-other-frame (expand-file-name "INI/auto/snippets-cfg.el" user-emacs-directory))
(load (expand-file-name "INI/auto/snippets-cfg.el" user-emacs-directory))
;; --------------------------------------
#+end_src
** INI/auto/autocomplete-cfg.el
:PROPERTIES:
:header-args: :tangle INI/auto/autocomplete-cfg.el
:END:
*** описание

*** used in
;; (find-file "~/INI/dev-cfg.el")
*** src
#+begin_src elisp
;; * AUTO-COMPLETE  CUSTOMIZATION
;; ** old vanila setings
;; --------------------------------------
;; (setq tab-always-indent 'complete)
;; (add-to-list 'completion-styles 'initials t)
;; --------------------------------------
;; ** company
(use-package company :ensure t
  :defer t
  :config
    (add-hook 'prog-mode-hook 'company-mode)
    ;; (setq completion-styles "basic substring emacs22")
    (setq completion-styles '(partial-completion substring emacs22))
    (define-key evil-insert-state-map (kbd "C-SPC") 'company-complete)
    (setq company-minimum-prefix-length 10)
    (setq company-require-match nil)
    (setq company-idle-delay nil)
    (setq company-show-numbers t)
  ;; :bind ("C-c c" hydra-clock/body)
;; ***  END use-package 
  )
;; (require 'company)
;; (require 'company)
;; ** defun program-mode-hook-customize : 
(defun program-mode-hook-customize (args)
  "comands fun list to customizing
  programing mode
  но есть подозрение что негде оно не запускается
  у сомпани свои настройуи
  у фузикомпани свои
  в каждый новерное нужно домавить эту
  и вообщегде есть програминг мод
  "
  (interactive "P")
    (display-line-numbers-mode t)
    (company-fuzzy-mode 1)
    (setq company-minimum-prefix-length 3)
    (setq company-show-numbers t)
    (setq company-idle-delay 0.1)
    (setq outshine-mode 1))
;; ** company fuze search
;; *** use-package company-fuzzy : 
(use-package company-fuzzy :ensure t
;; *** --------------------------------------
  ;; :defer 2
;; *** :init : 
 :diminish 
 :init
  (setq company-require-match nil)            ; Don't require match, so you can still move your cursor as expected.
  (setq company-tooltip-align-annotations t)  ; Align annotation to the right side.
  (setq company-eclim-auto-save nil)          ; Stop eclim auto save.
  (setq company-dabbrev-downcase nil)         ; No downcase when completion.
;; *** :config : 
  :config
  ;; Enable downcase only when completing the completion.
  (defun jcs--company-complete-selection--advice-around (fn)
    "Advice execute around `company-complete-selection' command."
    (let ((company-dabbrev-downcase t))
      (call-interactively fn)))
  (advice-add 'company-complete-selection :around #'jcs--company-complete-selection--advice-around)
;; *** add-hook 'prog-mode-hook : 
  (add-hook 'prog-mode-hook (lambda () 
    (setq company-show-numbers t)
    (setq company-fuzzy-mode 1)
    (setq company-minimum-prefix-length 3)
    (setq company-idle-delay 0.1)))
;; ***  END use-package 
  )
;; (require 'company)
;; (company-fuzzy-mode 1)
;; *** --------------------------------------
;; ** jedi 
;; --------------------------------------
(use-package jedi 
  :ensure t
  ;; :init
  ;; :disabled
  ;; (elpy-enable)
  :config
  ; move quick-help tooltips to the minibuffer
  (setq jedi:tooltip-method nil)

  ; don't auto-complete unless requested
  (setq ac-auto-start nil)
  (setq ac-auto-show-menu nil)
  ;; (define-key ac-mode-map (kbd "M-TAB") 'auto-complete)
  (add-hook 'python-mode-hook 'jedi:setup)
  (setq jedi:complete-on-dot t)  
  )

;; --------------------------------------
;; ** company-jedi 
;; --------------------------------------
(use-package company-jedi 
  :ensure t
  ;; :init
  ;; (elpy-enable)
  :config
  (defun my/python-mode-hook ()
    (add-to-list 'company-backends 'company-jedi))
  (add-hook 'python-mode-hook 'my/python-mode-hook)
  ;; (define-key evil-insert-state-map (kbd "m-SPC") 'company-jedi)
  )
;; --------------------------------------

#+end_src
** INI/auto/snippets-cfg.el
:PROPERTIES:
:header-args: :tangle INI/auto/snippets-cfg.el
:END:
*** описание

*** used in
;; (find-file "~/INI/dev-cfg.el")
*** src
#+begin_src elisp
;; * SNIPPETS  CUSTOMIZATION
;; ** yasnippet 
;; *** del: 
;; (unless (package-installed-p 'yasnippet)
;;   (package-install 'yasnippet))
;; только если устанавливать в ручную
;; (add-to-list 'load-path
;;               "~/.emacs.d/plugins/yasnippet")

;; *** use-package:
(use-package yasnippet
  :defer t
  ;; :ensure t
  ;; :disabled
  ;; :init
;; *** :config : 
  :config
  (use-package yasnippet-snippets
    :defer t)

  ;; (yas/initialize)
  (add-to-list 'ac-sources 'ac-source-yasnippet)
  (yas-global-mode 1)
;; *** ===========END========= ) : 
  )
;; ** yasnippet-snippets 
;; (unless (package-installed-p 'yasnippet-snippets)
;;   (package-install 'yasnippet-snippets))
;; (require 'yasnippet-snippets)

;; (unless (package-installed-p 'emacs-snippets)
;;   (package-install 'emacs-snippets))
;; (add-to-list 'load-path "~/path/to/yasnippet")
;; ;; Load the library
;; (require 'yasnippet)
;; (yas/initialize)
;; ;; Load the snippet files themselves
;; (yas/load-directory "~/path/to/yasnippet/snippets/text-mode")
;; ** Let's have snippets in the auto-complete dropdown
;; (add-to-list 'ac-sources 'ac-source-yasnippet)
;; --------------------------------------
#+end_src
** INI/AI/ai.el
:PROPERTIES:
:header-args: :tangle INI/AI/ai.el
:END:
*** описание

*** used in
;; (find-file "~/.archemacs/INI/init.el")
*** src
#+begin_src elisp
(use-package gpt
  :disabled
  :ensure t
  :config
    ;; (setq gpt-openai-key "sk-*")
    ;; (setq gpt-openai-engine "gpt-3.5-turbo")
    (setq gpt-openai-engine "gpt-4o-mini")
    ;; (setq gpt-openai-engine "gpt-4o")
    ;; (setq gpt-openai-engine "gpt-4o-mini-2024-07-18")
    (define-key evil-normal-state-map (kbd "M-a M-j M-o") 'gpt-dwim)
  )

(use-package gptel
  ;; :disabled
  :ensure t
  :config
    ;; (custom-set-variables '(gptel-model "gpt-3.5-turbo-16k"))
    ;; (custom-set-variables '(gptel-model "gpt-4o"))
    ;; (custom-set-variables '(gptel-model "gpt-4o-mini-2024-07-18"))
    ;; (setq gptel-model "gpt-4o-mini-2024-07-18")
    (define-key evil-normal-state-map (kbd "M-a M-j M-S-h") 'gptel-system-prompt)
    (define-key evil-normal-state-map (kbd "M-a M-j M-j") 'gptel-send)
    (define-key evil-normal-state-map (kbd "M-a M-j M-h") 'gptel-mode)
    ;; (setq gpt-openai-key "sk-*")
    (setq gptel-default-mode 'org-mode)
    (custom-set-variables '(gptel-model "gpt-4o-mini"))
)

(custom-set-variables '(gptel-model "gpt-4o-mini"))
#+end_src
* **Программирование и языковые конфигурации**
** описание
   Отдельные категории для Python, Clojure, JavaScript, Lua и т.д. + автодополнения и проверки синтаксиса.  
** INI/dev-cfg.el
:PROPERTIES:
:header-args: :tangle INI/dev-cfg.el
:END:
*** описание

*** used in
;; (find-file "~/.archemacs/INI/init.el")
*** src
#+begin_src elisp
;; * DEVELOPMENT-MODs CUSTOMIZATION
;; --------------------------------------
;; ** PROJECTILE CUSTOMIZATION
(use-package projectile
  :defer t
  :ensure t
  ;; :init
  ;; (projectile-mode +1)
  :bind (
          :map projectile-mode-map
              ;; ("s-p" . projectile-command-map)
              ("C-c p" . projectile-command-map)
          :map evil-normal-state-map
              ("ZPFF" . 'projectile-find-file-other-frame)
              ("ZPFO" . 'projectile-find-other-file-other-frame)
              ("ZPFR" . 'projectile-find-related-file-other-frame)
              ("ZPFd" . 'projectile-find-file-dwim-other-frame)
              ("ZPFT" . 'projectile-find-implementation-or-test-other-frame)
              ("ZPFB" . 'projectile-switch-to-buffer-other-frame)
              ("ZPFD" . 'projectile-dired-other-frame)
              ("Zoo" . 'projectile-switch-to-buffer-other-frame)
              ("Zii" . 'projectile-switch-to-buffer)
              ("ZPTt" . 'projectile-find-test-file)
              ("ZPTM" . 'projectile-find-matching-test)
              ("ZPTC" . 'projectile-create-missing-test-files)
              ("ZPTP" . 'projectile-current-project-test-files)
              ("ZPTT" . 'projectile-toggle-between-implementation-and-test)
              ("ZPGG" . 'projectile-find-tag)
              ("ZPGR" . 'projectile-regenerate-tags)
              ("ZPPN" . 'projectile-switch-project-by-name)
              ("ZPPS" . 'projectile-switch-project)
              ("ZPPF" . 'projectile-current-project-files)
              ("ZPSI" . (lambda() (interactive)
                                  (find-file-other-frame (expand-file-name "INI/dev-cfg.el" user-emacs-directory))))
              ("Z P P <F2>" . 'projectile-save-project-buffers)
              ("ZPPO" . 'projectile-switch-open-project)
              ("ZPPP" . 'projectile-commander)
              ("ZPgg" . 'projectile-grep)
              ("ZPgr" . 'projectile-ripgrep)
              ("ZPrr" . 'projectile-find-references)
              ("M-e M-r M-r" . 'projectile-find-references)
              ("ZPRR" . 'projectile-replace)
              ("ZPRE" . 'projectile-replace-regexp)
              ("M-e M-p M-o" . 'projectile-multi-occur)
              ("M-e M-t M-t" . 'projectile-toggle-between-implementation-and-test)
          :map evil-normal-state-map
              ("M-e M-p M-o" . (lambda() (interactive)
                                 (projectile-multi-occur
                                  (buffer-substring (region-beginning) (region-end)))))
              ("M-e M-r M-r" . (lambda() (interactive)
                                 (projectile-find-references
                                  (buffer-substring (region-beginning) (region-end)))))
    ;; build/compile project (s-p c)
    ;; test project (s-p T)
))

;; --------------------------------------
;; ** DELIMITERS-MOD CUSTOMIZATION
;; (find-file "~/.archemacs/INI/delimiters-cfg.el")
;; (load "~/.archemacs/INI/dev/delimiters-cfg.el")
(load (expand-file-name "INI/dev/delimiters-cfg.el" user-emacs-directory))
;; --------------------------------------
;; ** PYTHON-MOD CUSTOMIZATION
;; (find-file "~/.archemacs/INI/python-cfg.el") 
;; (find-file-other-frame "~/.archemacs/INI/python-cfg.el")
;; (load "~/.archemacs/INI/dev/python-cfg.el")
(load (expand-file-name "INI/dev/python-cfg.el" user-emacs-directory))
;; --------------------------------------
;; ** LUA-MOD CUSTOMIZATION
;; --------------------------------------
;; (find-file "~/.archemacs/INI/lua-cfg.el")
;; (load "~/.archemacs/INI/dev/lua-cfg.el")
(load (expand-file-name "INI/dev/lua-cfg.el" user-emacs-directory))
;; --------------------------------------
;; ** OUTSHINE-MOD CUSTOMIZATION
;; --------------------------------------
;; (load "~/.archemacs/INI/dev/outshine_cfg.el")
(load (expand-file-name "INI/dev/outshine_cfg.el" user-emacs-directory))
;; --------------------------------------
;; ** AHK-MODE CUSTOMIZATION
;; --------------------------------------
;; (find-file-other-frame "~/.archemacs/INI/dev/autohotkey-cfg.el")
;; (load "~/.archemacs/INI/dev/autohotkey-cfg.el")
;; (load (expand-file-name "INI/dev/autohotkey-cfg.el" user-emacs-directory))
;; --------------------------------------
;; ** C#-MOD CUSTOMIZATION
;; (find-file-other-frame "~/.archemacs/INI/dev/csharp-cfg.el")
;; (load "~/.archemacs/INI/dev/csharp-cfg.el")
;; (load (expand-file-name "INI/dev/csharp-cfg.el" user-emacs-directory))
;; --------------------------------------
;; ** C-MOD CUSTOMIZATION
;; (find-file-other-frame "~/.archemacs/INI/dev/c-mode-cfg.el")
;; (load "~/.archemacs/INI/dev/c-mode-cfg.el")
;; (load (expand-file-name "INI/dev/c-mode-cfg.el" user-emacs-directory))
;; --------------------------------------
;; ** CLOJURE-MODE CUSTOMIZATION
;; (find-file-other-frame "~/.archemacs/INI/dev/clojure-cfg.el")
;; (load "~/.archemacs/INI/dev/clojure-cfg.el")
(load (expand-file-name "INI/dev/clojure-cfg.el" user-emacs-directory))
;; --------------------------------------
;; ** UNITY CUSTOMIZATION
;; (find-file-other-frame "~/.archemacs/INI/dev/unity-cfg.el")
;; (load "~/.archemacs/INI/dev/unity-cfg.el")
;; (load (expand-file-name "INI/dev/unity-cfg.el" user-emacs-directory))
;; --------------------------------------
;; ** JS-MOD CUSTOMIZATION
;; (find-file-other-frame "~/.archemacs/INI/js-cfg.el") 
;; (load "~/.archemacs/INI/dev/js-cfg.el")
(load (expand-file-name "INI/dev/js-cfg.el" user-emacs-directory))
;; --------------------------------------
;; ** FORMATS-MOD CUSTOMIZATION
;; (find-file-other-frame "~/.archemacs/INI/dev/formats-mods-cfg.el")
;; (load "~/.archemacs/INI/dev/formats-mods-cfg.el")
(load (expand-file-name "INI/dev/formats-mods-cfg.el" user-emacs-directory))
;; --------------------------------------
;; ** FLYCHECK CUSTOMIZATION
;; (load "~/.archemacs/INI/dev/flycheck-cfg.el")
(load (expand-file-name "INI/dev/flycheck-cfg.el" user-emacs-directory))
;; (find-file "~/.archemacs/INI/flycheck-cfg.el") 
;; --------------------------------------
;; ** DEVELOPMENT SETINGS CUSTOMIZATION
(setq compilation-scroll-output nil)
;; (defun my-compilation-finish-function (buffer desc)
;;   (message "Buffer %s: %s" buffer desc)
;;  (evil-goto-first-line)
;;  )
;; (add-to-list 'compilation-finish-functions 'my-compilation-finish-function)
;; ** DEVELOPMENT-KEY CUSTOMIZATION
;; *** save & recompile
;; **** global-set-key <f8> :
;;  --------------------------------------
(global-set-key(kbd "<f8>") '(lambda() (interactive)
        ;; (save-buffer)
        (save-some-buffers 'no-confirm)
        (org-save-all-org-buffers)
        (evil-normal-state)
        (let ((curent-buffer (buffer-name)))
          (select-frame-by-name "*compilation*")
          (recompile)
          (select-frame-by-name curent-buffer))))       

;; (setq compilation-scroll-output nil)
;; (add-to-list 'compilation-finish-functions 'my-compilation-finish-function)
;;  --------------------------------------
;; **** global-set-key "M-<f8>" :
;;  --------------------------------------
(global-set-key(kbd "M-<f8>") '(lambda() (interactive)
                (save-buffer)
                (evil-normal-state)
                (compile
                 (read-string
                    (concat
                      "defult(" (buffer-name) "):")
                    (buffer-file-name)
                    nil
                    (buffer-name)
                    )
                  )
                ))
;; --------------------------------------
;; **** global-set-key "M-<f8>" :
;;  --------------------------------------
(define-key evil-visual-state-map (kbd "M-<f8>") '(lambda() (interactive)
                (setq region-text (buffer-substring (region-beginning) (region-end)))
                (save-buffer)
                (evil-normal-state)
                (compile
                 (read-string
                    (concat
                      "defult(" (buffer-name) "):")
                    (concat
                        (buffer-file-name)
                        " -p "
                        region-text
                        )
                    nil
                    (buffer-name)
                    )
                  )
                ))
;; --------------------------------------
;; *** --------------------------------------
;; ** PROG-MODE-HOOK CUSTOMIZATION
  (add-hook 'prog-mode-hook '(lambda ()
;; *** line-numbers-mode
    ;; (setq display-line-numbers-mode t)
    (display-line-numbers-mode t)
;; *** flycheck-mode
    (flycheck-mode t)
;; *** highlight-indentation-mode : 
    (highlight-indentation-mode t)
;; *** projectile-mode : 
    (projectile-mode +1)

;; *** outshine-mode:
    ;; #'outshine-mode on in outshine cfg
    ;; (find-file-other-frame "~/.archemacs/INI/outshine_cfg.el")
    ;; (outshine-mode t)
    ;; (outline-minor-mode t)
;; *** end prog-mode-hook
    ))
;; --------------------------------------
#+end_src

** INI/dev/delimiters-cfg.el
:PROPERTIES:
:header-args: :tangle INI/dev/delimiters-cfg.el
:END:
*** описание

*** used in
;; (find-file "~/INI/dev-cfg.el")
*** src
#+begin_src elisp

;; * DELIMITERS-MOD CUSTOMIZATION
;; --------------------------------------
;; ** rainbow-delimiters
;; *** install
;; M-x package-install RET rainbow-delimiters RET
(require 'use-package)
(use-package rainbow-delimiters :ensure t
;; *** :config
  :config
  (add-hook 'prog-mode-hook 'rainbow-delimiters-mode)
  (custom-theme-set-faces
    'material
    `(rainbow-delimiters-depth-1-face ((t
        (:foreground ,"aquamarine"))))
    )
;; *** END )
  )
;; *** Docs 
;; **** links:
;; https://github.com/Fanael/rainbow-delimiters
;; http://emacs-fu.blogspot.com/2011/05/toward-balanced-and-colorful-delimiters.html
;; **** Customization:
;; To customize rainbow-delimiters mode, you can use:

;; M-x customize-group rainbow-delimiters
;; (customize-group "rainbow-delimiters")
;; Color Scheme

;; customize-group rainbow-delimiters-faces has the faces for successive nested pairs of delimiters. You can change them through emacs customize or in your color theme or dot-emacs.

;; The face rainbow-delimiters-unmatched-face is used for unmatched closing delimiters.

;; Zenburn and Solarized themes have their own colors for these faces.

;; deftheme/color-theme.el: Further information is at the top of rainbow-delimiters.el.
;; Stop Highlighting Certain Delimiters

;; You can disable highlighting of any of the supported delimiter types through the customize interface, in the Toggle Delimiters section.
;; ** parinfer
;; *** install
(use-package parinfer
  :disabled
  :defer t
  :ensure t
  :bind
  (("C-," . parinfer-toggle-mode))
  :init
  (progn
    (setq parinfer-extensions
          '(defaults       ; should be included.
            pretty-parens  ; different paren styles for different modes.
            evil           ; If you use Evil.
            lispy          ; If you use Lispy. With this extension, you should install Lispy and do not enable lispy-mode directly.
            paredit        ; Introduce some paredit commands.
            smart-tab      ; C-b & C-f jump positions and smart shift with tab & S-tab.
            smart-yank))   ; Yank behavior depend on mode.
    (add-hook 'clojure-mode-hook #'parinfer-mode)
    (add-hook 'emacs-lisp-mode-hook #'parinfer-mode)
    (add-hook 'common-lisp-mode-hook #'parinfer-mode)
    (add-hook 'scheme-mode-hook #'parinfer-mode)
    (add-hook 'lisp-mode-hook #'parinfer-mode))
;; *** END )
  )
;; ** parinfer-rust-mode
;; *** install
(use-package parinfer-rust-mode
  ;; :disabled
  :defer t
  :ensure t
  ;; :hook emacs-lisp-mode
  ;; :init
    ;; (setq parinfer-rust-auto-download t)
  :config
    (setq  parinfer-rust-disable-troublesome-modes t)
    ;; (parinfer-rust-mode -1)
    (add-hook 'clojure-mode-hook #'parinfer-rust-mode)
    ;; (add-hook 'emacs-lisp-mode-hook #'parinfer-rust-mode)
    ;; (add-hook 'common-lisp-mode-hook #'parinfer-rust-mode)
    ;; (add-hook 'scheme-mode-hook #'parinfer-rust-mode)
    ;; (add-hook 'lisp-mode-hook #'parinfer-rust-mode)
;; *** END )
  )
#+end_src
** INI/dev/python-cfg.el
:PROPERTIES:
:header-args: :tangle INI/dev/python-cfg.el
:END:
*** описание

*** used in
;; (find-file "~/INI/dev-cfg.el")
*** src
#+begin_src elisp
;; * PYTHON-MOD CUSTOMIZATION
;; --------------------------------------
;; ** (use-package elpy
(require 'use-package)
(use-package elpy :ensure t
;; *** init : 
  :defer t
  :init
  (elpy-enable)
;; *** config : 
  :config
  ;; (elpy-enable)
  ;; (ivy-mode 1)
  (company-mode 1)
  ;; (setq compilation-scroll-output nil)
  (setq compilation-scroll-output t)
  ;; not working from config onli from init and not from hooks
  ;; (add-hook 'python-mode-hook 'elpy-mode)
  ;; (add-hook 'python-mode-hook 'elpy-enable)
  ;; (setq python-shell-interpreter "python"
  ;; python-shell-interpreter-args "-i")
  ;; findout what it do
  (add-to-list 'auto-mode-alist '("\\.kv$" . python-mode))
  ;; (add-to-list 'interpreter-mode-alist '("kv" . python-mode))
;; *** define-key : 
  (define-key evil-insert-state-map (kbd "C-SPC") 'company-complete)
  (define-key evil-normal-state-map (kbd "M-e M-f M-p") 'xref-find-definitions)
  (define-key evil-normal-state-map (kbd "M-e M-f M-P") 'xref-find-definitions-other-frame)
  (define-key evil-normal-state-map (kbd "M-e M-f M-o") 'elpy-occur-definitions)
  (define-key evil-normal-state-map (kbd "M-e M-f M-a") 'elpy-goto-assignment)
  (define-key evil-normal-state-map (kbd "M-e M-f M-d") 'elpy-goto-definition)
  (define-key evil-normal-state-map (kbd "M-e M-f M-D") 'elpy-goto-definition-other-window)
  ;; (define-key evil-insert-state-map (kbd "<f8>") '(lambda() (interactive)
  ;;      (org-save-all-org-buffers)
  ;;      (save-some-buffers 'no-confirm)
  ;;      (evil-normal-state)
  ;;      (recompile)
  ;;      ))
;; ***  ) : 
  )
#+end_src
** INI/dev/lua-cfg.el
:PROPERTIES:
:header-args: :tangle INI/dev/lua-cfg.el
:END:
*** описание

*** used in
;; (find-file "~/INI/dev-cfg.el")
*** src
#+begin_src elisp
;; * LUA-MOD CUSTOMIZATION
;; --------------------------------------
;; ** install lua-mode : 
(require 'use-package)
(use-package lua-mode 
  :ensure t
  :init
  ;; (elpy-enable)
;; ** :config : 
  :config
;; ** command : 
  ;; 2. Next, you need to make sure that lua-mode.el is on your load-path (and optionally byte-compile it) and to set up Emacs to automatically enable it for *.lua files or ones that contain lua hash-bang line (`#!/usr/bin/lua`). Putting this snippet to .emacs should be enough in most cases:
    ;;;; This snippet enables lua-mode
    ;; This line is not necessary, if lua-mode.el is already on your load-path
    ;; (add-to-list 'load-path "/path/to/directory/where/lua-mode-el/resides")
;; ** autoload : 
    (autoload 'lua-mode "lua-mode" "Lua editing mode." t)
    (add-to-list 'auto-mode-alist '("\\.lua$" . lua-mode))
    (add-to-list 'interpreter-mode-alist '("lua" . lua-mode))
;; ** ) : 
  )
;; --------------------------------------
#+end_src
** INI/dev/outshine_cfg.el
:PROPERTIES:
:header-args: :tangle INI/dev/outshine_cfg.el
:END:
*** описание

*** used in
;; (find-file "~/INI/folding-cfg.el")
*** src
#+begin_src elisp
;; * OUTSHINE-MOD CUSTOMIZATION 
;; --------------------------------------
;; ** use-package outshine
(use-package outshine :ensure t
  ;; uncoment to instal
  ;; loding each time - resrch how to setup right
  ;; :quelpa (outshine :fetcher github :repo "alphapapa/outshine")
;; ** outshine config
  :config
;; *** binds
  ;; (defvar outline-minor-mode-prefix "\M-#")
  (define-key evil-normal-state-map "zf" 'outshine-insert-heading)
;; **** zF
  (define-key evil-normal-state-map "zF" '(lambda() (interactive)
      ;; (evil-previous-line)
      (outshine-insert-comment-subtree )
      (insert (read-string "comment : "))
      ))

;; **** visual add zf
  (define-key evil-visual-state-map "zf" '(lambda() (interactive)
      (setq region-text (buffer-substring (region-beginning) (region-end)))
      (evil-normal-state)
      ;; (evil-open-above 1)
      (evil-previous-line)
      (outshine-insert-heading)
      ;; (backward-char)
      (save-excursion
        ;; (insert " ")
        (insert region-text)
        (unless (eq major-mode 'org-mode)
          (insert ":")
          )
      )))

;; *** outshine startup state
  (setq outshine-startup-folded-p 1)
;; *** autoload
  ;; (add-hook 'outline-minor-mode-hook 'outshine-hook-function)
  (add-hook 'outline-minor-mode-hook 'outshine-mode)
  (add-hook 'prog-mode-hook '(lambda () (outshine-mode t)))
  ;; (add-hook 'prog-mode-hook '(lambda () (outline-minor-mode t)))
  ;; (add-hook 'prog-mode-hook '(lambda () (setq outline-minor-mode 1)))
  ;; (add-hook 'emacs-lisp-mode-hook 'outline-minor-mode)
  ;; (add-hook 'python-mode-hook 'outline-minor-mode)
  ;; (add-hook 'lua-mode-hook 'outline-minor-mode)
  ;; (add-hook 'LaTeX-mode-hook 'outline-minor-mode)
;; *** theme customization
  ;; (custom-theme-set-faces
  ;; 'material
  ;; `(outline-1 ((t (:height 1.25 :weight bold))))
  ;; `(outline-2 ((t (:height 1.15 :weight bold))))
  ;; `(outline-3 ((t (:height 1.05 :weight bold))))
  ;; `(outline-4 ((t (:height 1.95 :weight bold))))
  ;; `(outline-5 ((t (:height 1.85 :weight bold))))
  ;; `(outline-6 ((t (:height 1.75 :weight bold))))
  ;; `(outline-7 ((t (:height 1.65 :weight bold))))

   ;; `(org-level-1 ((,class (:inherit outline-1
   ;;                       :background ,header-color
   ;;                       :weight bold
   ;;                       :box (:style released-button)
   ;;                       :height 1.3))))
   ;; `(org-level-2 ((,class (:inherit outline-2
   ;;                                :background ,"#35575b"
   ;;                                :box (:style released-button)
   ;;                       :height 1.2))))
   ;; `(org-level-3 ((,class (:inherit outline-3 :height 1.1))))
   ;; `(org-level-4 ((,class (:inherit outline-4 :height 1.0))))
   ;; `(org-level-5 ((,class (:inherit outline-5 ))))
   ;; `(org-level-6 ((,class (:inherit outline-6 ))))
   ;; `(org-level-7 ((,class (:inherit outline-7 ))))
   ;; `(org-level-8 ((,class (:inherit outline-8 ))))
   ;; `(org-level-9 ((,class (:inherit outline-9 ))))

;; ** END of use-package outshine 
  )
;; -------------------------------------- }}}
#+end_src
** CANCELED INI/dev/autohotkey-cfg.el
CLOSED: [2025-02-24 Mon 23:15]
:PROPERTIES:
:header-args: :tangle no
:END:
# :header-args: :tangle INI/dev/autohotkey-cfg.el
*** описание

*** used in
;; (find-file "~/INI/dev-cfg.el")
;; (load (expand-file-name "INI/dev/autohotkey-cfg.el" user-emacs-directory))

*** src
#+begin_src elisp
;; * AHK-MODE CUSTOMIZATION
;; --------------------------------------
;; ** install ahk-mode : 
(use-package ahk-mode
  :ensure t
;; ** :config : 
  :config
;; ** autoload : 
    ;; (autoload 'ahk-mode "ahk-mode" "Lua editing mode." t)
    (add-to-list 'auto-mode-alist '("\\.ahk$" . ahk-mode))
    (add-to-list 'interpreter-mode-alist '("ahk" . ahk-mode))
;; **   ) : 
  )

#+end_src
** CANCELED INI/dev/csharp-cfg.el
CLOSED: [2025-02-24 Mon 23:24]
:PROPERTIES:
:header-args: :tangle no
:END:
# :header-args: :tangle INI/dev/csharp-cfg.el
*** описание

*** used in
;; (find-file "~/INI/dev-cfg.el")
;; (load (expand-file-name "INI/dev/csharp-cfg.el" user-emacs-directory))

*** src
да он был пуст сам в шоке
#+begin_src elisp
;; * C#-MOD CUSTOMIZATION
;; --------------------------------------
#+end_src
** INI/dev/clojure-cfg.el
:PROPERTIES:
:header-args: :tangle INI/dev/clojure-cfg.el
:END:
*** описание

*** used in
;; (find-file "~/INI/dev-cfg.el")
(load (expand-file-name "INI/dev/clojure-cfg.el" user-emacs-directory))
*** src
#+begin_src elisp
;; * CLOJURE-MODE CUSTOMIZATION
;; --------------------------------------
;; ** clojure-mode
(use-package clojure-mode
  :defer t
  ;; :disabled
  :ensure t
  :config
 (setq clojure-indent-style 'align-arguments)
 (setq clojure-indent-keyword-style 'align-arguments)
  )
;; ** ob-clojur-mode
(use-package ob-clojure
  ;; :disabled
  :defer t
  ;; :ensure t
  :config
    (setq org-babel-clojure-backend 'cider)
  ;; (add-hook 'prog-mode-hook 'rainbow-delimiters-mode)
  ;; (custom-theme-set-faces
  ;;  'material
  ;;  `(rainbow-delimiters-depth-1-face ((t
  ;;      (:foreground ,"aquamarine"))))
  ;;  )
  )
;; ** use-package cider:
(use-package cider
  :defer t
  :ensure t
  :after clojure-mode
  :config
  ;; (set-lookup-handlers! 'cider-mode nil) ; doom option 
  ;; (setq lsp-enable-completion-at-point nil) ; use cider completion
  (setq cider-eldoc-display-for-symbol-at-point nil) ; disable cider showing eldoc during symbol at point
  )

;; ** clj-refactor
(use-package clj-refactor
  :defer t
  :ensure t
  :after clojure-mode
  :config
  ;; (set-lookup-handlers! 'clj-refactor-mode nil) ; doom option 
  (setq cljr-add-ns-to-blank-clj-files nil) ; disable clj-refactor adding ns to blank files
  )
;; ** Leiningen

;; ** --------------------------------------
;; * LSP-MODE CUSTOMIZATION
;; --------------------------------------
;; ** use-package lsp-mode:
(use-package lsp-mode
  :defer t
  :ensure t
  :init
  ;; set prefix for lsp-command-keymap (few alternatives - "C-l", "C-c l")
  (setq lsp-keymap-prefix "C-c l")
  :hook
  (;; replace XXX-mode with concrete major-mode(e. g. python-mode)
    (clojure-mode-hook . lsp)
    (clojurescript-mode-hook . lsp)
    (clojurec-mode-hook . lsp)
    ;; (XXX-mode . lsp)
    ;; if you want which-key integration
    (lsp-mode . lsp-enable-which-key-integration))
  :commands lsp
  :config
  (setq gc-cons-threshold (* 100 1024 1024)
        read-process-output-max (* 1024 1024)
        treemacs-space-between-root-nodes nil
        company-minimum-prefix-length 1)
  )

;; ** use-package lsp-ui:
(use-package lsp-ui
  :defer t
  :ensure t
  :commands lsp-ui-mode)
;; ;; if you are helm user
;; (use-package helm-lsp :commands helm-lsp-workspace-symbol)
;; if you are ivy user
;; ** use-package lsp-ivy:
(use-package lsp-ivy
  :defer t
  :ensure t
  :commands lsp-ivy-workspace-symbol)
;; ** lsp-treemacs:
(use-package lsp-treemacs
  :disabled
  :defer t
  :ensure t
  :commands lsp-treemacs-errors-list)

;; ** --------------------------------------
;; * use-package dap-mode:
;; optionally if you want to use debugger
;; (use-package dap-mode)


;; (use-package dap-LANGUAGE) to load the dap adapter for your language
;; ** --------------------------------------
#+end_src
** CANCELED INI/dev/unity-cfg.el
CLOSED: [2025-02-25 Tue 00:16]
:PROPERTIES:
:header-args: :tangle no
:END:
# :header-args: :tangle INI/dev/unity-cfg.el
*** описание

*** used in
;; (find-file "~/INI/dev-cfg.el")
(load (expand-file-name "INI/dev/unity-cfg.el" user-emacs-directory))

*** src
#+begin_src elisp
;; * UNITY CUSTOMIZATION
;; --------------------------------------
;; ** install miracle: Arcadia 
;; :quelpa (outshine :fetcher github :repo "alphapapa/outshine")
;; git clone https://github.com/Saikyun/miracle.git
(unless (package-installed-p 'miracle)
  (use-package miracle 
  ;; :ensure t 
    :quelpa (miracle :fetcher github :repo "Saikyun/miracle")))
  ;; (quelpa
  ;; '(miracle
  ;;  :fetcher github
  ;;  :url "https://github.com/saikyun/miracle.git"))
;; (quelpa '(miracle :repo "saikyun/miracle" :fetcher github))
;; (require 'use-package)
;; ** use-package miracle : 
(use-package miracle 
  ;; :ensure t
;; ** END )
  )
;; ** Docs 
;; *** links:
;; https://github.com/Saikyun/miracle
;; *** keys:
;; Keys   Description
;; C-c C-c  Evaluate expression at point.
;; C-c C-r  Evaluate region.
;; C-c C-k  Evaluate current buffer contents.
;; C-c C-l  Load current file from disk.
;; C-c C-d  Describe symbol at point, showing documentation in REPL window.
;; C-c C-n  Evaluate namespace.
;; C-c C-b  Interrupt running job.
;; M-.  Jump to definition of var at point.
;; M-,  Jump back to where you were before you did M-.
;; Miracle shortcuts for REPL buffer
;; Keys   Description
;; C-c C-d  Describe symbol at point, showing documentation in REPL window.
;; C-c C-c  Interrupt running job.
;; M-.  Jump to definition of var at point.
;; C-c C-f  Replaces the last result with a pretty printed version of it. f is for formatting.
;; ** --------------------------------------
#+end_src
** INI/dev/js-cfg.el
:PROPERTIES:
:header-args: :tangle INI/dev/js-cfg.el
:END:
*** описание

*** used in
;; (find-file "~/INI/dev-cfg.el")
(load (expand-file-name "INI/dev/js-cfg.el" user-emacs-directory))
*** src
#+begin_src elisp
;; * Setting up js2-mode
;; ** use-package js2-mode
(use-package js2-mode :ensure t
  :defer t
  ;; :disabled
  ;; :config
;; *** END of use-package 
  )
;; (require 'js2-mode)
;; --------------------------------------
(add-to-list 'auto-mode-alist '("\\.js\\'" . js2-mode))
;; Better imenu
(add-hook 'js2-mode-hook #'js2-imenu-extras-mode)
;; js2-refactor and xref-js2
;; ** D use-package js2-refactor
(use-package js2-refactor
  :disabled
  :defer t
  :ensure t
;; *** END of use-package hydra
  )
;; ** D use-package xref-js2
(use-package xref-js2 :ensure t
  :disabled
  :defer t
  :config
  ;; :defer 2
  (require 'js2-refactor)
  (add-hook 'js2-mode-hook #'js2-refactor-mode)
  (js2r-add-keybindings-with-prefix "C-c C-r")
  (define-key js2-mode-map (kbd "C-k") #'js2r-kill)
  ;; js-mode (which js2 is based on) binds "M-." which conflicts with xref, so
  ;; unbind it.
  (define-key js-mode-map (kbd "M-.") nil)
  (add-hook 'js2-mode-hook (lambda ()
    (add-hook 'xref-backend-functions #'xref-js2-xref-backend nil t)))
;; *** END of use-package hydra
  )

;; --------------------------------------
;; * D ---------      Tern & Company     ----
;; may need add this commands for node.js
;; set "PATH=%PATH%;D:\Development\JS\nodejs\"
;; (setenv "PATH" (concat (getenv "PATH") "D:/Development/JS/nodejs"))
;; (setq exec-path (append exec-path '("D:/Development/JS/nodejs/")))
;; ** terns 
;; This is Tern. Tern is a stand-alone, editor-independent
;; JavaScript analyzer that can be used to improve the JavaScript
;; integration of existing editors.
;; (add-to-list 'load-path "~/.emacs.d/Els/Tern/emacs/")
;; (autoload 'tern-mode "tern.el" nil t)
;; (add-hook 'js-mode-hook (lambda () (tern-mode t)))
;; ** company-tern
(use-package company-tern :ensure t
  :disabled
  ;; :defer 2
  :defer t
  ;; :bind ("C-c c" hydra-clock/body)
  :load-path "Els/Tern/emacs/"
  :config
  (add-to-list 'company-backends 'company-tern)
  ;; (add-hook 'js2-mode-hook (lambda ()
  ;;                            (tern-mode)
  ;;                            (company-mode)))
  (add-hook 'js-mode-hook (lambda ()
                            (tern-mode)
                            (company-mode)))
;; ***  END of use-package 
  )
;; --------------------------------------
;; * skewer-mode
;; --------------------------------------
;; ** use-package skewer-mode
(use-package skewer-mode :ensure t
  ;; :disabled
  :defer t
;; ** :config : 
  :config
  (add-hook 'js2-mode-hook 'skewer-mode)
  (add-hook 'css-mode-hook 'skewer-css-mode)
  (add-hook 'html-mode-hook 'skewer-html-mode)
;; ** END of use-package
  )
;; --------------------------------------

;; * JS-MOD CUSTOMIZATION
;; --------------------------------------
;; ** Docs
;; --------------------------------------
;; Refactorings
;;     ee is expand-node-at-point: Expand bracketed list according to node type at point (array, object, function, call args).
;;     cc is contract-node-at-point: Contract bracketed list according to node type at point (array, object, function, call args).
;;     ef is extract-function: Extracts the marked expressions out into a new named function.
;;     em is extract-method: Extracts the marked expressions out into a new named method in an object literal.
;;     tf is toggle-function-expression-and-declaration: Toggle between function name() {} and var name = function ();
;;     ta is toggle-arrow-function-and-expression: Toggle between function expression to arrow function.
;;     ts is toggle-function-async: Toggle between an async and a regular function.
;;     ip is introduce-parameter: Changes the marked expression to a parameter in a local function.
;;     lp is localize-parameter: Changes a parameter to a local var in a local function.
;;     wi is wrap-buffer-in-iife: Wraps the entire buffer in an immediately invoked function expression
;;     ig is inject-global-in-iife: Creates a shortcut for a marked global by injecting it in the wrapping immediately invoked function expression
;;     ag is add-to-globals-annotation: Creates a /*global */ annotation if it is missing, and adds the var at point to it.
;;     ev is extract-var: Takes a marked expression and replaces it with a var.
;;     el is extract-let: Similar to extract-var but uses a let-statement.
;;     ec is extract-const: Similar to extract-var but uses a const-statement.
;;     iv is inline-var: Replaces all instances of a variable with its initial value.
;;     rv is rename-var: Renames the variable on point and all occurrences in its lexical scope.
;;     vt is var-to-this: Changes local var a to be this.a instead.
;;     ao is arguments-to-object: Replaces arguments to a function call with an object literal of named arguments.
;;     3i is ternary-to-if: Converts ternary operator to if-statement.
;;     sv is split-var-declaration: Splits a var with multiple vars declared, into several var statements.
;;     ss is split-string: Splits a string.
;;     st is string-to-template: Converts a string into a template string.
;;     uw is unwrap: Replaces the parent statement with the selected region.
;;     lt is log-this: Adds a console.log() statement for what is at point (or region). With a prefix argument, use JSON pretty-printing.
;;     dt is debug-this: Adds a debug() statement for what is at point (or region).
;;     sl is forward-slurp: Moves the next statement into current function, if-statement, for-loop or while-loop.
;;     ba is forward-barf: Moves the last child out of current function, if-statement, for-loop or while-loop.
;;     k is kill: Kills to the end of the line, but does not cross semantic boundaries.

;; There are also some minor conveniences bundled:

;;     C-S-down and C-S-up moves the current line up or down. If the line is an element in an object or array literal, it makes sure that the commas are still correctly placed.
;; https://github.com/magnars/js2-refactor.el
;; --------------------------------------
;; Using xref-js2
;;     M-. Jump to definition
;;     M-? Jump to references
;;     M-, Pop back to where M-. was last invoked.

#+end_src
** INI/dev/formats-mods-cfg.el (yaml)
:PROPERTIES:
:header-args: :tangle INI/dev/formats-mods-cfg.el
:END:
*** описание
yaml-mode
*** used in
;; (find-file "~/INI/dev-cfg.el")
;; (find-file-other-frame "~/INI/dev-cfg.el") 
(load (expand-file-name "INI/dev/formats-mods-cfg.el" user-emacs-directory))
*** src
#+begin_src elisp
;; * MODS CUSTOMIZATION 
;; ** yaml-mode
;; *** load
;; (add-to-list 'load-path "~/ELs/formats/YAML/yaml-mode.el")
;; (find-file-other-frame "~/ELs/formats/YAML/yaml-mode.el")
;; *** use-package read-aloud : 
(use-package yaml-mode
  ;; :ensure t
  ;; :load-path "ELs/formats/YAML/yaml-mode.el"
  :load-path "ELs/formats/YAML/"
  ;; :init
;; *** :config : 
  :config
  (add-to-list 'auto-mode-alist '("\\.yml\\'" . yaml-mode))
  (add-to-list 'auto-mode-alist '("\\.rul\\'" . yaml-mode))
  )
#+end_src
** INI/dev/flycheck-cfg.el
:PROPERTIES:
:header-args: :tangle INI/dev/flycheck-cfg.el
:END:
*** описание

*** used in
;; (find-file "~/INI/dev-cfg.el")
(load (expand-file-name "INI/dev/flycheck-cfg.el" user-emacs-directory))
*** src
#+begin_src elisp
;; * FLYCHECK CUSTOMIZATION
;; --------------------------------------
;; ** use-package flycheck 
(use-package flycheck :ensure t
  ;; :init
  ;; (elpy-enable)
;; ** :config : 
  :config
  ;; (setq elpy-modules (delq 'elpy-module-flymake elpy-modules))
  (add-hook 'elpy-mode-hook 'flycheck-mode)
  (setq flycheck-check-syntax-automatically '(save mode-enabled))
;; ** bind 
  ;; (define-key evil-normal-state-map (kbd "M-e M-n M-1")
  ;;    'flycheck-first-error)
  ;; (define-key evil-normal-state-map (kbd "M-e M-n M-n")
  ;;         'flycheck-next-error)
  ;; (define-key evil-normal-state-map (kbd "M-e M-n M-f")
  ;;         'flycheck-next-error-function)
  ;; (define-key evil-normal-state-map (kbd "M-e M-n M-;")
  ;;         'flycheck-next-error-pos)
  ;; (define-key evil-normal-state-map (kbd "M-e M-n M-p")
  ;;         'flycheck-previous-error)
  ;; (define-key evil-normal-state-map (kbd "M-e M-n M-d")
  ;;    'flycheck-display-error-explanation)
  ;; (define-key evil-normal-state-map (kbd "M-e M-n M-s")
  ;;    'list-flycheck-error)
;; ** End of use-package ) 
  )
#+end_src
** CANCELED INI/dev/c-mode-cfg.el
CLOSED: [2025-02-25 Tue 01:08]
:PROPERTIES:
:header-args: :tangle INI/dev/c-mode-cfg.el
:END:
*** описание

*** used in
;; (find-file "~/INI/dev-cfg.el")
(load (expand-file-name "INI/dev/c-mode-cfg.el" user-emacs-directory))
*** src
#+begin_src elisp
;; INSTALL IRONY
;; --------------------------------------
;; (package-install irony)
;; Configuration
(add-hook 'c++-mode-hook 'irony-mode)
(add-hook 'c-mode-hook 'irony-mode)
(add-hook 'objc-mode-hook 'irony-mode)
(add-hook 'irony-mode-hook 'irony-cdb-autosetup-compile-options)
;; irony-mode should work fine on Windows but there are some things to take care of first.
;; libclang.dll is expected to be available in the PATH or in Emacs' exec-path.
;;     w32-pipe-read-delay default value of 50 should be changed. This should not cause any issue on today's version of Windows. The default value of 50 may be lowered in mainline Emacs in future versions, until then, I suggest to set it to 0.
;;     w32-pipe-buffer-size, introduced by Emacs 25, can be set to a larger value than the default to improve irony-server communication performances (c.f. https://github.com/Sarcasm/irony-mode/issues/321). The variable to customize is irony-server-w32-pipe-buffer-size.
;; Windows performance tweaks
(when (boundp 'w32-pipe-read-delay)
  (setq w32-pipe-read-delay 0))
;; Set the buffer size to 64K on Windows (from the original 4K)
(when (boundp 'w32-pipe-buffer-size)
  (setq irony-server-w32-pipe-buffer-size (* 64 1024)))

;; Usage
;; On the first run, irony-mode will ask you to build and install irony-server. To do so, type M-x
irony-install-server
;; To tune irony-mode, use customize:
;; (
;;  customize-group irony
;;         )
;; In order to provide context sensitive and accurate information, irony-mode needs to know about the compiler flags used to parse the current buffer. The best way to achieve this is to use a Compilation Database.
;; Right now irony-cdb supports the following compilation databases:
;;     JSON Compilation Database - A JSON formatted file generated by various build tools. The file is named compile_commands.json, it lists the compile options associated to each file in the project.
;;         CMake >= 2.8.5 will generate a compilation database in the build directory when issuing the following command cmake -DCMAKE_EXPORT_COMPILE_COMMANDS=ON <...>.
;;         ninja >= 1.2 will generate a JSON Compilation Database when using the compdb tool.
;;         Bear generates a JSON Compilation Database file by "monitoring" the build of a project. The typical usage for a make-based project will be bear -- make -B.
;;     .clang_complete - A file at the root of your project containing the compilation flags, one per line. This is compatible with the with plugin Rip-Rip/clang_complete. If you want to generate the .clang_complete automatically, take a look at the cc_args.py documentation.
;; More detailed information on compilation database is available here:
;;     https://sarcasm.github.io/notes/dev/compilation-database.html
;; --------------------------------------
(
 package-install
 company-irony
 )
;; Configuration
;; Add company-irony to your company backends.
(eval-after-load 'company
  '(add-to-list 'company-backends 'company-irony))
;; --------------------------------------
(package-install flycheck-irony)
;; Configuration
(eval-after-load 'flycheck
  '(add-hook 'flycheck-mode-hook #'flycheck-irony-setup))
;; --------------------------------------
;; irony-eldoc - irony-mode support for eldoc-mode
(package-install irony-eldoc)
;; This implements eldoc support in irony-mode. eldoc is a built-in Emacs mode for displaying documentation about a symbol or function call at point in the message buffer (see eldoc-mode).
;; To use
;; Enable the minor mode irony-eldoc, as well as eldoc-mode. For an example, place point on top of a symbol, or inside a function call.
;; It is easiest to add irony-eldoc to irony-mode-hook, if you already have irony-mode set up.
(add-hook 'irony-mode-hook #'irony-eldoc)
;; --------------------------------------
#+end_src
* Другие интеграции
** INI/FIN/fin.el
:PROPERTIES:
:header-args: :tangle INI/FIN/fin.el
:END:
*** описание

*** used in
;; (find-file "~/.archemacs/INI/init.el")
*** src
#+begin_src elisp
(use-package hledger-mode
  ;; :disabled
  :ensure t
  :mode ("\\.journal\\'" "\\.hledger\\'")
  :init
  (setq hledger-jfile
        (expand-file-name "~/Dropbox/Office/finance/hledger/personal/accounting.journal"))
  :config
  (add-hook 'hledger-mode-hook
            (lambda ()
              (make-local-variable 'company-backends)
              (add-to-list 'company-backends 'hledger-company)))
  :preface
  (defun hledger/next-entry ()
    "Move to next entry and pulse."
    (interactive)
    (hledger-next-or-new-entry)
    (hledger-pulse-momentary-current-entry))
  (defun hledger/prev-entry ()
    "Move to last entry and pulse."
    (interactive)
    (hledger-backward-entry)
    (hledger-pulse-momentary-current-entry))
  :bind (("C-c M-j" . hledger-jentry)
         :map hledger-mode-map
         ("C-c e" . hledger-run-command)
         ("M-N" . hledger/prev-entry)
         ("M-n" . hledger/next-entry))
  )
#+end_src
** INI/www-cfg.el
:PROPERTIES:
:header-args: :tangle INI/www-cfg.el
:END:
*** описание

*** used in
;; (find-file "~/.archemacs/INI/init.el")
*** src
#+begin_src elisp
;; * EWW-MODE CUSTOMIZATION 
;; --------------------------------------
;; ** open-link-in-new-frame
;; --------------------------------------
(defun open-link-in-new-frame ()
  "open-link-in-new-frame"
  (interactive)
      (let (buffer-name-to-close (buffer-name))
        (evil-window-split)
        ;; (global-visual-line-mode)
        (eww-open-in-new-buffer)
        ;; (eww (shr-url-at-point nil))
        (evil-quit)
        (switch-to-buffer-other-frame buffer-name-to-close)))
;; --------------------------------------
;; ** eww-of
;; --------------------------------------
(defun eww-of (link)
  "open-eww-in-new-frame from link"
  (interactive)
      (let (buffer-name-to-close (buffer-name))
        (evil-window-split)
        ;; (global-visual-line-mode)
        (eww link)
        ;; (eww (shr-url-at-point nil))
        (evil-quit)
        (switch-to-buffer-other-frame buffer-name-to-close)))
;; --------------------------------------
;; ** org-open-link-in-new-frame
;; --------------------------------------
(defun org-open-link-in-new-frame ()
  " open org link in new frae end not folow
    org-open-link-in-new-frame"
  (interactive)
      (let (buffer-name-to-close (buffer-name))
        (evil-window-split)
        (org-open-at-point)
        ;; (eww (shr-url-at-point nil))
        (evil-quit)
        (switch-to-buffer-other-frame buffer-name-to-close)))
;; --------------------------------------
;; ** use-package
(use-package eww
  :defer t
  ;; :disabled
  :config
    ;; (setq pixel-wait 0.1)
    ;; (pixel-scroll-mode 1)
    ;; (setq scroll-preserve-screen-position 1)
    ;; (setq pixel-wait 0.10000000000000014)
;; ** external-browser : 
;; default value
;; (setq shr-external-browser 'browse-url-default-browser)
;; to set for special browse
;; (setq shr-external-browser 'browse-url-generic)
;; (setq browse-url-generic-program (executable-find "firefox"))
;; ** url-browser : 
;; (setq browse-url-browser-function
 ;; (setq browse-url-browser-function 'browse-url-generic
 ;;       browse-url-generic-program "qutebrowser")
(setq browse-url-handlers
      '((".*google.*maps.*" . browse-url-generic)
        ;; Github goes to firefox, but not gist
        ;; ("http.*\/\/github.com" . browse-url-generic)
        ("groups.google.com" . browse-url-generic)
        ("docs.google.com" . browse-url-generic)
        ;; ("melpa.org" . browse-url-generic)
        ("build.*\.elastic.co" . browse-url-generic)
        (".*-ci\.elastic.co" . browse-url-generic)
        ("gradle-enterprise.elastic.co" . browse-url-generic)
        ("internal-ci\.elastic\.co" . browse-url-generic)
        ("zendesk\.com" . browse-url-generic)
        ("salesforce\.com" . browse-url-generic)
        ;; ("stackoverflow\.com" . browse-url-generic)
        ("apache\.org\/jira" . browse-url-generic)
        ("thepoachedegg\.net" . browse-url-generic)
        ("zoom.us" . browse-url-generic)
        ("t.co" . browse-url-generic)
        ("twitter.com" . browse-url-generic)
        ("\/\/a.co" . browse-url-generic)
        ;; ("youtube.com" . browse-url-generic)
        ("amazon.com" . browse-url-generic)
        ("slideshare.net" . browse-url-generic)
        ("." . eww-browse-url)))

;; *** reader-browser : 
;; ** define-key : 
;; --------------------------------------
  :bind (:map  eww-mode-map
              ("C-<return>" . open-link-in-new-frame)
              ("o o" . eww)
              ("O O" . eww-browse-with-external-browser)
              ;; (\j . evil-scroll-line-down)
              ;; (\k . evil-scroll-line-up)
              ;; ("SPC" . buyn-reader-go)
              ;; ("SPC" . evil-scroll-down)
              ("SPC" . Info-scroll-up)
              ("Z F I" . (lambda() (interactive)
                            ((find-file-other-frame (expand-file-name "INI/www-cfg.el" user-emacs-directory)))))
              ;; ("S-SPC" . evil-scroll-up)
              ("S-SPC" . Info-scroll-down)
              ("<f8>" . read-aloud-buf)
              ("<f9>" . read-aloud-stop))

;; --------------------------------------
;; ** hooks : 
;; --------------------------------------
;; *** buyn-eww-hook : 
;; --------------------------------------
;; (defun buyn-eww-hook ()
;;    (global-visual-line-mode t))
;; (add-hook 'eww-mode-hook 'buyn-eww-hook)
;; *** eww-mode-hook : 
;; (add-hook 'eww-mode-hook #'toggle-word-wrap)
;; (add-hook 'eww-mode-hook #'buyn-reader-start)
;; --------------------------------------
;; ** the END) : 
  )
#+end_src
* **Мои Elisp скрипты**
** описание
   Персональные расширения и полезные функции.  
** list
  (find-file-other-frame (expand-file-name "ELs/BuYn/shell.el" user-emacs-directory))
  (find-file-other-frame (expand-file-name "ELs/BuYn/reader.el" user-emacs-directory))
  (find-file-other-frame "~/Dropbox/backup/file.el")
  ----- not auto loadet -----
  (find-file-other-frame "~/ELs/BuYn/ai-dungon.el")
  (find-file-other-frame "~/ELs/tts/tts-editor/tts-editor.el")
  (find-file-other-frame "~/ELs/BuYn/tts.el")
* **Архив и Deprecated конфиги**
** описание
    Всё, что уже не используется, но содержит полезные идеи.
** example
# :PROPERTIES:
# :header-args: :tangle INI/exempl.el
# :END:
*** описание

*** used in
;; (find-file "~/.archemacs/INI/init.el")
*** src
#+begin_src elisp

#+end_src
** elisp example
(load (expand-file-name "INI/interface/input-methods-cfg.el" user-emacs-directory))
** CANCELED команд 2 фрейме INI/evil_frame_cfg.el
CLOSED: [2025-02-25 Tue 01:20]
:PROPERTIES:
:header-args: :tangle no
:END:
# :header-args: :tangle INI/evil-frame-cfg.el
*** описание
Запуск команд в отдельнос фрейме
*** not used in
# ;; (find-file "~/.archemacs/INI/init.el")
*** src
#+begin_src elisp
;; --------------------- 
;; open comand on new frame 
;; --------------------- 
(defun run-command-in-new-frame (prefixarg command-name)
 (interactive (list current-prefix-arg (read-extended-command)))
 (let ((command (intern-soft command-name)))
   (unless command
    (error "%s is not a valid command name" command-name))
  (select-frame (make-frame))
  (let ((prefix-arg prefixarg))
    (command-execute command))))

(defun simple-run-command-in-new-frame (command)
  (select-frame (make-frame))
  (funcall command)
  (delete-other-windows))
;; --------------------- 
;; key for open comand on new frame 
;; --------------------- 
(define-key evil-normal-state-map "gtc" 'run-command-in-new-frame)
;; --------------------- 
;; key for open help on new frame 
;; --------------------- 
(define-key evil-normal-state-map "gthf" (lambda () (interactive) (simple-run-command-in-new-frame 'describe-function)))
(define-key evil-normal-state-map "gthk" (lambda () (interactive) (simple-run-command-in-new-frame 'describe-key)))
#+end_src
* блок для экспериментальных настроек
* Babel-блокам команд
* TODO орг файла
** add file to tagle evil-respect-input.el
(load (expand-file-name "ELs/Evil/evil-respect-input.el" user-emacs-directory))
** сделать теги и под разделы
*** обеснение
возность поиска как в вим
не только по контексту
но и тегам и сочетаниям тегов
тоесть обеденить тег бинды и ивил
и получить бинды ивала
а потом сделать поиск по разделам с такими тегами
*** биндс
*** ивил
** все бинды одного типа
(define-key org-mode-map (kbd "C-c <C-return>") 'org-table-insert-row)
** сделать блоки поиска
*** по тегам
*** по типам туду
получить список всех туду
*** возможно с учётом приоритетов
** ranger hydra menu
*** список папок куда открыть на ZR<space>
*** меню ганжера из ренжера
перейти в папку
набор действий
* start to use
** org-refile
*** link
(setq org-refile-targets '(("~/Dropbox/orgs/gtd/gtd.org" :maxlevel . 3)
*** review
некий инбокс с лёгкой класификацикй
** журнал для логирования
*** туду?
*** более одного журнал?
для логов туду машины
и отдельно имакса
журнал для каждого проекат
или всётаеи проще просто один орг лог фаил
* 2025-02-07


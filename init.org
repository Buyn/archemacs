* Index links
** by keys
*** f1
(global-set-key (kbd "C-<f1> C-<f1>") (lambda () (interactive)
                (find-file-other-frame (expand-file-name "ORG/start.org" user-emacs-directory))))
(global-set-key (kbd "C-<f1> C-<f2>") (lambda () (interactive)
                (find-file-other-frame (expand-file-name "init.org" user-emacs-directory))))
*** f2
(define-key evil-insert-state-map (kbd "<f2>") '(lambda() (interactive)
                (save-buffer)
                (evil-normal-state)))
*** f8
**** [[*DEVELOPMENT-KEY CUSTOMIZATION][DEVELOPMENT-KEY CUSTOMIZATION]]
(global-set-key (kbd "<f8>") nil)
*** c
**** C-c
(global-set-key (kbd "C-c l") 'org-store-link)
(global-set-key (kbd "C-c a") 'org-agenda)
(global-set-key (kbd "C-c c") 'org-capture)
*** e
(define-key evil-normal-state-map (kbd "M-e M-f M-f") 'xref-find-definitions)

(define-key evil-normal-state-map (kbd "M-e M-l") 'eval-last-sexp)

(define-key evil-normal-state-map (kbd "M-e M-s M-l") 'send-activ-line-to-eshell-buffer-and-execute)
*** f
(define-key evil-normal-state-map (kbd "f") 'evil-avy-goto-char-in-line)
FL timer
*** g
**** gTT
    "gTT" 'elscreen-previous
    "gTS" 'elscreen-toggle-display-tab
    "gTL" 'elscreen-clone
    "gTC" 'elscreen-kill
**** gtt
    "gt" nil
    ;; "gtt" 'elscreen-next
    "gtt" 'next-or-make-new-tab
*** h
**** C-h
***** evil-insert-state-map
(define-key evil-insert-state-map (kbd "C-h") '(lambda() (interactive)
*** s
**** C-s
***** evil-insert-state-map
(define-key evil-insert-state-map (kbd "C-s") '(lambda() (interactive)
*** z
(define-key evil-normal-state-map "ZO" 'switch-to-buffer-other-frame)
(define-key evil-normal-state-map "ZI" '(lambda() (interactive)
  (define-key evil-visual-state-map "zf" '(lambda() (interactive)
*** return
**** org-mode-map
(define-key org-mode-map
      (kbd "S-M-<return>") 'org-insert-subheading)
** by mods
*** emms
(use-package emms
"C-<XF86AudioPlay>" emms-pause
"C-S-<XF86AudioPause>" emms

    (global-set-key (kbd "C-<XF86AudioPrev>") 'emms-previous)
    (global-set-key (kbd "C-<XF86AudioNext>") 'emms-next)

    (global-set-key (kbd "C-<XF86AudioStop>") '(lambda()        (emms-player-seek 60)))

    (global-set-key (kbd "C-S-<XF86Eject>") '(lambda()        (emms-player-seek -60)))
*** hydra
**** [[*menus for 00][menus for 00]]
[[*spc-main-menu00][spc-main-menu00]]
***** ai
(defhydra hydra-ai-menu (:color blue)
***** models
(defhydra hydra-ai-model-menu (:color blue)
***** [[*dev-menu][dev-menu]]
*** ranger
(use-package ranger
** mods
FRAME [[*src INI/frame-control.el][src INI/frame-control.el]]
global-set-key
evil-normal-state-map
evil-visual-state-map
org-mode-map
org-src-mode-map
* **Core Initialization (Ядро)**
:PROPERTIES:
:header-args: :mkdirp yes
:END:
** описание
   Всё, что связано с базовой загрузкой, включая `init.el`, пакеты и первоначальные настройки.
   установка пкетменеджеров страйта и юз-пакеджера.
** TODO init.el 
:PROPERTIES:
:header-args: :tangle init.el
:END:
*** Start of manual file
**** load INI/init.el
;; --------------------------------------
;; .emacs --- Emacs configuration
;; --------------------------------------
;; * Start of manual file
;; --------------------------------------
;; (find-file-other-window "~/.archemacs/INI/init.el")
;; (load "~/.archemacs/INI/init.el")
#+begin_src elisp :tangle init.el
(load (expand-file-name "INI/init.el" user-emacs-directory))
#+end_src
**** load INI/init-light.el
;; (find-file-other-window "~/.archemacs/INI/init-light.el")
#+begin_src elisp :tangle no
;; (load (expand-file-name "INI/init-light.el" user-emacs-directory))
#+end_src
;; --------------------------------------
;; ** End of manual file
;; --------------------------------------
;; --------------------------------------
*** START OF AUTOMATION 
;; * START OF AUTOMATION 
;; --------------------------------------
 '(gptel-model "gpt-3.5-turbo-16k")
#+begin_src elisp
(custom-set-variables
 ;; custom-set-variables was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(ediff-split-window-function 'split-window-horizontally)
 '(ediff-window-setup-function 'ediff-setup-windows-plain)
 '(package-selected-packages
   '(aider w3m emms ytel-show ytel lsp-treemacs lsp-ivy lsp-ui clj-refactor cider lsp-mode parinfer-rust-mode which-key diminish magit ranger yasnippet-snippets skewer-mode reverse-im rainbow-delimiters quelpa-use-package projectile powerline plantuml-mode outshine org-roam-ui org-brain ob-translate miracle material-theme lua-mode jedi ivy hydra hledger-mode graphviz-dot-mode gptel gpt flycheck expand-region evil-tabs elpy company-jedi company-fuzzy avy)))
(custom-set-faces
 ;; custom-set-faces was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(mode-line ((t (:foreground "Black" :background "DarkOrange" :box nil)))))
#+end_src
 '(package-vc-selected-packages '((aider :url "https://github.com/tninja/aider.el"))))
*** TODO сменить "gpt-3.5-turbo-16k"
 '(gptel-model "gpt-3.5-turbo-16k")
** "INI/init.el"
:PROPERTIES:
:header-args: :tangle INI/init.el
:END:
*** els load list
#+begin_src elisp
(load (expand-file-name "INI/inpak.el" user-emacs-directory))

(load (expand-file-name "INI/vanila_cfg.el" user-emacs-directory))

(load (expand-file-name "INI/evil-mod-cfg.el" user-emacs-directory))

(load (expand-file-name "INI/interface-mods.el" user-emacs-directory))

(load (expand-file-name "INI/org-cfg.el" user-emacs-directory))

(load (expand-file-name "INI/file-mng-cfg.el" user-emacs-directory))

(load (expand-file-name "INI/hydra-cfg.el" user-emacs-directory))

(load (expand-file-name "INI/frame-control.el" user-emacs-directory))

(load (expand-file-name "INI/auto-cfg.el" user-emacs-directory))

;; (load (expand-file-name "INI/folding-cfg.el" user-emacs-directory))

(load (expand-file-name "INI/lit-cfg.el" user-emacs-directory))

(load (expand-file-name "INI/dev-cfg.el" user-emacs-directory))

(load (expand-file-name "INI/FIN/fin.el" user-emacs-directory))

(use-package eww
  :defer t
  :config
  (load (expand-file-name "INI/www-cfg.el" user-emacs-directory)))

(load (expand-file-name "INI/advnsed-selections-cfg.el" user-emacs-directory))

(load (expand-file-name "INI/AI/ai.el" user-emacs-directory))

(load (expand-file-name "INI/other/calc.el" user-emacs-directory))

(load (expand-file-name "INI/other/telegram.el" user-emacs-directory))

(load (expand-file-name "ELs/BuYn/shell.el" user-emacs-directory))

;; (load "~/Dropbox/backup/file.el")
(let ((file-path "~/Dropbox/backup/file.el"))
  (when (file-exists-p file-path)
    (load file-path)))

(let ((file-path
       (concat
        "~/.emacs.d/"
        (nth 0 (split-string
                (with-temp-buffer
                  (insert-file-contents "/etc/hostname")
                  (buffer-string))))
        ".el")))
  (when (file-exists-p file-path)
    (load file-path)))

(message "Load of init.el is ended")
#+end_src
** INI/inpak.el
:PROPERTIES:
:header-args: :tangle INI/inpak.el
:END:

;; (find-file "~/INI/init.el")
#+begin_src elisp
;; ** add package-archives
;; --------------------------------------
(require 'package)
;; add from melpa site;  {{{
(let* ((no-ssl (and (memq system-type '(windows-nt ms-dos))
                    (not (gnutls-available-p))))
       (proto (if no-ssl "http" "https")))
  (when no-ssl
    (warn "\
Your version of Emacs does not support SSL connections,
which is unsafe because it allows man-in-the-middle attacks.
There are two things you can do about this warning:
1. Install an Emacs version that does support SSL and be safe.
2. Remove this warning from your init file so you won't see it again."))
  ;; Comment/uncomment these two lines to enable/disable MELPA and MELPA Stable as desired
  (add-to-list 'package-archives (cons "melpa" (concat proto "://melpa.org/packages/")) t)
  ;;(add-to-list 'package-archives (cons "melpa-stable" (concat proto "://stable.melpa.org/packages/")) t)
  (when (< emacs-major-version 24)
    ;; For important compatibility libraries like cl-lib
    (add-to-list 'package-archives (cons "gnu" (concat proto "://elpa.gnu.org/packages/")))))
; }}}
;; (add-to-list 'package-archives
;; ;;        '("melpa" . "http://melpa.org/packages/") t)
;;        '("melpa" . "http://melpa.org/packages/") )
;; (add-to-list 'package-archives 
;;     '("org" . "http://orgmode.org/elpa/") t)
(add-to-list 'package-archives 
     '("melpa-stable" . "http://stable.melpa.org/packages/") t)
;; --------------------------------------
;; ** Automatically Installing Packages
;; --------------------------------------
;; D:\Development\lisp\doc\Cfg\use-pac.txt
;; --------------------------------------
;; M-x package-refresh-contents
;; before
;; M-x package-install RET evil
;; if you're going to call (package-initialize) yourself.
;;(setq package-enable-at-startup nil)

(package-initialize)
(when (not package-archive-contents)
  (package-refresh-contents))

(defvar myPackages '(
  better-defaults
  use-package
    material-theme))

(mapc #'(lambda (package)
    (unless (package-installed-p package)
      (package-install package)))
      myPackages)
;; (require 'use-package)

;; tar not found when trying to install from melpa 
;; You probably have an outdated package database
;; (package-refresh-contents)
;; ;; This is only needed once, near the top of the file
;; (eval-when-compile
;;   ;; Following line is not needed if use-package.el is in ~/.emacs.d
;;   (add-to-list 'load-path "<path where use-package is installed>")
;;   (require 'use-package))
;; --------------------------------------
;; ** quelpa-use-package :
;; --------------------------------------
(require 'use-package) 
(use-package quelpa-use-package :ensure t)
;; --------------------------------------
#+end_src
** INI/vanila_cfg.el
:PROPERTIES:
:header-args: :tangle INI/vanila_cfg.el
:END:
*** used in
;; (find-file "~/INI/init.el")
[[*els load list][els load list]]
*** src
#+begin_src elisp
;; * VANILA CUSTOMIZATION
;; --------------------------------------
;; ** startup : 
;; Disables the startup message (this is the screen with all the tutorial information)
(setq inhibit-startup-message t) ;; hide the startup message
(tool-bar-mode -1)
(menu-bar-mode -1)
;; ------------------------------------------------------
(setq ring-bell-function 'ignore) ;; отключить звуковой сигнал
;; ------------------------------------------------------
(add-to-list 'default-frame-alist '(height . 35))
(add-to-list 'default-frame-alist '(width . 75))
;; ------------------------------------------------------
(defalias 'yes-or-no-p 'y-or-n-p)
;; ------------------------------------------------------
;; ** load-theme : 
;; ------------------------------------------------------
(load-theme 'material t) ;; load material theme
;;(global-linum-mode t) ;; enable line numbers globally
;;(set-frame-font "Trebuchet MS")
;;(set-frame-font "Ubuntu Mono")
;;(set-default-font "Ubuntu Mono")
;; ------------------------------------------------------
;; ** font : 
;; ------------------------------------------------------
(set-language-environment "UTF-8")
(add-to-list 'default-frame-alist
             '(font . "Ubuntu Mono"))

;; Включаем emoji!
(when (member "Noto Color Emoji" (font-family-list))
  (set-fontset-font t 'emoji "Noto Color Emoji" nil 'prepend))
;; ------------------------------------------------------
;; ** tab-width : 
;; ------------------------------------------------------
;; (setq-default tab-width 2)
(setq-default tab-width 8) 
(setq-default indent-tabs-mode nil) 
;; (setq tab-width 8) 
;; ------------------------------------------------------
;; ** line-numbers-mode : 
;; ------------------------------------------------------
;;Unfortunately, Emacs's help message is pretty bad in this case. The menu button is bound to an anonymous function, and the help system is basically displaying the byte-compiled version of that function. I got the Emacs source, searched for the unique looking string "Relative line numbers enabled", and found the function in lisp/menu-bar.el:
;;
;;  (lambda ()
;;    (interactive)
;;    (menu-bar-display-line-numbers-mode 'relative)
;;    (message "Relative line numbers enabled"))

;; (menu-bar-display-line-numbers-mode 'relative)
;; The canonical way to set this is adding display-line-numbers-mode to a mode hook,
;; (add-hook 'foo-mode-hook #'display-line-numbers-mode)
;; or enabling global-display-line-numbers-mode if you want them everywhere,
(global-display-line-numbers-mode 0)
;; and to set display-line-numbers-type to the desired style:
;; (setq display-line-numbers-type 'relative)
;;Relative line numbers enabled
;; ------------------------------------------------------
;; ** Warp line : 
;; ------------------------------------------------------
;; Warp line on visula line end
(global-visual-line-mode t)

;; This can also be turned on using the menu bar, via
;; Options -> Line Wrapping in this Buffer -> Word Wrap
(setq-default truncate-lines nil)
(setq-default line-move-visual t)
(setq-default word-wrap t)
(setq truncate-lines nil)
(setq line-move-visual t)
(setq word-wrap t)
;; (setq visual-line-fringe-indicators '(left-curly-arrow right-curly-arrow))
;; ------------------------------------------------------
;; ** paren : 
;; ------------------------------------------------------
;; *** paren-mode : 
;; ------------------------------------------------------
(show-paren-mode 1)
;; for working with pair-able characters
;; lightweight package electric, which provided by Emacs out of the box.
(electric-pair-mode 1)
;; It supports, by default, ACSI pairs {}, [], () and Unicode ‘’, “”,
;; Let's add the org-emphasises markers.
;; (setq electric-pair-pairs
;;       '(
;;         (?~ . ?~)
;;         (?* . ?*)
;;         (?/ . ?/)
;;        ))
;; ------------------------------------------------------
;; *** Wrapping selecting text in enclosing characters
;; ------------------------------------------------------
;; For parens you can do M-(. For brackets/braces/quotes you could do:
(global-set-key (kbd "M-[") 'insert-pair)
(global-set-key (kbd "M-{") 'insert-pair)
(global-set-key (kbd "M-<") 'insert-pair)
(global-set-key (kbd "M-\"") 'insert-pair)
;; Also handy for deleting matching whatevers is
(global-set-key (kbd "M-)") 'delete-pair)
(global-set-key (kbd "M-}") 'delete-pair)
(global-set-key (kbd "M-]") 'delete-pair)
(global-set-key (kbd "M->") 'delete-pair)
;; ------------------------------------------------------
;; ** change input method
;; ------------------------------------------------------
(set-input-method "russian-computer")
(global-set-key (kbd "C-^") 'toggle-input-method)
;; ------------------------------------------------------
;; ** Backups
;; ------------------------------------------------------
;; By default, Emacs saves backup files – those ending in ~ – in the current directory, thereby cluttering it up.
;; Let's place them in ~/.emacs.d/backups, in case we need to look for a backup; moreover, let's keep old versions since there's disk space to go around
;;–what am I going to do with 500gigs when nearly all my ‘software’ is textfiles interpreted within Emacs 
;; New location for backups.
(setq backup-directory-alist '(("." . "~/.archemacs/backups")))
;; Never silently delete old backups.
;; (setq delete-old-versions -1)
;; Use version numbers for backup files.
;; (setq version-control t)
(setq auto-save-default nil)
(setq make-backup-files t)
;; Even version controlled files get to be backed up.
;; (setq vc-make-backup-files t)
;; ------------------------------------------------------
;; ** Visual
;; ------------------------------------------------------
(when window-system (add-hook 'prog-mode-hook 'hl-line-mode))
(scroll-bar-mode -1)
;; ------------------------------------------------------
;; ** Frame
;; ------------------------------------------------------
;; (set-frame-size (selected-frame) 75 25)
(add-to-list 'default-frame-alist '(height . 25))
(add-to-list 'default-frame-alist '(width . 75))
;; ------------------------------------------------------
;; ** show Emoji
;; ------------------------------------------------------
(when (member "Twitter Color Emoji" (font-family-list))
  (set-fontset-font
    t 'symbol (font-spec :family "Twitter Color Emoji") nil 'prepend))
;; ------------------------------------------------------
;; ** Menu bar & key
;; ------------------------------------------------------
;; *** coments : 
;; (menu-bar-mode -1)
;; (menu-bar-mode 1)
;; (menu-bar-open)
;; ------------------------------------------------------
;; *** defun buyn-menu-bar-open : 
(defun buyn-menu-bar-open ()
  "Show Menu bar on all frames
    and open menu 
    set f10 to (buyn-menu-bar-close)"
  (interactive)
  (menu-bar-mode 1)
  (menu-bar-open)
  (global-set-key (kbd "<f10>") 'buyn-menu-bar-close)
  )
;; ------------------------------------------------------
;; ------------------------------------------------------
;; *** defun buyn-menu-bar-close : 
(defun buyn-menu-bar-close()
  "Hide Menu bar on all frames
    and set f10 to (buyn-menu-bar-open)"
  (interactive)
  (menu-bar-mode -1)
  ;; (menu-bar-open)
  (global-set-key (kbd "<f10>") 'buyn-menu-bar-open)
  )
;; ------------------------------------------------------
;; *** set-key f10 : 
;; ------------------------------------------------------
  (global-set-key (kbd "<f10>") 'buyn-menu-bar-open)
;; ------------------------------------------------------
;; *EDIFF CUSTOMIZATION
;; --------------------------------------

(custom-set-variables
 '(ediff-window-setup-function 'ediff-setup-windows-plain)
 ;; Finally got around to customizing the vertical split to be the default one (last line in the config):
 ;; '(ediff-diff-options "-w")
 '(ediff-split-window-function 'split-window-horizontally))
;; ------------------------------------------------------
;; * “Interactively Do Things” (a.k.a. ido)
;; ------------------------------------------------------
(require 'ido)
(ido-mode t)
;; ------------------------------------------------------

;; * initial-scratch-message : 
(setq initial-scratch-message ";; * This buffer for Lisp evaluation.
;; This buffer is for text that is not saved, and for Lisp evaluation.
;; To create a file, visit it with \\[find-file] and enter text in its buffer.
;; 
;;| |_| |_| |           | |_| |_| |
;; \\ _____ /      o_     \\ _____ /
;;  |     |       |_|     |     |
;;  |  |  |       |       |  |  |
;;  |   _ l _   _ | _   _ l _   |
;;  |  | |_| |_| ||| |_| |_| |  |
;;  |  |                     |  |
;;  || |                     | ||
;;  |  |        _____        |  |
;;  |  |       /_|_|_\\       |  |
;;  |  |      /|_|_|_|\\      |  |
;;  |  |      ||_|_|_||      |  |
;;  |  |      ||_|_|_||      |  |
;;  |__|      ||_|_|_||      |__|
;; /   |      ||_|_|_||      |   \\
;; =================================
;; * Whenever I open Emacs, I feel inspired. 
;; Like a craftsman entering his workshop, I feel a realm of possibility open before me. I feel the comfort of an environment that has evolved over time to fit me perfectly—an assortment of packages and key bindings that help me bring ideas to life day after day.
")
;; * --------------------------------------

#+end_src

* **UI и интерфейсные улучшения**
** описание
   Темы, powerline, minimap и кастомные элементы интерфейса.
** INI/interface-mods.el
:PROPERTIES:
:header-args: :tangle INI/interface-mods.el
:END:
*** описание

*** used in
;; (find-file "~/.archemacs/INI/init.el")
*** src
**** IVY CUSTOMIZATION
;; --------------------------------------
#+begin_src elisp
(require 'use-package)
(use-package ivy :ensure t
  ;; :init
  ;; (elpy-enable)
  :config
  (ivy-mode 1)
  (ido-mode nil)
  )
#+end_src

;;  --------------------------------------
**** AVY CUSTOMIZATION
;; --------------------------------------

#+begin_src elisp
(use-package avy :ensure t
  ;; :init
  ;; (elpy-enable)
  :config
    (define-key evil-normal-state-map (kbd "M-f") 'avy-goto-word-1)
    (define-key evil-normal-state-map (kbd "M-F") 'avy-goto-char-timer)
    (define-key evil-normal-state-map (kbd "f") 'evil-avy-goto-char-in-line)
    (define-key evil-visual-state-map (kbd "f") 'evil-avy-goto-char-in-line)
    (define-key evil-normal-state-map (kbd "F") nil)
    (define-key evil-visual-state-map (kbd "F") nil)
    ;; (define-key evil-normal-state-map (kbd "FF") 'khaoos-evil-find-char)
    ;; (define-key evil-visual-state-map (kbd "FF") 'khaoos-evil-find-char)
    (define-key evil-normal-state-map (kbd "FF") 'evil-find-char)
    (define-key evil-visual-state-map (kbd "FF") 'evil-find-char)
    (define-key evil-normal-state-map (kbd "FJ") 'avy-goto-word-1-below)
    (define-key evil-visual-state-map (kbd "FJ") 'avy-goto-word-1-below)
    (define-key evil-normal-state-map (kbd "FK") 'avy-goto-word-1-above)
    (define-key evil-visual-state-map (kbd "FK") 'avy-goto-word-1-above)
    (define-key evil-normal-state-map (kbd "FH") 'avy-goto-char-timer)
    (define-key evil-visual-state-map (kbd "FH") 'avy-goto-char-timer)
    (define-key evil-normal-state-map (kbd "FL") 'avy-goto-char-timer)
    (define-key evil-visual-state-map (kbd "FL") 'avy-goto-char-timer)
    ;; (define-key evil-normal-state-map (kbd "Ff") 'khaoos-evil-find-char-backward)
    ;; (define-key evil-visual-state-map (kbd "Ff") 'khaoos-evil-find-char-backward)
    (define-key evil-normal-state-map (kbd "Ff") 'evil-find-char-backward)
    (define-key evil-visual-state-map (kbd "Ff") 'evil-find-char-backward)
  )
#+end_src
;; --------------------------------------
**** DIMINISH CUSTOMIZATION
;; --------------------------------------

#+begin_src elisp
(use-package diminish
  :ensure t
  :demand t
  ;; :init
  :config
  (diminish 'which-key-mode)
  ;; (diminish 'linum-relative-mode)
  ;; (diminish 'hungry-delete-mode)
  ;; (diminish 'subword-mode)
  ;; (diminish 'beacon-mode)
  ;; (diminish 'irony-mode)
  ;; (diminish 'page-break-lines-mode)
  ;; (diminish 'auto-revert-mode)
  (diminish 'rainbow-delimiters-mode)
  (diminish 'rainbow-mode)
  (diminish 'org-roam-ui-mode)
  (diminish 'yas-minor-mode)
  ;; (diminish 'yas-minor-mode)
  ;; (diminish 'flycheck-mode)
  (diminish 'ivy-mode)
  (diminish 'outshine-mode)
  ;; (diminish 'outshine)
  ;; (diminish 'outline-mode)
  (diminish 'company-fuzzy-mode " CpF")
  (diminish 'outline-minor-mode)
  (diminish 'ComFuz-mode)
  ;; (diminish 'subword-mode)
  (diminish 'visual-line-mode)
  ;; (diminish '+3-mode)
  (diminish 'helm-mode))
#+end_src
;; --------------------------------------
**** WHICH-KEY CUSTOMIZATION
;; --------------------------------------
#+begin_src elisp
(use-package which-key
  :ensure t
  :config
    (which-key-mode))
;; --------------------------------------
#+end_src
**** LOAD ELS
#+begin_src elisp
;;  --------------------------------------
;; * POWERLINE CUSTOMIZATION
;; --------------------------------------
;; (find-file-other-frame "~/.archemacs/INI/interface/powerline-cfg.el")
;; (load "~/.archemacs/INI/interface/powerline-cfg.el")
(load (expand-file-name "INI/interface/powerline-cfg.el" user-emacs-directory))
;; --------------------------------------
;; * INPUT-METHODS CUSTOMIZATION: 
;; --------------------------------------
;; (find-file-other-frame "~/.archemacs/INI/interface/input-methods-cfg.el")
;; (load "~/.archemacs/INI/interface/input-methods-cfg.el")
(load (expand-file-name "INI/interface/input-methods-cfg.el" user-emacs-directory))
;; --------------------------------------

#+end_src

** INI/interface/powerline-cfg.el
:PROPERTIES:
:header-args: :tangle INI/interface/powerline-cfg.el
:END:
*** описание

*** used in
;; (find-file "~/.archemacs/INI/interface-mods.el")
*** src
#+begin_src elisp
;; * POWERLINE CUSTOMIZATION
;; --------------------------------------
;; (find-file-other-frame "~/.archemacs/INI/interface/jonathanchu-emacs-powerline-cfg.el") 
;; (load "~/.archemacs/INI/interface/jonathanchu-emacs-powerline-cfg.el")
(load (expand-file-name "INI/interface/jonathanchu-emacs-powerline-cfg.el" user-emacs-directory))
;; --------------------------------------;; 
;; * SPACELINE CUSTOMIZATION
;; --------------------------------------;; 
;; (find-file-other-frame "~/.archemacs/INI/interface/spaceline-cfg.el") notuse
;; (load "~/.archemacs/INI/interface/spaceline-cfg.el")
;; (load (expand-file-name "INI/interface/spaceline-cfg.el" user-emacs-directory))
;; --------------------------------------;; 
#+end_src
** INI/interface/jonathanchu-emacs-powerline-cfg.el
:PROPERTIES:
:header-args: :tangle INI/interface/jonathanchu-emacs-powerline-cfg.el
:END:
*** описание
*** used in
;; (find-file "~/INI/interface/powerline-cfg.el")
*** src
#+begin_src elisp
;; * POWERLINE CUSTOMIZATION
;; --------------------------------------
;; ** install
;; https://github.com/Dewdrops/powerline
;; https://github.com/jonathanchu/emacs-powerline
(unless (package-installed-p 'powerline)
  (use-package powerline 
  ;; :ensure t 
    :quelpa ( powerline 
              ;; :repo "dewdrops/powerline"
              :repo "jonathanchu/emacs-powerline"
              :fetcher github)))
;; ** use-package powerline : 
;; *** --------------------------------------
(use-package powerline 
  ;; :ensure t
;; *** :init
  ;; :init 
  ;;  (set-face-attribute 'mode-line nil
  ;;                      :foreground "Black"
  ;;                      :background "DarkOrange"
  ;;                      :box nil)
  ;;  (setq powerline-arrow-shape 'curve);; 
;; *** :config : 
  :config
    ;; (load "~/ELs/powerline/sm-package-powerline.el")
    ;; (powerline-default-theme)
    (setq powerline-arrow-shape 'curve);; 
    (set-face-attribute 'mode-line nil
                        :foreground "Black"
                        :background "DarkOrange"
                        :box nil)
    (custom-set-faces
    '(mode-line ((t (
                      ;; :foreground "#030303"
                      ;; :background "#bdbdbd"
                      :foreground "Black"
                      :background "DarkOrange"
                      :box nil)))))
    ;; '(mode-line-inactive ((t (
    ;;                  :foreground "#f9f9f9"
    ;;                  :background "#666666"
    ;;                  :box nil)))))
;; *** END )
  )
;; --------------------------------------;; 

#+end_src
** CANCELED INI/interface/spaceline-cfg.el
CLOSED: [2025-02-11 Tue 16:29]
:PROPERTIES:
:header-args: :tangle no
:END:
# :tangle INI/interface/spaceline-cfg.el
*** описание
Не используется но следовола бы перейти
много потдержки и явлется основным решение
которое устанавливается с мельпы а не в ручную с гита
*** used in
;; (find-file "~/INI/interface/powerline-cfg.el")
*** src
#+begin_src elisp
;; * SPACELINE CUSTOMIZATION
;; ** spaceline powerline : 
(use-package spaceline 
  :ensure t
;; *** spaceline config
  :config
    ;; (spaceline-spacemacs-theme)
    ;; (spaceline-emacs-theme)
  (require 'spaceline-config)
    (setq spaceline-buffer-encoding-abbrev-p nil)
    (setq spaceline-line-column-p nil)
    (setq spaceline-line-p nil)
    (setq powerline-default-separator (quote arrow))
    (spaceline-spacemacs-theme)
;; *** END )
  )
;; --------------------------------------
#+end_src
** INI/interface/input-methods-cfg.el
:PROPERTIES:
:header-args: :tangle INI/interface/input-methods-cfg.el
:END:
*** описание

*** used in
;; (find-file "~/.archemacs/INI/interface-mods.el")
*** src
#+begin_src elisp
;; * REVERSE-IM CUSTOMIZATION:
;; --------------------------------------
;; ** install
;; https://github.com/a13/reverse-im.el
(use-package reverse-im
  :ensure t
;; ** :config:
  :custom
  (reverse-im-input-methods '("russian-computer"))
  :config
  (reverse-im-mode t)
;; ** define-key:
  ;; (define-key evil-visual-state-map (kbd "M-U") 'reverse-im-translate-region)
  (define-key evil-visual-state-map (kbd "M-U") '(lambda () (interactive) 
            (reverse-im-translate-region (region-beginning) (region-end))
            (toggle-input-method)))
  (define-key evil-insert-state-map (kbd "M-U") 'reverse-im-translate-word)
  (define-key evil-insert-state-map (kbd "C-U") '(lambda () (interactive) 
            (reverse-im-translate-word 1)
            (toggle-input-method)))
;; ** use-package END)
  )
;; ** --------------------------------------
#+end_src
* **горячие клавиши**
** **Evil и навигация**
*** evil-mod
:PROPERTIES:
:header-args: :tangle INI/evil-mod-cfg.el
:END:
**** описание
  Всё, связанное с `evil-mode`, табами и улучшением навигации по буферам/фреймам.  
**** used in
;; (find-file "~/.archemacs/INI/init.el")
**** EVIL-MOD CUSTOMIZATION
***** use-package evil
;; --------------------------------------
;; *** before evil load
#+begin_src elisp
(global-visual-line-mode t)
(setq evil-respect-visual-line-mode t)
(setq evil-cross-lines t)
(use-package evil :ensure t
    :init (setq evil-want-C-i-jump nil)
  )
(require 'evil)
(evil-mode t)
#+end_src
;; *** use-package : 
    ;;  (global-visual-line-mode t)
    ;;  (setq evil-respect-visual-line-mode nil)
  ;; :bind ("C-c c" hydra-clock/body)
;; *** END of use-package evil
***** Setings
;; --------------------------------------
;; (setq evil-mode-line-format nil
;;       evil-insert-state-cursor '(bar "White")
;;       evil-visual-state-cursor '(box "#F86155"))
#+begin_src elisp
    (setq evil-shift-width 2)
    (setq-default evil-shift-width 2)
#+end_src
;; --------------------------------------
;; (define-key key-translation-map (kbd "ch") (kbd "C-h"))
;; (define-key evil-normal-state-map "c" nil)
;; (define-key evil-motion-state-map "cu" 'universal-argument)
;; -------------------------------------- }}}
***** Clipboard
#+begin_src elisp
(setq x-select-enable-clipboard nil)
;; (fset 'evil-visual-update-x-selection 'ignore)
;; (setq save-interprogram-paste-before-kill t)
;; *** M-c M-y : 
(define-key evil-normal-state-map (kbd "M-c M-y") '(lambda() (interactive)
          (setq x-select-enable-clipboard t)
          ;; (kill-ring-save (region-beginning) (region-end))
          (kill-ring-save (line-beginning-position) (line-beginning-position 2))
          (setq x-select-enable-clipboard nil)))
(define-key evil-visual-state-map (kbd "M-c M-y") '(lambda() (interactive)
          (setq x-select-enable-clipboard t)
          (kill-ring-save (region-beginning) (region-end))
          (setq x-select-enable-clipboard nil)))
;; *** M-y M-y : 
(define-key evil-normal-state-map (kbd "M-y M-y") '(lambda() (interactive)
          (setq x-select-enable-clipboard t)
          ;; (kill-ring-save (region-beginning) (region-end))
          (kill-ring-save (line-beginning-position) (line-beginning-position 2))
          (setq x-select-enable-clipboard nil)))
(define-key evil-visual-state-map (kbd "M-y M-y") '(lambda() (interactive)
          (setq x-select-enable-clipboard t)
          (kill-ring-save (region-beginning) (region-end))
          (setq x-select-enable-clipboard nil)))
;; *** M-y M-c : yank to calc
(define-key evil-visual-state-map (kbd "M-y M-c") '(lambda() (interactive)
          (let ((text (buffer-substring (region-beginning) (region-end))))
            (kill-ring-save (region-beginning) (region-end))
            (calc)
            ;; (calc-copy-to-buffer text)
            ;; (calc-kill-region (region-beginning) (region-end))
            (calc-yank 0))))

;; *** M-c M-Y : 
(define-key evil-normal-state-map (kbd "M-c M-Y") '(lambda() (interactive)
          (setq x-select-enable-clipboard t)
          (kill-ring-save (line-beginning-position) (line-beginning-position 2))
          (setq x-select-enable-clipboard nil)))
;; *** M-c M-a : 
(define-key evil-normal-state-map (kbd "M-c M-a") '(lambda() (interactive)
          (setq start (point))
          (mark-whole-buffer)
          (setq x-select-enable-clipboard t)
          (kill-ring-save (region-beginning) (region-end))
          (setq x-select-enable-clipboard nil)
          (message "Buffer in Clipbord")
          (goto-char start)
          ))
;; *** M-c M-x : 
(define-key evil-normal-state-map (kbd "M-c M-x") '(lambda() (interactive)
          (message "no shift is prest")
          (setq x-select-enable-clipboard t)
          (setq tmp-region-beginning (region-beginning))
          ;; (message "set region")
          (setq tmp-region-end (region-end))
          (kill-ring-save (region-beginning) (region-end))
          (kill-region tmp-region-beginning tmp-region-end)
          (setq tmp-region-beginning nil)
          ;; (message "set region")
          (setq tmp-region-end nil)
          (setq x-select-enable-clipboard nil)
          ))
;; *** M-c M-X : 
(define-key evil-normal-state-map (kbd "M-c M-X") '(lambda() (interactive)
          (message "shift is prest")
          (setq x-select-enable-clipboard t)
          (evil-delete-whole-line nil  nil)
          (setq x-select-enable-clipboard nil)
          ))
;; *** M-c M-p: 
(define-key evil-normal-state-map (kbd "M-c M-p") '(lambda() (interactive)
                (setq x-select-enable-clipboard 1)
                (yank)
                (setq x-select-enable-clipboard nil)))
(define-key evil-visual-state-map (kbd "M-c M-p") '(lambda() (interactive)
    (setq x-select-enable-clipboard 1)
    (let ((last-clip (current-kill 0 "DO-NOT-MOVE")))
      (kill-region (region-beginning) (region-end))
      (insert last-clip)
      )
    (setq x-select-enable-clipboard nil)
    ))
;; *** M-p M-p: 
(define-key evil-normal-state-map (kbd "M-p M-p") '(lambda() (interactive)
                (setq x-select-enable-clipboard 1)
                (yank)
                (setq x-select-enable-clipboard nil)))
(define-key evil-visual-state-map (kbd "M-p M-p") '(lambda() (interactive)
    (setq x-select-enable-clipboard 1)
    (let ((last-clip (current-kill 0 "DO-NOT-MOVE")))
      (kill-region (region-beginning) (region-end))
      (insert last-clip)
      )
    (setq x-select-enable-clipboard nil)
    ))
;; *** M-c M-o : 
(define-key evil-normal-state-map (kbd "M-c M-o") '(lambda() (interactive)
        (setq x-select-enable-clipboard 1)
        (evil-insert-newline-below)
        (yank)
        (setq x-select-enable-clipboard nil)))
;; *** M-p M-o : 
(define-key evil-normal-state-map (kbd "M-p M-o") '(lambda() (interactive)
        (setq x-select-enable-clipboard 1)
        (evil-insert-newline-below)
        (yank)
        (setq x-select-enable-clipboard nil)))
;; *** M-c M-t : 
(define-key evil-normal-state-map (kbd "M-c M-t") '(lambda () (interactive)
          (setq x-select-enable-clipboard
                (not x-select-enable-clipboard))
          (if x-select-enable-clipboard
            (message "x-select-enable-clipboard is on")
            (message "x-select-enable-clipboard = off"))))
;; -------------------------------------- }}}
;; *** M-p : 
(define-key evil-insert-state-map (kbd "M-p ") '(lambda() (interactive)
        (yank)))
;; -------------------------------------- }}}
#+end_src
***** Registers Clipboard
#+begin_src elisp
(define-key evil-normal-state-map (kbd "M-y M-f") 'evil-use-register)
(define-key evil-normal-state-map (kbd "M-y M-s") 'evil-show-registers)
(define-key evil-visual-state-map (kbd "M-y M-f")
            '(lambda() (interactive)
              (let ((text (buffer-substring (region-beginning) (region-end)))
                    (name (read-char "enter register name for test:")))
                (evil-set-register name text))))

(define-key evil-normal-state-map (kbd "M-p M-f") 'evil-paste-from-register)
(define-key evil-visual-state-map (kbd "M-p M-f") 'evil-paste-from-register)
(define-key evil-normal-state-map (kbd "M-p M-s") 'evil-show-registers)
#+end_src
***** Movements
#+begin_src elisp
(define-key evil-normal-state-map "gh" 'evil-first-non-blank-of-visual-line)
(define-key evil-normal-state-map "gl" 'evil-end-of-visual-line)
(define-key evil-normal-state-map (kbd "gj") 'next-logical-line)
(define-key evil-normal-state-map (kbd "gk") 'previous-logical-line)



(define-key evil-normal-state-map (kbd "G") nil)
(define-key evil-visual-state-map (kbd "G") nil)
(define-key evil-normal-state-map (kbd "G G") 'evil-goto-line)
(define-key evil-visual-state-map (kbd "G G") 'evil-goto-line)
#+end_src
;; (define-key evil-normal-state-map  "gj" 'evil-next-visual-line)
;; (define-key evil-normal-state-map  "gk" 'evil-previous-visual-line)
;; --------------------------------------  }}}
***** Visual
#+begin_src elisp
(define-key evil-normal-state-map "V" 'evil-visual-line)
;; --------------------------------------  
#+end_src
***** Grabing
#+begin_src elisp
;; *** move-line : 
;; **** save-column : 
(defmacro save-column (&rest body)
  `(let ((column (current-column)))
     (unwind-protect
         (progn ,@body)
       (move-to-column column))))
(put 'save-column 'lisp-indent-function 0)
;; **** move-line-up : 
(defun move-line-up ()
  "BuYn function to move line up"
  (interactive)
  (save-column
    (transpose-lines 1)
    (forward-line -2)))

;; **** move-line-down : 
(defun move-line-down ()
  "BuYn function to move line down"
  (interactive)
  (save-column
    (forward-line 1)
    (transpose-lines 1)
    (forward-line -1)))
;; **** define-key : 
(define-key evil-normal-state-map (kbd "M-m M-k") 'move-line-up)
(define-key evil-normal-state-map (kbd "M-m M-j") 'move-line-down)
;; *** copy-lines : 
;; **** buyn-copy-line:
(defun buyn-copy-line () (interactive)
      (setq region-text (buffer-substring (region-beginning) (region-end)))
      (save-excursion
        ;; (insert " ")
        (insert region-text)
        ;; (insert " :")
        ))
;; **** buyn-copy-line-commented : 
(defun buyn-copy-line-commented () 
       (interactive)
       (let ((visual-start (region-beginning))
             (visual-end (region-end))
             (region-text (buffer-substring (region-beginning) (region-end))))
            (insert region-text)
            (comment-region visual-start visual-end)
            )
       ;; (evil-next-line 2) do nothing
       )
;; **** define-key : 
(define-key evil-visual-state-map (kbd "M-m M-p") 'buyn-copy-line)
(define-key evil-visual-state-map (kbd "M-m M-c") 'buyn-copy-line-commented)
(define-key evil-normal-state-local-map (kbd "M-m M-p") '(lambda() (interactive)
                (evil-visual-line)
                (buyn-copy-line)))
(define-key evil-normal-state-local-map (kbd "M-m M-c") '(lambda() (interactive)
                (evil-visual-line)
                (buyn-copy-line-commented)))
;; *** move-char : 
;; **** M-m M-l : 
(define-key evil-normal-state-map (kbd "M-m M-l") '(lambda() (interactive)
    (evil-delete-char (point) (+ (point) 1))        
    (evil-paste-after 1)
    ))
;; **** M-m M-h : 
(define-key evil-normal-state-map (kbd "M-m M-h") '(lambda() (interactive)
    (evil-delete-char (point) (+ (point) 1))        
    (backward-char)
    (evil-paste-before 1)
    ))
;FIXME: move selected
;TODO: meta m+p copy line \ selection
;; -------------------------------------- }}}
;; **** FIXME: move selected
;; **** TODO: meta m+p copy line \ selection
;; -------------------------------------- }}}
;; *** move-word : 
;; **** M-m M-L : 
(define-key evil-normal-state-map (kbd "M-m M-L") '(lambda() (interactive)
    (transpose-words 1)))
;; **** M-m M-H : 
(define-key evil-normal-state-map (kbd "M-m M-H") '(lambda() (interactive)
(transpose-words -1)))
;; **** FIXME: move selected
;; **** TODO: meta m+p copy line \ selection
;; -------------------------------------- }}}
#+end_src
***** Devolopment
#+begin_src elisp
(define-key evil-normal-state-map (kbd "M-e M-f M-f") 'xref-find-definitions)
(define-key evil-normal-state-map (kbd "M-e M-f M-F") 'xref-find-definitions-other-frame)
(define-key evil-normal-state-map (kbd "M-e M-f M-e") 'evil-goto-definition)
(define-key evil-normal-state-map (kbd "M-e M-f M-e") 'evil-goto-definition)
(define-key evil-visual-state-map (kbd "M-e M-i M-i") 'indent-pp-sexp)
;; *** eval: 
(define-key evil-normal-state-map (kbd "M-e M-l") 'eval-last-sexp)
(define-key evil-normal-state-map (kbd "M-e M-e") 'eval-defun)
;; *** send to other buffer: 
(define-key evil-normal-state-map (kbd "M-e M-s M-l") 'send-activ-line-to-eshell-buffer-and-execute)
(define-key evil-visual-state-map (kbd "M-e M-s M-l") 'send-region-to-eshell-buffer-and-execute)
;; *** search-forward & sexp M-e M-j : 
(define-key evil-normal-state-map (kbd "M-e M-j") 
    '(lambda() (interactive)
          (move-beginning-of-line nil)
          (search-forward (char-to-string ?\)) nil nil nil)
          (unless (eq (char-after(point)) ?\))
            (backward-char 1))
          (if (eq (char-after(point)) ?\))
            (eval-last-sexp nil))))
;; -------------------------------------- }}}
;; *** literal programing: 
(fset 'get-named-link
   (kmacro-lambda-form [?y ?\C-c ?l] 0 "%d"))
(fset 'insert-named-link
   (kmacro-lambda-form [?\C-c ?\C-l return ?\C-y return] 0 "%d"))
(define-key evil-visual-state-map (kbd "M-e M-f M-l") 'get-named-link)
(define-key evil-normal-state-map (kbd "M-e M-f M-l") 'insert-named-link)
#+end_src
***** Regs Macross
#+begin_src elisp
(define-key evil-normal-state-map (kbd "q") 'evil-execute-macro)
(define-key evil-normal-state-map (kbd "Q") nil)
(define-key evil-normal-state-map (kbd "QQ") 'evil-record-macro)
#+end_src
***** find&replace
#+begin_src elisp
;; *** evil-visual <f7> :
(define-key evil-visual-state-map (kbd "<f7>") '(lambda() (interactive)
  (let ((region-text (buffer-substring (region-beginning) (region-end))))
    (exchange-point-and-mark)
    (evil-normal-state)
    (query-replace
      region-text
      (read-string (concat "replace(" region-text "):")
            region-text
            nil
            (current-kill 0 "DO-NOT-MOVE"))
      ))))

(define-key evil-visual-state-map (kbd "S-<f7>") '(lambda() (interactive)
  (let ((region-text (buffer-substring (region-beginning) (region-end))))
    (exchange-point-and-mark)
    (evil-normal-state)
    (query-replace
      region-text
      (read-string (concat "replace(" region-text "):")
            nil
            nil
            (current-kill 0 "DO-NOT-MOVE"))
      ))))
;; *** evil-visual * :
(define-key evil-visual-state-map (kbd "*") '(lambda() (interactive)
  (let ((region-text (buffer-substring (region-beginning) (region-end))))
    (evil-normal-state)
    (evil-search region-text t nil)
    (push region-text regexp-search-ring)
    )))
;; *** evil-visual occur :
(define-key evil-visual-state-map (kbd "M-o M-f") '(lambda() (interactive)
  (let ((region-text (buffer-substring (region-beginning) (region-end))))
    (occur region-text))))
;; *** -------------------------------------- }}}
;; ** Wrape by one char  {{{
(define-key evil-visual-state-map (kbd "M-+") '(lambda() (interactive)
    (let (
            (start-region-beginning (region-beginning))
            (start-region-end (+ (region-end) 1))
            (char-to-wrap (read-char "enter char to wrap(/~*_+=)")))
        (unless (= char-to-wrap 27)
            (evil-normal-state)
            (goto-char start-region-beginning)
            (insert-char char-to-wrap)
            (goto-char start-region-end)
            (insert-char char-to-wrap)
            )
        )))
#+end_src
;; -------------------------------------- }}}
***** Insert State
#+begin_src elisp
;; *** Insert State F2 save {{{
(define-key evil-insert-state-map (kbd "<f2>") '(lambda() (interactive)
                (save-buffer)
                (evil-normal-state)))
(define-key evil-insert-state-map (kbd "C-s") '(lambda() (interactive)
                (save-buffer)
                (untabify (point-min) (point-max))
                (evil-normal-state)))
(define-key evil-replace-state-map(kbd "<f2>") '(lambda() (interactive)
                (save-buffer)
                (evil-normal-state)))
(define-key evil-insert-state-map(kbd "M-<f2>") '(lambda() (interactive)
                (org-save-all-org-buffers)
                (save-some-buffers 'no-confirm)
                (evil-normal-state)))
(define-key evil-normal-state-map(kbd "<f2>i") '(lambda() (interactive)
                (org-save-all-org-buffers)
                (save-some-buffers 'no-confirm)
                (evil-normal-state)))
;; -------------------------------------- }}}
;; *** Insert State keys {{{
   (define-key evil-insert-state-map (kbd "C-h") '(lambda() (interactive)
          (backward-delete-char-untabify 1))) 
#+end_src
;; -------------------------------------- }}}
***** toggle input method in evil normal state
#+begin_src elisp
(define-key evil-normal-state-map(kbd "C-\\") 'toggle-input-method)
;; -------------------------------------- 
#+end_src
***** CANCELED TAB on c-i
CLOSED: [2025-04-29 Tue 18:46]
#+begin_src elisp
;; (define-key evil-insert-state-map (kbd "C-i") 'tab-to-tab-stop)
#+end_src
***** Undo and Redo
#+begin_src elisp
(evil-set-undo-system 'undo-redo)
;; -------------------------------------- 
;; -------------------------------------- 
#+end_src
**** EVIL COMMANDS RESPECT INPUT METHOD
***** load evil-respect-input.el
#+begin_src elisp
;; (find-file "~/.archemacs/ELs/Evil/evil-respect-input.el")
;; (load "~/.archemacs/ELs/Evil/evil-respect-input.el")
(load (expand-file-name "ELs/Evil/evil-respect-input.el" user-emacs-directory))
;; --------------------------------------  
#+end_src
***** Rebind commands that don't respect input method
#+begin_src elisp
  (define-key evil-normal-state-map (kbd "r") 'khaoos-evil-replace)
  (define-key evil-motion-state-map (kbd "f") 'khaoos-evil-find-char)
  (define-key evil-motion-state-map (kbd "t") 'khaoos-evil-find-char-to)
  (define-key evil-motion-state-map (kbd "F") 'khaoos-evil-find-char-backward)
  (define-key evil-motion-state-map (kbd "T") 'khaoos-evil-find-char-to-backward)
;; --------------------------------------
#+end_src
**** ONE CHAR ADD  
#+begin_src elisp
;; ** load el
;; (load "~/.archemacs/ELs/Evil/onecharadd.el")
;; (find-file "~/.archemacs/ELs/Evil/onecharadd.el")
;; ** Rebind commands 
;; (define-key evil-normal-state-map (kbd "SPC") 'addone-char-into-normal-evil)
(define-key evil-normal-state-map (kbd "SPC") 'khaoos-insert-one-char)
;; (define-key evil-normal-state-map (kbd "RET") 'addone-char-after-normal-evil)
(define-key evil-normal-state-map (kbd "RET") 'khaoos-append-one-char)
;; --------------------------------------  
#+end_src
**** EVIL TABS  
#+begin_src elisp
;; ** load el
;; (find-file-other-frame "~/.archemacs/INI/Evil/evil-tabs-cfg.el")
;; (load "~/.archemacs/INI/Evil/evil-tabs-cfg.el")
(load (expand-file-name "INI/Evil/evil-tabs-cfg.el" user-emacs-directory))

#+end_src
*** evil-tabs-cfg.el
:PROPERTIES:
:header-args: :tangle INI/Evil/evil-tabs-cfg.el
:END:
**** описание

**** used in
;; (find-file "~/INI/evil-mod-cfg.el")
**** src
***** use-package evil-tabs
#+begin_src elisp
;; * EVIL TABS CONFIGURATION 
;; ** install evil-tabs
(use-package evil-tabs :ensure t
;; ** :config : 
  :config
  (global-evil-tabs-mode t)
  ;; (elscreen-toggle-display-tab)
  ;; (setq elscreen-display-tab t)
  (setq elscreen-display-tab nil)
;; ** evil-ex-define-cmd : 
  (evil-ex-define-cmd "tabc[lone]" 'elscreen-clone)
  (evil-ex-define-cmd "tabcl[ose]" 'elscreen-kill)
;; ** define-key evil-normal-state-map : 
  ;; :bind ("C-c c" hydra-clock/body)
  (evil-define-key 'normal evil-tabs-mode-map
    "gT" nil
    "gTH" 'elscreen-previous
    "gTL" 'elscreen-next
    "gTD" 'elscreen-toggle-display-tab
    "gTS" 'elscreen-toggle-display-tab
    "gTT" 'elscreen-toggle-display-tab
    "gTC" 'elscreen-clone
    "gTK" 'elscreen-kill
    "gt" nil
    ;; "gtt" 'next-or-make-new-tab
    "gtt" (lambda () (interactive) (switch-or-make-new-name-tab "t-tab"))
    "gtk" (lambda () (interactive) (switch-or-make-new-name-tab "k-tab"))
    "gtl" (lambda () (interactive) (switch-or-make-new-name-tab "l-tab"))
    "gtj" (lambda () (interactive) (switch-or-make-new-name-tab "j-tab"))
    "gtg" 'elscreen-goto
    "T" 'evil-tabs-current-buffer-to-tab)
;; ** END of use-package evil-tabs
  )
#+end_src
***** TAB FUNCTIONS
****** switch-or-make-new-name-tab
#+begin_src elisp 
(defun switch-or-make-new-name-tab (tab-name)
  "Swiching on j-tab or
    make j-tab and open it or clon activ"
  (interactive)
  (let ((tab
         (seq-find (lambda (val) (string= tab-name (cdr val)))
              (elscreen-get-screen-to-name-alist))))
    (if tab
        (if (= (car tab) (elscreen-get-current-screen))
            (progn
              (elscreen-goto 0)
              (message "tab 0"))
            (progn
              (elscreen-goto (car tab))
              (message tab-name)))
        (progn
          (elscreen-clone)
          (elscreen-screen-nickname tab-name)
          (message "clone tab")))))
#+end_src

#+RESULTS:
: switch-or-make-new-name-tab


;; --------------------------------------
***** CANCELED not used or exmeremental FUNCTIONS
CLOSED: [2025-02-27 Чт 19:07]
:PROPERTIES:
:header-args: :tangle no
:END:
****** make new indirect tab :
#+begin_src elisp
(defun make-new-indirect-tab (name)
  "Make new tab and indirect bufer with name"
  (interactive)
  (setq minimap-major-modes '())
  (clone-indirect-buffer name nil)
  (elscreen-create)
  ;; (switch-to-buffer "evil-tabs-cfg.el<2>"))
  (switch-to-buffer name))
;; --------------------------------------
#+end_src
****** gen-name-for-curennt-indirect-buffer : 
#+begin_src elisp
(defun gen-name-for-curennt-indirect-buffer (ender)
  "genarate name for indirect buffer
    on curennt buffer name"
  ;; (interactive "P")
  (concat (buffer-name) ender)
  ) 

#+end_src
;; --------------------------------------
;; (gen-name-for-curennt-indirect-buffer "<2>")
****** next-or-make-new-tab 
#+begin_src elisp
(defun next-or-make-new-tab ()
  "Swircg on next tab or
    make new tab and open in it indirect buffer"
  (interactive)
  (let ((num-of-scr (elscreen-get-number-of-screens)))
    (cond
      ((= num-of-scr 1)
        ;; (make-new-indirect-tab (gen-name-for-curennt-indirect-buffer "<2>"))
        (elscreen-clone)
        (message "clone tab")
        )
      ((= num-of-scr 2)
            (elscreen-next))
      ((= num-of-scr 3)
            (switch-between-too-first-tabs)))))
#+end_src

;; --------------------------------------
****** switch-between-too-first-tabs 
#+begin_src elisp
(defun switch-between-too-first-tabs ()
  "switch-between-too-first-tabs"
  (let ((scr-num (elscreen-get-current-screen)))
    (cond
      ((= scr-num 0) (elscreen-goto 1))
      ((= scr-num 1) (elscreen-goto 0))
      ((> scr-num 1) (elscreen-goto 1)))))
#+end_src

;; --------------------------------------
****** make-new-tab-for-fullscreen-windows 
#+begin_src elisp
(defun make-new-tab-for-fullscreen-windows ()
  "make-new-tab-for-fullscreen-windows"
  (interactive)
  (when (= (elscreen-get-number-of-screens) 1)
      (make-new-indirect-tab))
  (let ((orbuf-name (buffer-name)))
      (elscreen-create)
      (switch-to-buffer orbuf-name)
      (evil-window-vsplit)
      (evil-window-set-width 60)
      (let ((name (concat orbuf-name "<fs0>")))
        (clone-indirect-buffer name nil)
        (switch-to-buffer name))
      (evil-window-split)
      (let ((name (concat orbuf-name "<fs1>")))
        (clone-indirect-buffer name nil)
        (switch-to-buffer name))
      (evil-window-split)
      (let ((name (concat orbuf-name "<fs2>")))
        (clone-indirect-buffer name nil)
        (switch-to-buffer name))))
#+end_src
**** Docs
***** help
;; --------------------------------------
;; :tabnew
;; :tabclone
   ;; (evil-ex-define-cmd "tabe[dit]" 'evil-tabs-tabedit)  
   ;; (evil-ex-define-cmd "tabclone" 'elscreen-clone)  
   ;; (evil-ex-define-cmd "tabc[lose]" 'elscreen-kill)  
   ;; (evil-ex-define-cmd "tabd[isplay]" 'elscreen-toggle-display-tab)  
   ;; (evil-ex-define-cmd "tabg[oto]" 'elscreen-goto)  
   ;; (evil-ex-define-cmd "tabo[nly]" 'elscreen-kill-others)  
   ;; (evil-ex-define-cmd "tabnew" 'elscreen-create)  
   ;; (evil-ex-define-cmd "tabn[ext]" 'elscreen-next)  
   ;; (evil-ex-define-cmd "tabp[rev]" 'elscreen-previous)  
   ;; (evil-ex-define-cmd "tabr[ename]" 'elscreen-screen-nickname)  
   ;; (evil-ex-define-cmd "tabs[elect]" 'elscreen-select-and-goto)  
   ;; (evil-ex-define-cmd "tabw[ith]" 'elscreen-find-and-goto-by-buffer)  
   ;; (evil-ex-define-cmd "q[uit]" 'evil-tab-sensitive-quit)  

;; --------------------------------------
***** exampls 
#+begin_src elisp :tangle no
(defun switch-or-make-new-j-tab ()
  "Swircg on j-tab or
    make j-tab and open it oclon activ"
  (interactive)
  (let ((num-of-scr (elscreen-get-number-of-screens)))
    ;; (elscreen-get-all-window-history-alist)
    (car (elscreen-get-all-window-history-alist))
    (elscreen-get-all-window-history-alist)
    (elscreen-get-current-screen)
    (elscreen-get-previous-screen)
    ;; (elscreen-get-screen-list)
    ;; (elscreen-get-screen-nickname)
    ;; (elscreen-*nickname)
    (elscreen-set-screen-nickname (elscreen-get-current-screen) "j-tab")
    (elscreen-screen-nickname "j-tab")
    (elscreen-screen-nickname "5-tab")
    ;; (elscreen-set-screen-nickname 2 "j-tab")
    ;; (elscreen-set-screen-nickname 2 "j-tab")
    ;; (elscreen-set-screen-nickname 4 "k-tab")
    ;; (elscreen-get-screen-property 2)
    (elscreen-get-screen-property (elscreen-get-current-screen))
    (cdar (elscreen-get-screen-property (elscreen-get-current-screen)))
    (elscreen-get-screen-to-name-alist)
    (cdar (elscreen-get-screen-to-name-alist))
    (cdar (list (1 . 2) (1 . 2)))
    (member 1 (car (elscreen-get-screen-to-name-alist)))
    (find "j-tab" (car (elscreen-get-screen-to-name-alist)))
    (find 1 (car (elscreen-get-screen-to-name-alist)))
    (member 2 '(2 . "j-tab"))
    (member 2 '(2 . "j-tab"))

    (string= (cdr (seq-find (lambda (val) (string= "j-tab" (cdr val)))
              (elscreen-get-screen-to-name-alist))) "j-tab")

          (elscreen-goto (car (seq-find (lambda (val) (string= "j-tab" (cdr val)))
              (elscreen-get-screen-to-name-alist))))

    (if (string= (cdr tab) tab-name)
              (elscreen-swap)
              (elscreen-goto (car tab)))
    (seq-find (lambda (val) (string= "j-tab" (cdr val)))
              (elscreen-get-screen-to-name-alist))
    (seq-find (lambda (val) (string= "5-tab" (cdr val)))
              (elscreen-get-screen-to-name-alist))
    (seq-find (lambda (val) (string= "tab" (cdr val)))
              (elscreen-get-screen-to-name-alist))
    (seq-find (lambda (val) (eq 5 (car val)))
              (elscreen-get-screen-to-name-alist))
    (seq-find (lambda (val) (= 3 val))
              '(1 2 3))
    ;; \\[elscreen-swap]  Swap current screen with previous one
  
    ;; (elscreen-get-window-configuration)
    ;; (elscreen-create)
    ;; (elscreen-find-screen)
    ;; (elscreen-find-screens)
    ;; (elscreen-one-screen-p)
    (cond
      ((= num-of-scr 1)
        ;; (make-new-indirect-tab (gen-name-for-curennt-indirect-buffer "<2>"))
        (elscreen-clone)
        (message "clone tab")
        )
      ((= num-of-scr 2)
            (elscreen-next))
      ((= num-of-scr 3)
            (switch-between-too-first-tabs)))))
#+end_src
** **Буфер и фрейм менеджмент**
*** описание
   Всё для работы с окнами, фреймами и переключением между ними (`framemove`, `windmove`, fullscreen и т.д.)
*** INI/frame-control.el
:PROPERTIES:
:header-args: :tangle INI/frame-control.el
:END:
**** описание

**** used in
;; (find-file "~/.archemacs/INI/init.el")
**** src INI/frame-control.el
***** WINDMOVE&FRAMEMOVE SETUP
;; --------------------------------------
****** Seting up
#+begin_src elisp
(require 'cl) ;;used to Fix error if theres an error with above code
;; (load "~/.archemacs/ELs/framemove/framemove.el")
(load (expand-file-name "ELs/framemove/framemove.el" user-emacs-directory))
(require 'framemove)
    ;; (windmove-default-keybindings)
    (setq framemove-hook-into-windmove t) ;;Hook framemove into windmove keys
;; Common lisp stuff to fix windmove/framemove 
;; (when (fboundp 'windmove-default-keybindings)
;;   (windmove-default-keybindings))
#+end_src
;; --------------------------------------
****** Remap windmove keys to home keys
#+begin_src elisp
(global-set-key (kbd "M-h") nil)
(global-set-key (kbd "M-h") 'windmove-left)
(define-key org-mode-map (kbd "M-h") 'windmove-left)
(global-set-key (kbd "M-j") nil)
(global-set-key (kbd "M-j") 'windmove-down)
(define-key org-mode-map (kbd "M-j") 'windmove-down)
;; no  such variables error
;; (define-key c-mode-base-map (kbd "M-j") 'windmove-down)
;; (define-key c++-mode-map  (kbd "M-j") 'windmove-down)
(global-set-key (kbd "M-k") nil)
(global-set-key (kbd "M-k") 'windmove-up)
(global-set-key (kbd "M-l") nil)
(global-set-key (kbd "M-l") 'windmove-right)
#+end_src
;; --------------------------------------
;; --------------------------------------
***** FRAME SIZE&POSITION CONTROL
****** TODO FRAME POSITION LIST
удалить по возможности
и из писи файла оставив только словарь
******* MONITOR 0 FRAME LEFT POSITION LIST
#+begin_src emacs-lisp
(setq buyn-monitr-0-position-7 '(0     337))
(setq buyn-monitr-0-position-8 '(670   337))
(setq buyn-monitr-0-position-9 '(660   337))
(setq buyn-monitr-0-position-4 '(0     600))
(setq buyn-monitr-0-position-5 '(670   600))
(setq buyn-monitr-0-position-6 '(660   600))
(setq buyn-monitr-0-position-1 '(0     910))
(setq buyn-monitr-0-position-2 '(670   910))
(setq buyn-monitr-0-position-3 '(660   910))
#+end_src
******* MONITOR 1 FRAME POSITION LIST
#+begin_src elisp
(setq buyn-monitr-1-position-7 '(0     0))
(setq buyn-monitr-1-position-8 '(670   0))
(setq buyn-monitr-1-position-9 '(1295  0))
(setq buyn-monitr-1-position-4 '(0     360))
(setq buyn-monitr-1-position-5 '(670   360))
(setq buyn-monitr-1-position-6 '(1295  360))
(setq buyn-monitr-1-position-1 '(0     620))
(setq buyn-monitr-1-position-2 '(670   620))
(setq buyn-monitr-1-position-3 '(1295  620))
#+end_src
******* MONITOR 2 FRAME POSITION LIST
#+begin_src elisp
(setq buyn-monitr-2-position-7 '(1920  0))
(setq buyn-monitr-2-position-8 '(2115  0))
(setq buyn-monitr-2-position-9 '(2310  0))
(setq buyn-monitr-2-position-4 '(1920  412))
(setq buyn-monitr-2-position-5 '(2115  412))
(setq buyn-monitr-2-position-6 '(2310  412))
(setq buyn-monitr-2-position-1 '(1920  752))
(setq buyn-monitr-2-position-2 '(2115  752))
(setq buyn-monitr-2-position-3 '(2310  752))
#+end_src
****** FRAME POSITION PLIST
#+begin_src emacs-lisp
(setq buyn-frame-position-list '(:left [
                                          (:x 0   :y 910)
                                          (:x 670 :y 910)
                                          (:x 660 :y 910)
                                          (:x 0   :y 600)
                                          (:x 670 :y 600)
                                          (:x 660 :y 600)
                                          (:x 0   :y 337)
                                          (:x 670 :y 337)
                                          (:x 660 :y 337)
                                            ]

                                 :center [
                                          (:x 0    :y 0)
                                          (:x 670  :y 0)
                                          (:x 1295 :y 0)
                                          (:x 0    :y 360)
                                          (:x 670  :y 360)
                                          (:x 1295 :y 360)
                                          (:x 0    :y 620)
                                          (:x 670  :y 620)
                                          (:x 1295 :y 620)
                                            ]
                                 :right [
                                          (:x 1920 :y 0)
                                          (:x 2115 :y 0)
                                          (:x 2310 :y 0)
                                          (:x 1920 :y 412)
                                          (:x 2115 :y 412)
                                          (:x 2310 :y 412)
                                          (:x 1920 :y 752)
                                          (:x 2115 :y 752)
                                          (:x 2310 :y 752)
                                            ]))
#+end_src

#+RESULTS:
| :left | [(:x 0 :y 910) (:x 670 :y 910) (:x 660 :y 910) (:x 0 :y 600) (:x 670 :y 600) (:x 660 :y 600) (:x 0 :y 337) (:x 670 :y 337) (:x 660 :y 337)] | :center | [(:x 0 :y 0) (:x 670 :y 0) (:x 1295 :y 0) (:x 0 :y 360) (:x 670 :y 360) (:x 1295 :y 360) (:x 0 :y 620) (:x 670 :y 620) (:x 1295 :y 620)] | :right | [(:x 1920 :y 0) (:x 2115 :y 0) (:x 2310 :y 0) (:x 1920 :y 412) (:x 2115 :y 412) (:x 2310 :y 412) (:x 1920 :y 752) (:x 2115 :y 752) (:x 2310 :y 752)] |

****** FRAME POSITION CONTROL KEYS
******* MONITOR 0
#+begin_src elisp
(global-set-key (kbd "M-S-<kp-home>") '(lambda() (interactive)
      (buyn-set-curent-frame-position :left 7)))
(global-set-key (kbd "M-S-<kp-up>") '(lambda() (interactive)
      (buyn-set-curent-frame-position :left 8)))
(global-set-key (kbd "M-S-<kp-prior>") '(lambda() (interactive)
      (buyn-set-curent-frame-position :left 9)))
(global-set-key (kbd "M-S-<kp-left>") '(lambda() (interactive)
      (buyn-set-curent-frame-position :left 4)))
(global-set-key (kbd "M-S-<kp-begin>") '(lambda() (interactive)
      (buyn-set-curent-frame-position :left 5)))
(global-set-key (kbd "M-S-<kp-right>") '(lambda() (interactive)
      (buyn-set-curent-frame-position :left 6)))
(global-set-key (kbd "M-S-<kp-end>") '(lambda() (interactive)
      (buyn-set-curent-frame-position :left 1)))
(global-set-key (kbd "M-S-<kp-down>") '(lambda() (interactive)
      (buyn-set-curent-frame-position :left 2)))
(global-set-key (kbd "M-S-<kp-next>") '(lambda() (interactive)
      (buyn-set-curent-frame-position :left 3)))
#+end_src
******* MONITOR 1
#+begin_src elisp
(global-set-key (kbd "M-<kp-7>") '(lambda() (interactive)
      (buyn-set-curent-frame-position :center 7)))
(global-set-key (kbd "M-<kp-9>") '(lambda() (interactive)
      (buyn-set-curent-frame-position :center 9)))
(global-set-key (kbd "M-<kp-8>") '(lambda() (interactive)
      (buyn-set-curent-frame-position :center 8)))
(global-set-key (kbd "M-<kp-4>") '(lambda() (interactive)
      (buyn-set-curent-frame-position :center 4)))
(global-set-key (kbd "M-<kp-5>") '(lambda() (interactive)
      (buyn-set-curent-frame-position :center 5)))
(global-set-key (kbd "M-<kp-6>") '(lambda() (interactive)
      (buyn-set-curent-frame-position :center 6)))
(global-set-key (kbd "M-<kp-1>") '(lambda() (interactive)
      (buyn-set-curent-frame-position :center 1)))
(global-set-key (kbd "M-<kp-2>") '(lambda() (interactive)
      (buyn-set-curent-frame-position :center 2)))
(global-set-key (kbd "M-<kp-3>") '(lambda() (interactive)
      (buyn-set-curent-frame-position :center 3)))
#+end_src

#+RESULTS:
| lambda | nil | (interactive) | (buyn-set-curent-frame-position :center 3) |

******* MONITOR 2
#+begin_src elisp
(global-set-key (kbd "C-M-<kp-7>") '(lambda() (interactive)
      (buyn-set-curent-frame-position :right 7)))
(global-set-key (kbd "C-M-<kp-9>") '(lambda() (interactive)
      (buyn-set-curent-frame-position :right 9)))
(global-set-key (kbd "C-M-<kp-8>") '(lambda() (interactive)
      (buyn-set-curent-frame-position :right 8)))
(global-set-key (kbd "C-M-<kp-4>") '(lambda() (interactive)
      (buyn-set-curent-frame-position :right 4)))
(global-set-key (kbd "C-M-<kp-5>") '(lambda() (interactive)
      (buyn-set-curent-frame-position :right 5)))
(global-set-key (kbd "C-M-<kp-6>") '(lambda() (interactive)
      (buyn-set-curent-frame-position :right 6)))
(global-set-key (kbd "C-M-<kp-1>") '(lambda() (interactive)
      (buyn-set-curent-frame-position :right 1)))
(global-set-key (kbd "C-M-<kp-2>") '(lambda() (interactive)
      (buyn-set-curent-frame-position :right 2)))
(global-set-key (kbd "C-M-<kp-3>") '(lambda() (interactive)
      (buyn-set-curent-frame-position :right 3)))
#+end_src
****** FRAME SIZE CONTROL KEYS
#+begin_src elisp
(global-set-key (kbd "M-<kp-subtract>") '(lambda() (interactive)
        (set-frame-size (selected-frame) 75 25)))
(global-set-key (kbd "C-M-<kp-subtract>") '(lambda() (interactive)
        (set-frame-size (selected-frame) 75 35)))
#+end_src
;; --------------------------------------
***** FRAMES&BUFFER OPEN\CLOSE\SWITCH
****** Open new frames
#+begin_src elisp
(global-set-key (kbd "M-g M-t M-t") '(lambda() (interactive)
      (switch-to-buffer-other-frame "*scratch*")))
(global-set-key (kbd "M-g M-t M-T") 'make-frame-command)
;; (define-key evil-normal-state-map "gtt" 'make-frame-command)
(global-set-key (kbd " M-g M-t M-f") 'find-file-other-frame)
(global-set-key (kbd " M-g M-t M-b") 'switch-to-buffer-other-frame)
(global-set-key (kbd " M-g M-t M-i") 'switch-to-buffer)
(define-key evil-normal-state-map "ZO" 'switch-to-buffer-other-frame)
(global-set-key (kbd " M-g M-t M-d") 'ido-dired-other-frame)
(setq org-indirect-buffer-display `new-frame)
(global-set-key (kbd " M-g M-t M-o") 'org-tree-to-indirect-buffer)
;; (define-key evil-normal-state-map (kbd "gbb") '(lambda() (interactive)
      ;; (display-buffer (last-buffer))))
(global-set-key (kbd " M-g M-t M-j") '(lambda() (interactive)
      (let (buffer-name-to-close (buffer-name))
      (evil-quit)
      (switch-to-buffer-other-frame buffer-name-to-close))))
#+end_src
;; --------------------------------------
****** Help in New Frame
;; (define-key evil-normal-state-map (kbd " M-g M-t M-j") 'other-frame)
;; (define-key evil-normal-state-map (kbd " M-g M-t M-k") 'previous-multiframe-window)
;; ;;(define-key evil-normal-state-map "gth" 'other-frame -2)
;;(define-key evil-normal-state-map "gtl" 'other-frame 2)
#+begin_src elisp
(global-set-key (kbd " M-g M-t M-h M-l") 'find-function-on-key-other-frame)
(global-set-key (kbd " M-g M-t M-h M-k") 'find-function-on-key-other-frame)
(global-set-key (kbd " M-g M-t M-h M-f") 'describe-function)
(global-set-key (kbd " M-g M-t M-h M-a") 'xref-find-definitions-other-frame)
#+end_src
;; --------------------------------------
****** FRAMS CLOSE
#+begin_src elisp
(define-key evil-normal-state-map "ZD" '(lambda() (interactive)
          (kill-buffer (current-buffer))))
(define-key evil-normal-state-map "ZX" '(lambda() (interactive)
          (kill-buffer (current-buffer))
          (evil-quit)))
(define-key evil-normal-state-map "ZW" '(lambda() (interactive)
          (evil-quit)))
(define-key evil-normal-state-map "ZE" '(lambda() (interactive)
          (save-buffer)
          (evil-quit)))
(global-set-key (kbd " M-g M-t M-z M-x") '(lambda() (interactive)
          (kill-buffer (current-buffer))
          (evil-quit)))
(define-key evil-normal-state-map "ZQ" '(lambda() (interactive)
          (evil-quit)))
(define-key evil-normal-state-map "ZZ" '(lambda() (interactive)
          (evil-quit)
          (org-save-all-org-buffers)))
(define-key evil-normal-state-map "ZC" '(lambda() (interactive)
          (save-buffer)
          (kill-buffer (current-buffer))
          ))
#+end_src
****** Split in new window
#+begin_src elisp
(define-key evil-normal-state-map "ZHH" '(lambda() (interactive)
          (evil-window-vsplit)
          (ivy-switch-buffer)))
(define-key evil-normal-state-map "Zhh" 'evil-window-vsplit)
(define-key evil-normal-state-map "ZLL"
          '(lambda() (interactive)
            (evil-window-vsplit)
            (windmove-right)))
(define-key evil-normal-state-map "Zll"
          '(lambda() (interactive)
            (evil-window-split)
            (windmove-right
            (ivy-switch-buffer))))
(define-key evil-normal-state-map "ZKK"
          '(lambda() (interactive)
            (evil-window-split)
            (ivy-switch-buffer)))
(define-key evil-normal-state-map "Zkk" 'evil-window-split)
(define-key evil-normal-state-map "ZJJ" 
          '(lambda() (interactive)
            (evil-window-split)
            (windmove-down)))
(define-key evil-normal-state-map "Zjj" 
          '(lambda() (interactive)
            (evil-window-split)
            (windmove-down)
            (ivy-switch-buffer)))
(define-key evil-normal-state-map (kbd "Z S-<SPC> S-<SPC>") 'delete-other-windows)
#+end_src
****** Buffer control
******* switch-buffer ZI
#+begin_src elisp
(define-key evil-normal-state-map "ZI" '(lambda() (interactive)
          (ivy-switch-buffer)))
#+end_src
******* ranger Buffer control
#+begin_src elisp
(define-key evil-normal-state-map "ZR" nil)
(define-key evil-normal-state-map "ZRR" 'ranger)
(define-key evil-visual-state-map "ZRR" '(lambda() (interactive)
          (let
            ((file-name (buffer-substring (region-beginning) (region-end))))
            (switch-to-buffer-other-frame "*scratch*")
            (ranger file-name))))

(define-key evil-normal-state-map "ZRH"
            '(lambda() (interactive)
              (switch-to-buffer-other-frame "*scratch*")
              (ranger "~/")))
(define-key evil-normal-state-map "ZRr"
            '(lambda() (interactive)
               (let
                  ((file-name (file-name-directory (buffer-file-name))))
                  (switch-to-buffer-other-frame "*scratch*")
                  (ranger file-name))))
(define-key evil-normal-state-map "ZRB"
            '(lambda() (interactive)
              (switch-to-buffer-other-frame "*scratch*")
              (ranger "~/Dropbox/")))
(define-key evil-normal-state-map "ZRO"
            '(lambda() (interactive)
              (switch-to-buffer-other-frame "*scratch*")
              (ranger "~/Dropbox/Office/")))
(define-key evil-normal-state-map "ZRo"
            '(lambda() (interactive)
              (switch-to-buffer-other-frame "*scratch*")
              (ranger "~/Dropbox/orgs/")))
(define-key evil-normal-state-map "ZRW"
            '(lambda() (interactive)
              (switch-to-buffer-other-frame "*scratch*")
              (ranger "~/Downloads/")))
(define-key evil-normal-state-map "ZRD"
            '(lambda() (interactive)
              (switch-to-buffer-other-frame "*scratch*")
              (ranger "~/Documents/")))
#+end_src
******* magit Buffer control
#+begin_src elisp
(define-key evil-normal-state-map "ZMm" '(lambda() (interactive)
                                           (if
                                               (boundp 'buyn-magit-buff-name)
                                               (progn
                                                 (switch-to-buffer-other-frame buyn-magit-buff-name)
                                                 (magit-refresh))

                                             (magit-status))))
(define-key evil-normal-state-map "ZMM" '(lambda() (interactive)
                                           (if
                                               (boundp 'buyn-magit-buff-name)
                                               (progn
                                                 (switch-to-buffer buyn-magit-buff-name)
                                                 (magit-refresh))
                                             (magit-status))))
(define-key evil-normal-state-map "ZME" '(lambda() (interactive)
                                           (magit-status user-emacs-directory)))
(define-key evil-normal-state-map "ZMDS" '(lambda() (interactive)
                                           (buyn-shell-start "emacs --debug-init")))
#+end_src
;; (define-key evil-normal-state-map "Zh" '(lambda() (interactive)
;;          ;; (previous-buffer)))
;;          (evil-prev-buffer)))
;; (define-key evil-normal-state-map "Zl" '(lambda() (interactive)
;;          (evil-next-buffer)))
******* find-file Buffer control
#+begin_src elisp
(define-key evil-normal-state-map "ZFF" 'find-file-other-frame)
(define-key evil-visual-state-map "ZFF" '(lambda() (interactive)
          (find-file-other-frame (buffer-substring (region-beginning) (region-end)))))
(define-key evil-normal-state-map "ZFI" '(lambda() (interactive)
          (find-file-other-frame (expand-file-name "INI/frame-control.el" user-emacs-directory))))
#+end_src
;; (define-key evil-normal-state-map "Zk" '(lambda() (interactive)
;;          (unbury-buffer)))
;; (define-key evil-normal-state-map "Zj" '(lambda() (interactive)
;;          (bury-buffer)))
******* new Buffer
      ;; (make-frame-command)
      ;; (evil-buffer-new 0 "*new*")))
#+begin_src elisp
(define-key evil-normal-state-map "ZNN" '(lambda() (interactive)
      (switch-to-buffer-other-frame "*scratch*")
      (evil-buffer-new "*new*")))
(define-key evil-normal-state-map "ZNn" '(lambda() (interactive)
          (evil-buffer-new "*new*")))
#+end_src
;; --------------------------------------
***** FULLSCREEN-MOD CUSTOMIZATION load
;; (load "~/.archemacs/INI/fullscreen-cfg.el")
[[*INI/fullscreen-cfg.el][INI/fullscreen-cfg.el]]
#+begin_src elisp
;; (find-file-other-frame "~/.archemacs/INI/fullscreen-cfg.el")
(load (expand-file-name "INI/fullscreen-cfg.el" user-emacs-directory))
#+end_src
;; --------------------------------------
; }}}
;; --------------------------------------
***** FRAMES-FUN CUSTOMIZATION
****** buyn-get-frame-by-name
#+begin_src elisp
(defun buyn-get-frame-by-name (fname)
  "If there is a frame named FNAME, return it, else nil."
  (require 'dash) ; For `-some'
  (-some (lambda (frame)
           (when (equal fname (frame-parameter frame 'name))
             frame))
         (frame-list)))
#+end_src
;; --------------------------------------
; }}}
;; --------------------------------------
****** buyn-move-frame-by-name
#+begin_src emacs-lisp
(defun move-frame-by-name (fname monitor position)
  "Move an open frame to a new position, by the name of his title"
  (let* ( (fobject (buyn-get-frame-by-name fname))
          (pos (elt (plist-get buyn-frame-position-list monitor) (- position 1)))
          (x (plist-get pos :x))
          (y (plist-get pos :y)))
            (set-frame-size fobject 75 25)
            (set-frame-position fobject x y)))
  
#+end_src

#+RESULTS:
: move-frame-by-name

****** buyn-find-file-in-frame-and-move
#+begin_src emacs-lisp
(defun buyn-find-file-in-frame-and-move (filename monitor position)
  "Move and open frame to a new position, for file name"
    (let ((fname (file-name-nondirectory filename)))
      (find-file-other-frame filename)
      (run-at-time "1 sec" nil (funcall (lambda ()
        (move-frame-by-name fname monitor position))))))
#+end_src

#+RESULTS:
: buyn-find-file-in-frame-and-move

#+begin_src emacs-lisp :tangle no
(defun buyn-find-file-in-frame-and-move (filename monitor position)
  "Move and open frame to a new position, for file name"
    (let ((fname (file-name-nondirectory filename)))
      (find-file-other-frame filename)
      (run-at-time "1 sec" nil '(lambda ()
        (move-frame-by-name fname monitor position)))))
#+end_src

#+RESULTS:
: buyn-find-file-in-frame-and-move

****** buyn-set-curent-frame-position
#+begin_src emacs-lisp
(defun buyn-set-curent-frame-position (monitor position)
  "Move and open frame to a new position, for file name"
  (let* ( (fobject (selected-frame))
          (pos (elt (plist-get buyn-frame-position-list monitor) (- position 1)))
          (x (plist-get pos :x))
          (y (plist-get pos :y)))
        (set-frame-size fobject 75 25)
        (set-frame-position fobject x y)))

#+end_src

#+RESULTS:
: buyn-set-curent-frame-position

***** CANCELED NOT USED;  {{{
CLOSED: [2025-04-14 Mon 09:51]
;; (global-set-key (kbd "<kp-subtract>") 'xah-close-current-buffer)
;; (global-set-key (kbd "<kp-divide>") 'xah-previous-user-buffer)
;; (global-set-key (kbd "<kp-multiply>") 'xah-next-user-buffer)
;; (global-set-key (kbd "<kp-decimal>") 'other-window)
;; (global-set-key (kbd "<C-kp-divide>") 'xah-previous-emacs-buffer)
;; (global-set-key (kbd "<C-kp-multiply>") 'xah-next-emacs-buffer)
;; --------------------------------------
;; --------------------------------------
*** INI/fullscreen-cfg.el
:PROPERTIES:
:header-args: :tangle INI/fullscreen-cfg.el
:END:
**** описание
;; (find-file "~/.archemacs/INI/frame-control.el")
**** used in
;; (find-file "~/.archemacs/INI/init.el")
;; (find-file-other-frame "~/.archemacs/INI/fullscreen-cfg.el")
"INI/fullscreen-cfg.el"
[[*FULLSCREEN-MOD CUSTOMIZATION load][FULLSCREEN-MOD CUSTOMIZATION load]]
**** src INI/fullscreen-cfg.el
***** star comment
#+begin_src elisp
;; * FULLSCREEN-MOD CUSTOMIZATION
;; --------------------------------------
#+end_src

***** CANCELED old version
#+begin_src elisp :tangle no 

;; (setq-local fullscreen-mode-activ nil)
(defvar-local fullscreen-mode-activ nil
  "indictate is fullscreen mode is activ or not
    or if not init nil
    set it aftar init to false")
;; ** toggle-full-screen :
(defun toggle-full-screen ()
  "Toggles full-screen mode for Emacs window on Win32."
  (interactive)
  (toggle-frame-fullscreen)
  )
;; --------------------------------------
;; ** toggle-fonte-lage-size : 
(defun toggle-fonte-lage-size ()
  "Toggle betwin fullscrin font size and normal"
  (interactive)
  ;; use a property “state”. Value is t or nil
  (if (get 'toggle-font-lage-size 'state)
      (progn
        (text-scale-set 0)
        (put 'toggle-font-lage-size 'state nil))
    (progn
      (text-scale-set +3)
      (put 'toggle-font-lage-size 'state t))))
;; --------------------------------------
;; ** toggle-bars : 
(defun toggle-bars ()
  "Toggles bars visibility."
  (interactive)
  (menu-bar-mode)
  (scroll-bar-mode))
;; --------------------------------------
;; ** toggle-full-screen-and-bars : 
(defun toggle-full-screen-and-bars ()
  "Toggles full-screen mode and bars."
  (interactive)
  ;; (toggle-bars)
  ;; (setq-local fullscreen-mode-activ (not fullscreen-mode-activ))
  ;; (toggle-full-screen)
  (toggle-frame-maximized)
  (toggle-fonte-lage-size)
  (toggle-fullscreen-minimap)
  ;; (evil-window-set-width 0)
  )
;; ** toggle-full-screen-and-minimap : 
(defun toggle-full-screen-and-minimap ()
  "Toggles full-screen mode and minimap."
  (interactive)
  ;; (toggle-bars)
  (setq-local fullscreen-mode-activ (not fullscreen-mode-activ))
  (toggle-frame-maximized)
  ;; (toggle-full-screen)
  (toggle-fonte-lage-size)
  (toggle-fullscreen-minimap)
  ;; (evil-window-set-width 0)
  )
;; ** toggle-fullscreen-minimap : 
;; --------------------------------------
(defun toggle-fullscreen-minimap ()
  "Toggle minimap in fullscreen
    fullscreen is chekt on fullscreen-mode-activ"
  (interactive)
  ;; (minimap-mode)
  ;; (minimap-create)
  (if fullscreen-mode-activ
      ;; (minimap-create-window)
      (minimap-mode)
    (minimap-kill))
  ;; (minimap-recenter)
  ;; (minimap-mode)
  ;; (minimap-update nil)
  ;; (minimap-update)
  ;; (minimap-active-current-buffer-p)
  )
;; ** toggle-fullscreen-agenda : 
(defun toggle-fullscreen-agenda ()
  "Full screen for agenda mode
    if all work rewrite for all mods"
  (interactive)
  (unless (boundp fullscreen-mode-activ)
    (defvar-local fullscreen-mode-activ nil
      "indictate is fullscreen mode is activ or not
        or if not init nil
        set it aftar init to false"))
  ;; (toggle-frame-fullscreen)
  (toggle-frame-maximized)
  (if fullscreen-mode-activ
      (text-scale-set 0)
    (text-scale-set +3))
  (setq-local fullscreen-mode-activ (not fullscreen-mode-activ)))
#+end_src

***** toggle-fullscreen-smart
#+begin_src elisp
(defun toggle-fullscreen-smart ()
  "Toggle fullscreen and font size based on current state."
  (interactive)
  (let* ((fullscreen (frame-parameter nil 'fullscreen))
         (is-fullscreen (memq fullscreen '(maximized fullboth fullheight)))
         (font-scale (if (boundp 'text-scale-mode-amount)
                         text-scale-mode-amount
                       0))
         (is-large-font (> font-scale 0)))

    (cond
     ;; Шрифт большой, окно не fullscreen → включить fullscreen
     ((and is-large-font (not is-fullscreen))
      (toggle-frame-maximized))

     ;; Шрифт обычный, окно fullscreen → выключить fullscreen
     ((and (not is-large-font) is-fullscreen)
      (toggle-frame-maximized))

     ;; Шрифт обычный, окно не fullscreen → включить fullscreen и увеличить шрифт
     ((and (not is-large-font) (not is-fullscreen))
      (toggle-frame-maximized)
      (text-scale-set +3))

     ;; Шрифт большой, окно fullscreen → уменьшить шрифт и выйти из fullscreen
     ((and is-large-font is-fullscreen)
      (text-scale-set 0)
      (toggle-frame-maximized)))))
      #+end_src

      
***** set-key:
;; --------------------------------------
;; Use F11 to switch between windowed and full-screen modes
;;(global-set-key (kbd "C-M-f") 'toggle-full-screen-and-bars)
;;(define-key evil-normal-state-map [(control shift f)] 'toggle-full-screen-and-bars)
;; (global-set-key [(control shift f)]  'toggle-full-screen-and-bars)
(global-set-key [(control shift f)]  'toggle-fullscreen-agenda)
#+begin_src elisp
(global-set-key [(control shift f)]  'toggle-fullscreen-smart)
#+end_src

;; --------------------------------------
;; ** --------------------------------------

;; * MINIMAP-MODE CUSTOMIZATION 
;; --------------------------------------
;; (find-file-other-frame "~/.archemacs/INI/frames/minimap-cfg.el")
;; (load "~/.archemacs/INI/frames/minimap-cfg.el")
;; --------------------------------------
*** CANCELED INI/frames/minimap-cfg.el
CLOSED: [2025-02-21 Fri 21:34]
:PROPERTIES:
:header-args: :tangle no
:END:
# :header-args: :tangle INI/frames/minimap-cfg.el
**** описание

**** commeted in
;; (find-file-other-frame "~/INI/fullscreen-cfg.el")
**** src
#+begin_src elisp
;; * MINIMAP-MODE CUSTOMIZATION 
;; --------------------------------------
;; ** use-package minimap
(use-package minimap
              :ensure t
;; ** :config : 
  :config
  ;; (minimap-mode)
;; *** setq : 
  ;; (setq minimap-recreate-windo nil)
  ;; (setq minimap-major-modes nil)
  (setq minimap-width-fraction 0.1)
  (setq minimap-minimum-width 0.03)
  (setq minimap-highlight-line nil)
  (setq minimap-update-delay 0.3)
  (setq minimap-automatically-delete-window nil)
  (setq minimap-recreate-window nil)
  ;; (setq minimap-major-modes '(prog-mode, org-mode, help-mode))
  ;; (setq minimap-major-modes '(prog-mode))
  (setq minimap-major-modes '(eww-mode Info-mode))
  ;; (setq minimap-major-modes '(prog-mode org-mode Info-mode))
  ;; (setq minimap-major-modes '(prog-mode org-mode Info-mode eww-mode))
;; *** custom-set-faces : 
  (custom-set-faces
   '(minimap-active-region-background ((
                ((background dark))
                (:background "#454590" :extend t))
          (t (:background "#A84708FE0FFF" :extend t)))))
;; ** END of use-package minimap-mode
  )
;; ** Docs
;; After installation, simply use M-x minimap-mode to toggle activation of the minimap.
;; Use 'M-x customize-group RET minimap RET' to adapt minimap to your needs.
;; --------------------------------------
;; ** --------------------------------------
;; * SUBLIMITY-MODE CUSTOMIZATION
;; --------------------------------------
;; ** use-package 
;; (use-package sublimity
;;              :ensure t
;; ** :config : 
  ;; :config
  ;;  (sublimity-map-set-delay 1)
;; ** END of use-package minimap-mode
  ;; )
;; ** Docs
;; https://github.com/zk-phi/sublimity
;; (require 'sublimity)
;; (require 'sublimity-scroll)
;; (require 'sublimity-map) ;; experimental
;; (require 'sublimity-attractive)
;; then call command M-x sublimity-mode (or put the following expression in your init file).
;; (sublimity-mode 1)
;; (sublimity-mode 0)
;; (sublimity-map-set-delay 1)
;; (setq sublimity-map-size 20)
;; (setq sublimity-map-fraction 0.01)
;; (setq sublimity-map-text-scale -90)

;; --------------------------------------
;; ** --------------------------------------
#+end_src
** **Hydra и горячие клавиши**
*** описание
      Всё, что касается кастомных меню и команд.  
*** INI/hydra-cfg.el
:PROPERTIES:
:header-args: :tangle INI/hydra-cfg.el
:END:
**** описание
**** TODO разбить на несколько файлов
и загружать их из тела юз пака
фаили меинменю
фаил остальных меню
и загружать только после первого открытия меню
**** used in
;; (find-file "~/.archemacs/INI/init.el")
**** src INI/hydra-cfg.el
***** use-package hydra
;; * HYDRA CUSTOMIZATION
#+begin_src elisp
(use-package hydra :ensure t
  )
#+end_src
***** spc-main-menus
****** spc-main-menu00
#+begin_src elisp
(defhydra spc-main-menu00 (:color blue)
;; ***** hint
    "
    ^Main^                00                ^Menus^          
    ^─────^───────────────────────────────────^─────^────────────
    _a_I      _d_ev menu    _o_rg-mode   _b_Org-Brain                       
    _w_ww     _t_elega      _y_nke-menu  _r_eader
    _c_ommands   _e_macs-menu   ya_s_nippet      
    _p_rev-menu   _q_uit   _SPC_ next  _n_ext-menu    
    "
;; ***** keys
    ("q" nil)
    ("o" org-menu/body)
    ("d" hydra-dev-menu/body)
    ("w" www-menu/body)
    ("t" telega-menu/body)
    ("e" hydra-emacs-menu/body)
    ("c" hydra-commands-menu/body)
    ("a" hydra-ai-menu/body)
    ("SPC" spc-main-menu01/body )
    ("y" hydra-yank-menu/body)
    ("n" spc-main-menu01/body)
    ("s" hydra-yasnippet/body )
    ("r" hydra-reader-menu/body )
    ("b" hydra-brain-org-menu/body)
    ("p" spc-main-menu99/body)
;; ***** END of def
  )

(setq pixel-wait 0)
(defhydra hydra-reader-menu (:color blue)
  ;; "Reader menu spd: % 'pixel-wait"
  "Reader menu "
  ;; "Reader menu spd: %(* 10 (- 1 pixel-wait))"
;; **** r : 
  ("r" (if (bound-and-true-p pixel-scroll-mode)
          (buyn-reader-end)
          (buyn-reader-start))
        "toggle reader")
;; **** f : 
  ("f" (setq pixel-wait (- pixel-wait 0.1))
          (format "faster spd:%s" (- 1 pixel-wait)) :color pink)
;; **** s : 
  ("s" (setq pixel-wait (+ pixel-wait 0.1)) "slower":color pink)
;; **** t : 
  ("t" read-aloud-this "aloudThis")
;; **** B : 
  ("B" read-aloud-buf "aloudBuffer")
;; **** s : 
  ("S" read-aloud-stop "StopAloud")
;; **** E : 
  ("E" read-aloud-change-engine "AloudEngine")
;; **** q : 
  ("q" nil "quit"))
;; --------------------------------------
#+end_src

#+RESULTS:
: hydra-reader-menu/body

****** main-menu01
#+begin_src elisp
(defhydra spc-main-menu01 (:color blue)
;; ***** hint
    "
    ^Main^       01        ^Menus^          
    ^────^─────────────────^─────^─────────
    _q_ quit              _o_ outline 
    _c_ calculus          _d_ ediff
    _t_ transpose         _l_it-menu
    _f_ occur-dwim        _SPC_ next    
    _p_rev-menu           _n_ext-menu    
    "
;; ***** keys
    ("q" nil)
    ("SPC" spc-main-menu98/body)
    ("c" (progn
      (define-key calc-mode-map (kbd "M-k") 'windmove-up)
      (calc)))
    ("o" hydra-outline/body) 
    ("d" hydra-ediff/body) 
    ("t" hydra-transpose/body) 
    ("f" hydra-occur-dwim/body)
    ("p" spc-main-menu00/body)
    ("n" spc-main-menu98/body)
    ("l" lit-menu/body)
;; ***** END of def
  )
#+end_src

#+RESULTS:
: spc-main-menu01/body

****** spc-main-menu98
#+begin_src elisp
(defhydra spc-main-menu98 (:color blue)
;; ***** hint
    "
    ^Main^             ^98^             ^  Menus^          
    ^─────^────────────^──^─────────────^───────^─────────
    _q_ quit  _R_evert-buffer  _L_ong-line 
    _K_eyboard-sound  off_k_eyboard-sound 
    _p_rev-menu                     _SPC_ _n_ext-menu    
    "
;; ***** keys
  ("q" nil)
  ("R" revert-buffer)
  ("L" toggle-truncate-lines)
  ("K" (progn
      (require 'async)
      (defun play-keyboard-sound ()
        (interactive)
        (async-start
          (play-sound-file "E:/Temp/wav/selectric-move.wav")))
        (add-hook 'pre-command-hook 'play-keyboard-sound)))

  ("k" (remove-hook 'pre-command-hook 'play-keyboard-sound))
  ("SPC" spc-main-menu99/body)
  ("n" spc-main-menu99/body)
  ("p" spc-main-menu01/body)
;; ***** END of def
  )
#+end_src

****** spc-main-menu99
#+begin_src elisp
(defhydra spc-main-menu99 (:color blue)
;; ***** hint
    "
    ^Main^             ^99^             ^  Menus^          
    ^─────^────────────^──^─────────────^───────^─────────
    _q_uit            _i_n       _h_elp 
    ^^                _j_ump     _l_it-menu
    _p_rev-menu       _n_ext-menu    
    "
;; ***** keys
    ("q" nil)
    ("i" org-clock-in)
    ("j" org-clock-goto)
    ("o" org-clock-out)
  ("h" hydra-help-menu/body)
    ;; ("r" org-clock-report)
  ("n" spc-main-menu00/body)
  ("p" spc-main-menu98/body)
  ("l" lit-menu/body)
;; ***** END of def
  )
#+end_src

***** fset macros
#+begin_src elisp
(fset 'mac-done-copy
   (lambda (&optional arg) "Keyboard macro." (interactive "p") (kmacro-exec-ring-item (quote ("dzadd`dpza``" 0 "%d")) arg)))
#+end_src
***** defuns
#+begin_src elisp
(defun curent-time-format-hh-mm (p-h p-m)
  "curent-time-format-hh-mm"
  (concat
    (number-to-string (+ p-h (nth 2 (decode-time))))
    ":"
    (let ((i (+ p-m (nth 1 (decode-time)))))
      (if (> i  9)
          (number-to-string i)
          (concat "0" (number-to-string i))))))
#+end_src
***** menus for 00
****** yasnippet
#+begin_src elisp
(defhydra hydra-yasnippet ( :color pink
              ;; :hint nil
              )
;; **** Hint
  "
              ^YASnippets^
--------------------------------------------
  Modes:    Load/Visit:    Actions:

 _g_lobal  _d_irectory    _i_nsert
 _m_inor   _f_ile         _t_ryout
 _e_xtra   _l_ist         _n_ew
 _q_uit    _a_ll
"
;; **** Keys
  ("d" yas-load-directory)
  ("e" yas-activate-extra-mode)
  ("i" yas-insert-snippet :color blue)
  ("w" yas-wrap-around-region :color blue)
  ("f" yas-visit-snippet-file :color blue)
  ("n" yas-new-snippet :color blue)
  ("t" yas-tryout-snippet)
  ("l" yas-describe-tables :color blue)
  ("g" yas/global-mode)
  ("m" yas/minor-mode)
  ("a" yas-reload-all)
  ("q" nil "quit")
;; **** END )
  )
#+end_src
****** org-menu
    ("t" org-todo "Todo set")
    ("g" org-agenda "aGenda" :color blue )
    ("r" org-archive-subtree "ARhiv TODO")
;; ***** keys
;; ****** one-line keys
#+begin_src elisp
(defhydra org-menu (:color pink)
    ("d" org-babel-demarcate-block "demarcate" :color blue)
    ("s" org-toggle-inline-images "Show image")
    ("q" nil ) 
    ("o" org-roam-menu/body "Org-rOam" :color blue)
    ("i" org-insert-menu/body "insert" :color blue)
  )
#+end_src
;; ****** D : 
    ("D" (progn
            ;; (nil/body) 
            (evil-open-fold)
            (mac-done-copy)
            ;; (org-menu/body)
            ) "DoneMACRO" 
              :color blue)
;; ****** h : 
    ("h" (org--deadline-or-schedule nil 'scheduled 
               (curent-time-format-hh-mm 1 0))
          "H+1h"
          :color blue)
;; ****** n : 
    ("n" (org--deadline-or-schedule nil 'scheduled 
               (curent-time-format-hh-mm 13 0))
          "N+13h"
          :color blue)
;; ****** b Idirect buffer : 
    ("b" (progn
            (org-tree-to-indirect-buffer)
            (define-key evil-normal-state-map (kbd "g SPC") 
              `org-tree-to-indirect-buffer))
          "BuffersInder"
          :color blue)
;; ***** END of def
****** org-roam-menu
#+begin_src elisp
(defhydra org-roam-menu (:color blue)
;; ***** keys
    ("i" org-roam-node-insert "Insert")
    ("c" org-roam-capture "Capture")
    ("g" org-roam-graph "graph")
    ("a" org-roam-alias-add "Alias Add")
    ("q" nil)
    ("D" org-id-get-create "iD get create")
    ("F" (dendroam-node-find-initial-input) "h-Find")
    ("f" org-roam-node-find "Find")
    ("r" org-roam-buffer-display-dedicated "dedicated-buffeR")
    ("SPC" org-roam-buffer-toggle "Roam-buffeR")
    ("j" org-roam-dailies-capture-today "joarnal")
    ("t" org-roam-tag-add "Tag-add")
    ("S"
     (progn
       (org-roam-ui-mode)
       (message "server start on: http://127.0.0.1:35901/")) "Start/StopUI")
    ("z" org-roam-ui-node-zoom "Zoom")
    ("s" org-roam-ui-node-local "Show-node")
    ("R" org-roam-node-random "random")
    ("B" (org-roam-db-sync 'FORCE) "dB-Build")
;; ***** END of def
  )
#+end_src
****** org-insert-menu
#+begin_src elisp
(defhydra org-insert-menu (:color blue)
    ("t" (insert ":tangle no") "tangle no")
    ("r" (insert ":results output silent") "result no")
    ("h" (insert "#+HEADER: :tangle ../Src/Start.sh") "HEADER")
    ("f" (insert "(find-file-other-frame \" \")") "file frame")
    ("F" (insert "(find-file \" \"") "Find File)")
    ("s" (insert "(buyn-shell-start \" \")") "shell")
    ("k" (insert "(buyn-shell-start \"konsole -e ' '\")") "konsole")

    ("q" nil)
  )
#+end_src
****** brain-org
#+begin_src elisp
(defhydra hydra-brain-org-menu (:color blue)
  ;; (global-map "C-c")
  "Org-Brain menu"
  ;; ("i" (org-brain-get-id)
  ;;   "addID2header")
  ;; ("I" (org-brain-headline-to-file)
  ;;   "addID2All")
  ("b" (progn
                                (setq-default tab-width 8)
                                (org-brain-visualize "index")
              (setq-default tab-width 2))
    "vis2index.org")
  ;; ("V" (org-brain-visualize (buffer-file-name))
  ;;   "vis2curent.org")
  ("v" (org-brain-visualize)
    "visualize")
  ;; ("B" (org-brain-entry-at-pt)
  ;;   "vis2at-pt")
  ("R" (org-brain-rename-file)
    "rename-file")
  ;; ("U" (org-brain-update-id-location)
  ;;   "updateID")
  ;; ("F" (org-brain-headline-to-file)
  ;;   "Hline2file")
  ;; ("w" (progn  
  ;;    ;; (find-file-other-frame "~/.archemacs/ELs/org-eww/org-eww.el")
  ;;    ;; (require 'org-eww "~/.archemacs/ELs/org-eww/org-eww.el")
  ;;    (org-eww-copy-for-org-mode)
  ;;    )
    ;; "web-page2Org")
  ("q" nil "quit")
  ;; --------------------------------------
  )
#+end_src

#+RESULTS:
: hydra-brain-org-menu/body

****** emacs-menu
#+begin_src elisp
(defhydra hydra-emacs-menu (:color blue)
;; ***** keys
;; ****** w : 
    ("w" (if (eq evil-state 'visual)
                (query-replace
                            "/"
                            "\\"
                            nil
                            (region-beginning)
                            (region-end)
                            (current-kill 0 "DO-NOT-MOVE"))
                (query-replace
                            "/"
                            "\\"
                            nil
                            nil
                            (current-kill 0 "DO-NOT-MOVE"))) "To Win Format")
;; ****** u : 
    ("u" (if (eq evil-state 'visual)
                (query-replace
                            "\\"
                            "/"
                            nil
                            (region-beginning)
                            (region-end)
                            (current-kill 0 "DO-NOT-MOVE"))
                (query-replace
                            "\\"
                            "/"
                            nil
                            nil
                            (current-kill 0 "DO-NOT-MOVE"))) "To unix Format")
;; ****** m : 
    ("m" (progn
          (unless (fboundp 'mask_win_path)
              (load (expand-file-name "keymac/mask_win_path.el" user-emacs-directory)))
          (mask_win_path)) "maskSlesh")
;; ****** f : 
  ("f" hydra-emaks-fonts/body "fonts")
  ("t" (untabify (point-min) (point-max)) "untabify all")
;; ****** E : 
  ("E" evil-mode "evil mode")
;; ****** R : 
  ("R" revert-buffer "revert buffer") 
;; ****** W : 
  ("W" (revert-buffer-with-coding-system 'windows-1251) "win-1251") 
;; ****** q : 
  ("q" nil) 
;; ****** s : 
  ("s" copy-to-register "savTex2reg" :color blue ) 
;; ****** i : 
  ("i" insert-register "insReg2buff" :color blue ) 
  ("L" menu-bar--toggle-truncate-long-lines "long-lines")
;; ***** END of def
  )

(defhydra hydra-emaks-fonts (:color blue)
  "fonts menu "
;; **** u : 
  ("u" (set-frame-font "Ubuntu Mono" nil nil)
        "UbuntuMono")
;; **** c : 
  ("c" (set-frame-font "comic sans ms" nil nil)
        "ComicSansMS")
;; **** C : 
  ("C" (set-frame-font "comic Mono" nil nil)
        "ComicMono")
;; **** p : 
  ("p" (set-frame-font "Papyrus" nil nil)
        "Papyrus")
;; **** P : 
  ("P" (set-frame-font "Comic Papyrus" nil nil)
        "ComicPapyrus")
;; **** e : 
  ("e" (set-frame-font "Edwardian Script ITC" nil nil)
        "EdwardianS")
;; **** b : 
  ("b" (set-frame-font "Bamboo" nil nil)
        "Bamboo")
;; **** k : 
  ("k" (set-frame-font "Celtic Knots" nil nil)
        "KelticKnots")
;; **** t : 
  ("t" (set-frame-font "Times New Roman" nil nil)
        "TimesNewRoman")
;; **** q : 
  ("q" nil "quit"))
#+end_src
****** www-menu
#+begin_src elisp
(defhydra www-menu (:color blue)
;; ***** hint
    "
                                   ^WWW  Menus^          
───────────────────────────────────^──────────^────────────────────────────────
_L_ist  _y_t  _B_ookmarks  _v_isual  _r_enameBuf _m_pv _f_irefox _c_hromium
_S_earchOtherF _s_earch _E_WordOthrF s_W_itch _p_ast&go _k_hinsider        
_Y_ankPageUrl  _f_rameLink _w_iki-trm  _z_oom  _q_uit _i_mgS
    "
;; ***** keys
;; ****** one-line keys
    ("L" (eww-list-buffers))
    ("W" (eww-switch-to-buffer))
    ("B" (eww-list-bookmarks))
    ("f" org-open-link-in-new-frame)
    ("z" hydra-zoom/body)
    ("r" rename-buffer)
  ("q" nil) 
;; ****** "v" : 
    ("v" (progn
      ;; (global-visual-line-mode t)
      (setq truncate-lines nil)
      (setq line-move-visual t)
      (setq word-wrap t)
       )
   )
;; ****** "m" : 
    ("m" (progn
          (eww-copy-page-url)
                                        (message (current-kill 0))
          ;; (buyn-shell-start (concat "mpv " (current-kill 0)))
                                        ))

;; ****** "f" : 
    ("f" (progn
          (eww-copy-page-url)
          (buyn-shell-start (concat "firefox " (current-kill 0)))))

;; ****** "c" : 
    ("c" (progn
          (eww-copy-page-url)
          (buyn-shell-start (concat "chromium " (current-kill 0)))))
;; ****** "s" : 
    ("s"  (
      let (buffer-name-to-close (buffer-name))
          (if (use-region-p)
            (eww (buffer-substring
                (region-beginning)
                (region-end)))
            (eww (buffer-substring
                (line-beginning-position)
                (line-beginning-position 2))))
          (switch-to-buffer buffer-name-to-close)))
;; ****** "S" : 
    ("S"  (
      let (buffer-name-to-close (buffer-name))
          (evil-window-split)
          (if (use-region-p)
            (eww (buffer-substring
                (region-beginning)
                (region-end)))
            (eww (buffer-substring
                (line-beginning-position)
                (line-beginning-position 2))))
          (evil-quit)
          (switch-to-buffer-other-frame buffer-name-to-close)))
;; ****** "w" : 
    ("w"  (
      let (buffer-name-to-close (buffer-name))
          (evil-window-split)
          (if (use-region-p)
            (eww (concat (buffer-substring
                            (region-beginning)
                            (region-end))
                         " site:en.wikipedia.org"))
            (eww (buffer-substring
                (line-beginning-position)
                (line-beginning-position 2))))
          (evil-quit)
          (switch-to-buffer-other-frame buffer-name-to-close)))
;; ****** "y" : 
    ("y"  (
      let (buffer-name-to-close (buffer-name))
          (evil-window-split)
          (if (use-region-p)
              (eww (concat
                    "https://vid.puffyan.us/search?q="
                    (buffer-substring
                            (region-beginning)
                            (region-end))))
            (eww (buffer-substring
                (line-beginning-position)
                (line-beginning-position 2))))
          (evil-quit)
          (switch-to-buffer-other-frame buffer-name-to-close)))
;; ****** "k" : 
    ("k"  (
      let (buffer-name-to-close (buffer-name))
          (evil-window-split)
          (if (use-region-p)
              (eww (concat
                    "https://downloads.khinsider.com/search?search="
                    (buffer-substring
                            (region-beginning)
                            (region-end))))
            (eww (buffer-substring
                (line-beginning-position)
                (line-beginning-position 2))))
          (evil-quit)
          (switch-to-buffer-other-frame buffer-name-to-close)))
;; ****** "i" : 
    ("i"  (
      let (buffer-name-to-close (buffer-name))
          (evil-window-split)
          (if (use-region-p)
              (eww (concat
                    "https://www.google.com/search?gbv=1&bih=&biw=&source=hp&hl=en&ie=ISO-8859-1&tbm=isch&q="
                    (buffer-substring
                            (region-beginning)
                            (region-end))))
            (eww (buffer-substring
                (line-beginning-position)
                (line-beginning-position 2))))
          (evil-quit)
          (switch-to-buffer-other-frame buffer-name-to-close)))
;; ****** "E" : 
    ("E"  (
      let (buffer-name-to-close (buffer-name))
          (evil-window-split)
          (if (use-region-p)
              (eww-search-words)
            (progn 
                ;; According to C-h f region-active-p, it seems that you should use use-region-p instead.
                ;; EDIT: I think that rebinding the key to the new command is a cleaner approach than the advice (other commands may be relying on the original version of eww-search).
                ;; (line-beginning-position)
                ;; (line-beginning-position 2)
                ;; (eww-search-words)))
                (eww (read-string "Query: ")))
          (evil-quit)
          (switch-to-buffer-other-frame buffer-name-to-close))))
;; ****** "Y" : 
    ("Y" (progn  
      (setq x-select-enable-clipboard t)
      (eww-copy-page-url)
      (setq x-select-enable-clipboard nil)
      ))
;; ****** "p" : 
  ("p" (progn  
      (setq x-select-enable-clipboard t)
      (eww (current-kill 0 "DO-NOT-MOVE"))
      (setq x-select-enable-clipboard nil)
      ))
;; ***** END of def
  )

(defhydra hydra-zoom (:color pink)
  ;; (global-map "C-c")
  "zoom"
  ("i" text-scale-increase "in")
  ("o" text-scale-decrease "out")
  ("p" www-menu/body "prev")
  ("q" nil "quit")
  )
#+end_src

#+RESULTS:
: hydra-zoom/body

****** yank-menu
#+begin_src elisp
(defhydra hydra-yank-menu (:color blue)
  ;; (global-map "C-c")
  "yank menu"
  ("y" (progn  
      (setq x-select-enable-clipboard t)
      (kill-new (current-kill 0 "DO-NOT-MOVE"))
      ;; (message last-clip)
      (setq x-select-enable-clipboard nil)
      )
    "reg2clipbord")
  ("s" (copy-to-buffer) "send2Buff")
  ("w" (progn  
      (setq x-select-enable-clipboard t)
      ;; (find-file-other-frame "~/.archemacs/ELs/org-eww/org-eww.el")
      ;; (require 'org-eww "~/.archemacs/ELs/org-eww/org-eww.el")
      (org-eww-copy-for-org-mode)
      (setq x-select-enable-clipboard nil)
      )
    "web-page2Org")
  ("q" nil "quit")
  ;; --------------------------------------
  )
#+end_src

****** dev-menu
#+begin_src elisp
(defhydra hydra-dev-menu (:color red)
  ;; (global-map "C-c")
  "dev menu"
  ("c" company-mode "company" :color blue)
  ("F" program-mode-hook-customize "fuze")
  ("f" flycheck-mode "flycheck")
  ("o" outshine-mode "outshine")
  ("e" elpy-hydra/body "elpy" :color blue)
  ("P" python-mode "pyton")
  ("p" parinfer-rust-mode "parinferR" :color blue)
  ("d" rainbow-delimiters-mode "delimiters")
  ("T"  (save-excursion
          (progn
            (org-babel-goto-named-src-block "auto-tangle-block")
            (org-babel-execute-src-block)))
        "execute auto-tangle-block" :color blue)
  ("t" (progn
            (setq org-src-preserve-indentation t)
            (untabify (point-min) (point-max))
            (save-buffer)
            (universal-argument)
            (universal-argument)
            (org-babel-tangle))
        "tangle only one file" :color blue)
  ("L" display-line-numbers-mode "line-numbers")
  ("y" hydra-yasnippet/body "yasnippet" :color blue)
  ("q" nil "quit")
  )

(defhydra elpy-hydra (:color blue)
  "
  Elpy in venv:
  "
  ;; Elpy in venv: %`venv-current-name
;; **** Keys
  ("d" (progn (call-interactively 'elpy-test-django-runner) (elpy-nav-errors/body)) "current test, Django runner" :color blue)
  ("t" (progn (call-interactively 'elpy-test-pytest-runner) (elpy-nav-errors/body)) "current test, pytest runner" :color blue)
  ("w" (venv-workon) "workon venv…")
  ("q" nil "quit")
  ("Q" (kill-buffer "*compilation*") "quit and kill compilation buffer" :color blue)
;; **** END )
  )

(defhydra elpy-hydra (:color blue)
  "
  Elpy in venv:
  "
  ;; Elpy in venv: %`venv-current-name
;; **** Keys
  ("d" (progn (call-interactively 'elpy-test-django-runner) (elpy-nav-errors/body)) "current test, Django runner" :color blue)
  ("t" (progn (call-interactively 'elpy-test-pytest-runner) (elpy-nav-errors/body)) "current test, pytest runner" :color blue)
  ("w" (venv-workon) "workon venv…")
  ("q" nil "quit")
  ("Q" (kill-buffer "*compilation*") "quit and kill compilation buffer" :color blue)
;; **** END )
  )
#+end_src

#+begin_src elisp
(defhydra elpy-nav-errors (:color red)
;; ***** Hint
  "
  Navigate errors
  "
;; ***** Keys
  ("n" next-error "next error")
  ("p" previous-error "previous error")
  ("s" (progn
         (switch-to-buffer-other-window "*compilation*")
         (goto-char (point-max))) "switch to compilation buffer" :color blue)
  ("w" (venv-workon) "Workon venv…")
  ("q" nil "quit")
  ("Q" (kill-buffer "*compilation*") "quit and kill compilation buffer" :color blue)
;; ***** END )
  )
#+end_src
****** outline
#+begin_src elisp
(defhydra hydra-outline (:color pink :hint nil)
;; **** Hint
  "
^Hide^             ^Show^           ^Move
^^^^^^------------------------------------------------------
_q_: sublevels     _a_: all         _u_: up
_t_: body          _e_: entry       _n_: next visible
_o_: other         _i_: children    _p_: previous visible
_c_: entry         _k_: branches    _f_: forward same level
_l_: leaves        _s_: subtree     _b_: backward same level
_d_: subtree

"
;; **** Keys
  ;; Hide
  ("q" hide-sublevels)    ; Hide everything but the top-level headings
  ("t" hide-body)         ; Hide everything but headings (all body lines)
  ("o" hide-other)        ; Hide other branches
  ("c" hide-entry)        ; Hide this entry's body
  ("l" hide-leaves)       ; Hide body lines in this entry and sub-entries
  ("d" hide-subtree)      ; Hide everything in this entry and sub-entries
  ;; Show
  ("a" show-all)          ; Show (expand) everything
  ("e" show-entry)        ; Show this heading's body
  ("i" show-children)     ; Show this heading's immediate child sub-headings
  ("k" show-branches)     ; Show all sub-headings under this heading
  ("s" show-subtree)      ; Show (expand) everything in this heading & below
  ;; Move
  ("u" outline-up-heading)                ; Up
  ("n" outline-next-visible-heading)      ; Next
  ("p" outline-previous-visible-heading)  ; Previous
  ("f" outline-forward-same-level)        ; Forward - same level
  ("b" outline-backward-same-level)       ; Backward - same level
  ("z" nil "leave")
;; (global-set-key (kbd "C-c #") 'hydra-outline/body) ; by example
;; **** END )
  )
#+end_src

****** commands-menu
#+begin_src elisp
(defhydra hydra-commands-menu (:color blue)
  "
  commands menu:
  "
  ;; Elpy in venv: %`venv-current-name
  ("e" (hydra-eshell-menu/body) "eshell...")
  ("s" (hydra-shell-scripts-menu/body) "scripts...")
  ("l" (hydra-applancher-menu/body) "applancher...")
  ("m" (hydra-player-menu/body) "player...")
  ("p" (emms-pause) "playe/pause")
  ("q" nil "quit")
  )
#+end_src

#+begin_src elisp
(defhydra hydra-player-menu (:color blue)
  "
  commands menu:
  "
  ;; Elpy in venv: %`venv-current-name
  ("e" (emms) "emms")
  ("m" (buyn-shell-start (concat "haruna " (buffer-substring (region-beginning) (region-end)))) "2haruna")
  ("M" (buyn-shell-start (concat "mpv " (buffer-substring (region-beginning) (region-end)))) "2mpv")
  ("t" (progn
         (find-file-other-frame "~/Dropbox/Resources/Playlists/test.m3u")
         (emms-play-m3u-playlist "~/Dropbox/Resources/Playlists/test.m3u"))
   "test.m3u")
  ("w" (progn
          (find-file-other-frame "~/Dropbox/Resources/Playlists/Tech/watch.m3u")
          (emms-play-m3u-playlist "~/Dropbox/Resources/Playlists/Tech/watch.m3u"))
   "test.m3u")
  ("s" (emms-streams) "streams")
  ("q" nil "quit")
  )
#+end_src

#+RESULTS:
: hydra-player-menu/body

#+begin_src elisp
(defhydra hydra-eshell-menu (:color blue)
  "
  Eshell menu:
  "
  ;; Elpy in venv: %`venv-current-name
  ("e" (let (buffer-name-to-close (buffer-name))
        (evil-window-split)
        (eshell)
        (evil-quit)
        (switch-to-buffer-other-frame buffer-name-to-close))
      "Open eshell")
  ("q" nil "quit")
  )

(defhydra hydra-shell-scripts-menu (:color blue)
  "
  Shell scripts menu:
  "
  ;; Elpy in venv: %`venv-current-name
  ("R" (progn
          (buyn-shell-start "sh_restart_plasmashell.sh")
          (delete-other-windows))
      "Restart plasmashell")
  ("s" (progn
          (buyn-shell-start "sudo systemctl suspend")
          (delete-other-windows))
      "sleep")
  ("H" (progn
          (buyn-shell-start "sudo systemctl hibernate")
          (delete-other-windows))
      "hibernate")
  ("Y" (progn
          (buyn-shell-start "sudo systemctl hybrid-sleep")
          (delete-other-windows))
      "hYbrid-sleep")
  ("P" (progn
         (buyn-shell-start "sh_off.sh")
         (delete-other-windows))
      "PoweOFF")
  ("q" nil "quit")
  )
#+end_src

#+begin_src elisp
(defhydra hydra-applancher-menu (:color blue)
  "
  App Lancher menu
  "
  ;; Elpy in venv: %`venv-current-name
  ("d" (progn
          (buyn-shell-start "emacs --debug-init")
          (delete-other-windows))
      "emacs debug")
  ("m" (progn
         (buyn-shell-start "chromium --profile-directory=Default --app-id=cbgioneaoelhfonhmabneendhdhileho")
            (setq x-select-enable-clipboard t)
            (kill-new "https://meet.google.com/ttu-evry-rvj")
            (setq x-select-enable-clipboard nil)
            (delete-other-windows))
      "my google meetup")
  ("g" (progn
         (buyn-shell-start "chromium --profile-directory=Default --app-id=bbfcdomagcggnpdkfbjfagpgafbehnkk")
         (delete-other-windows))
      "Gemeni")
  ("q" nil "quit")
  )
#+end_src

***** other menus
****** ediff
#+begin_src elisp
(defhydra hydra-ediff (:color blue :hint nil)
  "
;; **** Hint
^Buffers           Files           VC                     Ediff regions
----------------------------------------------------------------------
_b_uffers           _f_iles (_=_)       _r_evisions              _l_inewise
_B_uffers (3-way)   _F_iles (3-way)                           _w_ordwise
_?_ help            _c_urrent file                            
"
;; **** Keys
  ("b" ediff-buffers)
  ("B" ediff-buffers3)
  ("=" ediff-files)
  ("f" ediff-files)
  ("F" ediff-files3)
  ("c" ediff-current-file)
  ("r" ediff-revision)
  ("l" ediff-regions-linewise)
  ("w" ediff-regions-wordwise)
  ("?" (info "(ediff) Introduction"))
;; **** END )
  )
#+end_src

****** transpose
#+begin_src elisp
(defhydra hydra-transpose (:color red)
;; **** Hint
    "Transpose"
;; **** Keys
     ("c" transpose-chars "characters")
     ("w" transpose-words "words")
     ("o" org-transpose-words "Org mode words")
     ("l" transpose-lines "lines")
     ("s" transpose-sentences "sentences")
     ("e" org-transpose-elements "Org mode elements")
     ("p" transpose-paragraphs "paragraphs")
     ("t" org-table-transpose-table-at-point "Org mode table")
     ("q" nil "cancel" :color blue)
;; **** END )
  )
#+end_src

****** lit-menu
#+begin_src elisp
(defhydra lit-menu (:color pink)
;; ***** hint
    "
                ^OrphoGrammus  Menus^ z M-=         
    ────────────^───────────────────^───────────────────
     _[_ prev err    _]_ next err    _w_ word
     _p_rev cor err  _n_ext cor err  
     _f_lyspell      _c_omment chek  _q_uit
     _a_ll buffer    _r_egion cheak
     _R_u-RU    _D_ictonar chenge    _E_n-US
    "
;; ***** keys
    ("[" evil-prev-flyspell-error :color pink)
    ("]" evil-next-flyspell-error :color pink)
    ("n" flyspell-auto-correct-word :color pink)
    ("p" flyspell-auto-correct-previous-word :color pink)
    ("f" flyspell-mode :color pink)
    ("c" flyspell-prog-mode)
    ("a" flyspell-buffer)
    ;; ("R" ispell-change-dictionary "ru_RU")
    ("R" (progn
            (ispell-change-dictionary "ru_RU")
            (flyspell-mode t)))
    ("D" ispell-change-dictionary)
    ("E" (progn
            (ispell-change-dictionary "en_US")
            (flyspell-mode t)))
    ;; ispell-change-dictionary "en_US")
    ("r" ispell-region)
    ("w" ispell-word :color pink)
  ("q" nil) 
;; ***** END of def
  )
#+end_src

****** help-menu
#+begin_src elisp
(defhydra hydra-help-menu (:color blue)
  ;; (global-map "C-c")
  "help menu"
  ("a" apropos "apropos")
  ("f" describe-face "describe-face")
  ("q" nil "quit")
  )
#+end_src

***** F1 menus
****** Todos
******* переписать меню так чтоб по пермено открывалось не во фреме
****** keys
(global-set-key (kbd "S-<f1> S-<f1>") (lambda () (interactive)
                (find-file-other-frame "~/Dropbox/Office/Research/Doc/Grimoire/Grimoire.org")))
(global-set-key (kbd "S-<f1> S-<SPC>") (lambda () (interactive)
                (hydra-f1-grimuar-menu/body)))

****** hydra-f1-grimuar-menu
#+begin_src elisp
(defhydra hydra-f1-grimuar-menu (:color blue)
  ("c" (find-file-other-frame "~/Dropbox/Office/Research/Doc/Codex/BuYn_Codex.org") "Codex")
  ("a" (find-file-other-frame "~/Desktop/orgs/capture/astronomicon.org") "Astronomicon")
  ("E" (find-file-other-frame "~/Desktop/orgs/capture/emagus.org") "Emagus")
  ("n" (find-file-other-frame "~/Dropbox/orgs/capture/Necronomicon.org") "Necronomicon")
  ("t" (find-file-other-frame "~/Dropbox/orgs/capture/Necroteuch.org") "Necroteuch")
  ("T" (buyn-shell-start "/home/buyn/Dropbox/orgs/capture/Necroteuch.sh") "desk5Necroteuch")
  ("s" (find-file-other-frame "~/Dropbox/orgs/capture/Ansible.org") "Ansible")
  ("m" (find-file-other-frame "~/Dropbox/orgs/capture/Manabook.org") "Manabook")
  ("h" (find-file-other-frame "~/Dropbox/orgs/capture/holodeck.org") "Holodeck")
  ("p" (find-file-other-frame "~/Dropbox/orgs/capture/Pensieve.org") "Pensieve")
  ("q" nil)
  )
#+end_src

#+RESULTS:
: hydra-f1-grimuar-menu/body

****** hydra-f1-emagus-menu
#+begin_src elisp
(defhydra hydra-f1-emagus-menu (:color blue)
  ("D" (buyn-shell-start "wmctrl -s 4 ; emacs --debug-init") "run debug")
  ("T" (find-file "~/Dropbox/orgs/Logs/Todos/log-todo-2024-04-28-W17.org") "log-todo")
  ("E" (find-file-other-frame (expand-file-name "init.org" user-emacs-directory)) "Emacs log")
  ("O" (find-file-other-frame "~/Dropbox/orgs/Code/emacs_GPT_2023-07-20.org") "Init org")
  ("S" (find-file-other-frame "~/Dropbox/orgs_code/archlinux/arh_script.org") "Script org")
  ("B" (find-file-other-frame "~/Dropbox/Office/Dev/Pytho/app/browserchuser.org") "browserScript org")
  ("d" (ranger "~/Dropbox/") "rager Dropbox")
  ("t" (ranger "~/Desktop/") "rager Desktop")
  ("w" (ranger "~/Downloads/") "rager Downloads")
  ("v" (ranger "~/Dev/") "rager Dev")
  ("q" nil)
  )
#+end_src

#+RESULTS:
: hydra-f1-emagus-menu/body

****** hydra-f1-home-menu
набор команд управляюших компом
но не входяших в хидраменю
возможно ел фаил зависимы от кампа
возможно фаили из папки где леижит орг
что позволяет сделать орг зависимы
возможно зависимый от имени орг файла
с проверкой на имя орга
и каждый раз считывается перед открытием
***** define-key
#+begin_src elisp
(global-set-key (kbd "M-<SPC>") 'spc-main-menu00/body)
(define-key evil-normal-state-map (kbd "z M-=") 'lit-menu/body)

(define-key evil-normal-state-map (kbd "M-a M-l M-o") 'lit-menu/body)

(define-key evil-visual-state-map (kbd "M-a M-l M-w") 'ispell-region)
(define-key evil-normal-state-map (kbd "M-a M-l M-w") 'ispell-word)
#+end_src

* TODO **Org Mode и интеграции**
** описание
   Все конфиги для `org-mode`, включая `babel`, `org-roam`, `org-brain` и графические инструменты.  
** INI/org-cfg.el
:PROPERTIES:
:header-args: :tangle INI/org-cfg.el
:END:
*** описание

*** used in
;; (find-file "~/.archemacs/INI/init.el")
*** TODO INI/org-cfg.el
**** DONE добавить меню гидры
CLOSED: [2025-03-03 Пн 06:36]
***** S-f1 S-<space>
перечень всех основных оргов
с переходм на другие меню оргов
***** С-f1 С-<space>
****** запуск дебаг
****** открытия файлов орга
******* стар
******* инит
****** открыть ranger 
**** перенести кнопки в орг мод юзпак
или саму загрузку орг кфг добавить туд
но это вроде мение логично
поскольку это основное моё использование имакса
без орга вроде оно не втему
**** список туду активировать репор баг фиксет
поскольку тогда можно рубрицировать поиски по ошибкам
*** src
#+begin_src elisp
;; * ORG-MODE CUSTOMIZATION
;; --------------------------------------
;; ** ---------------     ORG setup
;; (setq org-todo-keywords
;;       '((sequence "TODO(t)" "|" "DONE(d)")
;;         ;; (sequence "REPORT(r)" "BUG(b)" "KNOWNCAUSE(k)" "|" "FIXED(f)")
;;         (sequence "NEXT(x)" "WAITING(w)" "VERIFY(v)" "|" "CANCELED(c)" "DELEGATED(g)")))
;; (setq org-agenda-custom-commands
;;       '(("n" occur-tree "NEXT")))
;; --------------------------------------
(require 'org)
(global-set-key (kbd "C-<f1>") nil)
(global-set-key (kbd "C-<f1> C-<f1>") (lambda () (interactive)
                (find-file-other-frame (expand-file-name "ORG/start.org" user-emacs-directory))))
(global-set-key (kbd "C-<f1> C-<f2>") (lambda () (interactive)
                (find-file-other-frame (expand-file-name "init.org" user-emacs-directory))))
(global-set-key (kbd "C-<f1> C-o") (lambda () (interactive)
                (find-file-other-frame (expand-file-name "init.org" user-emacs-directory))))
(global-set-key (kbd "C-<f1> C-<f3>") (lambda () (interactive)
                (find-file-other-frame "~/Dropbox/orgs_code/archlinux/arh_script.org")))
(global-set-key (kbd "C-<f1> C-s") (lambda () (interactive)
                (find-file-other-frame "~/Dropbox/orgs_code/archlinux/arh_script.org")))
(global-set-key (kbd "C-<f1> C-<SPC>") (lambda () (interactive)
                (hydra-f1-emagus-menu/body)))


(global-set-key (kbd "M-<f1>") nil)
(global-set-key (kbd "M-<f1> M-<f1>") (lambda () (interactive)
                (find-file-other-frame "~/homemacs.org")))

(global-set-key (kbd "M-S-<f1>") nil)
(global-set-key (kbd "M-S-<f1> M-S-<f1>") (lambda () (interactive)
                (find-file-other-frame (expand-file-name "ORG/tmp/tmp_links.org" user-emacs-directory))))

(global-set-key (kbd "S-<f1>") nil)
(global-set-key (kbd "S-<f1> S-<f1>") (lambda () (interactive)
                (find-file-other-frame "~/Dropbox/Office/Research/Doc/Grimoire/Grimoire.org")))
(global-set-key (kbd "S-<f1> S-<SPC>") (lambda () (interactive)
                (hydra-f1-grimuar-menu/body)))

(add-to-list 'auto-mode-alist '("\\.org\\'" . org-mode))
(global-set-key (kbd "C-c l") 'org-store-link)
(global-set-key (kbd "C-c a") 'org-agenda)
;; (global-set-key "\C-cl" 'org-store-link)
;; (global-set-key "\C-ca" 'org-agenda)
(setq org-hide-leading-stars t)
(setq org-tags-column -60)
(setq org-adapt-indentation nil)
(setq org-startup-folded t)
(setq org-link-frame-setup
  '((vm . vm-visit-folder-other-frame)
    (vm-imap . vm-visit-imap-folder-other-frame)
    (gnus . org-gnus-no-new-news)
    (file . find-file-other-frame)
    (wl . wl-other-frame)))
;; (global-reveal-mode nil)
(setq org-edit-src-content-indentation 0)
(setq org-src-window-setup 'other-frame)
;; (define-key org-mode-map (kbd "M-\~") 'insert-pair)
;; --------------------------------------

;; ** ---------------     ORG TODOs
(setq org-todo-keywords
      '((sequence "TODO(t)" "|" "DONE(d)")
        ;; (sequence "REPORT(r)" "BUG(b)" "KNOWNCAUSE(k)" "|" "FIXED(f)")
        (sequence "NEXT(n)" 
                  "WAITING(w)" 
                  "VERIFY(v)" 
                  "CR(r)"
                  "|" 
                  "CANCELED(c)" 
                  "DELEGATED(g)")))
;; (setq org-agenda-custom-commands
;;       '(("n" occur-tree "NEXT")))
;; --------------------------------------

;; ** ---------------     ORG Capures
(global-set-key (kbd "C-c c") 'org-capture)
;; (setq org-default-notes-file (concat org-directory "~/.archemacs/org/notes.org"))
(setq org-capture-templates '(
  ("t" "Todo" entry
      (file+headline "~/Dropbox/orgs/gtd/gtd.org" "Tasks")
      "* TODO %?\n  %i\n  %a")

  ("i" "Todo [inbox]" entry
      (file+headline "~/Dropbox/orgs/gtd/inbox.org" "unsorted")
      "* %i%?")
  ("a" "Agend.org" entry
      (file+headline "~/Dropbox/orgs/gtd/agend.org" "Agend.org")
      "* TODO %i%?")
;; D:\Development\lisp\Home\ORG\Recipes\main.org 
;; D:\Development\lisp\Home\ORG\Recipes\new_recipes.org 
  ;; ("r" "new recipes" entry
  ;;     (file+headline "D:\Development\lisp\Home\ORG\Recipes\new_recipes.org" "new-recipes")
  ;;     "* %i%? \n %U")
  ("n" "notebook" entry
      (file+headline "~/Dropbox/orgs/gtd/notebook.org" "notebook")
      "* %i%? \n %U")
  ("j" "Journal" entry
      (file+datetree "~/Dropbox/orgs/gtd/journal.org")
      "* %?\nEntered on %U\n  %i\n  %a")
  ("l" "links to transfer" entry
      (file+headline "~/.archemacs/org/tmp/tmp_links.org" "link to")
      "* TODO %i%?")))
(setq org-refile-targets '(("~/Dropbox/orgs/gtd/gtd.org" :maxlevel . 3)
                           ("~/Dropbox/orgs/gtd/inbox.org" :level . 1)
                           ("~/Dropbox/orgs/gtd/agend.org" :level . 1)
                           ("~/Dropbox/orgs/gtd/notebook.org" :maxlevel . 2)))
;; To define special keys to capture to a particular template without going through the interactive template selection, you can create your key binding like this:
;; (define-key global-map "\C-cx"
;;   (lambda () (interactive) (org-capture nil "x")))
;; https://orgmode.org/manual/Capture-templates.html#Capture-templates
;; ** --------------     Defult Propertys
;; --------------------------------------
(setq org-fold-core-style 'overlays)
(setq org-enforce-todo-dependencies t)
;; Should unfinished children block state changes in the parent? 
(setq org-enforce-todo-checkbox-dependencies t)
;; Should unfinished checkboxes block state changes in the parent?
(setq org-use-property-inheritance t)
;; DEADLINE является одним из этих свойств, которые по умолчанию не наследуются. Вы можете изменить это, настроив переменную
;; User Option: org-confirm-shell-link-function
;;     Function that prompts the user before executing a shell link. 
(setq org-confirm-shell-link-function nil)
;; User Option: org-confirm-elisp-link-function
;;     Function that prompts the user before executing an Emacs Lisp link. 
(setq org-confirm-elisp-link-function nil)
;; (setq org-log-done t)
;; ** ORG binding : 
;; *** ORG heders : 
;; (define-key org-mode-map
;;       [S-M-return] 'org-insert-subheading)
(define-key org-mode-map
      (kbd "S-M-<return>") 'org-insert-subheading)
;; (define-key evil-normal-state-map
;;      [C-M-return] 'org-insert-todo-heading-respect-content)
;; (define-key org-mode-map
;;      [C-M-return] 'org-insert-todo-heading-respect-content)
;; *** ORG Foldings
;; **** foldings on lavel navigations
(define-key evil-normal-state-map "zj" 'org-forward-element)
(define-key evil-normal-state-map "zk" 'org-backward-element)
(define-key evil-normal-state-map "zh" 'org-up-element)
(define-key evil-normal-state-map "zl" 'org-down-element)
;; it i think in visual not working delate it after resets
(define-key evil-visual-state-map "zj" 'org-forward-element)
(define-key evil-visual-state-map "zk" 'org-backward-element)
(define-key evil-visual-state-map "zh" 'org-up-element)
(define-key evil-visual-state-map "zl" 'org-down-element)
;; **** foldings manipulate
(define-key evil-normal-state-map "zJ" 'org-metadown)
(define-key evil-normal-state-map "zK" 'org-metaup)
(define-key evil-normal-state-map "zH" 'org-shiftmetaleft)
(define-key evil-normal-state-map "zL" 'org-shiftmetaright)
;; **** z[
(define-key evil-normal-state-map "z[" '(lambda() (interactive)
          (outline-up-heading 1)
          ))
;; **** z]
(define-key evil-normal-state-map "z]" '(lambda() (interactive)
          (outline-up-heading 3)
          ))
;; **** zc
(define-key evil-normal-state-map "zc" '(lambda() (interactive)
          ;; (outline-previous-visible-heading 1)
          (move-beginning-of-line nil)
          (org-up-element)
          (hide-subtree)
          ))
;; **** zC
(define-key evil-normal-state-map "zC" '(lambda() (interactive)
          (outline-up-heading 1)
          (hide-subtree)
          ))
;; *** ORG babel
(define-key org-mode-map (kbd "M-e M-i M-o") 'org-edit-special)
(define-key org-src-mode-map (kbd "M-e M-i M-o") 'org-edit-src-exit)

;; *** ORG Table
;; (global-set-key (kbd "C-c <C-return>") 'org-table-insert-row)
;; move to 
;; (define-key evil-normal-state-map (kbd "C-c <C-return>") 'org-table-insert-row)
(define-key org-mode-map (kbd "C-c <C-return>") 'org-table-insert-row)
;; (global-unset-key (kbd "<S-UP>"))
;; (define-key org-mode-map (kbd "<S-UP>") 'org-table-move-cell-up)

;; ** ORG agenda customization
(use-package org-agenda
  :config
;; (find-file-other-frame "~/.archemacs/INI/org_agend_cfg.el")
  ;; (load "~/.archemacs/INI/org_agend_cfg.el")
(load (expand-file-name "INI/org_agend_cfg.el" user-emacs-directory)))
;; ** ORG babel 
;; (find-file-other-frame "~/.archemacs/INI/babel-cfg.el")
(load (expand-file-name "INI/babel-cfg.el" user-emacs-directory))
;; ** ORG-BRAIN 
;; (find-file-other-frame "~/.archemacs/INI/org-brain-cfg.el")
(load (expand-file-name "INI/org-brain-cfg.el" user-emacs-directory))
;; --------------------------------------

;; * GRAPH ORG TOOLS
;; --------------------------------------
;; (find-file-other-frame "~/.archemacs/INI/ORG/graph-tools-cfg.el")
;; (load "~/.archemacs/INI/ORG/graph-tools-cfg.el")
(load (expand-file-name "INI/ORG/graph-tools-cfg.el" user-emacs-directory))
;; --------------------------------------

;; * ORG-ROAM CUSTOMIZATION
;; --------------------------------------
;; (find-file-other-frame "~/.archemacs/INI/org-brain-cfg.el")
;; (load "~/.archemacs/INI/ORG/org-roam-cfg.el")
;; (load (expand-file-name "INI/ORG/org-roam-cfg.el" user-emacs-directory))
;; --------------------------------------
#+end_src

#+RESULTS:
: t

** INI/org_agend_cfg.el
:PROPERTIES:
:header-args: :tangle INI/org_agend_cfg.el
:END:
*** описание

*** used in
;; (find-file "~/INI/org-cfg.el")
;; (find-file-other-frame "~/INI/org-cfg.el")
*** src
#+begin_src elisp
;; * ageda setings 
;; --------------------- 
(setq org-agenda-sticky 1)
;; default active on l \ g l
;; (setq org-agenda-log-mode-items '(closed clock))
(setq org-agenda-log-mode-items '(closed clock state))
(setq org-agenda-files '( 
  "~/Dropbox/orgs/GTD/todo_today.org"
  "~/Dropbox/orgs/GTD/todo_nottoday.org"))

;; (setq org-agenda-time-grid
;;    '((daily today require-timed)
;;    (200 400 600 800 1000 1200 1400 1600 1800 2000 2200 )
;;    "......" "----------------")
;;    )

(setq org-agenda-time-grid
    '((daily today require-timed)
    (100 200 300 400 500 600 700 800 900 1000 1100 1200 1300 1400 1500 1600 1700 1800 1900 2000 2100 2200 2300 )
    "......" "----------------")
    )

;; --------------------- 
;; * define-key org-agenda-mode-map
;; --------------------- 
;; ** comments 
;; (define-key org-agenda-mode-map (kbd "H")
;;  '(lambda () (interactive) 
;;    (setq current-prefix-arg '(4)) ; C-u
;;    (call-interactively 'org-agenda-do-date-earlier)))
;; ** g : 
;; --------------------- 
(unbind-key (kbd "g") org-agenda-mode-map)
;; --------------------- 

(define-key org-agenda-mode-map (kbd "g g")
  '(lambda () (interactive) 
     (org-agenda-redo)
     (evil-middle-of-visual-line)))

(define-key org-agenda-mode-map (kbd "g j")
  '(lambda () (interactive) 
     (org-agenda-goto-date)))
  
(define-key org-agenda-mode-map (kbd "g m")
  '(lambda () (interactive) 
     (evil-middle-of-visual-line)))

(define-key org-agenda-mode-map (kbd "g k")
  '(lambda () (interactive) 
     (org-agenda-capture)))

(define-key org-agenda-mode-map (kbd "g h")
  '(lambda () (interactive) 
     (org-agenda-holidays)))

(define-key org-agenda-mode-map (kbd "g l")
  '(lambda () (interactive) 
     (org-agenda-log-mode)))
  
(define-key org-agenda-mode-map (kbd "g f")
  '(lambda () (interactive) 
     (toggle-fullscreen-agenda)))
;; --------------------- 

;; ** z : 
;; --------------------- 
(unbind-key (kbd "z") org-agenda-mode-map)
(define-key org-agenda-mode-map (kbd "z n")
  '(lambda () (interactive) 
     (org-agenda-add-note)))

(define-key org-agenda-mode-map (kbd "z z")
  '(lambda () (interactive) 
      (evil-middle-of-visual-line)
      (evil-scroll-line-to-center (line-number-at-pos))))

(define-key org-agenda-mode-map (kbd "z t")
  '(lambda () (interactive) 
    (evil-scroll-line-to-top  (line-number-at-pos))))

(define-key org-agenda-mode-map (kbd "z b")
  '(lambda () (interactive) 
    (evil-scroll-line-to-bottom  (line-number-at-pos))))

;; ** evil j&k
;; --------------------- 
(define-key org-agenda-mode-map (kbd "j")
  '(lambda () (interactive) 
     (org-agenda-next-line)))
(define-key org-agenda-mode-map (kbd "k")
  '(lambda () (interactive) 
     (org-agenda-previous-line)))
;; --------------------- 

;; ** evil c-f&c-b: 
(define-key org-agenda-mode-map (kbd "C-f")
  '(lambda () (interactive) 
     (evil-scroll-page-down 1)))
(define-key org-agenda-mode-map (kbd "C-b")
  '(lambda () (interactive) 
     (evil-scroll-page-up 1)))
;; --------------------- 
;; --------------------- 

;; ** P&N : 
;; --------------------- 
(define-key org-agenda-mode-map (kbd "P")
  '(lambda () (interactive) 
     (evil-scroll-page-up 1)))
(define-key org-agenda-mode-map (kbd "N")
  '(lambda () (interactive) 
     (evil-scroll-page-down 1)))
;; --------------------- 

;; ** L&H
;; --------------------- 
(define-key org-agenda-mode-map (kbd "L")
  '(lambda () (interactive) 
     (org-agenda-date-later-minutes 6)))
(define-key org-agenda-mode-map (kbd "H")
  '(lambda () (interactive) 
     (org-agenda-date-earlier-minutes 6)))
;; --------------------- 

;; ** "C-S-h"&"C-S-l": 
;; --------------------- 
(define-key org-agenda-mode-map (kbd "C-S-l")
  '(lambda () (interactive) 
     (org-agenda-date-later-hours 3)))
(define-key org-agenda-mode-map (kbd "C-S-h")
  '(lambda () (interactive) 
     (org-agenda-schedule nil (curent-time-format-hh-mm 1 0))))
;; --------------------- 

;; --------------------- 
;; ** l&h  
;; --------------------- 
(define-key org-agenda-mode-map (kbd "l")
  '(lambda () (interactive) 
     (org-agenda-date-later-minutes 1)))
(define-key org-agenda-mode-map (kbd "h")
  '(lambda () (interactive) 
     (org-agenda-date-earlier-minutes 1)))
;; --------------------- 

;; --------------------- 
;; * open ageda on new frame 
;; --------------------- 
;;(setq org-agenda-files (quote ("~/ORG/start.org")))
;;(defun simple-run-command-in-new-frame (command)
;; (select-frame (make-frame))
;; (funcall #'command))

;;(defun run-agenda-in-new-frame ()
;; (run-command-in-new-frame 'org-agenda)
;; (run-command-in-new-frame #'org-agenda)
;;(define-key evil-normal-state-map "gta" 'org-agenda) 
(defun simple-run-command-in-new-frame (command)
  (select-frame (make-frame))
  (funcall #'command))

(define-key evil-normal-state-map (kbd "M-g M-t M-a") '(lambda () (interactive) 
    (simple-run-command-in-new-frame 'org-agenda))) 
;; --------------------- 

;; * Agend ADD new case
;; --------------------- 
;; ** comment : 
 ;; (setq org-agenda-custom-commands 
 ;;      '(("c" "Desk Work" tags-todo "computer" ;; (1) (2) (3) (4)
;; the key to trigger the search ("c")
;; a description of the search for the agenda dispatcher ("Desk Work")
;; the type of search (todo items matching a tag)
;; the tag to search for ("computer")
         ;; ((org-agenda-files '("~/org/widgets.org" "~/org/clients.org")) ;; (5)
         ;;  (org-agenda-sorting-strategy '(priority-up effort-down))) ;; (5) cont.
   ;;         ("~/computer.html"))
   ;; specifies that this agenda view should be exported as HTML to "~/computer.html" when the agenda export function is called (C-c a e). 
        ;; ...other commands here
        ;; )))

;; ** org-agenda-custom-commands : 
(setq org-agenda-custom-commands
;; *** Q" . "Custom queries : 
      '(("Q" . "Custom queries") ;; gives label to "Q" 
        ("Qa" "Archive search" search ""
         ((org-agenda-files (file-expand-wildcards "~/archive/*.org")))) 
        ("Qn" "Todo next search" todo "NEXT"
            (
            ;; (org-agenda-files (file-expand-wildcards "~/Dropbox/orgs/GTD/*.org"))
            (org-agenda-files '(    "~/Dropbox/orgs/GTD/todo_today.org" 
                                    ;; "~/Dropbox/orgs/capture/emagus.org" 
                                    ;; "~/Dropbox/orgs/capture/Necronomicon.org" 
                                    ;; "~/Dropbox/Office/Research/Doc/Grimoire/Grimoire.org"
                                    ) 
                ))) 
        ("QN" todo "NEXT"
            ((org-agenda-files '(   "~/Dropbox/orgs/GTD/todo_today.org" 
                                    ;; "~/Dropbox/orgs/capture/emagus.org" 
                                    ;; "~/Dropbox/orgs/capture/Necronomicon.org" 
                                    ;; "~/Dropbox/Office/Research/Doc/Grimoire/Grimoire.org"
                                    ) 
            ))) 
        ("QH" "My-agenda"
              ( (agenda "")
                (org-agenda-files '(
                                            "~/Dropbox/orgs/capture/emagus.org" 
                                            "~/Dropbox/Office/Research/Doc/Grimoire/Grimoire.org"
                                            "~/Dropbox/orgs/capture/Necronomicon.org" 
                                            ) 
                ))) 
        ("Qh" agenda "My-agenda" (  
                (org-agenda-files '(
                                    "~/Dropbox/orgs/capture/emagus.org" 
                                    "~/Dropbox/orgs/GTD/todo_today.org"
                                    "~/Dropbox/Office/Research/Doc/Grimoire/Grimoire.org"
                                    ) 
                ))) 
        ("Qw" "Website search" search ""
         ((org-agenda-files (file-expand-wildcards "~/website/*.org"))))
        ("Qb" "Projects and Archive" search ""
         ((org-agenda-text-search-extra-files (file-expand-wildcards "~/archive/*.org"))))
                ;; searches both projects and archive directories
        ("QA" "Archive tags search" org-tags-view "" 
         ((org-agenda-files (file-expand-wildcards "~/archive/*.org"))))
        ;; ...other commands here
        )
;; *** ) END org-agenda-custom-commands : 
      )
#+end_src
** INI/babel-cfg.el
:PROPERTIES:
:header-args: :tangle INI/babel-cfg.el
:END:
*** описание

*** used in
;; (find-file "~/INI/org-cfg.el")
*** src
#+begin_src elisp
(setq org-confirm-babel-evaluate nil)

(org-babel-do-load-languages
 'org-babel-load-languages
 '(

    (python . t)

    (eshell . t)

    (shell       . t)
    (clojure     . t)
    (lua         . t)
    (sql        . t)
    (sqlite     . t)
    (js         . t)
    (css        . t)
    (plantuml   . t)

   ))
#+end_src
** INI/org-brain-cfg.el
:PROPERTIES:
:header-args: :tangle INI/org-brain-cfg.el
:END:
*** описание

*** used in
;; (find-file "~/INI/org-cfg.el")
*** src
**** ORG BRAIN CUSTOMIZATION
***** org-brain use-package: start
#+begin_src elisp
(use-package org-brain :ensure t
#+end_src
***** :init:
#+begin_src elisp
:init
#+end_src
****** org-brain-path:
;; 2 Configure org-brain-path (defaults to /brain in your org-directory) to a directory
;;  where you want to put your org-brain files (which could be the location where you
;;  already keep your org files if you wish to transform your existing org files into
;;  org-brain files). You can set this with the example config presented above or
;;  through M-x customize-group RET org-brain.
#+begin_src elisp
(setq org-brain-path "~/Dropbox/orgs/org-Brain")
#+end_src
****** Evil:
;; For Evil users
;; 3 If you’re an evil user, you’ll want to add (evil-set-initial-state
;;  'org-brain-visualize-mode 'emacs) to your org-brain configuration.
#+begin_src elisp 
(with-eval-after-load 'evil
  (evil-set-initial-state 'org-brain-visualize-mode 'emacs))
#+end_src
***** :config:
#+begin_src elisp
:config
#+end_src
****** CANCELED setq-default
#+begin_src emacs-lisp :tangle no
(setq-default tab-width 8)
#+end_src
****** bind-key:
;; 5 org-brain-prefix-map can be bound to a key to make org-brain commands more
;;  accessable if you edit entries from org-mode. See Editing from org-mode under
;;  Usage below.
#+begin_src elisp
(bind-key "C-c b" 'org-brain-prefix-map org-mode-map)
(define-key org-brain-visualize-mode-map (kbd "M-f") 'avy-goto-word-1)

(define-key org-brain-visualize-mode-map (kbd "S-C-<return>")
            '(lambda() (interactive)
               (push-button)
               (org-brain-goto-current) 
               (let (buffer-name-to-close (buffer-name))
                 (evil-quit)
                 (switch-to-buffer-other-frame buffer-name-to-close))))

(define-key org-brain-visualize-mode-map (kbd "C-<return>")
            '(lambda() (interactive)
               (push-button)
               (org-brain-goto-current) 
               (let (buffer-name-to-close (buffer-name))
                 (evil-quit)
                 (org-brain-visualize-back)
                 (switch-to-buffer-other-frame buffer-name-to-close)))) 
#+end_src
;; *org-brain*
****** org-id:
;; 4 org-brain use org-id in order to speed things up. Because of this, the variable
;;  org-id-track-globally should be t (which it already is by default). You may want to
;;  modify org-id-locations-file too. If you add entries to org-brain directly from
;;  org-mode you must assign headliens an ID. A comfortable way to do this is with
;;  the command org-brain-ensure-ids-in-buffer. Even more comfortable is to add that
;;  to before-save-hook, so that it runs when saving.
#+begin_src elisp
(setq org-id-track-globally t)
(setq org-id-locations-file "~/Dropbox/orgs/org-Brain/.org-id-locations")
#+end_src

;; (add-hook 'before-save-hook #'org-brain-ensure-ids-in-buffer)

****** org-capture-templates:
;; 6 You might want to add information at the end of an entry, without visiting the file. A
;;  way to do this is to use a capture template, such as the one presented above.
#+begin_src elisp
(push '("b" "Brain" plain (function org-brain-goto-end)
        "* %i%?" :empty-lines 1)
      org-capture-templates)
#+end_src
****** org-brain-visualize:
;; 7 If you have a lot of entries, it might take some time to gather information about all
;;  entries when using org-brain-visualize. You could change the value of
;;  org-brain-visualize-default-choices (which is =’all= by default) to only include files,
;;  or even just files in the direct root of org-brain-path.
;; 8 If you feel that org-brain-visualize is too cluttered, you may want to set
;;  org-brain-show-resources and/or org-brain-show-text to nil.
;; (setq org-brain-visualize-default-choices 'all)
#+begin_src elisp
(setq org-brain-title-max-length 23)
#+end_src


;; 9 If you have very long entry names, org-brain-visualize may take a lot of horizontal
;;  space. You can cap the shown length of entry titles, by setting
;;  org-brain-title-max-length.
****** CANCELED entries and file entries:
;; 10 Some users find it confusing having both headline entries and file entries (see
;;  below). It may be preferable to only use headline entries, by setting
;;  org-brain-include-file-entries to nil. If doing this, you should probably also set
;;  org-brain-file-entries-use-title to nil. Another possibility is if you’re only using file
;;  entries, in which case you can set org-brain-scan-for-header-entries to nil.
#+begin_src elisp :tangle no
(setq org-brain-include-file-entries nil
      org-brain-file-entries-use-title nil)
#+end_src

***** org-brain use-package: end
#+begin_src elisp
)
#+end_src
*** docs
**** other pacs
***** polymode use-package
;; ** polymode use-package: 
;; Allows you to edit entries directly from org-brain-visualize
;; (use-package polymode
;;   :config
;;   (add-hook 'org-brain-visualize-mode-hook #'org-brain-polymode))
;; 11 polymode is a package (available on MELPA) which allows for several
;;  major-modes in the same buffer. If you have required the package you can use
;;  M-x org-brain-polymode inside org-brain-visualize, or (as in the example above)
;;  add org-brain-polymode to org-brain-visualize-mode-hook.


** INI/ORG/graph-tools-cfg.el
:PROPERTIES:
:header-args: :tangle INI/ORG/graph-tools-cfg.el
:END:
*** описание

*** used in
;; (find-file "~/INI/org-cfg.el")
*** src
#+begin_src elisp
;; * PLANTUML MODE
;; ** plantuml use-package: 
(use-package plantuml-mode :ensure t
;; *** :init :
  ;; :init
;; *** :config :
  :config
  (setq org-plantuml-jar-path 
    (expand-file-name "~/AddApps/plantuml/plantuml.jar"))
  (setq plantuml-jar-path "~/AddApps/plantuml/plantuml.jar")
  (setq plantuml-default-exec-mode 'jar)
  ;; (setq plantuml-output-type "txt")
  (add-to-list 'org-src-lang-modes '("plantuml" . plantuml))
  (org-babel-do-load-languages 
    'org-babel-load-languages 
    '((plantuml . t)))
  (define-key plantuml-mode-map (kbd "<f8>") '(lambda() (interactive)
          (save-some-buffers 'no-confirm)
          (org-save-all-org-buffers)
          (evil-normal-state)
          (plantuml-preview 1)))        
  (add-to-list 'auto-mode-alist '("\\.plantuml\\'" . plantuml-mode))
;; *** end use-package :
  )

;; *** --------------------------------------

;; * GRAPHVIZ-DOT
;; ** GRAPHVIZ DOT MODE:
(use-package graphviz-dot-mode :ensure t
;; *** :init :
  ;; :init
;; *** :config :
  :config
    (setq graphviz-dot-indent-width 4)
    (setq graphviz-dot-dot-program (expand-file-name  "~/AddApps/Graphviz/bin/dot.exe"))
;; *** end use-package :
  )

;; *** --------------------------------------

;; ** ORG BABEL OB-DOT:
;; (add-to-list 'load-path "~/ELs/Org/Babel/ob-dot.el")
(use-package ob-dot
;; *** :ensure :
  ;; :ensure t
;; *** :init :
  ;; :init
  ;; (add-to-list 'load-path "~/ELs/Org/Babel/ob-dot.el")
;; *** :disabled : 
  ;; :disabled
;; *** :load-path:
  ;; :load-path "ELs/Org/Babel/ob-dot.el"
  :load-path "ELs/Org/Babel/"
;; *** :config :
  :config
  (org-babel-do-load-languages
      'org-babel-load-languages
      '((dot . t)))
;; *** end use-package :
  )

;; *** --------------------------------------

;; ** COMPANY GRAPHVIZ DOT:
(use-package company-graphviz-dot
  :disabled
  :ensure t)
;;  --------------------------------------
;; * DITAA MODE
(use-package ob-ditaa 
  ;; :init
  :config
  (setq org-ditaa-jar-path "~/AddApps/ditaa/ditaa0_9.jar")
  (org-babel-do-load-languages
    'org-babel-load-languages
    '((ditaa . t))) ; this line activates ditaa
  )
;;  --------------------------------------

;; * ARTIST MODE
(add-hook 'artist-mode-hook (lambda ()
  ;; (local-set-key (kbd "<f1>") 'org-mode)
  (local-set-key (kbd "<f2>") 
    'artist-select-op-pen-line) ; f2 = pen mode
  (local-set-key (kbd "<f3>") 
    'artist-select-op-line)     ; f3 = line
  (local-set-key (kbd "<f4>") 
    'artist-select-op-square)   ; f4 = rectangle
  (local-set-key (kbd "<f5>") 
    'artist-select-op-ellipse)  ; f5 = ellipse
  (local-set-key (kbd "<f6>") 
    'artist-select-op-erase-rectangle)  ; f6 = erase
  (local-set-key (kbd "<f7>") 
    'artist-select-op-spray-can)  ; f7 = spray
  ;; (local-set-key (kbd "C-z") 'undo)
  ))
;; ** --------------------------------------

#+end_src
** TODO INI/ORG/org-roam-cfg.el
:PROPERTIES:
:header-args: :tangle INI/ORG/org-roam-cfg.el
:END:
*** описание

*** used in
;; (find-file "~/.archemacs/INI/org-cfg.el")
*** src
#+begin_src elisp
;; * ORG-ROAM CUSTOMIZATION
;; --------------------------------------
;; Org-Roam basic configuration
;; (setq org-directory (concat (getenv "HOME") "/Documents/notes/"))
;;  D:\Development\lisp\Dropbox\orgs\Org-roam\default 
;;  D:/Development/lisp/Dropbox/orgs/Org-roam/default 
(use-package org-roam
  ;; :disabled
  :ensure t
  :after org
  :init (setq org-roam-v2-ack t) ;; Acknowledge V2 upgrade
  :custom
  ;; (org-roam-directory (file-truename org-directory))
  ;; (org-roam-directory (file-truename "D:/Development/lisp/Dropbox/orgs/Org-roam/default/"))
  (org-roam-directory (file-truename "~/Dropbox/orgs/Org-roam/default/"))
  :config
  (org-roam-setup)
  ;; If you're using a vertical completion framework, you might want a more informative completion interface пологаю 10 максимальное количство символо для тагов - можно убрать
  (setq org-roam-node-display-template (concat "${title:*} " (propertize "${tags:10}" 'face 'org-tag)))
  ;; (require 'dendroam)
  ;; (org-roam-db-autosync-mode)
  ;; If using org-roam-protocol
  ;; (require 'org-roam-protocol)
  :bind ( ("C-c n f" . org-roam-node-find)
          ("C-c n l" . org-roam-buffer-toggle)
          ("C-c n c" . org-roam-capture)
          ("C-c n j" . org-roam-dailies-capture-today)
          (:map org-mode-map
                (("C-c n i" . org-roam-node-insert)
                ("C-c n o" . org-id-get-create)
                ("C-c n t" . org-roam-tag-add)
                ("C-c n g" . org-roam-graph)
                ;; ("C-c n r" . org-roam-node-random)       
                ("C-c n a" . org-roam-alias-add)))))


;; --------------------------------------
;; * ORG-ROAM-UI CUSTOMIZATION
(use-package org-roam-ui
  :ensure t
  ;; :disabled
  ;; :straight
  ;;   (:host github :repo "org-roam/org-roam-ui" :branch "main" :files ("*.el" "out"))
  ;; :demand t
  ;; :after org-roam
;;         normally we'd recommend hooking orui after org-roam, but since org-roam does not have
;;         a hookable mode anymore, you're advised to pick something yourself
;;         if you don't care about startup time, use
  ;; запускается сервер сразу с имаком
  ;; :hook (after-init . org-roam-ui-mode)
  :config
  (setq 
        ;; Org-Roam-UI can sync your Emacs theme! This is the default behavior, to disable it do
        ;; org-roam-ui-sync-theme t
        org-roam-ui-sync-theme nil
        ;; ORUI follows you around Emacs by default. To disable this, set
        ;; org-roam-ui-follow nil
        org-roam-ui-follow t
        ;; By default, org-roam-ui will try to open itself in your default browser. To disable this, set
        org-roam-ui-open-on-start nil
        org-roam-ui-update-on-save t))
;; Usage
;; Use M-x org-roam-ui-mode RET to enable the global mode. It will start a web server on http://127.0.0.1:35901/ and connect to it via a WebSocket for real-time updates.
;; --------------------------------------
;; * DENDROAM CUSTOMIZATION
;; ** use-package : 
(use-package dendroam
  :quelpa (dendroam :repo "vicrdguez/dendroam" :fetcher github)
  :ensure t
  :after org-roam
  ;; :demand t
;; ** config : 
  :config
  (setq org-roam-node-display-template "${hierarchy}:${title}")
  ;; (setq org-roam-node-display-template
  ;;      (concat "${hierarchy}:${title}" (propertize "${tags}" 'face 'org-tag)))
  (setq org-roam-capture-templates
        '(("d" "default" plain
          "%?"
          :if-new (file+head "${slug}.org"
                              "#+title: ${hierarchy-title}\n")
          :immediate-finish t
          :unnarrowed t)))
  ;; :after org-roam
  ;; dailies : 
  ;; (setq org-roam-dailies-capture-templates
  ;;      '(("d" "default" entry
  ;;        "* %?"
  ;;        :if-new (file+head "journal.daily.%<%Y.%m.%d>.org"
  ;;                            "#+title: %<%Y-%m-%d>\n"))))
  ;; "Scratch note"
  ;; (setq dendroam-capture-templates
  ;;      '(("t" "Time note" entry
  ;;        "* %?"
  ;;        :if-new (file+head "${current-file}.%<%Y.%m.%d>.org"
  ;;                            "#+title: %^{title}\n"))
  ;;        ("s" "Scratch note" entry
  ;;        "* %?"
  ;;        :if-new (file+head "scratch.%<%Y.%m.%d.%.%M%S%3N>.org"
  ;;                            "#+title: %^{title}\n"))))
;; ** defun : 
  (defun dendroam-node-find-initial-input ()
    (interactive)
    (require 'org-roam)
    (require 'dendroam)
    (org-roam-node-find nil (if (buffer-file-name)
                          (file-name-base (buffer-file-name))
                          "")))
;; ** defun FIX : 
(cl-defmethod org-roam-node-slug ((node org-roam-node))
  "Return the slug of NODE."
  (let ((title (org-roam-node-title node))
        (slug-trim-chars '(;; Combining Diacritical Marks https://www.unicode.org/charts/PDF/U0300.pdf
                           768 ; U+0300 COMBINING GRAVE ACCENT
                           769 ; U+0301 COMBINING ACUTE ACCENT
                           770 ; U+0302 COMBINING CIRCUMFLEX ACCENT
                           771 ; U+0303 COMBINING TILDE
                           772 ; U+0304 COMBINING MACRON
                           774 ; U+0306 COMBINING BREVE
                           775 ; U+0307 COMBINING DOT ABOVE
                           776 ; U+0308 COMBINING DIAERESIS
                           777 ; U+0309 COMBINING HOOK ABOVE
                           778 ; U+030A COMBINING RING ABOVE
                           779 ; U+030B COMBINING DOUBLE ACUTE ACCENT
                           780 ; U+030C COMBINING CARON
                           795 ; U+031B COMBINING HORN
                           803 ; U+0323 COMBINING DOT BELOW
                           804 ; U+0324 COMBINING DIAERESIS BELOW
                           805 ; U+0325 COMBINING RING BELOW
                           807 ; U+0327 COMBINING CEDILLA
                           813 ; U+032D COMBINING CIRCUMFLEX ACCENT BELOW
                           814 ; U+032E COMBINING BREVE BELOW
                           816 ; U+0330 COMBINING TILDE BELOW
                           817 ; U+0331 COMBINING MACRON BELOW
                           )))
    (cl-flet* ((nonspacing-mark-p (char) (memq char slug-trim-chars))
               (strip-nonspacing-marks (s) (string-glyph-compose
                                            (apply #'string
                                                   (seq-remove #'nonspacing-mark-p
                                                               (string-glyph-decompose s)))))
               (cl-replace (title pair) (replace-regexp-in-string (car pair) (cdr pair) title)))
      (let* ((pairs `(("[^[:alnum:][:digit:]\\.]" . "_") ;; convert anything not alphanumeric
                      ("__*" . "_")                   ;; remove sequential underscores
                      ("^_" . "")                     ;; remove starting underscore
                      ("_$" . "")))                   ;; remove ending underscore
             (slug (-reduce-from #'cl-replace (strip-nonspacing-marks title) pairs)))
        (downcase slug)))))

;; ** bind : 
  :bind (("C-c n F" . dendroam-node-find-initial-input))
;; **   ) : 
  )
;; --------------------------------------
#+end_src

* **Работа с файлами и менеджмент**
** описание
   Конфиги для управления файлами, поиска и т.п.  
** INI/file-mng-cfg.el
:PROPERTIES:
:header-args: :tangle INI/file-mng-cfg.el
:END:
*** описание

*** used in
;; (find-file "~/.archemacs/INI/init.el")
*** src
#+begin_src elisp
;; * FILE-MANAGEMENT-MODs CUSTOMIZATION
;; --------------------------------------
;; ** RANGER-MOD CUSTOMIZATION
(use-package ranger
  :ensure t
  :defer t
  ;; :config
  :bind (:map ranger-mode-map
              ("r r" . ranger-refresh)
              ("M-f" . avy-goto-word-1)
              ("g g" . ranger-goto-top)
              ("G G" . ranger-goto-bottom)
              ("Z F F" . find-file-other-frame)
              ("C-S-F" . toggle-frame-maximized)
              ("Z D D" . mkdir)
              ("Z F I" . (lambda() (interactive)
                           (find-file-other-frame
                            (expand-file-name
                             "INI/file-mng-cfg.el"
                             user-emacs-directory))))
              ))

;; --------------------------------------
;; ** DIRED-MOD CUSTOMIZATION
(use-package dired
 ;; :config
  )
;; --------------------------------------
;; * GITS-MODs CUSTOMIZATION
;; --------------------------------------
;; ** MAGIT-MOD CUSTOMIZATION
(use-package magit
  :ensure t
  :defer t
  :bind (:map magit-status-mode-map
              ("M-z M-z" . (lambda() (interactive)
                            (setq buyn-magit-buff-name (buffer-name))
                            (bury-buffer)))
              ("n n" . (lambda() (interactive)
                            (setq buyn-magit-buff-name (buffer-name))
                            (bury-buffer)))
              ("n f i" . (lambda() (interactive)
                           (find-file-other-frame
                            (expand-file-name
                             "INI/file-mng-cfg.el"
                             user-emacs-directory))))

              ("J J" . magit-display-repository-buffer)
              ("J j" . magit-status-jump)
              ("j" . magit-section-forward)

              ("K K" . magit-file-untrack)
              ("K k" . magit-discard)
              ("k" . magit-section-backward)

              ("p" . magit-push)

              ;; ("<F9> m m" .
              ("M-z M-m" .
               (lambda() (interactive)
                 (magit-git-command
                  "git checkout master;git merge experemental;git push;git checkout experemental")))
              ))
;; --------------------------------------
#+end_src
** ELs/BuYn/shell.el
:PROPERTIES:
:header-args: :tangle ELs/BuYn/shell.el
:END:
*** описание

*** used in
;; (find-file "~/.archemacs/INI/init.el")
*** src
#+begin_src elisp
;; * BUYN's ELISP DEFUNS
;; --------------------------------------
;; ** varibls
;; (setq path-to-emagus-cmd "d:/Development/lisp/Emacs/bin/runemacs.exe") 
(setq path-to-emagus-cmd "D:/Development/lisp/Home/emacs_Run_home.cmd") 
(setq path-to-far "D://shell//FAR//Far.exe")
(setq path-to-emagus-client "d:/Development/lisp/Emacs/bin/emacsclientw.exe -n -c -a ''") 
(setq path-to-emagus-client-buyn "d:/Development/lisp/Emacs/bin/emacsclientw.exe -n -c -a 'buyn'") 
;; ** functions
;; *** buyn-shell-start :
(defun buyn-shell-start (cmd-params)
  " buyn start new process
    as parametr  
    get comand to execute
    "
  (shell-command
    (concat 
            cmd-params
            " &")))

;; *** buyn-cmd-start :
(defun buyn-cmd-start (cmd-params)
  " buyn start new cmd process
    as parametr  
    get comand to execute
    "
  (shell-command
    (concat "cmd"
            " /c "
            " start "
            cmd-params
            " &")))

;; *** buyn-cmd-start-syn :
(defun buyn-cmd-start-syn (cmd-params)
  " buyn start new cmd process
    as parametr  
    get comand to execute
    "
  (shell-command
    (concat "cmd"
            " /c "
            " start "
            cmd-params
            )
    )
  )

;; *** buyn-far :
(defun buyn-far (cmd-params)
  " buyn start new cmd process
    as parametr  
    get comand to execute
    "
  (buyn-cmd-start
    (concat path-to-far
            " "
            cmd-params
            ;; " &"
            )
    )
  )

;; *** buyn-start-emagus :
(defun buyn-start-emagus (unix-path-to-file)
  " buyn start new emacs process
    as parametr  
    get file path in unix format
    unix-path-to-file path to file in unix format
    "
  (shell-command
    (concat path-to-emagus-cmd
            " "
            unix-path-to-file
            " &"
            )
    )
  )

;; *** buyn-start-emagus-win : 
(defun buyn-start-emagus-win (win-path-to-file)
   "  buyn start new emacs process
    as parametr  
    get file path in Windos format
    win-path-to-file path to file in unix format
    "
    ;; (message (replace-regexp-in-string "/" (regexp-quote "\\") win-path-to-file t t))
(buyn-start-emagus
  ;; (message 
 (replace-regexp-in-string "\\\\" "/" win-path-to-file t t)
 )
    ;; (message (replace-regexp-in-string "\\\\" "/" win-path-to-file t t ))
;; (replace-regexp-in-string "/" "\\" path t t)
    ;; (replace-string "f" win-path-to-file)
    ;; (message win-path-to-file)
    )

;; * BUYN's ELISP DEFUNS
;; --------------------------------------
;; ** send-region-to-eshell-buffer-and-execute:
(defun send-region-to-eshell-buffer-and-execute(start end );&optional INTERCT
  " Make the custom function interactive and operative on a region
    prepend to the buffer named *eshell*
    switches to the buffer
    and execute-kbd-macro for enter C-m
    switches back to start buffe
    "
  (interactive "r") 
  (let ((buffer-name-to-back (buffer-name)))
      (prepend-to-buffer (get-buffer "*eshell*") start end)
      (switch-to-buffer-other-frame (get-buffer "*eshell*"))
      ;; (evil-insert-state)
      (execute-kbd-macro "\C-m")
      (switch-to-buffer-other-frame buffer-name-to-back)))
;; ** send-activ-line-to-eshell-buffer-and-execute:
(defun send-activ-line-to-eshell-buffer-and-execute()
  " Make the custom function interactive
    evaluet send-region-to-eshell-buffer-and-execute
    with region as from start to end line "
  (interactive) 
  (call-interactively
    (send-region-to-eshell-buffer-and-execute (line-beginning-position) (line-beginning-position 2))))

#+end_src
* **Литературное и текстовые задачи**
** описание
   Чтение текстов, работа с переводами, tts, `read-aloud`.  
** INI/lit-cfg.el
:PROPERTIES:
:header-args: :tangle INI/lit-cfg.el
:END:
*** описание

*** used in
;; (find-file "~/.archemacs/INI/init.el")
*** src
#+begin_src elisp
;; * LITERARY-MOD CUSTOMIZATION 
;; --------------------------------------
;; ** LOAD TRANSLATE-MOD CUSTOMIZATION 
;; (find-file "~/.archemacs/INI/translate-cfg.el")
;; (find-file-other-frame "~/.archemacs/INI/translate-cfg.el") 
;; (load "~/.archemacs/INI/translate-cfg.el")
(load (expand-file-name "INI/translate-cfg.el" user-emacs-directory))
;; --------------------------------------
;; ** LOAD GRAMMER-MOD CUSTOMIZATION 
;; (find-file-other-frame "~/.archemacs/INI/lit-cfg/grammer-cfg.el") 
;; (load "~/.archemacs/INI/lit-cfg/grammer-cfg.el")
(load (expand-file-name "INI/lit-cfg/grammer-cfg.el" user-emacs-directory))
;; ** LOAD READ-ALOUD-MOD CUSTOMIZATION 
;; (find-file-other-frame "~/.archemacs/INI/lit-cfg/read-aloud-cfg.el") 
;; (load "~/.archemacs/INI/lit-cfg/read-aloud-cfg.el")
(load (expand-file-name "INI/lit-cfg/read-aloud-cfg.el" user-emacs-directory))
;; --------------------------------------
;; ** LOAD READERS MODS CUSTOMIZATION 
;; (find-file-other-frame "~/.archemacs/INI/lit-cfg/reader-cfg.el")
;; (load "~/.archemacs/INI/lit-cfg/reader-cfg.el")
(load (expand-file-name "INI/lit-cfg/reader-cfg.el" user-emacs-directory))
;; --------------------------------------
;; * LOAD BUYN's ELISP DEFUNS
;; (find-file-other-frame "~/.archemacs/ELs/BuYn/reader.el")
;; (load "~/.archemacs/ELs/BuYn/reader.el")
(load (expand-file-name "ELs/BuYn/reader.el" user-emacs-directory))
;; --------------------------------------

#+end_src
** INI/advnsed-selections-cfg.el
:PROPERTIES:
:header-args: :tangle INI/advnsed-selections-cfg.el
:END:
*** описание

*** used in
;; (find-file "~/.archemacs/INI/init.el")
*** src
#+begin_src elisp
;; * ADVNSED SELECTIONS CUSTOMIZATION
;; --------------------------------------
;; * expand-region cfg
;; ** use-package expand-region 
(use-package expand-region :ensure t
;; ** expand-region config
  :config
;; *** hydra-expand-region
;; **** defhydra
  (defhydra hydra-expand-region
  ;; (:color blue)
  (:body-pre 'er/expand-region)
  "expand-region"
;; ****  key list
  ("C-=" er/expand-region "more")
  ("=" er/expand-region "more")
  ("m" er/expand-region "more")
  ("SPC" er/expand-region "more")
  ("-" er/contract-region "less")
  ("l" er/contract-region "less")
  ("S-SPC" er/contract-region "less")
  ("C--" er/contract-region "less")
  ("w" er/mark-word "wrd")
  ("s" er/mark-symbol "smbl")
  ;; ("=" er/mark-symbol-with-prefix "more")
  ;; ("=" er/mark-next-accessor "more")
  ("f" er/mark-method-call "methd")
  ("'" er/mark-inside-quotes "iq")
  ("\"" er/mark-outside-quotes "oq")
  ("(" er/mark-inside-pairs "i(")
  (")" er/mark-outside-pairs "o)")
  (";" er/mark-comment ";")
  ("u" er/mark-url "url")
  ;; ("=" er/mark-email "more")
  ("d" er/mark-defun "def")
;; ****  END )
  )
;; **** Bind
(global-set-key (kbd "C-=") 'hydra-expand-region/body)
(define-key evil-visual-state-map (kbd "SPC") 'hydra-expand-region/body)
(define-key evil-normal-state-map "zv" 'hydra-expand-region/body)
;; *** binds
;; (global-set-key (kbd "C-=") 'er/expand-region)
;; ** END of use-package outshine 
  )
;; ** -------------------------------------- }}}


;; * evil-mc cfg
;; ** use-package evil-mc 
(use-package evil-mc :ensure t
;; ** evil-mc config
  :disabled
  :config
  (global-evil-mc-mode  1) ;; enable
  (define-key evil-visual-state-map "zi" 'evil-mc-make-cursor-in-visual-selection-end)
   ;; (define-key evil-visual-state-map "zj" 'evil-mc-make-cursor-move-next-line)
   ;; (define-key evil-visual-state-map "zk" 'evil-mc-make-cursor-move-prev-line)
   ;; (define-key evil-visual-state-map "zn" 'evil-mc-skip-and-goto-next-match)
   ;; (define-key evil-visual-state-map "zp" 'evil-mc-skip-and-goto-prev-match)
   ;; (define-key evil-visual-state-map "zN" 'evil-mc-skip-and-goto-next-cursor)
   ;; (define-key evil-visual-state-map "zP" 'evil-mc-skip-and-goto-prev-cursor)
   (define-key evil-visual-state-map "zo" 'evil-mc-make-all-cursors)
   (define-key evil-visual-state-map "zI" 'evil-mc-make-cursor-in-visual-selection-beg)
   (define-key evil-visual-state-map "zq" 'evil-mc-undo-all-cursors)
;; ** END of use-package outshine 
  )
;; ** -------------------------------------- 


#+end_src
** INI/translate-cfg.el
:PROPERTIES:
:header-args: :tangle INI/translate-cfg.el
:END:
*** описание

*** used in
;; (find-file "~/INI/lit-cfg.el")
;; (find-file-other-frame "~/INI/lit-cfg.el") 
*** src
#+begin_src elisp
;; * TRANSLATE-MOD CUSTOMIZATION 
;; *** ob-translate
;; **** use-package ob-translate 
(use-package popup :ensure t)
(use-package ob-translate :ensure t
  ;; (package-refresh-contents)
  ;; :init
  :config
  (add-to-list 'org-babel-load-languages '(translate . t))
  (org-babel-do-load-languages 'org-babel-load-languages org-babel-load-languages)
  ;; add translate special block into structure template alist.
  ;; (add-to-list 'org-structure-template-alist '("t" . "src translate"))
  ;; (add-to-list 'org-structure-template-alist '("tr" . "src translate :dest ru"))
  (add-to-list 'org-structure-template-alist '("t" "#+BEGIN_SRC translate ? \n\n#+END_SRC\n"))
  (add-to-list 'org-structure-template-alist '("tr" "#+BEGIN_SRC translate :dest ru ? \n\n#+END_SRC\n"))
  )
;; **** --------------------------------------
;; *** google-translate
;; **** use-package google-translate
(use-package google-translate
  :ensure t
  :custom
  (google-translate-backend-method 'emacs)
  :config
  (require 'google-translate-smooth-ui)
  (setq google-translate-translation-directions-alist
        '(("ru" . "en") ("en" . "ru") ("ru" . "uk")))
  (setq google-translate-output-destination nil)
  (setq google-translate-pop-up-buffer-set-focus t)
  (setq google-translate-default-source-language "ru")
  (setq google-translate-default-target-language "en")
  ;; (global-set-key "\C-ct" 'google-translate-smooth-translate)
  (define-key evil-normal-state-map (kbd "M-a M-l M-o") 'google-translate-smooth-translate)
  (define-key evil-normal-state-map (kbd "M-a M-l M-l") 'google-translate-at-point)
  (define-key evil-normal-state-map (kbd "M-a M-l M-j") 'google-translate-at-point)
  (define-key evil-normal-state-map (kbd "M-a M-l M-k") 'google-translate-at-point-reverse)
  (defun google-translate--search-tkk () "Search TKK." (list 430675 2721866130)))
;; **** --------------------------------------
;; *** go-translate
;; **** use-package go-translate
(use-package go-translate :ensure t
  ;; :init
  :disabled
  :config
  (setq go-translate-local-language "ru")
  (setq go-translate-target-language "en")
  (defun google-translate--search-tkk () "Search TKK." (list 430675 2721866130))
  )
;; **** --------------------------------------
#+end_src
** INI/lit-cfg/grammer-cfg.el
:PROPERTIES:
:header-args: :tangle INI/lit-cfg/grammer-cfg.el
:END:
*** описание

*** used in
;; (find-file "~/INI/lit-cfg.el")
;; (find-file-other-frame "~/INI/lit-cfg.el") 
*** src
#+begin_src elisp
;; * GRAMMER-MOD CUSTOMIZATION 
;; *** ispell
;; (setq ispell-program-name "~/AddApps/hunspell-1.3.2-3-w32-bin/bin/hunspell.exe")   
;; **** use-package  
(use-package ispell   
  :config   
  ;; :init
    ;; (setq ispell-program-name "~/AddApps/hunspell-1.3.2-3-w32-bin/bin/hunspell.exe")   
    ;; (setq ispell-program-name "D:/Development/lisp/HOME/AddApps/hunspell-1.3.2-3-w32-bin/bin/hunspell.exe")   
  )
#+end_src
*** Docs
**** exempls
;; (use-package ispell   
;;  :config   
;;    (setq ispell-program-name "C:/Program Files (x86)/hunspell-1.3.2-3-w32-bin/bin/hunspell.exe")   
;;    (setq ispell-local-dictionary "en_US")    
;;    (setq ispell-local-dictionary-alist       
;;      '(("en_US" "[[:alpha:]]" "[^[:alpha:]]" "[']" nil ("-d" "en_US") nil utf-8)))
;;  )

**** Commands
;; (ispell)  to run check
;; (ispell-change-dictionary) to RU
** INI/lit-cfg/read-aloud-cfg.el
:PROPERTIES:
:header-args: :tangle INI/lit-cfg/read-aloud-cfg.el
:END:
*** описание

*** used in
;; (find-file "~/INI/lit-cfg.el")
;; (find-file-other-frame "~/INI/lit-cfg.el") 
*** src read-aloud
**** new
#+begin_src elisp
(use-package read-aloud
  :ensure t
  :defer t
  :load-path "ELs/text-to-speech/read-aloud/"
  :config
    (lax-plist-put read-aloud-engines "spd.ru.irina"
      '(cmd "spd-say"
        args ("-t" "FEMALE1" "-l" "ru" "-e"))) 

    (lax-plist-put read-aloud-engines "spd.en.hfc_female"
      '(cmd "spd-say"
        args ("-t" "FEMALE1" "-l" "en" "-e"))) 

    (lax-plist-put read-aloud-engines "spd.en.amy"
      '(cmd "spd-say"
        args ("-t" "amy" "-l" "en" "-e"))) 
  )
#+end_src
*** docs
**** piper
***** unsort

(find-file-other-frame "/sudo::/etc/speech-dispatcher/modules/piper-generic.conf")
/sudo::/путь/к/файлу

/home/buyn/.config/speech-dispatcher/modules/piper-generic.conf
(find-file-other-frame "~/.config/speech-dispatcher/modules/piper-generic.conf")

/usr/share/piper-voices/ru/ru_RU/irina/medium
https://huggingface.co/rhasspy/piper-voices/blob/main/ru/ru_RU/irina/medium/ru_RU-irina-medium.onnx
ru / ru_RU / irina / medium / ru_RU-irina-medium.onnx
***** voces

/usr/share/piper-voices/ru/ru_RU/ruslan/medium/ru_RU-ruslan-medium.onnx
/usr/share/piper-voices/ru/ru_RU/dmitri/medium/ru_RU-dmitri-medium.onnx
/usr/share/piper-voices/ru/ru_RU/denis/medium/ru_RU-denis-medium.onnx
/usr/share/piper-voices/ru/ru_RU/irina/medium
/usr/share/piper-voices/ru/ru_RU/irina/medium/ru_RU-irina-medium.onnx



/usr/share/piper-voices/en/en_US/amy/medium/en_US-amy-medium.onnx
***** exampls
piper-tts --model ~/temp/pipe/irina/ru_RU-irina-medium.onnx \
          --config ~/temp/pipe/irina/ru_RU-irina-medium.onnx.json \
          --output_file /tmp/test.raw \
          --sentence_silence 0.2 \
          --phoneme_silence 0.02 \
          --length_scale 1.0 \
          --noise_scale 0.667 \
          --noise_w 0.8 \
          --speaker_id 0 \
          --text "Привет, БуЯн! Как ты, мой властелин?"

echo "Привет" | piper-tts \
  --model ~/temp/pipe/irina/ru_RU-irina-medium.onnx \
  --config ~/temp/pipe/irina/ru_RU-irina-medium.onnx.json \
  --output-raw | aplay -r 22050 -f S16_LE -t raw -

echo "Привет, БуЯн. Я Ирина. Всё работает!" | piper-tts \
  --model ~/temp/pipe/irina/ru_RU-irina-medium.onnx \
  --output-raw | aplay -r 22050 -f S16_LE -t raw -


echo "Привет, БуЯн. Я Ирина. Всё работает!" | piper-tts \
  --model ~/temp/pipe/irina/ru_RU-irina-medium.onnx \
  --config /home/buyn/temp/pipe/irina/ru_RU-irina-medium.onnx.json \
  --output-raw | aplay -r 22050 -f S16_LE -t raw -


echo "Start Привет, БуЯн. Я Ирина. Всё работает! Stop" | piper-tts \
  --model /usr/share/piper-voices/ru/ru_RU/irina/medium/ru_RU-irina-medium.onnx \
  --config /usr/share/piper-voices/ru/ru_RU/irina/medium/ru_RU-irina-medium.json \
  --output-raw | aplay -r 22050 -f S16_LE -t raw -

echo "Start Привет, БуЯн. Я Ирина. Всё работает! Stop" | piper-tts \
  --model /usr/share/piper-voices/ru/ru_RU/ruslan/medium/ru_RU-irina-medium.onnx \
  --config /usr/share/piper-voices/ru/ru_RU/ruslan/medium/ru_RU-irina-medium.json \
  --output-raw | aplay -r 22050 -f S16_LE -t raw -


***** install

https://gustawdaniel.com/notes/hot-to-setup-tts-on-arch-linux/
https://github.com/rhasspy/piper

yay -Sy speech-dispatcher

$ systemctl start --user speech-dispatcher.socket
нефакт что надо

yay -Sy piper-tts-bin


попробывать внанчале без там 1г язфковых моделй английских
а он вроде должен сам догружать языки
piper-voices-en-us

yay -Sy piper-voices-ru-ru

spd-conf

spd-say "Arch Linux is the best"

echo "Cześć, to jest test języka polskiego." | piper-tts --model /usr/share/piper-voices/pl/pl_PL/darkman/medium/pl_PL-darkman-medium.onnx --output_file welcome.wav

spd-say -L

display 2 languages but

spd-say -l pl "Powściągliwość"
**** spd
***** raw
yay -S speech-dispatcher

sudo systemctl start --user speech-dispatcher
sudo systemctl restart --user speech-dispatcher


# Если запускается глобально:
sudo systemctl restart speech-dispatcherd.service

# Если работает в режиме пользователя:
systemctl --user restart speech-dispatcher


(find-file-other-frame "/sudo::/etc/speech-dispatcher/modules/piper-generic.conf")
/sudo::/путь/к/файлу

***** error with ru
****** new
(find-file-other-frame "/sudo::/usr/bin/piper-dispatcher")

#!/usr/bin/env bash

# https://aur.archlinux.org/packages/piper-tts-bin#comment-939482

VOICES_PATH="/usr/share/piper-voices"

if [[ ${VOICE: -3} = low ]]; then
  RATE=16000
else
  RATE=22050
fi

if [[ -z "$DATA" ]]; then
  DATA="$(cat -)"
fi

printf %s "$DATA" | piper-tts --model "$VOICES_PATH/$VOICE.onnx" --output-raw | aplay -r "$RATE" -f S16_LE -t raw -

wait
****** origin

(find-file-other-frame "/usr/bin/piper-dispatcher")
#!/usr/bin/env bash

# https://aur.archlinux.org/packages/piper-tts-bin#comment-939482

VOICES_PATH="/usr/share/piper-voices"

if [[ ${VOICE: -3} = low ]]; then
 RATE=16000
else
 RATE=22050
fi

printf %s "$DATA" | piper-tts --model "$VOICES_PATH/$VOICE.onnx" --output-raw | aplay -r "$RATE" -f S16_LE -t raw -

wait
****** 
(find-file-other-frame "~/.config/speech-dispatcher/speechd.conf")

echo "Привет, БуЯн!" | env VOICE="ru/ru_RU/irina/medium/ru_RU-irina-medium" /usr/bin/piper-dispatcher

Что-то непонимаю почему так руский нормально произносится 
env DATA="Привет, БуЯн!" VOICE="ru/ru_RU/irina/medium/ru_RU-irina-medium" /usr/bin/piper-dispatcher

а так 
spd-say -l ru_RU "Привет, БуЯн!"
и та
spd-say -l ru "Привет, БуЯн!"
нет?


**** Usage 
;; M-x read-aloud-this -- pronounce either the selection or a word under the pointer.
;; M-x read-aloud-buf -- read the buffer starting from the current cursor position, highlighting the text as it moves down the buffer. Useful only for plain text files.
;; top reading at any time you either run any of the commands above again, or do M-x read-aloud-stop.
;; M-x read-aloud-change-engine -- select another engine (for this Emacs session). It also shows which one is the current.
*** arhiv code
**** CANCELED old
#+begin_src elisp :tangle no
;; * READ-ALOUD-MOD CUSTOMIZATION 
;; *** load
;; (find-file-other-frame "~/INI/lit-cfg/read-aloud-cfg.el") 
;; (load "~/ELs/text-to-speech/read-aloud/read-aloud.el")
;; *** use-package read-aloud : 
;; (add-to-list 'load-path "~/ELs/text-to-speech/read-aloud")
(use-package read-aloud
  :defer t
  :load-path "ELs/text-to-speech/read-aloud"
  ;; :ensure t
;; *** :config : 
  :config
;; **** plist read-aloud-engines : 
;; ***** ru : 
;; ****** elena : 
(lax-plist-put read-aloud-engines "bal.ru.elena"
  '(cmd "~/AddApps/balcon/balcon.exe"
    args ( "-n" "Elena" "-i" "-enc" "utf8")))
;; ****** Alyona22k : 
(lax-plist-put read-aloud-engines "bal.ru.Alyona22k"
  '(cmd "~/AddApps/balcon/balcon.exe"
    args ( "-n" "Alyona22k" "-i" "-enc" "utf8")))
;; ****** anna : 
(lax-plist-put read-aloud-engines "bal.ru.anna"
  '(cmd "~/AddApps/balcon/balcon.exe"
    args ( "-n" "RHVoice Anna" "-i" "-enc" "utf8")))
;; ****** Irina : 
(lax-plist-put read-aloud-engines "bal.ru.Irina"
  '(cmd "~/AddApps/balcon/balcon.exe"
    args ( "-n" "Irina" "-i" "-enc" "utf8")))
;; ****** Katerina : 
(lax-plist-put read-aloud-engines "bal.ru.Katerina"
  '(cmd "~/AddApps/balcon/balcon.exe"
    args ( "-n" "Katerina" "-i" "-enc" "utf8")))
;; ****** Tatyana : 
(lax-plist-put read-aloud-engines "bal.ru.Tatyana"
  '(cmd "~/AddApps/balcon/balcon.exe"
    args ( "-n" "Tatyana" "-i" "-enc" "utf8")))
;; ****** Milena : 
(lax-plist-put read-aloud-engines "bal.ru.Milena"
  '(cmd "~/AddApps/balcon/balcon.exe"
    args ( "-n" "Milena" "-i" "-enc" "utf8")))
;; ***** ua : 
;; ******  Natalia : 
(lax-plist-put read-aloud-engines "bal.ua.Natalia"
  '(cmd "~/AddApps/balcon/balcon.exe"
    args ( "-n" "Natalia" "-i" "-enc" "utf8")))
;; ***** en : 
;; ****** Slt : 
(lax-plist-put read-aloud-engines "bal.en.Slt"
  '(cmd "~/AddApps/balcon/balcon.exe"
    args ( "-n" "Slt" "-i" "-enc" "utf8")))
;; ****** Bdl : 
(lax-plist-put read-aloud-engines "bal.en.Bdl"
  '(cmd "~/AddApps/balcon/balcon.exe"
    args ( "-n" "Bdl" "-i" "-enc" "utf8")))
;; ****** Clb : 
(lax-plist-put read-aloud-engines "bal.en.Clb"
  '(cmd "~/AddApps/balcon/balcon.exe"
    args ( "-n" "Clb" "-i" "-enc" "utf8")))

;; ****** Heather
  (lax-plist-put read-aloud-engines "bal.en.Heather"
    '(cmd "~/AddApps/balcon/balcon.exe"
      args ( "-n" "Heather" "-i" "-enc" "utf8")))
;; ****** Lucy
(lax-plist-put read-aloud-engines "bal.en.Lucy"
  '(cmd "~/AddApps/balcon/balcon.exe"
      args ( "-n" "Lucy" "-i" "-enc" "utf8")))
;; ****** Jane22k
(lax-plist-put read-aloud-engines "bal.en.Jane"
  '(cmd "~/AddApps/balcon/balcon.exe"
      args ( "-n" "Jane" "-i" "-enc" "utf8")))
;; ****** jampal.en : 
  (lax-plist-put read-aloud-engines "jampal.en"
    '(cmd "cscript"
          args ("D:\\Development\\lisp\\Home\\AddApps\\Jampal\\ptts.vbs" "-r" "1")))
;; **** setq read-aloud-engine : 
;; (setq read-aloud-engine "jampal.en"))
;; (setq read-aloud-engine "balcon.ru")
;; (setq read-aloud-engine "bal.en.Slt")
  (setq read-aloud-engine "bal.en.Lucy")
;; *** ===========END========= ) : 
  )
;; ** Docs
;; *** Usage 
;; M-x read-aloud-this -- pronounce either the selection or a word under the pointer.
;; M-x read-aloud-buf -- read the buffer starting from the current cursor position, highlighting the text as it moves down the buffer. Useful only for plain text files.
;; top reading at any time you either run any of the commands above again, or do M-x read-aloud-stop.
;; M-x read-aloud-change-engine -- select another engine (for this Emacs session). It also shows which one is the current.
#+end_src
** INI/lit-cfg/reader-cfg.el
:PROPERTIES:
:header-args: :tangle INI/lit-cfg/reader-cfg.el
:END:
*** описание

*** used in
;; (find-file "~/INI/lit-cfg.el")
;; (find-file-other-frame "~/INI/lit-cfg.el") 
*** src
#+begin_src elisp
;; * READERS MODS CUSTOMIZATION 
;; ** fb2-mode
;; *** load
;; (add-to-list 'load-path "~/ELs/Readers/fb2-mode/")
;; (add-to-list 'load-path (expand-file-name "ELs/Readers/fb2-mode/" user-emacs-directory))
;; https://github.com/spline1986/fb2-mode
;; https://github.com/spline1986/fb2-mode.git
;; *** use-package fb2-mode : 
(use-package fb2-mode
  ;; :defer t
  ;; :ensure t
  ;; :disabled
  ;; :load-path "~/ELs/Readers/fb2-mode"
  :load-path "ELs/Readers/fb2-mode/"
  ;; :init
  ;; :load-path (expand-file-name "ELs/Readers/fb2-mode/" user-emacs-directory)
;; (find-file (expand-file-name "ELs/Readers/fb2-mode" user-emacs-directory))

;; *** :config : 
  :config
(add-to-list 'auto-mode-alist '("\\.fb2\\'" . fb2-mode))
(add-to-list 'auto-mode-alist '("\\.fb\\'" . fb2-mode))

;; (define-key fb2-mode-map (kbd "<f9>") 'read-aloud-stop)
;; (define-key fb2-mode-map (kbd "SPC") 'buyn-reader-go)
;; (define-key fb2-mode-map (kbd "S-SPC") 'evil-scroll-up)

;; (add-hook 'fb2-mode-hook #'toggle-word-wrap)
;; *** auto-mode-alist:
  ;; :mode (("\\.fb2\\'" "\\.fb\\'" ) . fb2-mode)
  ;; :mode ("\\.fb2\\'" "\\.fb\\'")
  ;; :mode
  ;; ("\\.fb2\\'" . fb2-mode)
  ;; :interpreter "fb2-mode"

;; *** ===========END========= ) : 
  )
;; *** Docs
 ;; https://github.com/spline1986/fb2-mode
 ;; Screenshot
 ;; Installation
 ;; fb2-show-images — if not nil then images in book will displayed (default t).
 ;; fb2-images-height — height of images in fb2-mode buffer (default 500).
 ;; fb2-replace-hard-spaces — if not nil then non-breaking spaces will replaced by spaces (default nil).
;; ** nov.el
;; *** use-package esxml-query : 
;; (use-package esxml-query
  ;; :defer t
  ;; :ensure t
  ;; :disabled
;; )

;; *** use-package nov.el : 
(use-package nov
  :defer t
  ;; :ensure t
  ;; :disabled
  ;; :load-path "~/ELs/Readers/nov.el/"
  :load-path "ELs/Readers/nov.el/"
  ;; :init
;; *** :config : 
  :config
  (add-to-list 'auto-mode-alist '("\\.epub\\'" . nov-mode))
  ;; :mode ("\\.epub\\'" . nov-mode)
;; *** ===========END========= ):
  )
;; *** Docs
;; git clone https://depp.brause.cc/nov.el.git
;; all doc in start mods
#+end_src
** ELs/BuYn/reader.el
:PROPERTIES:
:header-args: :tangle ELs/BuYn/reader.el
:END:
*** описание

*** used in
;; (find-file-other-frame "~/INI/lit-cfg.el")
*** src
#+begin_src elisp
;; * BUYN's ELISP DEFUNS
;; --------------------------------------
;; ** varibls
(setq highlight-start-color '(:background "darkgreen"))
(setq highlight-pointer-color '(:background "blue"))
(setq highlight-stop-color '(:background "darkgreen"))
;; "blue"
;; "lightgreen"
;; "darkgreen"
(setq stop-point 666)
;; --------------------------------------
;; ** functions
;; *** buyn-read-aloud-start :
(defun buyn-read-aloud-start ()
  " Старт озвучки с курсора и установка пробела на стоп команду
    и установка ф8 на активацию читалки
    "
    (interactive)
      (read-aloud-buf)
      (define-key evil-normal-state-map (kbd "SPC")
        'buyn-read-aloud-stop)
      (define-key evil-normal-state-map (kbd "<f8>")
        'buyn-reader-start)
      (message "read-aloud is start"))

;; *** buyn-read-aloud-go :
(defun buyn-read-aloud-go ()
  " Старт озвучки с курсора и установка пробела на стоп команду
    "
    (interactive)
      (read-aloud-buf)
      (define-key evil-normal-state-map (kbd "SPC")
        'buyn-read-aloud-stop))

;; *** buyn-read-aloud-stop :
(defun buyn-read-aloud-stop ()
  " Стop озвучки и установка пробела на старт озвучки
    "
    (interactive)
    (read-aloud-stop)
    (define-key evil-normal-state-map (kbd "SPC")
      'buyn-read-aloud-go))

;; *** buyn-reader-end :
(defun buyn-reader-end ()
  " устанавливает пробел на добовление символа
и отключает плавное движение
    "
    (pixel-scroll-mode -1)
    (setq scroll-preserve-screen-position nil)
    (define-key evil-normal-state-map (kbd "SPC") 
          'khaoos-insert-one-char)
    (message "Reader is off"))
;; *** buyn-reader-start :
(defun buyn-reader-start ()
  " ставит пробел на плавноесть движения
и ф8 на на переключени на озвучку голосом
    "
    (interactive)
  (pixel-scroll-mode 1)
  (setq scroll-preserve-screen-position 1)
  (setq pixel-wait 0.1)
  (define-key evil-normal-state-map (kbd "SPC") 
    'buyn-reader-go)
  (define-key evil-normal-state-map (kbd "S-SPC") 
    'evil-scroll-up

    )

  (define-key evil-normal-state-map (kbd "<f8>") 
    'buyn-read-aloud-start)
  (message "Reader is on"))

;; --------------------------------------
;; *** buyn-reader-stop :
(defun buyn-reader-stop ()
  " 
  останавливает движение
  ставит пробел на плавноесть движения
  и ф8 на на переключени на озвучку голосом
    "
    (interactive)
  (keyboard-quit)
  (message "Reader is stop"))

;; --------------------------------------
;; *** buyn-reader-go :
(defun buyn-reader-go ()
  "ставит пробел на плавноесть движения
и ф8 на на переключени на озвучку голосом
    "
    (interactive)
    (let ((overlay-highlight (make-overlay
                              (point)
                              (+ 1 (point))
                              )))
        ;; (overlay-put overlay-highlight 'face '(:background 'highlight-pointer-color))
        ;; (overlay-put overlay-highlight 'line-highlight-overlay-marker t))
      (highlight-region (point) (+ 1 (point)) highlight-pointer-color)
      (evil-window-bottom)
      ;; (char-after (point-at-bol))
      ;; (highlight-region (line-beginning-position) (+ (line-beginning-position) 21))
      ;; (highlight-region (point) (+ (point) 21))
      ;; (highlight-region (+ (point) stop-point) (+ (point) stop-point 21))
      (highlight-region (point) (+ 1 (point)))
      ;; (highlight-or-dehighlight-char)
      (evil-window-middle)
      (next-line 9)
      ;; (evil-window-bottom)
      (pixel-scroll-pixel-up stop-point)
      ;; (pixel-scroll-mode &optional ARG)
      ))

;; --------------------------------------
;; *** find-overlays-specifying : 
(defun find-overlays-specifying (prop pos)
  (let ((overlays (overlays-at pos))
        found)
    (while overlays
      (let ((overlay (car overlays)))
        (if (overlay-get overlay prop)
            (setq found (cons overlay found))))
      (setq overlays (cdr overlays)))
    found))


;; --------------------------------------
;; *** highlight-or-dehighlight-line : 
(defun highlight-or-dehighlight-line ()
  (interactive)
  (if (find-overlays-specifying
       'line-highlight-overlay-marker
       (line-beginning-position))
      (remove-overlays (line-beginning-position) (+ 1 (line-end-position)))
    (let ((overlay-highlight (make-overlay
                              (line-beginning-position)
                              (+ 1 (line-end-position)))))
        (overlay-put overlay-highlight 'face '(:background "lightgreen"))
        ;; (overlay-put overlay-highlight 'face '(:background highlight-start-color))
        (overlay-put overlay-highlight 'line-highlight-overlay-marker t))))


;;  --------------------------------------
;; *** highlight-or-dehighlight-char : 
(defun highlight-or-dehighlight-char ()
  (interactive)
  (if (find-overlays-specifying
       'line-highlight-overlay-marker
       (line-beginning-position))
      (remove-overlays (position) (+ 1 (position)))
    (let ((overlay-highlight (make-overlay
                              (position)
                              (+ 1 (position)))))
        (overlay-put overlay-highlight 'face '(:background "lightgreen"))
        ;; (overlay-put overlay-highlight 'face '(:background highlight-start-color))
        (overlay-put overlay-highlight 'line-highlight-overlay-marker t))))


;;  --------------------------------------
;; *** highlight-region : 
(defun highlight-region (begin end &optional color)
  (interactive)
    (let ((overlay-highlight (make-overlay
                              begin
                              end)))
        ;; (overlay-put overlay-highlight 'face '(:background "lightgreen"))
        ;; (overlay-put overlay-highlight 'face '(:background "green"))
        ;; (overlay-put overlay-highlight 'face '(:background "blue"))
        (overlay-put overlay-highlight 'face (or color highlight-start-color))
        ;; (overlay-put overlay-highlight 'face (or color '(:background "green")))
        (overlay-put overlay-highlight 'line-highlight-overlay-marker t)
        ))

;;  --------------------------------------
#+end_src
* **Автоматизация и Productivity**
** описание
   Автодополнения, сниппеты и автоматические действия.  
** INI/auto-cfg.el
:PROPERTIES:
:header-args: :tangle INI/auto-cfg.el
:END:
*** описание

*** used in
;; (find-file "~/.archemacs/INI/init.el")
*** src
#+begin_src elisp
;; ** AUTOCOMPLETE-MOD CUSTOMIZATION
;; (find-file-other-frame "~/.archemacs/INI/auto/autocomplete-cfg.el")
(load (expand-file-name "INI/auto/autocomplete-cfg.el" user-emacs-directory))
;; --------------------------------------
;; ** SNIPPETS-MOD CUSTOMIZATION
;; (find-file-other-frame (expand-file-name "INI/auto/snippets-cfg.el" user-emacs-directory))
(load (expand-file-name "INI/auto/snippets-cfg.el" user-emacs-directory))
;; --------------------------------------
#+end_src
** INI/auto/autocomplete-cfg.el
:PROPERTIES:
:header-args: :tangle INI/auto/autocomplete-cfg.el
:END:
*** описание

*** used in
;; (find-file "~/INI/dev-cfg.el")
*** src
#+begin_src elisp
;; * AUTO-COMPLETE  CUSTOMIZATION
;; ** old vanila setings
;; --------------------------------------
;; (setq tab-always-indent 'complete)
;; (add-to-list 'completion-styles 'initials t)
;; --------------------------------------
;; ** company
(use-package company :ensure t
  :defer t
  :config
    (add-hook 'prog-mode-hook 'company-mode)
    ;; (setq completion-styles "basic substring emacs22")
    (setq completion-styles '(partial-completion substring emacs22))
    (define-key evil-insert-state-map (kbd "C-SPC") 'company-complete)
    (setq company-minimum-prefix-length 10)
    (setq company-require-match nil)
    (setq company-idle-delay nil)
    (setq company-show-numbers t)
  ;; :bind ("C-c c" hydra-clock/body)
;; ***  END use-package 
  )

;; (require 'company)
;; ** defun program-mode-hook-customize : 
(defun program-mode-hook-customize (args)
  "comands fun list to customizing
  programing mode
  но есть подозрение что негде оно не запускается
  у сомпани свои настройуи
  у фузикомпани свои
  в каждый новерное нужно домавить эту
  и вообщегде есть програминг мод
  "
  (interactive "P")
    (display-line-numbers-mode t)
    (company-fuzzy-mode 1)
    (setq company-minimum-prefix-length 3)
    (setq company-show-numbers t)
    (setq company-idle-delay 0.1)
    (setq outshine-mode 1))
;; ** company fuze search
;; *** use-package company-fuzzy : 
(use-package company-fuzzy :ensure t
;; *** --------------------------------------
  ;; :defer 2
;; *** :init : 
 :diminish 
 :init
  (setq company-require-match nil)            ; Don't require match, so you can still move your cursor as expected.
  (setq company-tooltip-align-annotations t)  ; Align annotation to the right side.
  (setq company-eclim-auto-save nil)          ; Stop eclim auto save.
  (setq company-dabbrev-downcase nil)         ; No downcase when completion.
;; *** :config : 
  :config
  ;; Enable downcase only when completing the completion.
  (defun jcs--company-complete-selection--advice-around (fn)
    "Advice execute around `company-complete-selection' command."
    (let ((company-dabbrev-downcase t))
      (call-interactively fn)))
  (advice-add 'company-complete-selection :around #'jcs--company-complete-selection--advice-around)
;; *** add-hook 'prog-mode-hook : 
  (add-hook 'prog-mode-hook (lambda () 
    (setq company-show-numbers t)
    (setq company-fuzzy-mode 1)
    (setq company-minimum-prefix-length 3)
    (setq company-idle-delay 0.1)))
;; ***  END use-package 
  )
;; (require 'company)
;; (company-fuzzy-mode 1)
;; *** --------------------------------------
;; ** jedi 
;; --------------------------------------
(use-package jedi 
  :ensure t
  ;; :init
  ;; :disabled
  ;; (elpy-enable)
  :config
  ; move quick-help tooltips to the minibuffer
  (setq jedi:tooltip-method nil)

  ; don't auto-complete unless requested
  (setq ac-auto-start nil)
  (setq ac-auto-show-menu nil)
  ;; (define-key ac-mode-map (kbd "M-TAB") 'auto-complete)
  (add-hook 'python-mode-hook 'jedi:setup)
  (setq jedi:complete-on-dot t)  
  )

;; --------------------------------------
;; ** company-jedi 
;; --------------------------------------
(use-package company-jedi 
  :ensure t
  ;; :init
  ;; (elpy-enable)
  :config
  (defun my/python-mode-hook ()
    (add-to-list 'company-backends 'company-jedi))
  (add-hook 'python-mode-hook 'my/python-mode-hook)
  ;; (define-key evil-insert-state-map (kbd "m-SPC") 'company-jedi)
  )
;; --------------------------------------

#+end_src
** INI/auto/snippets-cfg.el
:PROPERTIES:
:header-args: :tangle INI/auto/snippets-cfg.el
:END:
*** описание

*** used in
;; (find-file "~/INI/dev-cfg.el")
*** src
#+begin_src elisp
;; * SNIPPETS  CUSTOMIZATION
;; ** yasnippet 
;; *** del: 
;; (unless (package-installed-p 'yasnippet)
;;   (package-install 'yasnippet))
;; только если устанавливать в ручную
;; (add-to-list 'load-path
;;               "~/.emacs.d/plugins/yasnippet")

;; *** use-package:
(use-package yasnippet
  :defer t
  :ensure t
  ;; :disabled
  ;; :init
;; *** :config : 
  :config
    (use-package yasnippet-snippets
      :ensure t
      :defer t)

  ;; (yas/initialize)
  (add-to-list 'ac-sources 'ac-source-yasnippet)
  (yas-global-mode 1)
;; *** ===========END========= ) : 
  )
;; ** yasnippet-snippets 
;; (unless (package-installed-p 'yasnippet-snippets)
;;   (package-install 'yasnippet-snippets))
;; (require 'yasnippet-snippets)

;; (unless (package-installed-p 'emacs-snippets)
;;   (package-install 'emacs-snippets))
;; (add-to-list 'load-path "~/path/to/yasnippet")
;; ;; Load the library
;; (require 'yasnippet)
;; (yas/initialize)
;; ;; Load the snippet files themselves
;; (yas/load-directory "~/path/to/yasnippet/snippets/text-mode")
;; ** Let's have snippets in the auto-complete dropdown
;; (add-to-list 'ac-sources 'ac-source-yasnippet)
;; --------------------------------------
#+end_src

#+RESULTS:
: t

** INI/AI/ai.el
:PROPERTIES:
:header-args: :tangle INI/AI/ai.el
:END:
*** описание
**** gpt
**** gptel
https://github.com/karthink/gptel
(eww-of https://github.com/karthink/gptel)
*** used in
;; (find-file "~/.archemacs/INI/init.el")
*** src
**** use-package gpt
#+begin_src elisp
(use-package gpt
  :disabled
  :ensure t
  :config
  ;; (setq gpt-openai-key "sk-*")
  ;; (setq gpt-openai-engine "gpt-3.5-turbo")
  (setq gpt-openai-engine "gpt-4o-mini")
  ;; (setq gpt-openai-engine "gpt-4o")
  ;; (setq gpt-openai-engine "gpt-4o-mini-2024-07-18")
  (define-key evil-normal-state-map (kbd "M-a M-j M-o") 'gpt-dwim)
  )
#+end_src
**** use-package gptel
#+begin_src elisp

(use-package gptel
  ;; :disabled
  :ensure t
  :config
  ;; (custom-set-variables '(gptel-model "gpt-3.5-turbo-16k"))
  ;; (custom-set-variables '(gptel-model "gpt-4o"))
  ;; (custom-set-variables '(gptel-model "gpt-4o-mini-2024-07-18"))
  ;; (setq gptel-model "gpt-4o-mini-2024-07-18")
  (define-key evil-normal-state-map (kbd "M-a M-j M-S-h") 'gptel-system-prompt)
  (define-key evil-normal-state-map (kbd "M-a M-j M-j") 'gptel-send)
  (define-key evil-normal-state-map (kbd "M-a M-j M-h") 'gptel-mode)
  ;; (setq gpt-openai-key "sk-*")
  (setq gptel-default-mode 'org-mode)
  (custom-set-variables '(gptel-model "gpt-4o-mini"))
  )

(custom-set-variables '(gptel-model "gpt-4o-mini"))
#+end_src
**** ai hydra menus
***** ai-menu
#+begin_src elisp
(defhydra hydra-ai-menu (:color blue)
  "
  gptel-model: %`gptel-model
  "
  ("a" (hydra-ai-commands-menu/body) "AI commands")
  ("c" (hydra-ai-chat-menu/body) "AI chat")
  ("m" (hydra-ai-model-menu/body) "AI model")
  ("r" (hydra-ai-role-menu/body) "AI roles")
  ("d" (hydra-ai-docs-menu/body) "AI docs")
  ("q" nil) 
  )
#+end_src

#+RESULTS:
: hydra-ai-menu/body

***** hydra-commands-menu
#+begin_src elisp

(defhydra hydra-commands-menu (:color blue)
  ("p" (gptel-org-set-properties) "add orgprops")
  ("f" (gptel-add-file) "add file")
  ("a" (gptel-add) "add buffer/region")
  ;; gptel-add  Add/remove a region or buffer to gptel’s context. In Dired, add/remove marked files.  
  ("r" (gptel-rewrite) "add buffer/region")
  ;; gptel-rewrite  Rewrite, refactor or change the selected region. Can diff/ediff changes before merging/applying.  

  ("q" nil) 
  )
#+end_src

#+RESULTS:
: hydra-commands-menu/body

***** hydra-ai-model-menu
#+begin_src elisp
(defhydra hydra-ai-model-menu (:color blue)
  "
  gptel-model: %`gptel-model
  "
  ;; (find-file-other-frame "~/Dropbox/backup/models/gemeni1-5.el")
  ("g" (load "~/Dropbox/backup/models/gemeni1-5.el") "Gemeni")
  ;; (find-file-other-frame "~/Dropbox/backup/models/fast-gemeni.el")
  ("f" (load "~/Dropbox/backup/models/fast-gemeni.el") "FastGemeni")
  ;; (find-file-other-frame "~/Dropbox/backup/models/claude.el")
  ("c" (load "~/Dropbox/backup/models/claude.el") "Claude")
  ;; (find-file-other-frame "~/Dropbox/backup/models/openai.el")
  ("o" (load "~/Dropbox/backup/models/openai.el") "gpt-4o-mini")
  ;; (find-file-other-frame "~/Dropbox/backup/models/mixtral.el")
  ("m" (load "~/Dropbox/backup/models/mixtral.el") "mixtral")
  ;; (find-file-other-frame "~/Dropbox/backup/models/llama70v.el")
  ("l" (load "~/Dropbox/backup/models/llama70v.el") "llama70v")
  ("q" nil) 
  )
#+end_src
***** hydra-ai-docs-menu
#+begin_src elisp
(defhydra hydra-ai-docs-menu (:color blue)
  ("c" (find-file-other-frame "~/Dropbox/Office/Games/aidungeon/open-al-chat.org") "open-al-chat")
  ("m" (find-file-other-frame "~/Dropbox/Office/Games/aidungeon/multiagent-ai.org") "multiagent-ai")
  ("a" (find-file-other-frame "~/Dropbox/Office/Games/aidungeon/al-Audio-gen.org") "al-Audio-gen")
  ("s" (find-file-other-frame "~/Dropbox/Office/Games/aidungeon/Stable_Diffusion.org") "Stable_Diffusion")
  ("S" (find-file-other-frame "~/Dropbox/Office/Games/Game-logs/AI/2024-06-07-SD-story.org") "SD-log")
  ("d" (find-file-other-frame "~/Dropbox/Office/Games/aidungeon/worlds.org") "aiworlds")
  ("C" (find-file-other-frame "~/Dropbox/Office/Research/Doc/Codex/BuYn_Codex.org") "BuYn_Codex")
  ("q" nil) 
  )
#+end_src
***** hydra-ai-role-menu
#+begin_src elisp
(defhydra hydra-ai-role-menu (:color blue)
  ("e" (load "~/Dropbox/Office/Games/aidungeon/els/acid-elisp.el") "elisp Acid")
  ("p" (load "~/Dropbox/Office/Games/aidungeon/els/acid-python.el") "Py Acid")
  ("s" (load "~/Dropbox/Office/Games/aidungeon/els/ai-synod.el")
   "Synode AI")
  ("l" (load "~/Dropbox/Office/Games/aidungeon/els/leeloo-chat.el") "LeeLoo")
  ("t" (load "~/Dropbox/Office/Games/aidungeon/els/ted-dan.el") "Ted DAN")
  ("h" (load "~/Dropbox/Office/Games/aidungeon/els/ted-dan.el") "Ted holodeck")
  ("S" org-roam-menu/body "Sasha")
  ("g" (load "~/Dropbox/Office/Games/aidungeon/els/glados-daen.el") "GLaDOS")
  ("d" (load "~/Dropbox/Office/Games/aidungeon/els/catherine-tramell-daen.el") "DAEN Tramell")
  ("o" (load "~/Dropbox/Office/Games/aidungeon/els/rpm-4options.el") "RPM 4option")
  ("m" (load "~/Dropbox/Office/Games/aidungeon/els/rpm-malu.el") "RPM MALU")
  ("q" nil) 
  )
#+end_src
***** hydra-ai-chat-menu
#+begin_src elisp
(defhydra hydra-ai-chat-menu (:color blue)
  ("a" (progn
         (load "~/Dropbox/Office/Games/aidungeon/els/acid-chat.el")
         (find-file-other-frame "~/Dropbox/Office/Games/aidungeon/chars-chat/2024-05-17-Acid_Burn.org")
         ) "Acid Burn")
  ("L" (progn
         (load "~/Dropbox/Office/Games/aidungeon/els/leeloo-chat.el")
         (find-file-other-frame "~/Dropbox/Office/Games/aidungeon/chars-chat/2024-09-18-Leeloo.org")
         ) "LeeLoo")
  ("l" (progn
         (load "~/Dropbox/Office/Games/aidungeon/els/ai-synod.el")
         (find-file-other-frame "~/Dropbox/Office/Games/Game-logs/Tomb-of-Tyrants/2023-09-09-AI-story.org")
         ) "LogFile")
  ("t" (progn
         (load "~/Dropbox/Office/Games/aidungeon/els/tpol-chat.el")
         (find-file-other-frame "~/Dropbox/Office/Games/aidungeon/chars-chat/2024-05-18-T-Pol.org"))
   "T'pol")
  ("q" nil) 
  )
#+end_src

#+RESULTS:
: hydra-ai-chat-menu/body

*** docs
**** gptel
***** links
https://github.com/karthink/gptel

***** models
****** setq
(setq gptel-model 'gemini-2.0-flash-exp)
(setq gptel-model 'gemini-2.5-flash-preview-05-20)
(setq gptel-model 'gemini-2.5-flash-preview-04-17)
****** link
******* gemeni
https://ai.google.dev/gemini-api/docs/rate-limits#free-tier
Standard API rate limits
The following table lists the rate limits for all standard Gemini API calls.

Free Tier
Tier 1
Tier 2
Tier 3
Model	RPM	TPM	RPD
Text-out models
Gemini 2.5 Pro	5	250,000	100
Gemini 2.5 Flash	10	250,000	250
Gemini 2.5 Flash-Lite Preview 06-17	15	250,000	1,000
Gemini 2.0 Flash	15	1,000,000	200
Gemini 2.0 Flash-Lite	30	1,000,000	200
Live API
Gemini 2.5 Flash Live	3 sessions	1,000,000	
Gemini 2.5 Flash Preview Native Audio Dialog	1 session	25,000	5
Gemini 2.5 Flash Experimental Native Audio Thinking Dialog	1 session	10,000	5
Gemini 2.0 Flash Live	3 sessions	1,000,000	
Multi-modal generation models
Gemini 2.5 Flash Preview TTS	3	10,000	15
Gemini 2.5 Pro Preview TTS			
Gemini 2.0 Flash Preview Image Generation	10	200,000	100
Imagen 3			
Veo 2			
Other models
Gemma 3 & 3n	30	15,000	14,400
Gemini Embedding	100	30,000	1,000
Deprecated models
Gemini 1.5 Flash (Deprecated)	15	250,000	50
Gemini 1.5 Flash-8B (Deprecated)	15	250,000	50
Gemini 1.5 Pro (Deprecated)
***** info

(setq gptel-model 'gemini-2.5-flash-preview-05-20)
(setq gptel-model 'gemini-2.5-flash-preview-04-17)

gemini-2.5-flash-exp-native-audio-thinking-dialog  
  (setq gptel-model 'gemini-2.5-flash-exp-native-audio-thinking-dialog)
gemini-2.0-flash-exp  
  (setq gptel-model 'gemini-2.0-flash-exp)

(setq gptel-model 'gemini-2.5-flash-preview-04-17)
  Gemini 2.0 Flash Experimental  10  250,000  1,000    
(setq gptel-model 'gemini-2.0-flash-lite)
  Gemini 2.0 Flash-Lite  30  1,000,000  1,500    
gemini-2.0-flash
  Gemini 2.0 Flash  15  1,000,000  1,500    

(setq gptel-model 'gemini-1.5-flash-latest)

(setq gptel-include-reasoning "*reason-gpt*")
(setq gptel-log-level 'info)
(setq gptel-log-level nil)
(setq gptel-log-level 'debug)
***** gptel-include-reasoning
gptel-include-reasoning is a variable defined in ‘gptel.el’.

Its value is t

How to handle LLM reasoning or "thinking" text blocks.

Some LLMs include in their response a "thinking" section.  This
text improves the quality of the LLM’s final output, but may not
be interesting to you by itself.

Supported options are the symbols

    t       - Include with the response, the default
    nil     - Do not include
    ignore  - Include with the response but ignore on subsequent
              conversation turns

It can also be a string naming a buffer, in which case the
reasoning text will be inserted at the end of that buffer.

  You can customize this variable.

[back]
***** log-level 'info
Evaluate (setq gptel-log-level 'info)
Send a request.
When you get the error, check the *gptel-log* buffer. Paste the log contents here.
***** gemini-2.5-flash-preview-04-17
i get the same, error, it looks like the Gemini Model

gemini-2.5-pro-exp-03-25

which was for free until now is not free any more.

@alienbogart look at
https://ai.google.dev/gemini-api/docs/rate-limits#free-tier

Gemini 2.5 Flash Preview 04-17

seems to be the only gemini 2.5 model which is still available in the free tier.
you can enable it by typing

(setq gptel-model 'gemini-2.5-flash-preview-04-17)
for the other model it seems you have to enable billing and add credit card information.

@karthink we should update the documentation.
in the gptel menu choser
there is still the line:
Gemini:gemini-2.0-pro-exp-02-05 $ 0.00 in,  $  0.00 out

in the table https://ai.google.dev/gemini-api/docs/pricing

for the pro preview model the following info is listed

Free Tier Not available

Paid Tier, per 1M tokens in USD
$1.25, prompts <= 200k tokens
$2.50, prompts > 200k tokens
***** curl gemeni
gemini-2.5-flash-preview-04-17
[[file:~/Dropbox/orgs/capture/emagus.org::*key][key]]
***** commands
****** To send queries  Description  
 gptel-send  Send all text up to (point), or the selection if region is active. Works anywhere in Emacs.  
 gptel  Create a new dedicated chat buffer. Not required to use gptel.  
 gptel-rewrite  Rewrite, refactor or change the selected region. Can diff/ediff changes before merging/applying.  
****** To tweak behavior    
 C-u gptel-send  Transient menu for preferences, input/output redirection etc.  
 gptel-menu  (Same)  
****** To add context    
 gptel-add  Add/remove a region or buffer to gptel’s context. In Dired, add/remove marked files.  
 gptel-add-file  Add a file (text or supported media type) to gptel’s context. Also available from the transient menu.  
****** Org mode bonuses    
 gptel-org-set-topic  Limit conversation context to an Org heading. (For branching conversations see below.)  
 gptel-org-set-properties  Write gptel configuration as Org properties, for per-heading chat configuration.  
* **Программирование и языковые конфигурации**
** описание
   Отдельные категории для Python, Clojure, JavaScript, Lua и т.д. + автодополнения и проверки синтаксиса.  
** INI/dev-cfg.el
:PROPERTIES:
:header-args: :tangle INI/dev-cfg.el
:END:
*** описание

*** used in
;; (find-file "~/.archemacs/INI/init.el")
*** src
**** projectile
#+begin_src elisp
;; * DEVELOPMENT-MODs CUSTOMIZATION
;; --------------------------------------
;; ** PROJECTILE CUSTOMIZATION
(use-package projectile
  :defer t
  :ensure t
  ;; :init
  ;; (projectile-mode +1)
  :bind (
          :map projectile-mode-map
              ;; ("s-p" . projectile-command-map)
              ("C-c p" . projectile-command-map)
          :map evil-normal-state-map
              ("ZPFF" . 'projectile-find-file-other-frame)
              ("ZPFO" . 'projectile-find-other-file-other-frame)
              ("ZPFR" . 'projectile-find-related-file-other-frame)
              ("ZPFd" . 'projectile-find-file-dwim-other-frame)
              ("ZPFT" . 'projectile-find-implementation-or-test-other-frame)
              ("ZPFB" . 'projectile-switch-to-buffer-other-frame)
              ("ZPFD" . 'projectile-dired-other-frame)
              ("Zoo" . 'projectile-switch-to-buffer-other-frame)
              ("Zii" . 'projectile-switch-to-buffer)
              ("ZPTt" . 'projectile-find-test-file)
              ("ZPTM" . 'projectile-find-matching-test)
              ("ZPTC" . 'projectile-create-missing-test-files)
              ("ZPTP" . 'projectile-current-project-test-files)
              ("ZPTT" . 'projectile-toggle-between-implementation-and-test)
              ("ZPGG" . 'projectile-find-tag)
              ("ZPGR" . 'projectile-regenerate-tags)
              ("ZPPN" . 'projectile-switch-project-by-name)
              ("ZPPS" . 'projectile-switch-project)
              ("ZPPF" . 'projectile-current-project-files)
              ("ZPSI" . (lambda() (interactive)
                                  (find-file-other-frame (expand-file-name "INI/dev-cfg.el" user-emacs-directory))))
              ("Z P P <F2>" . 'projectile-save-project-buffers)
              ("ZPPO" . 'projectile-switch-open-project)
              ("ZPPP" . 'projectile-commander)
              ("ZPgg" . 'projectile-grep)
              ("ZPgr" . 'projectile-ripgrep)
              ("ZPrr" . 'projectile-find-references)
              ("M-e M-r M-r" . 'projectile-find-references)
              ("ZPRR" . 'projectile-replace)
              ("ZPRE" . 'projectile-replace-regexp)
              ("M-e M-p M-o" . 'projectile-multi-occur)
              ("M-e M-t M-t" . 'projectile-toggle-between-implementation-and-test)
          :map evil-normal-state-map
              ("M-e M-p M-o" . (lambda() (interactive)
                                 (projectile-multi-occur
                                  (buffer-substring (region-beginning) (region-end)))))
              ("M-e M-r M-r" . (lambda() (interactive)
                                 (projectile-find-references
                                  (buffer-substring (region-beginning) (region-end)))))
    ;; build/compile project (s-p c)
    ;; test project (s-p T)
))
#+end_src
**** load els
#+begin_src elisp
;; --------------------------------------
;; ** DELIMITERS-MOD CUSTOMIZATION
;; (find-file "~/.archemacs/INI/delimiters-cfg.el")
;; (load "~/.archemacs/INI/dev/delimiters-cfg.el")
(load (expand-file-name "INI/dev/delimiters-cfg.el" user-emacs-directory))
;; --------------------------------------
;; ** PYTHON-MOD CUSTOMIZATION
;; (find-file "~/.archemacs/INI/python-cfg.el") 
;; (find-file-other-frame "~/.archemacs/INI/python-cfg.el")
;; (load "~/.archemacs/INI/dev/python-cfg.el")
(load (expand-file-name "INI/dev/python-cfg.el" user-emacs-directory))
;; --------------------------------------
;; ** LUA-MOD CUSTOMIZATION
;; --------------------------------------
;; (find-file "~/.archemacs/INI/lua-cfg.el")
;; (load "~/.archemacs/INI/dev/lua-cfg.el")
(load (expand-file-name "INI/dev/lua-cfg.el" user-emacs-directory))
;; --------------------------------------
;; ** OUTSHINE-MOD CUSTOMIZATION
;; --------------------------------------
;; (load "~/.archemacs/INI/dev/outshine_cfg.el")
(load (expand-file-name "INI/dev/outshine_cfg.el" user-emacs-directory))
;; --------------------------------------
;; ** AHK-MODE CUSTOMIZATION
;; --------------------------------------
;; (find-file-other-frame "~/.archemacs/INI/dev/autohotkey-cfg.el")
;; (load "~/.archemacs/INI/dev/autohotkey-cfg.el")
;; (load (expand-file-name "INI/dev/autohotkey-cfg.el" user-emacs-directory))
;; --------------------------------------
;; ** C#-MOD CUSTOMIZATION
;; (find-file-other-frame "~/.archemacs/INI/dev/csharp-cfg.el")
;; (load "~/.archemacs/INI/dev/csharp-cfg.el")
;; (load (expand-file-name "INI/dev/csharp-cfg.el" user-emacs-directory))
;; --------------------------------------
;; ** C-MOD CUSTOMIZATION
;; (find-file-other-frame "~/.archemacs/INI/dev/c-mode-cfg.el")
;; (load "~/.archemacs/INI/dev/c-mode-cfg.el")
;; (load (expand-file-name "INI/dev/c-mode-cfg.el" user-emacs-directory))
;; --------------------------------------
;; ** CLOJURE-MODE CUSTOMIZATION
;; (find-file-other-frame "~/.archemacs/INI/dev/clojure-cfg.el")
;; (load "~/.archemacs/INI/dev/clojure-cfg.el")
(load (expand-file-name "INI/dev/clojure-cfg.el" user-emacs-directory))
;; --------------------------------------
;; ** UNITY CUSTOMIZATION
;; (find-file-other-frame "~/.archemacs/INI/dev/unity-cfg.el")
;; (load "~/.archemacs/INI/dev/unity-cfg.el")
;; (load (expand-file-name "INI/dev/unity-cfg.el" user-emacs-directory))
;; --------------------------------------
;; ** JS-MOD CUSTOMIZATION
;; (find-file-other-frame "~/.archemacs/INI/js-cfg.el") 
;; (load "~/.archemacs/INI/dev/js-cfg.el")
(load (expand-file-name "INI/dev/js-cfg.el" user-emacs-directory))
;; --------------------------------------
;; ** FORMATS-MOD CUSTOMIZATION
;; (find-file-other-frame "~/.archemacs/INI/dev/formats-mods-cfg.el")
;; (load "~/.archemacs/INI/dev/formats-mods-cfg.el")
(load (expand-file-name "INI/dev/formats-mods-cfg.el" user-emacs-directory))
;; --------------------------------------
;; ** FLYCHECK CUSTOMIZATION
;; (load "~/.archemacs/INI/dev/flycheck-cfg.el")
(load (expand-file-name "INI/dev/flycheck-cfg.el" user-emacs-directory))
;; (find-file "~/.archemacs/INI/flycheck-cfg.el") 
;; --------------------------------------
;; ** DEVELOPMENT SETINGS CUSTOMIZATION
(setq compilation-scroll-output nil)
;; (defun my-compilation-finish-function (buffer desc)
;;   (message "Buffer %s: %s" buffer desc)
;;  (evil-goto-first-line)
;;  )
;; (add-to-list 'compilation-finish-functions 'my-compilation-finish-function)
#+end_src
**** DEVELOPMENT-KEY CUSTOMIZATION
***** save & recompile
****** global-set-key <f8> :
#+begin_src elisp
;;  --------------------------------------
(global-set-key (kbd "<f8>") nil)
(global-set-key(kbd "<f8> <f8>") '(lambda() (interactive)
        ;; (save-buffer)
        (save-some-buffers 'no-confirm)
        (org-save-all-org-buffers)
        (evil-normal-state)
        (let ((curent-buffer (buffer-name)))
          (select-frame-by-name "*compilation*")
          (recompile)
          (select-frame-by-name curent-buffer))))       

;; (setq compilation-scroll-output nil)
;; (add-to-list 'compilation-finish-functions 'my-compilation-finish-function)
;;  --------------------------------------
#+end_src
****** global-set-key "M-<f8>" :
#+begin_src elisp
;;  --------------------------------------
(global-set-key (kbd "M-<f8>") nil)
(global-set-key (kbd "M-<f8> M-<f8>") '(lambda() (interactive)
                (save-buffer)
                (evil-normal-state)
                (compile
                 (read-string
                    (concat
                      "defult(" (buffer-name) "):")
                    (buffer-file-name)
                    nil
                    (buffer-name)))))
;; --------------------------------------
#+end_src
****** evil-visual "M-<f8>" :
#+begin_src elisp
;;  --------------------------------------
(define-key evil-visual-state-map (kbd "M-<f8>") nil)
(define-key evil-visual-state-map (kbd "M-<f8> M-<f8>") '(lambda() (interactive)
                (setq region-text (buffer-substring (region-beginning) (region-end)))
                (save-buffer)
                (evil-normal-state)
                (compile
                 (read-string
                    (concat
                      "defult(" (buffer-name) "):")
                    (concat
                        (buffer-file-name)
                        " -p "
                        region-text)
                    nil
                    (buffer-name)))))

(define-key evil-visual-state-map (kbd "M-<f8> M-<f7>") '(lambda() (interactive)
                (setq region-text (buffer-substring (region-beginning) (region-end)))
                (save-buffer)
                (evil-normal-state)
                (compile
                 (read-string
                    (concat
                      "defult(" (buffer-name) "):")
                    region-text
                    nil
                    (buffer-name)))))
;; --------------------------------------
;; *** --------------------------------------
#+end_src
****** org-mode <f8>
#+begin_src elisp
;;  --------------------------------------
(define-key org-mode-map (kbd "<f8>") nil)
(define-key org-mode-map (kbd "<f8> <f8>")
      '(lambda() (interactive)
        (save-excursion
          (progn
            (org-babel-goto-named-src-block "auto-tangle-block")
            (org-babel-execute-src-block)))))
(define-key org-mode-map (kbd "<f8> <f7>")
      '(lambda() (interactive)
        (save-excursion
          (progn
            (setq org-src-preserve-indentation t)
            (untabify (point-min) (point-max))
            ;; (save-buffer)
            (save-some-buffers 'no-confirm)
            ;; (universal-argument)
            ;; (universal-argument)
            (org-babel-tangle)
            ;; (save-buffer)
            ;; (save-some-buffers 'no-confirm)
            (org-save-all-org-buffers)
            (evil-normal-state)
            (let ((curent-buffer (buffer-name)))
              (select-frame-by-name "*compilation*")
              (recompile)
              (select-frame-by-name curent-buffer))))))
;; --------------------------------------
#+end_src
***** risoning

(find-file-other-frame "~/Dropbox/Office/Dev/Pytho/reserch/prime/frigens01.org")

**** PROG-MODE-HOOK CUSTOMIZATION
#+begin_src elisp
  (add-hook 'prog-mode-hook '(lambda ()
;; *** line-numbers-mode
    ;; (setq display-line-numbers-mode t)
    (display-line-numbers-mode t)
;; *** flycheck-mode
    (flycheck-mode t)
;; *** highlight-indentation-mode : 
    (highlight-indentation-mode t)
;; *** projectile-mode : 
    (projectile-mode +1)

;; *** outshine-mode:
    ;; #'outshine-mode on in outshine cfg
    ;; (find-file-other-frame "~/.archemacs/INI/outshine_cfg.el")
    ;; (outshine-mode t)
    ;; (outline-minor-mode t)
;; *** end prog-mode-hook
    ))
;; --------------------------------------
#+end_src

#+RESULTS:
| (lambda nil (display-line-numbers-mode t) (flycheck-mode t) (highlight-indentation-mode t) (projectile-mode 1)) | (lambda nil (outshine-mode t)) | rainbow-delimiters-mode | (lambda nil (setq company-show-numbers t) (setq company-fuzzy-mode 1) (setq company-minimum-prefix-length 3) (setq company-idle-delay 0.1)) | company-mode | hl-line-mode |

** INI/dev/delimiters-cfg.el
:PROPERTIES:
:header-args: :tangle INI/dev/delimiters-cfg.el
:END:
*** описание

*** used in
;; (find-file "~/INI/dev-cfg.el")
*** src
#+begin_src elisp

;; * DELIMITERS-MOD CUSTOMIZATION
;; --------------------------------------
;; ** rainbow-delimiters
;; *** install
;; M-x package-install RET rainbow-delimiters RET
(require 'use-package)
(use-package rainbow-delimiters :ensure t
;; *** :config
  :config
  (add-hook 'prog-mode-hook 'rainbow-delimiters-mode)
  (custom-theme-set-faces
    'material
    `(rainbow-delimiters-depth-1-face ((t
        (:foreground ,"aquamarine"))))
    )
;; *** END )
  )
;; *** Docs 
;; **** links:
;; https://github.com/Fanael/rainbow-delimiters
;; http://emacs-fu.blogspot.com/2011/05/toward-balanced-and-colorful-delimiters.html
;; **** Customization:
;; To customize rainbow-delimiters mode, you can use:

;; M-x customize-group rainbow-delimiters
;; (customize-group "rainbow-delimiters")
;; Color Scheme

;; customize-group rainbow-delimiters-faces has the faces for successive nested pairs of delimiters. You can change them through emacs customize or in your color theme or dot-emacs.

;; The face rainbow-delimiters-unmatched-face is used for unmatched closing delimiters.

;; Zenburn and Solarized themes have their own colors for these faces.

;; deftheme/color-theme.el: Further information is at the top of rainbow-delimiters.el.
;; Stop Highlighting Certain Delimiters

;; You can disable highlighting of any of the supported delimiter types through the customize interface, in the Toggle Delimiters section.
;; ** parinfer
;; *** install
(use-package parinfer
  :disabled
  :defer t
  :ensure t
  :bind
  (("C-," . parinfer-toggle-mode))
  :init
  (progn
    (setq parinfer-extensions
          '(defaults       ; should be included.
            pretty-parens  ; different paren styles for different modes.
            evil           ; If you use Evil.
            lispy          ; If you use Lispy. With this extension, you should install Lispy and do not enable lispy-mode directly.
            paredit        ; Introduce some paredit commands.
            smart-tab      ; C-b & C-f jump positions and smart shift with tab & S-tab.
            smart-yank))   ; Yank behavior depend on mode.
    (add-hook 'clojure-mode-hook #'parinfer-mode)
    (add-hook 'emacs-lisp-mode-hook #'parinfer-mode)
    (add-hook 'common-lisp-mode-hook #'parinfer-mode)
    (add-hook 'scheme-mode-hook #'parinfer-mode)
    (add-hook 'lisp-mode-hook #'parinfer-mode))
;; *** END )
  )
;; ** parinfer-rust-mode
;; *** install
(use-package parinfer-rust-mode
  ;; :disabled
  :defer t
  :ensure t
  ;; :hook emacs-lisp-mode
  ;; :init
    ;; (setq parinfer-rust-auto-download t)
  :config
    (setq  parinfer-rust-disable-troublesome-modes t)
    ;; (parinfer-rust-mode -1)
    (add-hook 'clojure-mode-hook #'parinfer-rust-mode)
    ;; (add-hook 'emacs-lisp-mode-hook #'parinfer-rust-mode)
    ;; (add-hook 'common-lisp-mode-hook #'parinfer-rust-mode)
    ;; (add-hook 'scheme-mode-hook #'parinfer-rust-mode)
    ;; (add-hook 'lisp-mode-hook #'parinfer-rust-mode)
;; *** END )
  )
#+end_src
** INI/dev/python-cfg.el
:PROPERTIES:
:header-args: :tangle INI/dev/python-cfg.el
:END:
*** описание

*** used in
;; (find-file "~/INI/dev-cfg.el")
*** src
#+begin_src elisp
;; * PYTHON-MOD CUSTOMIZATION
;; --------------------------------------
;; ** (use-package elpy
(require 'use-package)
(use-package elpy :ensure t
;; *** init : 
  :defer t
  :init
  (elpy-enable)
;; *** config : 
  :config
  ;; (elpy-enable)
  ;; (ivy-mode 1)
  (company-mode 1)
  ;; (setq compilation-scroll-output nil)
  (setq compilation-scroll-output t)
  ;; not working from config onli from init and not from hooks
  ;; (add-hook 'python-mode-hook 'elpy-mode)
  ;; (add-hook 'python-mode-hook 'elpy-enable)
  ;; (setq python-shell-interpreter "python"
  ;; python-shell-interpreter-args "-i")
  ;; findout what it do
  (add-to-list 'auto-mode-alist '("\\.kv$" . python-mode))
  ;; (add-to-list 'interpreter-mode-alist '("kv" . python-mode))
;; *** define-key : 
  (define-key evil-insert-state-map (kbd "C-SPC") 'company-complete)
  (define-key evil-normal-state-map (kbd "M-e M-f M-p") 'xref-find-definitions)
  (define-key evil-normal-state-map (kbd "M-e M-f M-P") 'xref-find-definitions-other-frame)
  (define-key evil-normal-state-map (kbd "M-e M-f M-o") 'elpy-occur-definitions)
  (define-key evil-normal-state-map (kbd "M-e M-f M-a") 'elpy-goto-assignment)
  (define-key evil-normal-state-map (kbd "M-e M-f M-d") 'elpy-goto-definition)
  (define-key evil-normal-state-map (kbd "M-e M-f M-D") 'elpy-goto-definition-other-window)
  ;; (define-key evil-insert-state-map (kbd "<f8>") '(lambda() (interactive)
  ;;      (org-save-all-org-buffers)
  ;;      (save-some-buffers 'no-confirm)
  ;;      (evil-normal-state)
  ;;      (recompile)
  ;;      ))
;; ***  ) : 
  )
#+end_src
** INI/dev/lua-cfg.el
:PROPERTIES:
:header-args: :tangle INI/dev/lua-cfg.el
:END:
*** описание

*** used in
;; (find-file "~/INI/dev-cfg.el")
*** src
#+begin_src elisp
;; * LUA-MOD CUSTOMIZATION
;; --------------------------------------
;; ** install lua-mode : 
(require 'use-package)
(use-package lua-mode 
  :ensure t
  :init
  ;; (elpy-enable)
;; ** :config : 
  :config
;; ** command : 
  ;; 2. Next, you need to make sure that lua-mode.el is on your load-path (and optionally byte-compile it) and to set up Emacs to automatically enable it for *.lua files or ones that contain lua hash-bang line (`#!/usr/bin/lua`). Putting this snippet to .emacs should be enough in most cases:
    ;;;; This snippet enables lua-mode
    ;; This line is not necessary, if lua-mode.el is already on your load-path
    ;; (add-to-list 'load-path "/path/to/directory/where/lua-mode-el/resides")
;; ** autoload : 
    (autoload 'lua-mode "lua-mode" "Lua editing mode." t)
    (add-to-list 'auto-mode-alist '("\\.lua$" . lua-mode))
    (add-to-list 'interpreter-mode-alist '("lua" . lua-mode))
;; ** ) : 
  )
;; --------------------------------------
#+end_src
** INI/dev/outshine_cfg.el
:PROPERTIES:
:header-args: :tangle INI/dev/outshine_cfg.el
:END:
*** описание

*** used in
;; (find-file "~/INI/folding-cfg.el")
*** src OUTSHINE-MOD CUSTOMIZATION 
;; * OUTSHINE-MOD CUSTOMIZATION 
;; --------------------------------------
#+begin_src elisp
;; ** use-package outshine
(use-package outshine :ensure t
  ;; uncoment to instal
  ;; loding each time - resrch how to setup right
  ;; :quelpa (outshine :fetcher github :repo "alphapapa/outshine")
;; ** outshine config
  :config
;; *** binds
  ;; (defvar outline-minor-mode-prefix "\M-#")
  (define-key evil-normal-state-map "zf" 'outshine-insert-heading)
;; **** zF
  (define-key evil-normal-state-map "zF" '(lambda() (interactive)
      ;; (evil-previous-line)
      (outshine-insert-comment-subtree )
      (insert (read-string "comment : "))
      ))

;; **** visual add zf
  (define-key evil-visual-state-map "zf" '(lambda() (interactive)
      (let ((region-text (buffer-substring (region-beginning) (region-end))))
        (evil-normal-state)
        ;; (evil-open-above 1)
        (evil-previous-line)
        (outshine-insert-heading)
        ;; (backward-char)
        (save-excursion
          ;; (insert " ")
          (insert region-text)
          (unless (eq major-mode 'org-mode)
            (insert ":"))))))

;; *** outshine startup state
  (setq outshine-startup-folded-p 1)
;; *** autoload
  (add-hook 'outline-minor-mode-hook 'outshine-mode)
  (add-hook 'prog-mode-hook '(lambda () (outshine-mode t)))
  )
#+end_src
  ;; (add-hook 'outline-minor-mode-hook 'outshine-hook-function)
;; -------------------------------------- }}}
  ;; (add-hook 'prog-mode-hook '(lambda () (outline-minor-mode t)))
  ;; (add-hook 'prog-mode-hook '(lambda () (setq outline-minor-mode 1)))
  ;; (add-hook 'emacs-lisp-mode-hook 'outline-minor-mode)
  ;; (add-hook 'python-mode-hook 'outline-minor-mode)
  ;; (add-hook 'lua-mode-hook 'outline-minor-mode)
  ;; (add-hook 'LaTeX-mode-hook 'outline-minor-mode)
;; *** theme customization
  ;; (custom-theme-set-faces
  ;; 'material
  ;; `(outline-1 ((t (:height 1.25 :weight bold))))
  ;; `(outline-2 ((t (:height 1.15 :weight bold))))
  ;; `(outline-3 ((t (:height 1.05 :weight bold))))
  ;; `(outline-4 ((t (:height 1.95 :weight bold))))
  ;; `(outline-5 ((t (:height 1.85 :weight bold))))
  ;; `(outline-6 ((t (:height 1.75 :weight bold))))
  ;; `(outline-7 ((t (:height 1.65 :weight bold))))

   ;; `(org-level-1 ((,class (:inherit outline-1
   ;;                       :background ,header-color
   ;;                       :weight bold
   ;;                       :box (:style released-button)
   ;;                       :height 1.3))))
   ;; `(org-level-2 ((,class (:inherit outline-2
   ;;                                :background ,"#35575b"
   ;;                                :box (:style released-button)
   ;;                       :height 1.2))))
   ;; `(org-level-3 ((,class (:inherit outline-3 :height 1.1))))
   ;; `(org-level-4 ((,class (:inherit outline-4 :height 1.0))))
   ;; `(org-level-5 ((,class (:inherit outline-5 ))))
   ;; `(org-level-6 ((,class (:inherit outline-6 ))))
   ;; `(org-level-7 ((,class (:inherit outline-7 ))))
   ;; `(org-level-8 ((,class (:inherit outline-8 ))))
   ;; `(org-level-9 ((,class (:inherit outline-9 ))))

;; ** END of use-package outshine 
** CANCELED INI/dev/autohotkey-cfg.el
CLOSED: [2025-02-24 Mon 23:15]
:PROPERTIES:
:header-args: :tangle no
:END:
# :header-args: :tangle INI/dev/autohotkey-cfg.el
*** описание

*** used in
;; (find-file "~/INI/dev-cfg.el")
;; (load (expand-file-name "INI/dev/autohotkey-cfg.el" user-emacs-directory))

*** src
#+begin_src elisp
;; * AHK-MODE CUSTOMIZATION
;; --------------------------------------
;; ** install ahk-mode : 
(use-package ahk-mode
  :ensure t
;; ** :config : 
  :config
;; ** autoload : 
    ;; (autoload 'ahk-mode "ahk-mode" "Lua editing mode." t)
    (add-to-list 'auto-mode-alist '("\\.ahk$" . ahk-mode))
    (add-to-list 'interpreter-mode-alist '("ahk" . ahk-mode))
;; **   ) : 
  )

#+end_src
** CANCELED INI/dev/csharp-cfg.el
CLOSED: [2025-02-24 Mon 23:24]
:PROPERTIES:
:header-args: :tangle no
:END:
# :header-args: :tangle INI/dev/csharp-cfg.el
*** описание

*** used in
;; (find-file "~/INI/dev-cfg.el")
;; (load (expand-file-name "INI/dev/csharp-cfg.el" user-emacs-directory))

*** src
да он был пуст сам в шоке
#+begin_src elisp
;; * C#-MOD CUSTOMIZATION
;; --------------------------------------
#+end_src
** INI/dev/clojure-cfg.el
:PROPERTIES:
:header-args: :tangle INI/dev/clojure-cfg.el
:END:
*** описание

*** used in
;; (find-file "~/INI/dev-cfg.el")
(load (expand-file-name "INI/dev/clojure-cfg.el" user-emacs-directory))
*** src
#+begin_src elisp
;; * CLOJURE-MODE CUSTOMIZATION
;; --------------------------------------
;; ** clojure-mode
(use-package clojure-mode
  :defer t
  ;; :disabled
  :ensure t
  :config
 (setq clojure-indent-style 'align-arguments)
 (setq clojure-indent-keyword-style 'align-arguments)
  )
;; ** ob-clojur-mode
(use-package ob-clojure
  ;; :disabled
  :defer t
  ;; :ensure t
  :config
    (setq org-babel-clojure-backend 'cider)
  ;; (add-hook 'prog-mode-hook 'rainbow-delimiters-mode)
  ;; (custom-theme-set-faces
  ;;  'material
  ;;  `(rainbow-delimiters-depth-1-face ((t
  ;;      (:foreground ,"aquamarine"))))
  ;;  )
  )
;; ** use-package cider:
(use-package cider
  :defer t
  :ensure t
  :after clojure-mode
  :config
  ;; (set-lookup-handlers! 'cider-mode nil) ; doom option 
  ;; (setq lsp-enable-completion-at-point nil) ; use cider completion
  (setq cider-eldoc-display-for-symbol-at-point nil) ; disable cider showing eldoc during symbol at point
  )

;; ** clj-refactor
(use-package clj-refactor
  :defer t
  :ensure t
  :after clojure-mode
  :config
  ;; (set-lookup-handlers! 'clj-refactor-mode nil) ; doom option 
  (setq cljr-add-ns-to-blank-clj-files nil) ; disable clj-refactor adding ns to blank files
  )
;; ** Leiningen

;; ** --------------------------------------
;; * LSP-MODE CUSTOMIZATION
;; --------------------------------------
;; ** use-package lsp-mode:
(use-package lsp-mode
  :defer t
  :ensure t
  :init
  ;; set prefix for lsp-command-keymap (few alternatives - "C-l", "C-c l")
  (setq lsp-keymap-prefix "C-c l")
  :hook
  (;; replace XXX-mode with concrete major-mode(e. g. python-mode)
    (clojure-mode-hook . lsp)
    (clojurescript-mode-hook . lsp)
    (clojurec-mode-hook . lsp)
    ;; (XXX-mode . lsp)
    ;; if you want which-key integration
    (lsp-mode . lsp-enable-which-key-integration))
  :commands lsp
  :config
  (setq gc-cons-threshold (* 100 1024 1024)
        read-process-output-max (* 1024 1024)
        treemacs-space-between-root-nodes nil
        company-minimum-prefix-length 1)
  )

;; ** use-package lsp-ui:
(use-package lsp-ui
  :defer t
  :ensure t
  :commands lsp-ui-mode)
;; ;; if you are helm user
;; (use-package helm-lsp :commands helm-lsp-workspace-symbol)
;; if you are ivy user
;; ** use-package lsp-ivy:
(use-package lsp-ivy
  :defer t
  :ensure t
  :commands lsp-ivy-workspace-symbol)
;; ** lsp-treemacs:
(use-package lsp-treemacs
  :disabled
  :defer t
  :ensure t
  :commands lsp-treemacs-errors-list)

;; ** --------------------------------------
;; * use-package dap-mode:
;; optionally if you want to use debugger
;; (use-package dap-mode)


;; (use-package dap-LANGUAGE) to load the dap adapter for your language
;; ** --------------------------------------
#+end_src
** CANCELED INI/dev/unity-cfg.el
CLOSED: [2025-02-25 Tue 00:16]
:PROPERTIES:
:header-args: :tangle no
:END:
# :header-args: :tangle INI/dev/unity-cfg.el
*** описание

*** used in
;; (find-file "~/INI/dev-cfg.el")
(load (expand-file-name "INI/dev/unity-cfg.el" user-emacs-directory))

*** src
#+begin_src elisp
;; * UNITY CUSTOMIZATION
;; --------------------------------------
;; ** install miracle: Arcadia 
;; :quelpa (outshine :fetcher github :repo "alphapapa/outshine")
;; git clone https://github.com/Saikyun/miracle.git
(unless (package-installed-p 'miracle)
  (use-package miracle 
  ;; :ensure t 
    :quelpa (miracle :fetcher github :repo "Saikyun/miracle")))
  ;; (quelpa
  ;; '(miracle
  ;;  :fetcher github
  ;;  :url "https://github.com/saikyun/miracle.git"))
;; (quelpa '(miracle :repo "saikyun/miracle" :fetcher github))
;; (require 'use-package)
;; ** use-package miracle : 
(use-package miracle 
  ;; :ensure t
;; ** END )
  )
;; ** Docs 
;; *** links:
;; https://github.com/Saikyun/miracle
;; *** keys:
;; Keys   Description
;; C-c C-c  Evaluate expression at point.
;; C-c C-r  Evaluate region.
;; C-c C-k  Evaluate current buffer contents.
;; C-c C-l  Load current file from disk.
;; C-c C-d  Describe symbol at point, showing documentation in REPL window.
;; C-c C-n  Evaluate namespace.
;; C-c C-b  Interrupt running job.
;; M-.  Jump to definition of var at point.
;; M-,  Jump back to where you were before you did M-.
;; Miracle shortcuts for REPL buffer
;; Keys   Description
;; C-c C-d  Describe symbol at point, showing documentation in REPL window.
;; C-c C-c  Interrupt running job.
;; M-.  Jump to definition of var at point.
;; C-c C-f  Replaces the last result with a pretty printed version of it. f is for formatting.
;; ** --------------------------------------
#+end_src
** INI/dev/js-cfg.el
:PROPERTIES:
:header-args: :tangle INI/dev/js-cfg.el
:END:
*** описание

*** used in
;; (find-file "~/INI/dev-cfg.el")
(load (expand-file-name "INI/dev/js-cfg.el" user-emacs-directory))
*** src
#+begin_src elisp
;; * Setting up js2-mode
;; ** use-package js2-mode
(use-package js2-mode :ensure t
  :defer t
  ;; :disabled
  ;; :config
;; *** END of use-package 
  )
;; (require 'js2-mode)
;; --------------------------------------
(add-to-list 'auto-mode-alist '("\\.js\\'" . js2-mode))
;; Better imenu
(add-hook 'js2-mode-hook #'js2-imenu-extras-mode)
;; js2-refactor and xref-js2
;; ** D use-package js2-refactor
(use-package js2-refactor
  :disabled
  :defer t
  :ensure t
;; *** END of use-package hydra
  )
;; ** D use-package xref-js2
(use-package xref-js2 :ensure t
  :disabled
  :defer t
  :config
  ;; :defer 2
  (require 'js2-refactor)
  (add-hook 'js2-mode-hook #'js2-refactor-mode)
  (js2r-add-keybindings-with-prefix "C-c C-r")
  (define-key js2-mode-map (kbd "C-k") #'js2r-kill)
  ;; js-mode (which js2 is based on) binds "M-." which conflicts with xref, so
  ;; unbind it.
  (define-key js-mode-map (kbd "M-.") nil)
  (add-hook 'js2-mode-hook (lambda ()
    (add-hook 'xref-backend-functions #'xref-js2-xref-backend nil t)))
;; *** END of use-package hydra
  )

;; --------------------------------------
;; * D ---------      Tern & Company     ----
;; may need add this commands for node.js
;; set "PATH=%PATH%;D:\Development\JS\nodejs\"
;; (setenv "PATH" (concat (getenv "PATH") "D:/Development/JS/nodejs"))
;; (setq exec-path (append exec-path '("D:/Development/JS/nodejs/")))
;; ** terns 
;; This is Tern. Tern is a stand-alone, editor-independent
;; JavaScript analyzer that can be used to improve the JavaScript
;; integration of existing editors.
;; (add-to-list 'load-path "~/.emacs.d/Els/Tern/emacs/")
;; (autoload 'tern-mode "tern.el" nil t)
;; (add-hook 'js-mode-hook (lambda () (tern-mode t)))
;; ** company-tern
(use-package company-tern :ensure t
  :disabled
  ;; :defer 2
  :defer t
  ;; :bind ("C-c c" hydra-clock/body)
  :load-path "Els/Tern/emacs/"
  :config
  (add-to-list 'company-backends 'company-tern)
  ;; (add-hook 'js2-mode-hook (lambda ()
  ;;                            (tern-mode)
  ;;                            (company-mode)))
  (add-hook 'js-mode-hook (lambda ()
                            (tern-mode)
                            (company-mode)))
;; ***  END of use-package 
  )
;; --------------------------------------
;; * skewer-mode
;; --------------------------------------
;; ** use-package skewer-mode
(use-package skewer-mode :ensure t
  ;; :disabled
  :defer t
;; ** :config : 
  :config
  (add-hook 'js2-mode-hook 'skewer-mode)
  (add-hook 'css-mode-hook 'skewer-css-mode)
  (add-hook 'html-mode-hook 'skewer-html-mode)
;; ** END of use-package
  )
;; --------------------------------------

;; * JS-MOD CUSTOMIZATION
;; --------------------------------------
;; ** Docs
;; --------------------------------------
;; Refactorings
;;     ee is expand-node-at-point: Expand bracketed list according to node type at point (array, object, function, call args).
;;     cc is contract-node-at-point: Contract bracketed list according to node type at point (array, object, function, call args).
;;     ef is extract-function: Extracts the marked expressions out into a new named function.
;;     em is extract-method: Extracts the marked expressions out into a new named method in an object literal.
;;     tf is toggle-function-expression-and-declaration: Toggle between function name() {} and var name = function ();
;;     ta is toggle-arrow-function-and-expression: Toggle between function expression to arrow function.
;;     ts is toggle-function-async: Toggle between an async and a regular function.
;;     ip is introduce-parameter: Changes the marked expression to a parameter in a local function.
;;     lp is localize-parameter: Changes a parameter to a local var in a local function.
;;     wi is wrap-buffer-in-iife: Wraps the entire buffer in an immediately invoked function expression
;;     ig is inject-global-in-iife: Creates a shortcut for a marked global by injecting it in the wrapping immediately invoked function expression
;;     ag is add-to-globals-annotation: Creates a /*global */ annotation if it is missing, and adds the var at point to it.
;;     ev is extract-var: Takes a marked expression and replaces it with a var.
;;     el is extract-let: Similar to extract-var but uses a let-statement.
;;     ec is extract-const: Similar to extract-var but uses a const-statement.
;;     iv is inline-var: Replaces all instances of a variable with its initial value.
;;     rv is rename-var: Renames the variable on point and all occurrences in its lexical scope.
;;     vt is var-to-this: Changes local var a to be this.a instead.
;;     ao is arguments-to-object: Replaces arguments to a function call with an object literal of named arguments.
;;     3i is ternary-to-if: Converts ternary operator to if-statement.
;;     sv is split-var-declaration: Splits a var with multiple vars declared, into several var statements.
;;     ss is split-string: Splits a string.
;;     st is string-to-template: Converts a string into a template string.
;;     uw is unwrap: Replaces the parent statement with the selected region.
;;     lt is log-this: Adds a console.log() statement for what is at point (or region). With a prefix argument, use JSON pretty-printing.
;;     dt is debug-this: Adds a debug() statement for what is at point (or region).
;;     sl is forward-slurp: Moves the next statement into current function, if-statement, for-loop or while-loop.
;;     ba is forward-barf: Moves the last child out of current function, if-statement, for-loop or while-loop.
;;     k is kill: Kills to the end of the line, but does not cross semantic boundaries.

;; There are also some minor conveniences bundled:

;;     C-S-down and C-S-up moves the current line up or down. If the line is an element in an object or array literal, it makes sure that the commas are still correctly placed.
;; https://github.com/magnars/js2-refactor.el
;; --------------------------------------
;; Using xref-js2
;;     M-. Jump to definition
;;     M-? Jump to references
;;     M-, Pop back to where M-. was last invoked.

#+end_src
** INI/dev/formats-mods-cfg.el (yaml)
:PROPERTIES:
:header-args: :tangle INI/dev/formats-mods-cfg.el
:END:
*** описание
yaml-mode
*** used in
;; (find-file "~/INI/dev-cfg.el")
;; (find-file-other-frame "~/INI/dev-cfg.el") 
(load (expand-file-name "INI/dev/formats-mods-cfg.el" user-emacs-directory))
*** src
#+begin_src elisp
;; * MODS CUSTOMIZATION 
;; ** yaml-mode
;; *** load
;; (add-to-list 'load-path "~/ELs/formats/YAML/yaml-mode.el")
;; (find-file-other-frame "~/ELs/formats/YAML/yaml-mode.el")
;; *** use-package read-aloud : 
(use-package yaml-mode
  ;; :ensure t
  ;; :load-path "ELs/formats/YAML/yaml-mode.el"
  :load-path "ELs/formats/YAML/"
  ;; :init
;; *** :config : 
  :config
  (add-to-list 'auto-mode-alist '("\\.yml\\'" . yaml-mode))
  (add-to-list 'auto-mode-alist '("\\.rul\\'" . yaml-mode))
  )
#+end_src
** INI/dev/flycheck-cfg.el
:PROPERTIES:
:header-args: :tangle INI/dev/flycheck-cfg.el
:END:
*** описание

*** used in
;; (find-file "~/INI/dev-cfg.el")
(load (expand-file-name "INI/dev/flycheck-cfg.el" user-emacs-directory))
*** src
#+begin_src elisp
;; * FLYCHECK CUSTOMIZATION
;; --------------------------------------
;; ** use-package flycheck 
(use-package flycheck :ensure t
  ;; :init
  ;; (elpy-enable)
;; ** :config : 
  :config
  ;; (setq elpy-modules (delq 'elpy-module-flymake elpy-modules))
  (add-hook 'elpy-mode-hook 'flycheck-mode)
  (setq flycheck-check-syntax-automatically '(save mode-enabled))
;; ** bind 
  ;; (define-key evil-normal-state-map (kbd "M-e M-n M-1")
  ;;    'flycheck-first-error)
  ;; (define-key evil-normal-state-map (kbd "M-e M-n M-n")
  ;;         'flycheck-next-error)
  ;; (define-key evil-normal-state-map (kbd "M-e M-n M-f")
  ;;         'flycheck-next-error-function)
  ;; (define-key evil-normal-state-map (kbd "M-e M-n M-;")
  ;;         'flycheck-next-error-pos)
  ;; (define-key evil-normal-state-map (kbd "M-e M-n M-p")
  ;;         'flycheck-previous-error)
  ;; (define-key evil-normal-state-map (kbd "M-e M-n M-d")
  ;;    'flycheck-display-error-explanation)
  ;; (define-key evil-normal-state-map (kbd "M-e M-n M-s")
  ;;    'list-flycheck-error)
;; ** End of use-package ) 
  )
#+end_src
** CANCELED INI/dev/c-mode-cfg.el
CLOSED: [2025-02-25 Tue 01:08]
:PROPERTIES:
:header-args: :tangle INI/dev/c-mode-cfg.el
:END:
*** описание

*** used in
;; (find-file "~/INI/dev-cfg.el")
(load (expand-file-name "INI/dev/c-mode-cfg.el" user-emacs-directory))
*** src
#+begin_src elisp
;; INSTALL IRONY
;; --------------------------------------
;; (package-install irony)
;; Configuration
(add-hook 'c++-mode-hook 'irony-mode)
(add-hook 'c-mode-hook 'irony-mode)
(add-hook 'objc-mode-hook 'irony-mode)
(add-hook 'irony-mode-hook 'irony-cdb-autosetup-compile-options)
;; irony-mode should work fine on Windows but there are some things to take care of first.
;; libclang.dll is expected to be available in the PATH or in Emacs' exec-path.
;;     w32-pipe-read-delay default value of 50 should be changed. This should not cause any issue on today's version of Windows. The default value of 50 may be lowered in mainline Emacs in future versions, until then, I suggest to set it to 0.
;;     w32-pipe-buffer-size, introduced by Emacs 25, can be set to a larger value than the default to improve irony-server communication performances (c.f. https://github.com/Sarcasm/irony-mode/issues/321). The variable to customize is irony-server-w32-pipe-buffer-size.
;; Windows performance tweaks
(when (boundp 'w32-pipe-read-delay)
  (setq w32-pipe-read-delay 0))
;; Set the buffer size to 64K on Windows (from the original 4K)
(when (boundp 'w32-pipe-buffer-size)
  (setq irony-server-w32-pipe-buffer-size (* 64 1024)))

;; Usage
;; On the first run, irony-mode will ask you to build and install irony-server. To do so, type M-x
irony-install-server
;; To tune irony-mode, use customize:
;; (
;;  customize-group irony
;;         )
;; In order to provide context sensitive and accurate information, irony-mode needs to know about the compiler flags used to parse the current buffer. The best way to achieve this is to use a Compilation Database.
;; Right now irony-cdb supports the following compilation databases:
;;     JSON Compilation Database - A JSON formatted file generated by various build tools. The file is named compile_commands.json, it lists the compile options associated to each file in the project.
;;         CMake >= 2.8.5 will generate a compilation database in the build directory when issuing the following command cmake -DCMAKE_EXPORT_COMPILE_COMMANDS=ON <...>.
;;         ninja >= 1.2 will generate a JSON Compilation Database when using the compdb tool.
;;         Bear generates a JSON Compilation Database file by "monitoring" the build of a project. The typical usage for a make-based project will be bear -- make -B.
;;     .clang_complete - A file at the root of your project containing the compilation flags, one per line. This is compatible with the with plugin Rip-Rip/clang_complete. If you want to generate the .clang_complete automatically, take a look at the cc_args.py documentation.
;; More detailed information on compilation database is available here:
;;     https://sarcasm.github.io/notes/dev/compilation-database.html
;; --------------------------------------
(
 package-install
 company-irony
 )
;; Configuration
;; Add company-irony to your company backends.
(eval-after-load 'company
  '(add-to-list 'company-backends 'company-irony))
;; --------------------------------------
(package-install flycheck-irony)
;; Configuration
(eval-after-load 'flycheck
  '(add-hook 'flycheck-mode-hook #'flycheck-irony-setup))
;; --------------------------------------
;; irony-eldoc - irony-mode support for eldoc-mode
(package-install irony-eldoc)
;; This implements eldoc support in irony-mode. eldoc is a built-in Emacs mode for displaying documentation about a symbol or function call at point in the message buffer (see eldoc-mode).
;; To use
;; Enable the minor mode irony-eldoc, as well as eldoc-mode. For an example, place point on top of a symbol, or inside a function call.
;; It is easiest to add irony-eldoc to irony-mode-hook, if you already have irony-mode set up.
(add-hook 'irony-mode-hook #'irony-eldoc)
;; --------------------------------------
#+end_src
* Другие интеграции
** INI/FIN/fin.el
:PROPERTIES:
:header-args: :tangle INI/FIN/fin.el
:END:
*** описание

*** used in
;; (find-file "~/.archemacs/INI/init.el")
*** src
#+begin_src elisp
(use-package hledger-mode
  ;; :disabled
  :ensure t
  :mode ("\\.journal\\'" "\\.hledger\\'")
  :init
  (setq hledger-jfile
        (expand-file-name "~/Dropbox/Office/finance/hledger/personal/accounting.journal"))
  :config
  (add-hook 'hledger-mode-hook
            (lambda ()
              (make-local-variable 'company-backends)
              (add-to-list 'company-backends 'hledger-company)))
  :preface
  (defun hledger/next-entry ()
    "Move to next entry and pulse."
    (interactive)
    (hledger-next-or-new-entry)
    (hledger-pulse-momentary-current-entry))
  (defun hledger/prev-entry ()
    "Move to last entry and pulse."
    (interactive)
    (hledger-backward-entry)
    (hledger-pulse-momentary-current-entry))
  :bind (("C-c M-j" . hledger-jentry)
         :map hledger-mode-map
         ("C-c e" . hledger-run-command)
         ("M-N" . hledger/prev-entry)
         ("M-n" . hledger/next-entry))
  )
#+end_src
** INI/www-cfg.el
:PROPERTIES:
:header-args: :tangle INI/www-cfg.el 
:END:
*** описание

*** used in
;; (find-file "~/.archemacs/INI/init.el")
*** src
#+begin_src elisp
;; * EWW-MODE CUSTOMIZATION 
;; --------------------------------------
;; ** open-link-in-new-frame
;; --------------------------------------
(defun open-link-in-new-frame ()
  "open-link-in-new-frame"
  (interactive)
      (let (buffer-name-to-close (buffer-name))
        (evil-window-split)
        ;; (global-visual-line-mode)
        (eww-open-in-new-buffer)
        ;; (eww (shr-url-at-point nil))
        (evil-quit)
        (switch-to-buffer-other-frame buffer-name-to-close)))
;; --------------------------------------
;; ** eww-of
;; --------------------------------------
(defun eww-of (link)
  "open-eww-in-new-frame from link"
  (interactive)
      (let (buffer-name-to-close (buffer-name))
        (evil-window-split)
        ;; (global-visual-line-mode)
        (eww link)
        ;; (eww (shr-url-at-point nil))
        (evil-quit)
        (switch-to-buffer-other-frame buffer-name-to-close)))
;; --------------------------------------
;; ** org-open-link-in-new-frame
;; --------------------------------------
(defun org-open-link-in-new-frame ()
  " open org link in new frae end not folow
    org-open-link-in-new-frame"
  (interactive)
      (let (buffer-name-to-close (buffer-name))
        (evil-window-split)
        (org-open-at-point)
        ;; (eww (shr-url-at-point nil))
        (evil-quit)
        (switch-to-buffer-other-frame buffer-name-to-close)))
;; --------------------------------------
;; ** use-package
(use-package eww
  :defer t
  ;; :disabled
  :config
    ;; (setq pixel-wait 0.1)
    ;; (pixel-scroll-mode 1)
    ;; (setq scroll-preserve-screen-position 1)
    ;; (setq pixel-wait 0.10000000000000014)
;; ** external-browser : 
;; default value
;; (setq shr-external-browser 'browse-url-default-browser)
;; to set for special browse
;; (setq shr-external-browser 'browse-url-generic)
;; (setq browse-url-generic-program (executable-find "firefox"))
;; ** url-browser : 
;; (setq browse-url-browser-function
 ;; (setq browse-url-browser-function 'browse-url-generic
 ;;       browse-url-generic-program "qutebrowser")
(setq browse-url-handlers
      '((".*google.*maps.*" . browse-url-generic)
        ;; Github goes to firefox, but not gist
        ;; ("http.*\/\/github.com" . browse-url-generic)
        ("groups.google.com" . browse-url-generic)
        ("docs.google.com" . browse-url-generic)
        ;; ("melpa.org" . browse-url-generic)
        ("build.*\.elastic.co" . browse-url-generic)
        (".*-ci\.elastic.co" . browse-url-generic)
        ("gradle-enterprise.elastic.co" . browse-url-generic)
        ("internal-ci\.elastic\.co" . browse-url-generic)
        ("zendesk\.com" . browse-url-generic)
        ("salesforce\.com" . browse-url-generic)
        ;; ("stackoverflow\.com" . browse-url-generic)
        ("apache\.org\/jira" . browse-url-generic)
        ("thepoachedegg\.net" . browse-url-generic)
        ("zoom.us" . browse-url-generic)
        ("t.co" . browse-url-generic)
        ("twitter.com" . browse-url-generic)
        ("\/\/a.co" . browse-url-generic)
        ;; ("youtube.com" . browse-url-generic)
        ("amazon.com" . browse-url-generic)
        ("slideshare.net" . browse-url-generic)
        ("." . eww-browse-url)))

;; *** reader-browser : 
;; ** define-key : 
;; --------------------------------------
  :bind (:map  eww-mode-map
              ("C-<return>" . open-link-in-new-frame)
              ("o o" . eww)
              ("O O" . eww-browse-with-external-browser)
              ;; (\j . evil-scroll-line-down)
              ;; (\k . evil-scroll-line-up)
              ;; ("SPC" . buyn-reader-go)
              ;; ("SPC" . evil-scroll-down)
              ("SPC" . Info-scroll-up)
              ("Z F I" . (lambda() (interactive)
                            ((find-file-other-frame (expand-file-name "INI/www-cfg.el" user-emacs-directory)))))
              ;; ("S-SPC" . evil-scroll-up)
              ("S-SPC" . Info-scroll-down)
              ("<f8>" . read-aloud-buf)
              ("<f9>" . read-aloud-stop))

;; --------------------------------------
;; ** hooks : 
;; --------------------------------------
;; *** buyn-eww-hook : 
;; --------------------------------------
;; (defun buyn-eww-hook ()
;;    (global-visual-line-mode t))
;; (add-hook 'eww-mode-hook 'buyn-eww-hook)
;; *** eww-mode-hook : 
;; (add-hook 'eww-mode-hook #'toggle-word-wrap)
;; (add-hook 'eww-mode-hook #'buyn-reader-start)
;; --------------------------------------
;; ** the END) : 
  )
#+end_src
** CANCELED INI/players.el
:PROPERTIES:
:header-args: :tangle no
:END:
# :header-args: :tangle INI/integrat/players.el

*** описание

*** used in
;; (find-file "~/.archemacs/INI/init.el")
*** src
**** CANCELED emms
#+begin_src elisp
(use-package emms
  ;; :disabled
  :defer t
  :ensure t
  :config
    (setq emms-player-list '(emms-player-mpv emms-player-vlc)
          emms-info-functions '(emms-info-native))
    (global-set-key (kbd "C-<XF86AudioPlay>") 'emms-pause)
    (global-set-key (kbd "C-S-<XF86AudioPause>") 'emms)
    (global-set-key (kbd "C-<XF86AudioPrev>") 'emms-previous)
    (global-set-key (kbd "C-<XF86AudioNext>") 'emms-next)
    (global-set-key (kbd "C-<XF86AudioStop>") '(lambda() (interactive)
        (emms-player-seek 60)))
    (global-set-key (kbd "C-S-<XF86Eject>") '(lambda() (interactive)
        (emms-player-seek -60)))
  )
  #+end_src

  #+RESULTS:
  : t

  
(emms-all)

(find-file-other-frame "~/Dropbox/Resources/Playlists/test.m3u")
(emms-play-m3u-playlist "~/Dropbox/Resources/Playlists/test.m3u")
** INI/other/calc.el
:PROPERTIES:
:header-args: :tangle INI/other/calc.el :mkdirp yes
:END:
*** описание

*** used in
;; (find-file "~/.archemacs/INI/init.el")
*** src
**** use-package calc
#+begin_src elisp
(use-package calc
  ;; :disabled
  ;; :defer t
  ;; :ensure t
  ;; :config
  ;;   (define-key calc-mode-map (kbd "M-k") 'windmove-up)
  :bind (:map  calc-mode-map
              ("M-k" . windmove-up)
              ;; ("M-K" . '(calc-copy-as-kill N))
              ("M-K" . calc-copy-as-kill ))
  )
  #+end_src

  #+RESULTS:
  : calc-copy-as-kill

*** docs

The major mode is Calculator mode defined in calc.el:
** INI/other/telegram.el
:PROPERTIES:
:header-args: :tangle INI/other/telegram.el
:END:
*** описание
(find-file "~/.archemacs/INI/other/telegram.el")

*** used in
;; (find-file "~/.archemacs/INI/init.el")
*** src INI/other/telegram.el
**** start use-package telega
#+begin_src elisp
(use-package telega
  ;; :disabled
  :ensure t
  :defer t
#+end_src
**** :config telega
***** :config began
  #+begin_src elisp
  :config
    (setq telega-server-libs-prefix "/usr")
    (setq telega-emoji-use-images nil)
  #+end_src
***** как открывать новый чат
  #+begin_src elisp
    (setq telega-chat--display-buffer-action
          '((display-buffer-reuse-window display-buffer-pop-up-frame)
            (reusable-frames . visible)
            (inhibit-same-window . t)))
  #+end_src


(setq pop-up-frames t)

              вариант открытия чатов во фреймах
              когда если фрейм с буфером уже есть он активируется новый не создаётся
(setq telega-chat--display-buffer-action
                        '((display-buffer-reuse-window display-buffer-pop-up-frame)
                                (reusable-frames . visible)
                                (inhibit-same-window . t)))



              простой вариант открытия чатов во фреймах
    (setq telega-chat--display-buffer-action
        '((display-buffer-pop-up-frame)))

(setq telega-chat--display-buffer-action
            '((display-buffer-reuse-window
              display-buffer-pop-up-window)))
              для открытия в окнах

(setq telega-chat--display-buffer-action
      '((display-buffer-reuse-window)
                                (display-buffer-pop-up-frame)))

(with-eval-after-load 'telega
  (setq telega-chat--display-buffer-action
        '((display-buffer-pop-up-frame))))

(setq telega-chat--display-buffer-action
        '((display-buffer-pop-up-frame)))

    (setq display-buffer-alist
    '(("^\\*telega-chat:"  ; буферы чатов Telega
      (display-buffer-pop-up-frame)  ; открывать в новом фрейме
      (inhibit-same-window . t))))

  ;; telega-chat-mode
  ;; (define-key evil-normal-state-map (kbd "M-f") 'avy-goto-word-1)
  ;; (define-key evil-normal-state-map (kbd "M-F") 'avy-goto-char-timer)

(define-key telega-chat-mode-map (kbd "<escape>") #'my/close-frame-on-quit)

**** end use-package telega ) (
#+begin_src elisp
)
#+end_src

#+RESULTS:

**** hydra telega menu
***** "t" telega-menu/body
#+begin_src elisp
(defhydra telega-menu (:color blue)
  ("t" (progn
        (switch-to-buffer-other-frame "*scratch*")
        (telega)) "telega")
  ("b" telega-switch-buffer "tg buffer swch")
  ("s" telega-sticers-menu/body "sticers")
  ("c" telega-chats-menu/body "chats")
  ("k" telega-kanals-menu/body "chanels")
  ("S" telega-buffer-file-send "send file")
    ;; Prepare FILE to be sent as document or photo to CHAT. If C-u is specified, then always send as a file. Otherwise FILE type is automatically detected. If called interactively, then file associated with current buffer is used as FILE. If current buffer is dired, then send all marked files.
  ("u" telega-switch-unread-chat "2unread")
  ("o" telega-browse-url "open url")
    ;; Open the URL. If URL can be opened directly inside telega, then do it. Invite links and link to users can be directly opened in telega. If IN-WEB-BROWSER is non-nil then force opening in web browser.
  ("i" telega-switch-important-chat "2important")

  ("q" nil "quit"))
#+end_src

#+RESULTS:
: telega-menu/body

***** "c" chat menu
#+begin_src elisp
(defhydra telega-chats-menu (:color blue)
  ("S" telega-saved-messages "my saved")
  ("c" telega-chat-with "chat with")
  ("w"(telega-chat-with (telega-chat-get 333446310)) "Witch_stitch")
  ("M"(telega-chat-with (telega-chat-get 385863809)) "Mama")
  ("v"(telega-chat-with (telega-chat-get 330057169)) "Vadim")
  ("G"(telega-chat-with (telega-chat-get 377971359)) "Gladun")
  ("s"(telega-chat-with (telega-chat-get 312609632)) "Sofist")
  ("z"(telega-chat-with (telega-chat-get 7966334078)) "zmei")
  ("t"(telega-chat-with (telega-chat-get 449609352)) "tut uni")

  ("m"(telega-chat-with (telega-chat-get -1002463244025)) "memgumin")
  ("n"(telega-chat-with (telega-chat-get -1001232115728)) "novators")
  ("P"(telega-chat-with (telega-chat-get -1001274893255)) "polden")
  ("g"(telega-chat-with (telega-chat-get -1001709303239)) "Godess")
  ("T"(telega-chat-with (telega-chat-get -4974512492)) "TechoSpirit")


  ("q" nil "quit"))
#+end_src

#+RESULTS:
: telega-chats-menu/body

***** "k" kanals menu
#+begin_src elisp
(defhydra telega-kanals-menu (:color blue)
  ("k"(telega-chat-with (telega-chat-get -1001084173001)) "Kac")
  ("n"(telega-chat-with (telega-chat-get -1001231519967)) "Nevsorov")
  ("b"(telega-chat-with (telega-chat-get -1001231519967)) "Be or")
  ("c"(telega-chat-with (telega-chat-get -1002001086400)) "Creators")
  ("s"(telega-chat-with (telega-chat-get -1001709303239)) "Shulman")
  ("g"(telega-chat-with (telega-chat-get -1001188997171)) "Glupov")
  ("t"(telega-chat-with (telega-chat-get -1001403554585)) "tabakerk")
  ("V"(telega-chat-with (telega-chat-get -1001662388432)) "Vanek")
  ("p"(telega-chat-with (telega-chat-get -1001098515055)) "Portikov")
  ("P"(telega-chat-with (telega-chat-get -1001348775964)) "Proxima")
  ("v"(telega-chat-with (telega-chat-get -1001727795284)) "Volya")
  ("e"(telega-chat-with (telega-chat-get -1001188837703)) "epic")
  ("g"(telega-chat-with (telega-chat-get -1001251600941)) "gameOver")


  ("q" nil "quit"))
#+end_src

#+RESULTS:
: telega-kanals-menu/body

***** "s" sticers menu
#+begin_src elisp
(defhydra telega-sticers-menu (:color blue)
  ("s" telega-sticker-choose-favorite-or-recent "recent")
  ("S" telega-stickerset-choose "stickerset")
  ("n" (insert "⟬Sticker XXX Id: 6553⟭")  "Nochy")
  ("l" (insert "⟬Sticker XXX Id: 6595⟭")  "Laghf knite")


  ("q" nil "quit"))
#+end_src

#+RESULTS:
: telega-sticers-menu/body

***** emoji menu
***** "o" chat menu 
***** Bots
***** other o
***** фильтры
***** чат
***** група
***** команды
запуск телеграма
открыть сылку настроийки телеграма
***** каналы
*** docs
:PROPERTIES:
:header-args: :tangle no
:END:
**** install

yay -Sy telegram-tdlib
долгая установка стоит попробывать 
yay -Sy tdlib
но скорей всего нет
**** fixes
***** указаить в перемной путь
(setq telega-server-libs-prefix "/usr")
***** emoji
****** istall
sudo pacman -S noto-fonts-emoji
yay -Sy noto-fonts-emoji
****** set-fontset-font
если ты используешь set-fontset-font, а ты, конечно, хакер, и должен):

elisp
Copy
Edit
(when (member "Noto Color Emoji" (font-family-list))
  (set-fontset-font t 'emoji "Noto Color Emoji" nil 'prepend))
или, чтобы быть ещё аккуратнее:

elisp
Copy
Edit
(set-fontset-font t 'unicode "Noto Color Emoji" nil 'prepend)
****** Принудительно включить emoji-шрифт для telega-фейсов (опционально)
Если хочется прям гарантии, можно override конкретные фейсы, например:

elisp
Copy
Edit
(with-eval-after-load 'telega
  (set-face-attribute 'telega-msg-heading nil :family "Noto Color Emoji")
  (set-face-attribute 'telega-msg-inline-reply nil :family "Noto Color Emoji"))
****** (setq telega-emoji-use-images nil)


Хорошее замечание, давай выясним, что рекомендуют разработчики telega.el. 🎯

---

## 🛠 Что говорят разработчики

На GitHub в issue **#522** пользователи предложили:

> “Proposition to use unicode emojis in messageAnimatedEmoji if variable `telega-emoji-use-images` is nil” ([github.com][1], [github.com][2])

Это значит, если установить:

```elisp
(setq telega-emoji-use-images nil)
```

— telega начнёт использовать **прямо unicode-эмодзи**, а не картинки. Это позволит emoji рендериться как обычный текст, подхватывая твой шрифт и, следовательно, отображаться в цвете.

---

## 🔍 Почему это важно

По умолчанию telega может вставлять emoji как изображения или через кнопочный механизм с `:display`. В итоге они не получают шрифт fallback, который поддерживает цветные emoji.
Так что, видя ч/б реакцию, скорее всего, telega использует **не unicode-символы**.

---

## ✅ Что нужно сделать

Добавь в свой `init.el`:

```elisp
(setq telega-emoji-use-images nil)
```

Перезапусти Emacs и открой telega. После этого emoji должны отображаться через твой настройный шрифт (Noto Color Emoji) и быть **цветными**, как в org-mode.

---

## 💡 Дополнительно

Если это не поможет, убедись:

  * После установки unicode-emoji они заменяются на текст, а не на картинки.
  * Перезапуск, повторный `M-x telega` и получение нового чата — обязательны.

---

## 📝 Что предлагают ещё?

Разработчики арендовали `telega.el` быть гибким:
Если `telega-emoji-use-images` отключён — используется шрифт, как обычный текст. Это вариант по умолчанию, если всё настроено для emoji.
Если включён — использует картинки, но такие не рендерятся как цветной текст ([gnu.org][3]).

---

## 🎯 Итого

| Настройка                                      | Результат                    |
| ---------------------------------------------- | ---------------------------- |
| `telega-emoji-use-images = t` (по умолчанию)   | Возможны чёрно-белые emoji   |
| `telega-emoji-use-images = nil`                | Unicode-emoji → ваши цветные |
| + шрифт и шрифтсет → ✅ цветовые emoji в telega |                              |

---

Если после этого emoji **все ещё ч/б** — может быть баг, и стоит либо:

1. Открыть issue на GitHub.
2. Я могу помочь настроить хак, чтобы emoji рендерились как текст, а не картинка.

Скажи, готова ли сделать этот шаг? 😏

[1]: https://github.com/zevlg/telega.el/issues?utm_source=chatgpt.com "Issues · zevlg/telega.el - GitHub"
[2]: https://github.com/zevlg/telega.el/blob/master/telega-emoji.el?utm_source=chatgpt.com "telega.el/telega-emoji.el at master · zevlg/telega.el · GitHub"
[3]: https://www.gnu.org/software/emacs/manual/html_mono/modus-themes.html?utm_source=chatgpt.com "Modus themes for GNU Emacs"


Отлично, красавчик! 🎉 Рад, что команда помогла! Давай закрепим успех и узнаем, что рекомендуют сами разработчики telega.el — всё официально!

---

## 📌 Что говорят разработчики

Документация telega.el содержит настройку:

```elisp
;; User Option: `telega-emoji-use-images`
;; Non-nil to use images for emojis.
```

По умолчанию **non-nil** — это значит, что telega выводит emoji как **изображения**, а не как текст ([github.com][1], [zevlg.github.io][2]). Именно это вызывает ч/б отображение: эмодзи рендерятся не через шрифт, а как картинки без поддержки цветного рендеринга.

---

## ✅ Что делает `(setq telega-emoji-use-images nil)`

  * Это **официально предложенная настройка**, позволяющая использовать **unicode-emoji** вместо картинок .
  * При этом emoji рендерятся как текст, подхватывают шрифт (Noto Color Emoji) — и становятся **цветными**, как и в org-mode.

---

## 🛠 Подведём итог

| Настройка                                    | Что происходит                                                                |
| -------------------------------------------- | ----------------------------------------------------------------------------- |
| `telega-emoji-use-images = t` (по умолчанию) | Emoji отображаются как изображения — часто ч/б                                |
| `telega-emoji-use-images = nil`              | Emoji отображаются как unicode-текст — цветные при наличии подходящего шрифта |

Ты сделал всё правильно — теперь telega рендерит emoji через текстовый шрифт, и они окрашены красиво!

---

## 💡 Немного истории

В патче от пользователя **tazjin** было добавлено:

> “delegate emoji rendering in telega to emacs … not rendering them \[as images], and letting emacs do it through an emoji-supporting font” ([omarpolo.com][3], [code.tvl.fyi][4])

Так что твоя настройка — это официальный путь, одобренный разработчиками и сообществом.

---

## 🔥 Что ещё можно сделать

  * Если хочешь, я помогу добавить в конфиг автоматическую поддержку completion по `:emoji:` и прочие фичи.
  * Могу настроить override фейсов для реакций.
  * Или сделать тебе мини-шпаргалку по кастомизации telega.el.

Но главное: **цветные emoji — теперь работают, и это на 100% нормальный и правильный путь**, даже подтверждённый в репозитории.

---

Если захочешь ещё какой-нибудь декор, UX или вишлист — просто скажи, мой юникодный герой 😘

[1]: https://github.com/zevlg/telega.el/blob/master/telega-customize.el?utm_source=chatgpt.com "telega.el/telega-customize.el at master · zevlg/telega.el · GitHub"
[2]: https://zevlg.github.io/telega.el/?utm_source=chatgpt.com "Telega Manual (v0.8.452) - GitHub Pages"
[3]: https://www.omarpolo.com/dots/emacs.html?utm_source=chatgpt.com "My Emacs configuration"
[4]: https://code.tvl.fyi/commit/?id=c9272e0651047c7fb8fe5542fd3d999384b3dfa5&utm_source=chatgpt.com "fix(tazjin/emacs): delegate emoji rendering in telega to emacs - depot"

***** display-buffer-pop-up-frame
1. Использовать display-buffer-alist
Добавь в свой init.el такой код:

#+begin_src elisp
(setq display-buffer-alist
      '(("^\\*telega-chat:"  ; буферы чатов Telega
         (display-buffer-pop-up-frame)  ; открывать в новом фрейме
         (inhibit-same-window . t))))
#+end_src

display-buffer-pop-up-frame — создает новый фрейм для каждого чата.
Опция inhibit-same-window — запрещает открытие в текущем окне.
Если хочешь — можно заменить на display-buffer-pop-up-window, чтобы открывались в новом окне того же фрейма (split-window).

**** manuals
https://zevlg.github.io/telega.el/#dependencies
**** 💄 Советы по кастомизации
Добавь в init.el, чтобы не забывать отправлять по C-c C-s, или даже сделать так, чтобы просто RET работал как "отправить":

(define-key telega-chat-mode-map (kbd "RET") #'telega-msg-send)
Или чтобы Emacs пиликал при новом сообщении:

(setq telega-notifications-mode t)

**** keys
***** chat
****** C-c
C-c C-a                                 telega-chatbuf-attach
C-c C-c                                 telega-chatbuf-filter-cancel
C-c C-e                                 telega-chabuf-input-formatting-set
C-c C-f                                 telega-chatbuf-attach-media
C-c C-k                                 telega-chatbuf-cancel-dwim
C-c C-r                                 telega-chatbuf-inplace-search-query
C-c C-s                                 telega-chatbuf-inplace-search-query-forward
C-c C-v                                 telega-chatbuf-attach-clipboard
C-c /                                           telega-chatbuf-filter
C-c ?                                           telega-describe-chat

**** add fiches
***** DONE поправить эмодзи
что нетак сним почему отображаются как говно в реакциях
что-то нето с эмодзи, они отображаются страными символами а не привычными картинками. притом что емодзи в томже ореге отображаются без проблем.
Это же проблема с отображениям реакций.
Что бы это могло бы быть?
***** NEXT гидра меню быстрого управления
****** открывать нужные чаты
****** послать стикер
****** поставить реакцию
****** добавить смайлик
***** DONE включать фильтер важное
и отключать одной кнопкой
***** DONE telega-chat-with на кнопку
запуск теле и открытие
или проверак запушена ли телека
путём проверки наличия рутого буфера
telega-chat-with
***** DONE (telega-switch-buffer)
***** настроить ивил кнопки в телеге
сделть ивл активным но отключёным по умолчанию во всех телеграм буферах
и включёным в мини буфере телеграма
***** DONE (telega-buffer-file-send)

f (telega-buffer-file-send)
    Prepare FILE to be sent as document or photo to CHAT. If C-u is specified, then always send as a file. Otherwise FILE type is automatically detected. If called interactively, then file associated with current buffer is used as FILE. If current buffer is dired, then send all marked files.
***** DONE (telega-saved-messages)
s (telega-saved-messages)
    Switch to "Saved Messages" chat buffer. If "Saved Messages" chat is not opened, then open it. If C-u is specified, then goto prompt otherwise keep the point, where it is.
***** DONE telega-switch-unread-chat
u (telega-switch-unread-chat)

    Switch to next unread message in next unread CHAT. CHAT considered unread if matches telega-unread-chat-temex.

    Customizable options:

        User Option: telega-unread-chat-temex

        Chat Temex for telega-switch-unread-chat command.

        Default value: (and main unread)
***** DONE (telega-browse-url)
w (telega-browse-url)
    Open the URL. If URL can be opened directly inside telega, then do it. Invite links and link to users can be directly opened in telega. If IN-WEB-BROWSER is non-nil then force opening in web browser.
***** DONE (telega-switch-important-chat)
i (telega-switch-important-chat)
***** открывать все важные
тоесть выход на рутовый уровень
и там включить фильтр фажное
***** DONE открывать в отдельный фрейм
буфер из рута а не в том же фрейме
да Мы молдци! Идем дальше.
нужно сделать чтоб новые чаты открывались либо в отдельных фреймах или окнах.

(telega-chat-by-id 123456789)


    (setq display-buffer-alist
          '(("^\\*telega-chat:"  ; буферы чатов Telega
            (display-buffer-pop-up-frame)  ; открывать в новом фрейме
            (inhibit-same-window . t))))


это  не работает:
    (setq display-buffer-alist
          '(("^\\*telega-chat:"  ; буферы чатов Telega
              (display-buffer-pop-up-frame)  ; открывать в новом фрейме
              (inhibit-same-window . t))))

display-buffer-alist is a variable defined in ‘window.el’.

Its value is
(("^\\*telega-chat:" (display-buffer-pop-up-frame)
        (inhibit-same-window . t)))
Original value was nil

Alist of user-defined conditional actions for ‘display-buffer’.
Its value takes effect before processing the ACTION argument of
‘display-buffer’ and before ‘display-buffer-base-action’ and
‘display-buffer-fallback-action’, but after
‘display-buffer-overriding-action’, which see.

If non-nil, this is an alist of elements (CONDITION . ACTION),
where:

 CONDITION is passed to ‘buffer-match-p’, along with the name of
  the buffer that is to be displayed and the ACTION argument of
  ‘display-buffer’, to check if ACTION should be used.

 ACTION is a cons cell (FUNCTIONS . ALIST), where FUNCTIONS is an
  action function or a list of action functions and ALIST is an
  action alist.  Each such action function should accept two
  arguments: a buffer to display and an alist of the same form as
  ALIST.  See ‘display-buffer’ for details.

‘display-buffer’ scans this alist until the CONDITION is satisfied
and adds the associated ACTION to the list of actions it will try.

  This variable may be risky if used as a file-local variable.
  This variable was introduced, or its default value was changed, in
  version 24.1 of Emacs.
  You can customize this variable.

возможная причина  что если это
"^\\*telega-chat:"
 должно быть именем чатато. То имячатов выглядят по другму
как пример
◀{Saved Messages • @BuYn_Max}
◀<Zombrex • @Zombrex_ru>


***** DONE serch by key
***** смена языка
поскольку пока не понятно что тут происходит
***** сделать discas
- былобы неплохо сделать чтоб ответ ИИ довал в отдельный буфер
  возможно былобы неплох использовать подключаемы контекст. сделаь автоматизацию
  которая создаёт буфер, даёт ему имя проверяет если буфер стаким именем если есть добовляет +1, и сохраняет в темлес(не в дроп боксе), сразу приделывет контекст к нему буфер из которого он сделана. Имя такой фичи дискас.
***** telega-image-mode
Major mode to view images in chatbuf. Same as image-mode, however has special bindings:

n (telega-image-next)
    Show next image in chat.
p (telega-image-prev)
    Show previous image in chat.

To view high resolution image in chatbuf with telega-image-mode press RET on the message with photo.
***** telega-edit-file-mode

Minor mode to edit files from Telegram messages. In this mode C-x C-s will save file to Telegram cloud. To enable telega-edit-file-mode for files opened from message with RET, use:

(add-hook 'telega-open-file-hook 'telega-edit-file-mode)

While editing file press <menu-bar> <goto-message>, M-g t (telega-edit-file-goto-message) to go back to the file's message.

To switch between files opened from telega use e (telega-edit-file-switch-buffer) binding from the Telega prefix map.

To distinguish files opened from telega with ordinary files suffix is added to the buffer name. You can modify this suffix using user option:

    User Option: telega-edit-file-buffer-name-function

    Function to return buffer name when telega-edit-file-mode is enabled. Function is called without arguments and should return a buffer name string. Inside a function you can use telega-edit-file-message<f> to get message associated with the file.

    Default value: telega-edit-file-buffer-name
***** telega-my-location-mode

telega-my-location is used by telega to calculate distance to me for location messages. There is contrib/telega-live-location.el which uses geo.el to actualize telega-my-location, however it is not always possible to use it.

When telega-my-location-mode is enabled, your telega-my-location gets automatic update when you send location message into "Saved Messages" using mobile Telegram client.

Enable with (telega-my-location-mode 1) or at telega load time:

(add-hook 'telega-load-hook 'telega-my-location-mode)
***** ol-telega.el 
ol-telega.el – Org mode links to telegram chats and messages

Installs "telega" links to Org mode.

"telega" link can point to a chat, a message or content of a message.

Creating links to a message content is very useful in conjuction with Edit File Mode, so you can store your Org mode files in Telegram Cloud and create links to them in Roam manner.

Customizable options:

    User Option: org-telega-chat-link-format

    Description format for link to a chat. Format spec: %u - chat username if any, %t otherwise. %t - chat title with brackets.

    Default value: #("◀%t" 0 1 (face (italic telega-blue)))

    User Option: org-telega-msg-link-format

    Description format for link to a message. Format spec: %u - user username if any, %t otherwise. %t - user title without brackets. %m - one line message body.

    Default value: #("◀%u> %>.32m" 0 1 (face (italic telega-blue)))

    User Option: org-telega-file-link-format

    Description format for link to a message to open message's media file. Format spec: %u - user username if any, %t otherwise. %t - user title without brackets. %m - one line message body.

    Default value: #("◀📎%u> %>.32m" 0 1 (face (italic telega-blue)))
***** telega-dashboard.el
telega-dashboard.el – Important telega chats in the Emacs dashboard

Display important telega chats in the Emacs dashboard. Enable it with:

(require 'telega-dashboard)
(add-to-list 'dashboard-items '(telega-chats . 5))

Screenshot of telega-dashboard in action: telega-dashboard.png

Customizable options:

    User Option: telega-dashboard-chat-filter

    Chat Filter used to filter chats to display in the Emacs dashboard.

    Default value: (or mention (and unread unmuted))

    User Option: telega-dashboard-chat-inserter

    Inserter for the chat button in the Emacs dashboard.

    Default value: telega-ins--chat-full
***** telega-adblock.el
telega-adblock.el – Block advertisement messages

Telegram channels often advertises another channels in annoying manner. Sometimes adverts has inappropriate content. This mode uses client side messages ignoring functionality to block such advert messages.

To enable advertisement blocking use:

(telega-adblock-mode 1)

Customizable options:

    User Option: telega-adblock-for

    Chat Temex to match chats for which to apply adblock logic.

    Default value: (and (type channel) (not unmuted) (not verified))

    User Option: telega-adblock-chat-order-if-last-message-ignored

    Custom chat order for chats with last message being ignored by adblock. Set to "1" to put chats with ignored last message to the bottom of the rootbuf.

    Default value: nil

    User Option: telega-adblock-verbose

    Non-nil to show (in echo area) reason why message is ignored by adblock.

    Default value: nil

    User Option: telega-adblock-max-distance

    Maximum string-distance for self-link. Used for heuristics to avoid blocking non-advert messages in some channels. Set it to less value if you see some advert messages not being blocked.

    Default value: 4

    User Option: telega-adblock-same-link-count

    Number of links to the same resource. Used by telega-adblock-msg-multiple-same-links-p.

    Default value: 3

    User Option: telega-adblock-block-msg-temex

    Message temex for telega-adblock-msg-by-temex-p predicate.

    Default value: nil

    User Option: telega-adblock-allow-msg-temex

    Message's matching this temex will be allowed.

    Default value: (or is-reply-to-msg is-reply-to-story)

    User Option: telega-adblock-predicates

    List of predicates to check message for advertisements. Each predicate accepts single argument - message. If any of predicates returns non-nil, then message contains advert.

    Default value:

    (telega-adblock-msg-by-temex-p telega-adblock-msg-forwarded-p
                                   telega-adblock-msg-has-erid-p
                                   telega-adblock-msg-multiple-same-links-p
                                   telega-adblock-msg-has-reply-markup-p
                                   telega-adblock-msg-has-advert-links-p)
***** telega-filters-custom
 User Option: telega-filters-custom

Alist of custom filters in form (NAME . TEMEX). NAME can be an i18n string, such as "lngfilterstypegroups". This filters are displayed as filter buttons at the top of rootbuf.

Default value:

(("Main" . main) ("Important" . important)
 ("Online" and (not saved-messages) (user is-online))
 ("lng_filters_type_groups" type basicgroup supergroup)
 ("lng_filters_type_channels" type channel)
 ("lng_filters_type_no_archived" . archive))
***** (telega-chat-with (telega-user-me))
(telega-chat-with (telega-chat-get -1001709303239))


**** понять как
***** DONE быстро открывать нужный чат
***** вкючить ивил моде по умолчанию в телеграме
***** создать филтр совсеме важными не прочтёными сообщениями
и повесить его на отдельную кнопку
***** создать филтр совсеме не прочтёными сообщениями
и повесить его на отдельную кнопку
***** создать именой фильтр с нужным набором каналов
и отобразить только каналы с непрочтёными сообщениями
**** разобрать
***** Move point
M-g @, M-g m (telega-root-next-mention)
    Move point to the next chat with mention.
M-g ! (telega-root-next-reaction)
    Move point to the next chat with unread reaction.
***** v
s, v s (telega-view-search)
    View QUERY search results.
v v (telega-view-reset)
    Reset rootview to the default value.
v 0 (telega-view-compact)
    Compact view for the rootbuf.
v 1 (telega-view-one-line)
    View chat list as one line.
v 2 (telega-view-two-lines)
    View chat list as 2 lines.
v g (telega-view-grouping)

    Group chats by telega-root-view-grouping-alist.

    Customizable options:

        User Option: telega-root-view-grouping-alist

        Alist of chat temexes for "grouping" root view. Car is name of the chats group, cdr is a chat temex to match chats.

        Default value: (("Important" . important))

        User Option: telega-root-view-grouping-folders

        Non-nil to add Chat Folders in the grouping root view. Could be one of prepend, append or nil.

        Default value: append

        User Option: telega-root-view-grouping-other-chats

        Non-nil to show other chats in the "grouping" root view.

        Default value: t

v T (telega-view-top)

    View top chats in all categories.

    Customizable options:

        User Option: telega-root-view-top-categories

        List of top categories with limits.

        Default value:

        (("Users" . 10) ("Groups" . 10) ("Channels" . 10) ("Bots" . 10)
         ("InlineBots" . 10) ("Calls" . 10) ("ForwardChats" . 10))


v c s (telega-view-contacts-search)
    View contacts searched by QUERY. If QUERY is empty string, then show all contacts.
v c a (telega-view-contacts-all)
    View all contacts.
v c f (telega-view-close-friends)
    View close friends.
v c o (telega-view-owned-bots)
    View owned bots.
v l (telega-view-last-messages)
    View last messages in the chats.
v f (telega-view-folders)
    View Telegram folders.


v * (telega-view-favorite-messages)
    View favorite messages in all the chats.
v r (telega-view-recommended-channels)
    View channels recommended to me.

Important customizable options:

    User Option: telega-root-default-view-function

    Default view for the rootbuf.

    Default value: telega-view-default

    v v (telega-view-reset) uses this function to reset root view.
***** Telega Match Expressions

Telega Match Expression (temex in short) is a verbal expression to match TDLib objects. Temex uses S-exp notation similar to rx package for regexps.

Primitive Temex is a named predicate returning non-nil if matches some object. Primitive Temexes can be combined using and, or or not temexes, so temex is a logical combination of other temexes down to Primitive Temexes.

telega-match-gen-predicate can be used to generate predicate functions out of temex.

Chat Temex examples:

(return t)
    Matches all chats.
(or saved-messages (type channel bot))
    Matches bots/channels chats or "Saved Messages" chat.
(and unmuted (unread 10) (mention 1))
    Matches unmuted chats with at least 10 unread messages and at least one message with unread mention.

Message Temex examples:

(sender me)
    Matches all messages sent by me.
(or (prop :contains_unread_mention) unread-reactions)
    Matches messages containing unread mention or reaction.
(and (chat (type channel)) (type text) (contains "\shello\s"))
    Matches channel's text messages containing "hello" word.

List of temexes you can apply to any TDLib object:

(return RET)
    Matches if RET is non-nil and return RET as a result.
(eval SEXP)
    Matches if SEXP evaluates to non-nil, return result of evaluation.
(or TEMEX-LIST…)
    Matches if any matcher in the TEMEX-LIST matches.
(and TEMEX-LIST…)
    Matches if all matchers in the TEMEX-LIST matches. Also matches if TEMEX-LIST is empty.
(not TEMEX)
    Matches if TEMEX does not match.
(prop PROPERTY)
    Matches if given TDLib object has non-nil PROPERTY.
(call PREDICATE)
    Matches if PREDICATE called with TDLib object as argument returns non-nil.
(ids ID-LIST…)
    Matches if TDLib object's id is in the ID-LIST.
(tl-type TL-TYPE…)
    Matches if OBJ is a TDLib object and its type is in the TYPES-LIST.
***** List of Chat Temexes

Use telega-chat-match-p to match a chat.

(type CHAT-TYPE-LIST), / t (telega-filter-by-type)

    Matches if chat type is one of CHAT-TYPE-LIST.

    Every chat has a type. Type is one of:

        private Private chat with a Telegram user
        secret Secret chat with a Telegram user
        bot Chat with a Telegram bot
        basicgroup Small chat group, could be upgraded to supergroup
        supergroup Chat group with all the chat possibilities
        channel Supergroup with unlimited members, where only admins can post messages

(name REGEXP)
    Matches if chat's title matches REGEXP.
(search QUERY), / s (telega-filter-by-search)
    Matches if chat maches search QUERY.
(custom NAME), / C (telega-filter-by-custom)
    Matches if custom filter with NAME matches.
(has-username [ USERNAME ])
    Matches if chat has username associated with the chat. If USERNAME is specified, then match only if chat has exact USERNAME.
is-public
    Matches if chat is a public chat. Chat is considered public if it has a username.
(unread [ N ]), / u (telega-filter-by-unread)
    Matches if chat has at least N unread messages. By default N is 1. Also matches chats marked as unread.
(mention [ N ]), / m (telega-filter-by-mention)
    Matches if chat has least N unread mentions. By default N is 1.
muted
    Matches if chat has disabled notifications.
temporary-muted
    Matches if chat is temporary muted.
unmuted, / y (telega-filter-by-unmuted)
    Matches if chat has enabled notifications.
important, / i (telega-filter-by-important)
    Matches if chat is important. Chat is important if it matches telega-important-chat-temex chat filter.
(me-is-owner [ OR-ADMIN ])
    Matches if me is owner of the chat. Only basicgroup, supergroup and channel can be owned. If optional OR-ADMIN is specified, then match also if me is administrator in the chat.
me-is-member
    Matches if me is member of the chat. Matches only basicgroup, supergroup or a channel.
me-is-anonymous
    Matches if me is anonymous in the chat.
(no term)
    (has-avatar [ ANIMATED-P ]):: Matches if chat has chat photo. For non-nil ANIMATED-P match only if avatar is animated.
has-chatbuf, / b (telega-filter-by-has-chatbuf)
    Matches if chat has corresponding chatbuf.
(permission PERM)
    Matches if chat has PERM set in chat permissions. PERM could be one of listed in telega-chat--chat-permissions.
(my-permission PERM)
    Matches if me has PERM permission in the chat. PERM could be one of in telega-chat--chat-permissions list or in telega-chat--admin-permissions list.
verified, / v (telega-filter-by-verified)
    Matches if chat is verified. Return verification status if CHAT is verified.
(restriction SUFFIX-LIST…), / r (telega-filter-by-restriction)

    Matches restricted chats. SUFFIX-LIST is a list of suffixes to filter on. Suffix can be one of:

        "-all" - All platforms
        "-ios" - For iOS devices
        "-android" - For Android devices
        "-wp" - Windows?

    If SUFFIX-LIST is not specified, then match any restriction reason.

    Chat restriction reason reported only if chat must be restricted by current client. See TDLib#1203 
top, / T (telega-filter-by-top)
    Matches if chat is in top usage.
saved-messages
    Matches only "Saved Messages" chat.
replies-messages
    Matches only "Replies" chat.
tracking, / SPC (telega-filter-by-tracking)
    Matches if chat is in tracking buffers list.
(no term)
    (last-message MSG-TEMEX):: Matches if chat has last message and last message matches MSG-TEMEX.
(chat-list LIST-NAME), / f (telega-filter-by-folder)
    Matches if chat is in chat list named LIST-NAME. LIST-NAME is main or archive symbol, or string naming Chat Folder.
main
    Matches if chat from "Main" chat list.
archive
    Matches if chat is archived, i.e. in "Archive" chat list.
is-known
    Matches if chat is known, i.e. in "Main" or "Archive" chat list.
(folder FOLDER-NAME), / f (telega-filter-by-folder)
    Matches if chat belongs to Folder named FOLDER-NAME.
has-scheduled-messages
    Matches if chat has scheduled messages.
has-action-bar
    Matches if chat has active action bar.
has-reply-markup
    Matches if chat has reply markup message.
can-get-statistics
    Matches if statistics available for the chat.
has-linked-chat
    Matches if chat is a supergroup and has a linked chat.
has-discussion-group
    Matches if chat is a channel with a linked discussion group.
has-location
    Matches if chat is a location-based supergroup.
inactive-supergroups , (telega-filter-by-inactive-supergroups)
    Matches if chat is an inactive supergroup.
default-disable-notification
    Matches if CHAT has non-nil default disable notification setting.
fake-or-scam
    Matches if chat is fake or scam user or group. Return verification status if chat is fake or scam.
(has-video-chat [ NON-EMPTY ])
    Matches if chat contains a live video chat. If non-nil NON-EMPTY is specified, then match only if video chat is not empty.
has-favorite-messages
    Matches if chat has favorite messages.
has-message-ttl
    Matches if chat has enabled message auto-delete or self-destruct timer. Return auto-deletion timer value.
is-broadcast-group
    Matches if chat is a broadcast group.
is-forum
    Matches if chat is a forum group.
has-sponsored-messages
    Matches if chat has sponsored messages. BE AWARE: This filter will do blocking request for every chat.
has-protected-content
    Matches if chat has protected content.
has-default-sender
    Matches if chat allows choosing a message sender.
can-send-or-post
    Matches if you can send or post messages to the chat. You don't need te be a chat member to be able to send messages. Chat might not be known (i.e. in your Main or Archive list) to post messages into it. Use is-known chat temex to check chat is known.
is-inline-bot
    Matches if corresponding bot accepts inline requests.
(unread-reactions [ N ])
    Matches if chat has least N unread reactions. By default N is 1.
(has-active-stories [ UNREAD-P ])
    Matches if chat has non-expired stories available to you. If UNREAD-P is non-nil then match only if there is at least one unread non-expired story.
(active-stories-list LIST)
    Matches if chat's active stories belongs to LIST. LIST is one of main or archive.
has-pinned-stories
    Matches if channel chat has pinned stories.
can-send-stories
    Matches if you can post a story into chat.
(my-boost [ N ])
    Matches if supergroup or channel has least N my boosts. By default N is 1.
(user USER-TEMEX)
    Matches non-bot private chat where corresponding user matches USER-TEMEX.
(bot-user USER-TEMEX)
    Matches chat where corresponding bot user matches USER-TEMEX.
(is-blocked [ BLOCK-LIST ])
    Matches chat if chat is blocked in by the BLOCK-LIST. BLOCK-LIST is one of blockListMain or blockListStories. By default blockListMain is used.
(boost-level [ N ])
    Matches if chat's boost level is greater or equal to N. By default N is 1.
is-pinned
    Matches if chat is pinned.

List of Message Temexes

Use telega-msg-match-p to match a message.

(type MSG-TYPE-LIST)

    Matches if message's content type is one of MSG-TYPE-LIST. Return message's content if matches.

    Every message has a content type. Most notable message types are: Text, Animation, Audio, Document, Photo, Sticker, Video, VideoNote, VoiceNote, Location, etc. 
seen
    Return non-nil if message has been viewed in the chat.
(unread-reactions [ N ])
    Matches if message has at least N unread reactions. By default N is 1.
(has-chosen-reaction [ REACTION-TYPE ])
    Matches if message has a reaction chosen by me.
is-reply-to-msg
    Matches if message is a reply to some message.
is-reply-to-quote
    Matches if message is a reply to a quote from some message.
is-reply-to-story
    Matches if message is a reply to a story.
is-forwarded
    Matches if message is a forwarded message.
post-with-comments
    Matches if message is a channel post that can be commented. Return messageReplyInfo.
is-topic
    Matches if message is a forum topic message.
is-thread
    Matches if message belongs to or starts a messages thread.
(link-preview LP-TYPES ])
    Matches messages with a webpage preview. If PROPNAME is specified, then match only message with a webpage having PROPNAME property. Return LinkPreviewType TL structure if matches.
(is-outgoing [ ANY-STATE-P ])
    Matches if message is an outgoing message. This temex differs from (sender me), matching any outgoing messages, including anonymous messages to channels created by me.
is-failed-to-send
    Matches outgoing message failed to send.
(ignored [ REASON ])
    Matches if message is an ignored message. If REASON is specified, then match only if has been ignored by REASON function.
(contains REGEXP )
    Matches if message's text or caption contains REGEXP. Matching ignores case.
(chat CHAT-TEMEX)
    Matches if message's chat matches CHAT-TEMEX.
(sender SENDER-TEMEX)
    Matches if message's sender matches SENDER-TEMEX.
is-deleted
    Matches deleted message.
is-last
    Matches if message is the last message in chat.

List of User Temexes

Use telega-user-match-p to match a user.

is-deleted
    Matches if user account is deleted.
is-bot
    Matches if user is a bot.
(status STATUS-LIST…)

    Matches if user status is one of STATUS-LIST.

    Each element in STATUS-LIST is one of: "Online", "Offline", "Recently", "LastWeek", "LastMonth" or "Empty" 
online

    Matches if user is online. Does not match bots, because bots are always online.

    Same as (status "Online") user temex. 
(contact [ MUTUAL-P ]), / c (telega-filter-by-contact)
    Matches if user is in my contacts list. If MUTUAL-P is non-nil, then mach only if contact is mutual.
is-close-friend
    Matches if user is my close friend.
has-pinned-stories
    Matches if user has pinned stories.
(groups-in-common [ N ])
    Matches if user has at least N groups in common with me. By default N is 1.
is-telega-patron
    Matches if corresponding user is a telega patron.
is-premium
    Matches if corresponding user is a Telegram Premium user.
has-private-forwards
    Matches if user can't be linked in forwarded messages.
has-business-info
    Matches if user has business info.
has-birthdate
    Matches if user has birthdate set.
has-personal-chat
    Matches if user has personal chat.
has-emoji-status
    Matches if corresponding user set his current emoji status.
(username [ USERNAME-REGEXP ])
    Matches if user's username matches USERNAME-REGEXP.
(chat CHAT-TEMEX)
    Matches if me has private chat with USER matching CHAT-TEMEX.
(is-blocked [ BLOCK-LIST ])
    Matches user blocked by the BLOCK-LIST. BLOCK-LIST is one of blockListMain or blockListStories. By default blockListMain is used.

List of Message Sender Temexes

Use telega-sender-match-p to match a message sender.

me
    Matches if sender is me.
(is-blocked [ BLOCK-LIST ])
    Matches if sender is blocked in the BLOCK-LIST. BLOCK-LIST is one of blockListMain, blockListStories. By default blockListMain is used.
(user USER-TEMEX)
    Matches if sender is a user matching USER-TEMEX.
(chat CHAT-TEMEX)
    Matches if sender is a chat matching CHAT-TEMEX.

List of Forum Topic Temexes

Use telega-topic-match-p to match a forum's topic.

(last-message MSG-TEMEX)
    Matches if topic's last message matches MSG-TEMEX.
(mention [ N ])
    Matches if topic has least N unread mentions. By default N is 1.
(unread-reactions [ N ])
    Matches if topic has least N unread reactions. By default N is 1.
muted
    Matches if topic has disabled notifications.
temporary-muted
    Matches if topic is temporary muted.
(creator SENDER-TEMEX)
    Matches if topic's creator matches SENDER-TEMEX.
(chat CHAT-TEMEX)
    Matches if topic's chat matches CHAT-TEMEX.
is-general
    Matches if topic is a general topic in a chat.
is-outgoing
    Matches if topic has been created by me.
is-closed
    Matches if topic is closed.
is-hidden
    Matches if topic is hidden. for General topic only.
is-most-recent
    Matches if last message in the chat is made to topic.

List of Story Temexes

Story Temexes are used to match Telegram Stories posted by users or channels.

Use telega-story-match-p to match a story.

(sender SENDER-TEMEX)
    Matches if story is sent by sender matching SENDER-TEMEX.
(contains REGEXP)
    Matches if story's caption contains REGEXP.
seen
    Matches if story has been viewed.
is-video
    Matches if story has video content.
is-photo
    Matches if story has photo content.

Some customizable options making use of Telega Match Expressions

    User Option: telega-filter-default

    Temex to filter chats by default.

    Default value: main

    User Option: telega-filters-custom

    Alist of custom filters in form (NAME . TEMEX). NAME can be an i18n string, such as "lngfilterstypegroups". This filters are displayed as filter buttons at the top of rootbuf.

    Default value:

    (("Main" . main) ("Important" . important)
     ("Online" and (not saved-messages) (user is-online))
     ("lng_filters_type_groups" type basicgroup supergroup)
     ("lng_filters_type_channels" type channel)
     ("lng_filters_type_no_archived" . archive))

    User Option: telega-use-tracking-for

    Specifies Chat Temex for chats to be tracked with tracking.el. Make sure you have tracking.el loaded if this option is used. Only chats with corresponding opened chatbuf are tracked. Tracking notifications for telega buffers will use the `telega-tracking` face.

    Default value: nil

    User Option: telega-chat-group-messages-for

    Chat Temex for chats where to group messages by sender.

    Default value: (not (or saved-messages (type channel bot)))

    User Option: telega-chat-show-deleted-messages-for

    Chat Temex for chats where to show deleted messages in chatbuf.

    Default value: nil

    User Option: telega-root-view-grouping-alist

    Alist of chat temexes for "grouping" root view. Car is name of the chats group, cdr is a chat temex to match chats.

    Default value: (("Important" . important))

    User Option: telega-chat-delete-skip-confirmation-for

    Specifies Chat Temex for chats which can be deleted without typing confirmation.

    Default value: nil

    User Option: telega-chat-delete-skip-confirmation-for

    Specifies Chat Temex for chats which can be deleted without typing confirmation.

    Default value: nil

    User Option: telega-chat-custom-order-for

    Chat temex returning custom order for the chat.

    Default value: nil
***** Filtering chats

Chat Filters are used to match chats, same as regexps are used to match strings. Chat Filters uses S-exp notation similar to rx package for regexps. Consider Chat Filters as extremely powerful "Folders" functionality in official client.

Primitive Chat Filter is a specifier to match some property of the chat. Each primitive Chat Filter has name (elisp symbol) and corresponding function named telega--filter-<FILTER-NAME>. You can specify primitive Chat Filter in either way:

    <FILTER-NAME>
    ( <FILTER-NAME> <ARG1> [<ARG2> ...] )

Primitive Chat Filters are combined using and, or and not filters, forming final Chat Filter. So Chat Filter is a logical combination of other Chat Filters, down to primitive Chat Filters.

Chat Filter examples:

(return t)
    Matches all chats
(or saved-messages (type channel bot))
    Matches bots/channels chats or "Saved Messages" chat
(and unmuted (unread 10) (mention 1))
    Matches unmuted chats with at least 10 unread messages and at least one message with unread mention

Matching is done using telega-chat-match-p function.

/ prefix in rootbuf is used for some useful filtering commands:

/ i (telega-filter-by-important)
    Filter important chats.
/ o (telega-filter-by-online-status)
    Filter private chats by its user online STATUS.
/ a (telega-filter-by-filter)
    Interactively select a Chat filter to add to active filter.
/ e, / : (telega-filters-edit)
    Edit and reapply filters list.
/ DEL, / d (telega-filters-pop-last)
    Pop last N filters.
/ ! (telega-filters-negate)
    Negate last filter. If C-u is specified, then negate whole active filter.
/ / (telega-filters-reset)
    Reset active filter to the telega-filter-default.

For other chat filtering bindings see List of Chat Temexes
***** Sorting chats

It is possible to sort chats in rootbuf out of Telega built-in order. Sorting chats is done by some criteria. Built-in criterias are in telega-sort-criteria-alist. Do not insert criterias directly into telega-sort-criteria-alist, use define-telega-sorter instead.

\ prefix in rootbuf is used for sorting commands:

\ \ (telega-sort-reset)

    Reset active sorter.

    It is possible to add multiple criteria using telega-sort-reset with prefix argument C-u. 
\ s, \ a (telega-sort-by-sorter)

    Interactively add CRITERIA to active sorter. If prefix ARG is used, then add sort criteria, instead of overwriting currently active one.

    Use this command to reset active sorter. 

For other sorting keybindings see below.
Sorting criteria

unread-count, \ u (telega-sort-by-unread-count)
    Sort chats by number of unread messages in chat.
title, \ t (telega-sort-by-title)

    Sort chats alphabetically by chat title.

    Thanks to https://t.me/Kurvivor 
member-count, \ m (telega-sort-by-member-count)
    Sort chats by number of members in the chat.
online-members, \ o (telega-sort-by-online-members)
    Sort chats by number of online members.
join-date, \ j (telega-sort-by-join-date)
    Sort chats by join date. Last joined chats goes first.
chatbuf-recency, \ v (telega-sort-by-chatbuf-recency)
    Sort chats by chatbuf recency. Recently used chats goes first.
chatbuf-visibility
    Sort chats by visibility in other window in DWIM style. See https://github.com/zevlg/telega.el/issues/165
chats-in-common
    Sort by number of chats in common. See https://github.com/zevlg/telega.el/issues/218
last-seen
    Sort by last seen activity. For private chats user's last seen date is taken. For other chats date of the last message is taken.
important
    Makes chats matching telega-important-chat-temex on top.

Customizable options making use of sorting criteria

    User Option: telega-chat-completing-sort-criteria

    Criteria to sort chats in telega-completing-read-chat.

    Default value: (chatbuf-visibility chatbuf-recency)

    User Option: telega-chat-switch-buffer-sort-criteria

    Criteria to sort open chats when switching with telega-switch-buffer.

    Default value: chatbuf-recency
***** Sending ordinary messages

Type a text in the chatbuf input and press RET to send the message. To insert newline in the middle of the input use ordinary C-j Emacs command. To preview resulting message before sending it, press M-RET (telega-chatbuf-input-preview).

You can apply markup to the input when sending message. This is controlled by number of C-u pressed before RET and value of the:

    User Option: telega-chat-input-markups

    Markups to apply when sending input with RET. Each index in the list corresponds to the number of C-u supplied before RET, i.e. first element is used for ordinary RET, second is used for C-u RET, and third is for C-u C-u RET and so on. Supported markups are defined in the telega-chat-markup-functions.

    "markdown1" syntax is not recommended, it always treats underscore as starting point of italic emphasize even inside URLs, thats why "markdown1" is not included into telega-chat-input-markups by default.

    Default value: (nil "markdown2" "org")

Markup syntax table:
        markdown2       org     markdown1
bold text       **bold text**   *bold text*     *bold text*
italic text     __italic text__         /italic text/   _italic text_
underline text  UNSUPPORTED     _underline text_        UNSUPPORTED
strike through  ~~strike through~~      +strike through+        UNSUPPORTED
        ¦¦spoiler¦¦     ¦¦spoiler¦¦     UNSUPPORTED
inlined code    `inlined code`  ~inlined code~  `inlined code`
pre text        ```pre text```  =pre text=      UNSUPPORTED
text    [text](http://www.url)  [[http://www.url][text]]        [text](http://www.url)
name    [name](tg://user?id=<USER-ID>)  [[tg://user?id=<USER-ID>][name]]        [name](tg://user?id=<USER-ID>)

There is also "markdown1" syntax to insert multiline code blocks of specified languge:

```<language-name>
first line of multiline preformatted code
second line
last line```

"markdown2" backquotes syntax to insert multiline code blocks is controlled by:

    User Option: telega-markdown2-backquotes-as-precode

    Non-nil for markdown1 style syntax for ```. Non-nil activates syntax: ```<language-name> (not displayed) code code ```

    Default value: known

Org syntax for code blocks is NOT YET supported:

#+begin_src <language-name>
code line
next code line
...
#+end_src

Also, you can intermix various markups, using C-c C-a markup RET command.

Important customizable options:

    User Option: telega-chat-input-markups

    Markups to apply when sending input with RET.

    Default value: (nil "markdown2" "org")

    User Option: telega-chat-send-message-on-ret

    Customization for RET behaviour.

    Default value: always

    User Option: telega-chat-markup-functions

    List of markups to use on C-c C-a markup RET.

    Default value:

    (("markdown2" . telega-markup-markdown2-fmt)
     ("org" . telega-markup-org-fmt) ("html" . telega-markup-html-fmt)
     ("markdown1" . telega-markup-markdown1-fmt))
***** Attaching media

You can attach various media into chatbuf input, using next bindings:

C-c C-a (telega-chatbuf-attach)
    Attach something to the chatbuf input. C-u is passed directly to the attachment function. See telega-chat-attach-commands for available attachment types.
C-c C-f (telega-chatbuf-attach-media)
    Attach FILENAME as media, detecting media type by FILENAME extension. If C-u is given, then attach as file. If AS-FILE-P is preview, then attach as file with preview. FILENAME must be a photo in this case.
C-c C-v (telega-chatbuf-attach-clipboard)
    Attach clipboard image to the chatbuf as photo. If C-u is given, then attach clipboard as document.
C-c C-e (telega-chabuf-input-formatting-set)
    Attach formatting to the region in the chatbuf input. Use C-u to clear formatting from selected region.

Text following attached media will be a media caption.

Attachment types to attach with C-c C-a (telega-chatbuf-attach) defined in telega-chat-attach-commands user option:

photo
    Attach FILENAME as photo to the chatbuf input.
video
    Attach FILENAME as video to the chatbuf input.
audio
    Attach FILENAME as audio to the chatbuf input.
spoiler-photo
    Attach photo marked with spoiler.
spoiler-video
    Attach video marked with spoiler.
self-destruct-photo
    Attach a file as self destructing photo. This attachment can be used only in private chats.
self-destruct-video
    Attach a file as self destructing video. This attachment can be used only in private chats.
video-note
    Attach a (circled) video note to the chatbuf input. If C-u is given, then attach existing file as video-note. Otherwise record video note inplace. telega-vvnote-video-record-args is used as arguments to ffmpeg to record video notes.
voice-note
    Attach a voice note to the chatbuf input. If C-u is given, then attach existing file as voice-note. Otherwise record voice note inplace. telega-vvnote-voice-cmd is used to record voice notes.
file
    Attach FILENAME as document to the chatbuf input. If CONTENT-TYPE-DETECT-P is specified, then FILENAME's content type is automatically detected.
gif
    Attach GIF-FILE as animation to the chatbuf input.
location
    Attach location to the chatbuf input. If C-u is given, then attach live location.
poll
    Attach poll to the chatbuf input. Can be used only in group chats. QUESTION - Title of the poll. ANONYMOUS-P - Non-nil to create anonymous poll. ALLOW-MULTIPLE-ANSWERS-P - Non-nil to allow multiple answers. OPTIONS - List of strings representing poll options.
contact
    Attach CONTACT user to the chatbuf input.
sticker
    Attach a sticker. If C-u is given, then attach recent or favorite sticker. Otherwise choose a sticker from installed sticker sets.
animation
    Attach an animation. If C-u is given, then attach animation from a file, otherwise choose animation from list of saved animations.
dice
    Attach random dice roll message.
screenshot
    Attach screenshot to the chatbuf input. If numeric prefix arg N is given, then take screenshot in N seconds. If C-u is given, then take screenshot of the screen area. Multiple C-u increases delay before taking screenshot of the area. Uses telega-screenshot-function to take a screenshot.
clipboard
    Attach clipboard image to the chatbuf as photo. If C-u is given, then attach clipboard as document.
markup
    Attach MARKUP-TEXT using MARKUP-NAME into chatbuf. Using this type of attachment it is possible to intermix multiple markups in the chatbuf input. Markups are defined in the telega-chat-markup-functions user option.
theme
    Interactively attach new chat theme to the chat buffer.
scheduled
    Mark content as scheduled. Send following message at TIMESTAMP. If C-u is given and chat is private and online status of the corresponding user is known, then send message when user gets online.
disable-notification
    Toggle disable-notification chat option for the subsequent chatbuf input. Use this attachment to disable/enable notification on the receiver side.
enable-notification
    Toggle disable-notification chat option for the subsequent chatbuf input. Use this attachment to disable/enable notification on the receiver side.
link-preview-options
    Change telega-chat-send-link-preview-options for the following messages.
send-by
    Set sender for the following message.
custom-emoji
    Interactively attach a custom emoji.
delimiter
    Attach explicit messages delimiter.
code
    Interactively attach a code of the LANGUAGE into chatbuf input. For non-interactive code attach, use telega-mnz--chatbuf-attach-internal.

Special attachment types are disable-webpage-preview, scheduled, disable-notification or enable-notification. They do not attach anything, but changes options on how to send the message. Use scheduled to schedule messages, disable-notification or enable-notification to trigger notification on receiver side and disable-webpage-preview to disable rich web page previews for URLs in the message text.

Customizable options for attaching media:

    User Option: telega-chat-upload-attaches-ahead

    Non-nil to upload attachments ahead, before message actually sent. Having this non-nil "speedups" uploading, it is like files uploads instantly.

    Default value: t

    User Option: telega-chat-markup-functions

    List of markups to use on C-c C-a markup RET.

    Default value:

    (("markdown2" . telega-markup-markdown2-fmt)
     ("org" . telega-markup-org-fmt) ("html" . telega-markup-html-fmt)
     ("markdown1" . telega-markup-markdown1-fmt))
***** Replying to a message

To reply to a message, put point on the message you want to reply to and press r, <down-mouse-3> <reply> (telega-msg-reply).

Selected region at reply time will be a reply quote.

To cancel reply use C-c C-k, C-M-c, M-ESC (telega-chatbuf-cancel-dwim) binding. C-u prefix to this command will clear chatbuf's input along with canceling reply.
***** Editing previously sent message

To edit a given message, put point on the message you want to edit and press e, <down-mouse-3> <edit> (telega-msg-edit).

To cancel editing use the same command as for canceling reply to a message.

To edit your previously sent message press M-p (telega-chatbuf-edit-prev).

It is possible to edit a message using markup syntax. e, <down-mouse-3> <edit> (telega-msg-edit) accepts C-u prefix to specify markup syntax to be used for editing.
***** Forwarding messages

To forward a message, put cursor under the message which you want to forward and press f, <down-mouse-3> <forward> (telega-msg-forward-dwim) and then select a Chat to forward a message to. To forward multiple messages at once, mark messages with the m, <down-mouse-3> <mark> (telega-msg-mark-toggle) and then press f, <down-mouse-3> <forward> (telega-msg-forward-dwim) on one of the messages.

There are few options how you can affect the way a message is forwarded:

    C-u f to forward a message copy, it will look like you sent a message.
    C-u C-u f To forward a message copy deleting or replacing caption it has. Use this to forward media message with your own caption.
***** Deleting messages

To delete a message, put cursor under the message you want to delete and press (telega-msg-delete-marked-or-at-point).

As with forwarding messages, you can mark multiple messages to delete with m, <down-mouse-3> <mark> (telega-msg-mark-toggle).

Also, you can ban/report message sender (and delete all messages from this sender in the chat) with B, <down-mouse-3> <ban-sender> (telega-msg-ban-sender) when cursor is under the message.

telega can keep deleted messages visible until chatbuf is killed. This is controlled using custom variable:

    User Option: telega-chat-show-deleted-messages-for

    Chat Temex for chats where to show deleted messages in chatbuf.

    Default value: nil

For example, to show deleted messages in all chats except for "Saved Messages", use next:

(setq telega-chat-show-deleted-messages-for '(not saved-messages))
***** Scheduling messages and reminders

To schedule a message, press C-c C-a scheduled RET, select date and time to schedule message at, type text of a message and send it as always.

To reschedule a message, first list all scheduled messages in the chat with C-c / scheduled RET, then press e, <down-mouse-3> <edit> (telega-msg-edit) on the message you want to reschedule, remove previous "Schedule" attachment and add a new one at the beginning.

Message scheduled in "Saved Messages" chat is called reminder.

Whenever a scheduled message or reminder is sent, you get a special notification marked with a 📅, so you don't get caught off-guard by messages you planned in the past.
***** Navigating previous input

You can navigate your previous chatbuf input using commands:

M-p (telega-chatbuf-edit-prev)
    Edit previously sent message. MARKUP-ARG could be used to select markup to edit message. See telega-msg-edit for details.
M-n (telega-chatbuf-edit-next)
    Edit message sent next to currently editing. MARKUP-ARG could be used to select markup to edit message. See telega-msg-edit for details.
M-r (telega-chatbuf-input-search)

    Search for REGEX in chat input history.

    While searching input, you can use M-p (telega-chatbuf--input-search-input-prev) and M-n (telega-chatbuf--input-search-input-next) to cycle chatbuf input ring. 
***** Completing input in chatbuf

Powerful company-mode can be used to complete input in the chatbuf with TAB (telega-chatbuf-complete-or-next-link).

telega provides few company backends, such as:

telega-company-emoji

    Complete emojis via :<emoji>: syntax. Completion is done using predefined set of emojis.

    Customizable Options:

        User Option: telega-company-emoji-fuzzy-match

        Non-nil to use fuzzy prefix matching. For example without fuzzy matches, prefix :jo will match only :joy:, :joy-cat: and :joystick:. With fuzzy matching enabled it will match also :flag-jo: and :black-jocker:.

        Default value: t

telega-company-telegram-emoji
    Same as telega-company-emoji, but uses Telegram cloud for the emojis completion.

telega-company-username

    Complete user mentions via @<username> syntax. Here is the screenshot, showing use of this backend: completing-usernames.jpg

    Use @@ prefix to complete chat admins only. 

Customizable options:

    User Option: telega-company-username-prefer-name

    Preferred formatting argument to the telega-user-title to complete user. First giving non-nil result will be used.

    Default value: (username first-name last-name)

    User Option: telega-company-username-show-avatars

    Non-nil to show avatars in the company annotation.

    Default value: nil

    User Option: telega-company-username-markup

    Markup to use for usernames completion.

    Default value: nil

telega-company-hashtag
    Complete common hashtags via #<hashtag> syntax.

telega-company-botcmd
    Complete bot commands via /<botcmd> syntax. This backend does not complete if /<botcmd> syntax is used in the middle of the chatbuf input, only if /<botcmd> starts chatbuf input.

telega-company-markdown-precode
    Complete language name for code blocks via ``` syntax.

List of company backends to be used for user input completion is controlled by:

    User Option: telega-company-backends

    Company backends to use in chat buffers. Set to nil to disable company completions in chat buffers.

    Default value:

    (telega-company-emoji telega-company-telegram-emoji
                          telega-company-username telega-company-hashtag
                          telega-company-markdown-precode
                          telega-company-botcmd)

You can use completion without enabling company-mode in the chat buffers, by explicitly pressing TAB (telega-chatbuf-complete-or-next-link) to perform completion at point.

On the other hand, company-mode detects input context and pops up completion candidates if completion at point is available. To enable company-mode in chat buffers use:

(add-hook 'telega-chat-mode-hook 'company-mode)

Consider also using company-posframe Emacs package (in MELPA), so chatbuf's contents remain untouched when completion menu pops above the chatbuf prompt.

If you don't like company-posframe, consider option:

    User Option: telega-company-tooltip-always-below

    Non-nil to show company tooltip always below the point. Done by recentering point in the chatbuf.

    Default value: t
***** Sending messages via bots

If chatbuf input starts with @<botname> <query> and mentioned bot support inline mode, then pressing TAB (telega-chatbuf-complete-or-next-link) will pop a special buffer with the inline results to the bot inline <query>, you can use these results to send a message via bot. Some useful bots with inline mode support are:

    @gif To search and send animations
    @pic, @bing To search and send pictures
    @vid To search and send videos on YouTube
    @foursquare - To find and send places around the world
    etc

To find out is some bot supports inline mode or not, enter @<botname><SPC> in chatbuf input and press TAB (telega-chatbuf-complete-or-next-link). If momentary help is displayed, then this bot supports inline mode.

Customizable options for inline bots:

    User Option: telega-known-inline-bots

    List of known bots for everyday use.

    Default value: ("@gif" "@youtube" "@pic")

    User Option: telega-inline-query-window-select

    Non-nil to select window with inline query results.

    Default value: t
***** Opening files using external programs

Document messages in Telegram has attached file in the message. By default telega opens that files inside Emacs using find-file function. Sometimes that is not desirable behaviour and you might want to open some files in external application. You can use org-open-file function for this. Behaviour is controlled by:

    User Option: telega-open-file-function

    Function to use to open files associated with messages. Called with single argument - filename to open. Could be used to open files in external programs. Set it to org-open-file to use Org mode to open files.

    Default value: find-file

Setup to open some files in external applications might look like:

;; ("\\.pdf\\'" . default) is already member in `org-file-apps'
;; Use "xdg-open" to open files by default
(setcdr (assq t org-file-apps-gnu) 'browse-url-xdg-open)

(setq telega-open-file-function 'org-open-file)

On MacOS use browse-url-default-macosx-browser instead of browse-url-xdg-open.

If you also want to open non-document messages as file using telega-open-file-function consider:

    User Option: telega-open-message-as-file

    List of message types to open as file using telega-open-file-function. Supported message types are: photo, video, audio, video-note, voice-note, animation. Document messages are always opens as file.

    Default value: nil

Another alternative to open some files using external programs is to use nice openwith Emacs package available in MELPA.

Browse URL with custom function

Also, you can open urls using custom functions:

    User Option: telega-browse-url-alist

    Alist of custom url browse functions. Each element is in form: (PREDICATE-OR-REGEX . FUNCTION).

    Default value: nil

For example, to play youtube videos using mpv player, add this to config:

(defun my-watch-in-mpv (url)
  (async-shell-command (format "mpv -v %S" url)))

(add-to-list 'telega-browse-url-alist
             '("https?://\\(www\\.\\)?youtube.com/watch" . my-watch-in-mpv))
(add-to-list 'telega-browse-url-alist
             '("https?://youtu.be/" . my-watch-in-mpv))
***** Favorite messages

Any message in any chat can be marked with as favorite. Favorite messages are labeled with:

    User Option: telega-symbol-favorite

    Symbol to use for favorite messages, bookmarks.

    Default value: "🔖"

To toggle message at point being favorite, press *, <down-mouse-3> <favorite> (telega-msg-favorite-toggle).

To jump to a favorite message before message at point in the chat buffer, press M-g * (telega-chatbuf-prev-favorite).

To view all favorite messages in all chats, enable "Favorite Messages" Root View, by pressing v * (telega-view-favorite-messages) in the root buffer.
***** Media Controls for media messages

Some media messages that are playing inside Emacs (such as "audio", "voice-note" or "video-note" messages) will have additional media control buttons to control media playback parameters:

[⏪] [⏩] [2×] [Stop] 

For fast access to media controls you can you next bindings:

0 (telega-msg--vvnote-stop)
    Stop playing media message.
<, , (telega-msg--vvnote-rewind-10-backward)
    Rewind 10 seconds backward.
>, . (telega-msg--vvnote-rewind-10-forward)
    Rewind 10 seconds forward.
x (telega-msg--vvnote-play-speed-toggle)
    Toggle playback speed for the media message. Only two modes are available: normal speed and x2 speed.
9, 8, 7, 6, 5, 4, 3, 2, 1 (telega-msg--vvnote-rewind-part)
    Rewind to the N's 10 part of the message duration. I.e. if you press 7, then you will jump to 70% of the message duration.

To play/pause media messages use RET. Also, l, <down-mouse-3> <copy-link> (telega-msg-copy-link) command supports linking to the currently playing (or paused at) moment.

To reference a given moment in a media message (or in a reply to media message) use [HH:]MM:SS] syntax in the message's body/caption. Such timestamp marks will be automatically emphasised with a media timestamp text entity.
***** Stickers / Animations

To display stickers telega uses dwebp utility to convert .webp stickers into png images that can be displayed by Emacs. dwebp utility is available on almost every system inside webp package.

Important customizable options for stickers:

    User Option: telega-sticker-size

    Size for the sticker. car is height in chars to use. cdr is maximum width in chars to use.

    Default value: (4 . 24)

    User Option: telega-sticker-set-download

    Non-nil to automatically download known sticker sets.

    Default value: nil

    User Option: telega-sticker-favorite-background

    Background color for the favorite stickers. Can be nil, in this case favorite stickers are not outlined.

    Default value: "cornflower blue"

To play short animations inside Emacs telega uses ffmpeg utility. Playing animations inside Emacs is a bit heavy process, so be careful in choosing value for the telega-animation-play-inline.

Important customizable options for animations:

    User Option: telega-animation-height

    Height in chars for animations.

    Default value: 5

    User Option: telega-animation-play-inline

    Non-nil to play animation inside telega. If number, then play animation inline only if animation is shorter then this number of seconds.

    Default value: 10

    User Option: telega-animation-download-saved

    Non-nil to automatically download saved animations.

    Default value: nil

Animated stickers

telega supports animated stickers using tgs2png utility from https://github.com/zevlg/tgs2png

Once tgs2png tool is installed into exec-path (check value for telega-sticker-animated-play after telega is started), you can play animated stickers by pressing RET on sticker.

Also telega-autoplay-mode can be used, to automatically animate messages containing animated stickers.
Favorite and recently used stickers

To attach your favorite or rencetly used sticker use C-u before C-c C-a sticker RET. Background for favorite stickers are filled with color:

    User Option: telega-sticker-favorite-background

    Background color for the favorite stickers. Can be nil, in this case favorite stickers are not outlined.

    Default value: "cornflower blue"

To toggle sticker being favorite, press *, f (telega-sticker-toggle-favorite) while point is under sticker in the *Telega Sticker Set* buffer.

Or you can press S, <down-mouse-3> <save> (telega-msg-save) on the sticker message to add that sticker to the favorite stickers list.
Animations

There are multiple methods you can use to attach an animation:

    C-c C-a animation RET to attach animation from the Saved Animations list.
    C-c C-a gif RET to attach animation from a gif or mp4 file.
    via @gif bot

To play animation message press RET on the message. Also, telega-autoplay-mode can be used to automatically play animation messages.

To explicitly add animation to Saved Animations list, press S, <down-mouse-3> <save> (telega-msg-save) on the corresponding animation message.
***** Animated stickers

telega supports animated stickers using tgs2png utility from https://github.com/zevlg/tgs2png

Once tgs2png tool is installed into exec-path (check value for telega-sticker-animated-play after telega is started), you can play animated stickers by pressing RET on sticker.

Also telega-autoplay-mode can be used, to automatically animate messages containing animated stickers.

* **Мои Elisp скрипты**
** описание
   Персональные расширения и полезные функции.  
** list
  (find-file-other-frame (expand-file-name "ELs/BuYn/shell.el" user-emacs-directory))
  (find-file-other-frame (expand-file-name "ELs/BuYn/reader.el" user-emacs-directory))
  (find-file-other-frame "~/Dropbox/backup/file.el")
  ----- not auto loadet -----
  (find-file-other-frame "~/ELs/BuYn/ai-dungon.el")
  (find-file-other-frame "~/ELs/tts/tts-editor/tts-editor.el")
  (find-file-other-frame "~/ELs/BuYn/tts.el")
** PC scripts
(find-file-other-frame "~/.emacs.d/ArchSRV.el")
(load "~/.emacs.d/ArchSRV.el")
* **Архив и Deprecated конфиги**
** описание
    Всё, что уже не используется, но содержит полезные идеи.
** example
# :PROPERTIES:
# :header-args: :tangle INI/exempl.el
# :END:
*** описание

*** used in
;; (find-file "~/.archemacs/INI/init.el")
*** src
#+begin_src elisp

#+end_src
** elisp example
*** expand-file-name
(load (expand-file-name "INI/interface/input-methods-cfg.el" user-emacs-directory))
*** kbd
(define-key org-mode-map (kbd "C-c <C-return>") 'org-table-insert-row)
(define-key calc-mode-map (kbd "M-k") 'windmove-up)

*** lambda define-key 
(define-key evil-normal-state-map "gthf" (lambda () (interactive) (simple-run-command-in-new-frame 'describe-function)))
** CANCELED команд 2 фрейме INI/evil_frame_cfg.el
CLOSED: [2025-02-25 Tue 01:20]
:PROPERTIES:
:header-args: :tangle no
:END:
# :header-args: :tangle INI/evil-frame-cfg.el
*** описание
Запуск команд в отдельнос фрейме
*** not used in
# ;; (find-file "~/.archemacs/INI/init.el")
*** src
#+begin_src elisp
;; --------------------- 
;; open comand on new frame 
;; --------------------- 
(defun run-command-in-new-frame (prefixarg command-name)
 (interactive (list current-prefix-arg (read-extended-command)))
 (let ((command (intern-soft command-name)))
   (unless command
    (error "%s is not a valid command name" command-name))
  (select-frame (make-frame))
  (let ((prefix-arg prefixarg))
    (command-execute command))))

(defun simple-run-command-in-new-frame (command)
  (select-frame (make-frame))
  (funcall command)
  (delete-other-windows))
;; --------------------- 
;; key for open comand on new frame 
;; --------------------- 
(define-key evil-normal-state-map "gtc" 'run-command-in-new-frame)
;; --------------------- 
;; key for open help on new frame 
;; --------------------- 
(define-key evil-normal-state-map "gthf" (lambda () (interactive) (simple-run-command-in-new-frame 'describe-function)))
(define-key evil-normal-state-map "gthk" (lambda () (interactive) (simple-run-command-in-new-frame 'describe-key)))
#+end_src
* блок для экспериментальных настроек
* Babel-блокам команд
** auto-tangle-block:
#+NAME: auto-tangle-block
#+begin_src emacs-lisp :results output silent :tangle no
(setq org-src-preserve-indentation t)
(untabify (point-min) (point-max))
(save-buffer)
(org-babel-tangle)
(find-file-other-frame "~/INI/babel-cfg.el")
;; (load "~/INI/hydra-cfg.el")
;; (load "~/ELs/BuYn/reader.el")
 #+end_src
** package-upgrade
(setq package-check-signature nil) ;; временно, если будут ошибки
(package-refresh-contents)
(package-upgrade-all)

from ELPA by either using ‘M-x package-upgrade’ or
* TODO орг файла
** add file to tagle evil-respect-input.el
(load (expand-file-name "ELs/Evil/evil-respect-input.el" user-emacs-directory))
** сделать теги и под разделы
*** обеснение
возность поиска как в вим
не только по контексту
но и тегам и сочетаниям тегов
тоесть обеденить тег бинды и ивил
и получить бинды ивала
а потом сделать поиск по разделам с такими тегами
*** биндс
*** ивил
** все бинды одного типа
(define-key org-mode-map (kbd "C-c <C-return>") 'org-table-insert-row)
** [[*переписать меню так чтоб по пермено открывалось не во фреме][переписать меню так чтоб по пермено
открывалось не во фреме]]
** сделать блоки поиска
*** по тегам
*** по типам туду
получить список всех туду
*** возможно с учётом приоритетов
** ranger hydra menu
*** список папок куда открыть на ZR<space>
*** меню ганжера из ренжера
перейти в папку
набор действий
** hydra f1 menus
on space
all books
start init debag

(find-file "~/Dropbox/orgs_code/archlinux/arh_script.org")
* start to use
** org-refile
*** link
(setq org-refile-targets '(("~/Dropbox/orgs/gtd/gtd.org" :maxlevel . 3)
*** review
некий инбокс с лёгкой класификацикй
** (evil-define-key STATE KEYMAP KEY DEF &rest BINDINGS)

Create a STATE binding from KEY to DEF for KEYMAP.
STATE is one of ‘normal’, ‘insert’, ‘visual’, ‘replace’,
‘operator’, ‘motion’, ‘emacs’, or a list of one or more of
these. Omitting a state by using ‘nil’ corresponds to a standard
Emacs binding using ‘define-key’. The remaining arguments are
like those of ‘define-key’. For example:

    (evil-define-key 'normal foo-map "a" 'bar)

This creates a binding from ‘a’ to ‘bar’ in normal state, which
is active whenever ‘foo-map’ is active. Using nil for the state,
the following lead to identical bindings:

    (evil-define-key nil foo-map "a" 'bar)
    (define-key foo-map "a" 'bar)

It is possible to specify multiple states and/or bindings at
once:

    (evil-define-key '(normal visual) foo-map
      "a" 'bar
      "b" 'foo)

If ‘foo-map’ has not been initialized yet, this macro adds an
entry to ‘after-load-functions’, delaying execution as necessary.

KEYMAP may also be a quoted symbol. If the symbol is ‘global’, the
global evil keymap corresponding to the state(s) is used, meaning
the following lead to identical bindings:

    (evil-define-key 'normal 'global "a" 'bar)
    (evil-global-set-key 'normal "a" 'bar)

The symbol ‘local’ may also be used, which corresponds to using
‘evil-local-set-key’. If a quoted symbol is used that is not
‘global’ or ‘local’, it is assumed to be the name of a minor
mode, in which case ‘evil-define-minor-mode-key’ is used.

KEY is an internal Emacs representation of a key, as for
‘define-key’. To bind key sequences that use modifier keys such
as "C-a" or "M-a", convert the key sequences using ‘kbd’.
For example:

    (evil-define-key 'normal foo-map (kbd "C-a") 'bar)
** журнал для логирования
*** туду?
*** более одного журнал?
для логов туду машины
и отдельно имакса
журнал для каждого проекат
или всётаеи проще просто один орг лог фаил
* 2025-02-07

